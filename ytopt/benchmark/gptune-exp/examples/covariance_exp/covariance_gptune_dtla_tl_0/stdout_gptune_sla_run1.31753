/var/spool/slurmd/job31753/slurm_script: line 10: activate: No such file or directory
time...now 1651104357.2914703
machine: swing processor: intel num_nodes: 1 num_cores: 128


------Validating the options
  
  total core counts provided to GPTune: 128
   ---> distributed_memory_parallelism: False
   ---> shared_memory_parallelism: False
   ---> objective_evaluation_parallelism: False
  
  total core counts for modeling: 2
   ---> model_processes: 1
   ---> model_threads: 1
   ---> model_restart_processes: 1
   ---> model_restart_threads: 1
  
  total core counts for search: 1
   ---> search_processes: 1
   ---> search_threads: 1
   ---> search_multitask_processes: 1
   ---> search_multitask_threads: 1
  
  total core counts for objective function evaluation: 2
   ---> core counts in a single application run: 1
   ---> objective_multisample_processes: 1
   ---> objective_multisample_threads: 1
problem size is s [[80, 10]]
[[80, 10]]
GPTune History Database Init
[HistoryDB] use filelock for synchronization
[HistoryDB] Create a JSON file at ./gptune.db/covariance.json



------Starting MLA with HistoryDB with 1 tasks and 200 samples each 
[HistoryDB] Found a history database file
no history data has been loaded
Traceback (most recent call last):
  File "demo_sla.py", line 343, in <module>
    main()
  File "demo_sla.py", line 316, in main
    (data, modeler, stats) = gt.MLA(NS=NS, Igiven=giventask, NI=NI, NS1=int(max(NS//2, 1)))
  File "/lcrc/project/EE-ECP/jkoo/code/gptune/GPTune/gptune.py", line 831, in MLA
    return self.MLA_HistoryDB(NS, NS1, NI, Igiven)
  File "/lcrc/project/EE-ECP/jkoo/code/gptune/GPTune/gptune.py", line 628, in MLA_HistoryDB
    self.data.I = self.problem.IS.transform(self.data.I)
  File "/gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-scikit-optimize-master-dusnwcza3sbzkh7iwgzcojuvctccrcqw/lib/python3.8/site-packages/skopt/space/space.py", line 972, in transform
    columns[j] = self.dimensions[j].transform(columns[j])
  File "/gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-scikit-optimize-master-dusnwcza3sbzkh7iwgzcojuvctccrcqw/lib/python3.8/site-packages/skopt/space/space.py", line 162, in transform
    return self.transformer.transform(X)
  File "/gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-scikit-optimize-master-dusnwcza3sbzkh7iwgzcojuvctccrcqw/lib/python3.8/site-packages/skopt/space/transformers.py", line 304, in transform
    X = transformer.transform(X)
  File "/gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-scikit-optimize-master-dusnwcza3sbzkh7iwgzcojuvctccrcqw/lib/python3.8/site-packages/skopt/space/transformers.py", line 250, in transform
    raise ValueError("All integer values should"
ValueError: All integer values shouldbe greater than 32.000000
--------------------------------------------------------------------------
Primary job  terminated normally, but 1 process returned
a non-zero exit code. Per user-direction, the job has been aborted.
--------------------------------------------------------------------------
--------------------------------------------------------------------------
mpirun detected that one or more processes exited with non-zero status, thus causing
the job to be terminated. The first process to do so was:

  Process name: [[47729,1],0]
  Exit code:    1
--------------------------------------------------------------------------
mkdir: cannot create directory ‘./TLA_experiments/SLA-GPTune-s-200/’: No such file or directory
mv: cannot move 'gptune.db/covariance.json' to './TLA_experiments/SLA-GPTune-s-200/covariance.json': No such file or directory
mv: cannot stat 'save_results.npy': No such file or directory
time...now 1651104364.9665575
machine: swing processor: intel num_nodes: 1 num_cores: 128


------Validating the options
  
  total core counts provided to GPTune: 128
   ---> distributed_memory_parallelism: False
   ---> shared_memory_parallelism: False
   ---> objective_evaluation_parallelism: False
  
  total core counts for modeling: 2
   ---> model_processes: 1
   ---> model_threads: 1
   ---> model_restart_processes: 1
   ---> model_restart_threads: 1
  
  total core counts for search: 1
   ---> search_processes: 1
   ---> search_threads: 1
   ---> search_multitask_processes: 1
   ---> search_multitask_threads: 1
  
  total core counts for objective function evaluation: 2
   ---> core counts in a single application run: 1
   ---> objective_multisample_processes: 1
   ---> objective_multisample_threads: 1
problem size is m [[240, 260]]
[[240, 260]]
GPTune History Database Init
[HistoryDB] use filelock for synchronization
[HistoryDB] Create a JSON file at ./gptune.db/covariance.json



------Starting MLA with HistoryDB with 1 tasks and 200 samples each 
[HistoryDB] Found a history database file
no history data has been loaded
NS1:  100
tmpP:  [array([[4.4191e-01, 6.7181e-01, 6.3181e-01, 5.1745e-01, 7.4735e-01],
       [3.3967e-01, 3.8192e-01, 8.9433e-01, 2.8768e-01, 9.7690e-01],
       [8.0643e-01, 4.5082e-01, 4.6049e-01, 1.8648e-01, 9.0311e-01],
       [7.2744e-01, 7.2953e-01, 4.2731e-01, 7.9902e-01, 5.8563e-01],
       [2.2781e-01, 2.3009e-01, 7.8210e-01, 4.4273e-01, 8.0910e-01],
       [6.1010e-03, 2.8931e-01, 5.9360e-01, 5.7641e-02, 1.9710e-01],
       [2.8729e-01, 5.9990e-01, 4.4074e-01, 6.5533e-01, 5.3963e-01],
       [4.1726e-01, 3.1118e-01, 5.6643e-01, 6.1987e-01, 1.3450e-01],
       [1.0261e-01, 9.5247e-01, 1.3840e-01, 8.9845e-01, 4.2521e-01],
       [7.0275e-01, 7.7063e-01, 3.8052e-01, 4.7077e-01, 2.8043e-01],
       [7.3156e-01, 2.9925e-01, 4.8456e-01, 1.9136e-01, 4.9178e-01],
       [6.0124e-01, 8.1851e-01, 1.0019e-01, 3.5449e-01, 9.2662e-01],
       [5.9128e-01, 6.0431e-01, 4.3691e-01, 4.5813e-01, 3.3154e-01],
       [2.1994e-01, 6.3298e-01, 8.4473e-01, 6.0837e-01, 2.2002e-01],
       [7.4499e-01, 8.9517e-01, 7.9258e-01, 5.8627e-01, 1.0160e-01],
       [6.3743e-01, 2.1595e-01, 1.1406e-01, 3.3986e-01, 4.1690e-01],
       [8.5298e-01, 4.8283e-01, 5.5202e-01, 6.8467e-01, 4.4090e-01],
       [2.4513e-01, 6.8701e-01, 5.8955e-01, 5.2364e-01, 6.3595e-01],
       [2.8294e-02, 6.1479e-01, 5.7461e-01, 2.4607e-01, 9.8374e-01],
       [9.7955e-01, 9.7135e-01, 9.6834e-01, 8.7192e-01, 5.7570e-01],
       [7.7966e-01, 1.9291e-01, 4.5526e-02, 2.9362e-01, 7.2737e-01],
       [4.0513e-01, 4.4770e-01, 3.6748e-01, 9.9122e-01, 8.1319e-01],
       [6.4226e-01, 7.4928e-01, 1.9789e-01, 7.5456e-01, 1.7124e-01],
       [5.7515e-01, 1.5375e-01, 2.7575e-01, 7.0673e-01, 6.5364e-01],
       [5.5265e-01, 9.6966e-01, 9.5840e-01, 7.2140e-01, 3.2633e-01],
       [9.3845e-01, 6.4712e-03, 3.5213e-01, 4.9032e-01, 2.1241e-01],
       [6.5286e-01, 5.7769e-01, 8.2157e-01, 2.5538e-01, 5.4918e-01],
       [3.4567e-01, 8.4626e-01, 3.1713e-01, 8.4269e-01, 1.5199e-01],
       [6.2653e-01, 7.1715e-01, 7.4388e-01, 4.8193e-01, 2.5256e-01],
       [9.0634e-01, 3.9210e-01, 3.9184e-02, 4.6602e-01, 8.2704e-02],
       [5.1015e-01, 7.0798e-01, 8.5468e-01, 9.1293e-01, 5.2719e-01],
       [5.8752e-01, 2.5775e-01, 8.6219e-01, 4.0233e-01, 5.9061e-01],
       [9.2479e-01, 1.9342e-02, 7.3667e-01, 6.7126e-01, 2.3602e-01],
       [7.8329e-01, 8.3342e-01, 9.2254e-01, 1.6592e-01, 8.2172e-01],
       [8.4828e-01, 5.4807e-01, 2.8162e-02, 7.1796e-01, 9.9833e-01],
       [1.1815e-01, 5.3188e-02, 6.9652e-01, 9.4049e-01, 6.4981e-01],
       [1.6737e-01, 3.0487e-01, 5.0861e-01, 1.2636e-01, 4.7304e-01],
       [1.7352e-01, 3.4497e-01, 8.0421e-01, 7.7061e-01, 1.4191e-01],
       [9.6293e-01, 7.3352e-01, 1.6856e-01, 1.4531e-02, 3.0626e-01],
       [7.6296e-01, 7.6977e-01, 9.8076e-02, 9.3956e-01, 6.9569e-01],
       [2.9596e-01, 3.8311e-02, 9.8946e-01, 4.5345e-02, 3.0794e-02],
       [1.4621e-01, 4.0857e-01, 1.4437e-01, 8.8710e-02, 9.5760e-01],
       [6.6131e-01, 1.7836e-01, 1.0802e-02, 1.4221e-01, 9.1851e-01],
       [2.5397e-01, 4.7822e-01, 9.9822e-01, 1.5660e-01, 2.4083e-01],
       [7.1601e-02, 9.6514e-02, 6.1945e-01, 2.7875e-01, 9.0632e-05],
       [3.2912e-01, 6.9576e-01, 3.9642e-01, 6.3175e-01, 2.4578e-02],
       [1.9753e-01, 8.0450e-01, 7.5634e-01, 8.2425e-01, 5.9348e-02],
       [7.9305e-01, 7.5809e-01, 2.2748e-01, 2.1494e-02, 7.5733e-01],
       [3.9449e-01, 7.9419e-01, 4.1389e-01, 1.1797e-01, 1.0689e-02],
       [6.8477e-01, 1.0014e-01, 8.7658e-01, 2.0174e-01, 4.5439e-01],
       [9.7676e-02, 2.2123e-01, 6.7909e-01, 5.9309e-01, 7.6345e-02],
       [4.5500e-01, 5.8944e-01, 1.5394e-01, 7.3006e-01, 3.7529e-01],
       [4.9391e-01, 1.8382e-01, 7.6879e-01, 3.7697e-01, 3.8489e-01],
       [3.5698e-01, 8.2924e-01, 8.3273e-01, 9.6784e-01, 2.6622e-01],
       [3.8431e-01, 5.1820e-01, 2.3179e-01, 1.7226e-01, 3.5663e-01],
       [9.4356e-01, 6.4948e-01, 6.7902e-02, 7.4572e-01, 8.7574e-01],
       [4.7231e-01, 1.1966e-01, 2.7002e-03, 5.7342e-01, 5.1770e-01],
       [8.9571e-01, 8.5884e-01, 2.6677e-01, 3.3642e-03, 5.5351e-01],
       [6.1732e-01, 3.6764e-01, 7.0082e-01, 3.1949e-02, 8.3074e-01],
       [2.0022e-01, 4.6818e-01, 6.0255e-01, 3.4030e-01, 8.5468e-01],
       [3.6764e-01, 9.3087e-01, 2.8418e-01, 2.2815e-01, 6.6293e-01],
       [4.8964e-01, 4.9511e-01, 2.1528e-01, 5.4768e-01, 6.2239e-01],
       [8.8038e-01, 9.9692e-01, 8.8947e-01, 5.3401e-01, 5.0220e-01],
       [4.2168e-01, 4.3423e-01, 3.0756e-01, 2.6085e-01, 9.0440e-02],
       [9.5946e-01, 5.5064e-01, 8.2670e-02, 7.8810e-01, 7.8681e-01],
       [5.2867e-01, 9.2836e-01, 6.6594e-01, 6.4073e-01, 7.9171e-01],
       [3.6836e-02, 8.6936e-01, 3.3525e-01, 3.9103e-01, 1.6822e-01],
       [1.3699e-01, 4.8906e-02, 7.1306e-01, 9.7778e-01, 7.7255e-01],
       [2.3349e-01, 3.2078e-01, 2.4645e-01, 4.1745e-01, 3.6656e-01],
       [9.9505e-01, 5.6784e-01, 4.7969e-01, 5.5210e-01, 3.1061e-01],
       [4.0817e-02, 6.5770e-01, 2.9066e-01, 9.1359e-02, 3.9565e-01],
       [4.6783e-01, 3.3593e-01, 4.0755e-01, 9.5134e-01, 6.1747e-01],
       [7.5228e-01, 7.8745e-01, 4.9597e-01, 3.8568e-01, 4.0956e-01],
       [8.2578e-01, 2.6299e-01, 5.4490e-01, 8.6001e-01, 6.5672e-02],
       [9.1865e-01, 7.0050e-02, 6.5658e-01, 7.4987e-02, 7.6683e-01],
       [2.6385e-01, 8.7587e-01, 9.7632e-01, 6.6319e-01, 4.8848e-01],
       [8.3778e-01, 9.0392e-01, 3.7347e-01, 2.1925e-01, 9.6405e-01],
       [3.0785e-01, 4.2942e-01, 8.1299e-01, 9.0226e-01, 6.0292e-01],
       [6.2687e-02, 2.4144e-01, 2.5206e-01, 8.0597e-01, 7.1433e-01],
       [3.1040e-01, 9.4332e-01, 2.0204e-01, 1.3277e-01, 4.6592e-01],
       [1.5503e-02, 1.2166e-01, 6.2445e-01, 7.6698e-01, 1.8901e-01],
       [4.3901e-01, 6.2604e-02, 7.2376e-01, 9.8509e-01, 8.6705e-01],
       [6.7480e-01, 2.0677e-01, 5.2006e-01, 8.3481e-01, 9.3562e-01],
       [1.5570e-01, 1.3027e-01, 1.8153e-01, 9.2765e-01, 2.9421e-01],
       [3.7654e-01, 2.7291e-01, 7.7257e-01, 3.2061e-01, 1.2328e-01],
       [5.0204e-01, 2.3014e-02, 4.5453e-01, 3.0053e-01, 2.7454e-01],
       [1.8314e-01, 1.4857e-01, 6.8789e-01, 6.3233e-02, 9.4817e-01],
       [5.6689e-01, 6.6706e-01, 9.1427e-01, 8.1520e-01, 5.6140e-01],
       [5.6373e-02, 4.1281e-01, 9.3442e-01, 1.0773e-01, 6.7450e-01],
       [9.8727e-01, 5.0984e-01, 5.2992e-02, 8.5203e-01, 3.4095e-01],
       [6.9215e-01, 1.6727e-01, 3.4200e-01, 5.0954e-01, 8.4014e-01],
       [5.4358e-01, 5.2218e-01, 7.1853e-02, 4.2379e-01, 8.9450e-01],
       [8.1593e-02, 6.2153e-01, 9.0776e-01, 6.9879e-01, 4.5345e-02],
       [8.6880e-01, 3.7203e-01, 3.2443e-01, 8.8641e-01, 8.8167e-01],
       [7.1758e-01, 8.5098e-02, 5.3531e-01, 6.2477e-01, 1.1101e-01],
       [2.7184e-01, 9.8707e-01, 9.4588e-01, 4.3058e-01, 7.3108e-01],
       [1.2124e-01, 9.1251e-01, 1.2113e-01, 5.6053e-01, 6.8363e-01],
       [8.7492e-01, 5.3817e-01, 5.1792e-01, 2.3657e-01, 4.3182e-01],
       [8.1668e-01, 3.5458e-01, 6.4473e-01, 3.1663e-01, 7.0384e-01],
       [5.3288e-01, 8.8259e-01, 1.7937e-01, 3.6826e-01, 2.0836e-01]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7038.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7038
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7038
........................................ [0.027696, 0.027627, 0.027434]
OUTPUT:%f [0.027696, 0.027627, 0.027434] 0.0275305
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6510.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6510
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6510
........................................ [0.028191, 0.027705, 0.027963]
OUTPUT:%f [0.028191, 0.027705, 0.027963] 0.027833999999999998
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5610.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5610
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5610
........................................ [0.025851, 0.025896, 0.025663]
OUTPUT:%f [0.025851, 0.025896, 0.025663] 0.025779499999999997
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7643.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7643
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7643
........................................ [0.022628, 0.022628, 0.022618]
OUTPUT:%f [0.022628, 0.022628, 0.022618] 0.022622999999999997
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/997.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/997
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/997
........................................ [0.025648, 0.025303, 0.025585]
OUTPUT:%f [0.025648, 0.025303, 0.025585] 0.025444
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2464.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2464
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2464
........................................ [0.015318, 0.015035, 0.014964]
OUTPUT:%f [0.015318, 0.015035, 0.014964] 0.014999499999999999
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5449.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5449
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5449
........................................ [0.023058, 0.02296, 0.023185]
OUTPUT:%f [0.023058, 0.02296, 0.023185] 0.023072500000000003
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1342.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1342
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1342
........................................ [0.008422, 0.008319, 0.00831]
OUTPUT:%f [0.008422, 0.008319, 0.00831] 0.008314499999999999
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/570.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/570
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/570
........................................ [0.01935, 0.020687, 0.020755]
OUTPUT:%f [0.01935, 0.020687, 0.020755] 0.020721
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2130.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2130
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2130
........................................ [0.001728, 0.001587, 0.001625]
OUTPUT:%f [0.001728, 0.001587, 0.001625] 0.001606
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/684.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/684
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/684
........................................ [0.020293, 0.020012, 0.020029]
OUTPUT:%f [0.020293, 0.020012, 0.020029] 0.0200205
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1006.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1006
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1006
........................................ [0.02799, 0.02765, 0.027719]
OUTPUT:%f [0.02799, 0.02765, 0.027719] 0.0276845
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4232.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4232
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4232
........................................ [0.001726, 0.001566, 0.001576]
OUTPUT:%f [0.001726, 0.001566, 0.001576] 0.001571
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7331.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7331
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7331
........................................ [0.019174, 0.019076, 0.013958]
OUTPUT:%f [0.019174, 0.019076, 0.013958] 0.016517
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3912.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3912
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3912
........................................ [0.009148, 0.008988, 0.008932]
OUTPUT:%f [0.009148, 0.008988, 0.008932] 0.00896
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4338.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4338
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4338
........................................ [0.016332, 0.0167, 0.016479]
OUTPUT:%f [0.016332, 0.0167, 0.016479] 0.0165895
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3173.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3173
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3173
........................................ [0.017126, 0.016391, 0.016537]
OUTPUT:%f [0.017126, 0.016391, 0.016537] 0.016464
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4991.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4991
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4991
........................................ [0.025017, 0.025087, 0.024944]
OUTPUT:%f [0.025017, 0.025087, 0.024944] 0.025015500000000003
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9764.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9764
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9764
........................................ [0.032505, 0.032387, 0.03134]
OUTPUT:%f [0.032505, 0.032387, 0.03134] 0.0318635
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5000.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5000
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5000
........................................ [0.022578, 0.022707, 0.022423]
OUTPUT:%f [0.022578, 0.022707, 0.022423] 0.022565
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5027.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5027
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5027
........................................ [0.024485, 0.024057, 0.024186]
OUTPUT:%f [0.024485, 0.024057, 0.024186] 0.024121499999999997
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1011.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1011
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1011
........................................ [0.025292, 0.025224, 0.024835]
OUTPUT:%f [0.025292, 0.025224, 0.024835] 0.0250295
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8204.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8204
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8204
........................................ [0.009091, 0.008963, 0.008721]
OUTPUT:%f [0.009091, 0.008963, 0.008721] 0.008842
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9452.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9452
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9452
........................................ [0.022847, 0.023031, 0.022856]
OUTPUT:%f [0.022847, 0.023031, 0.022856] 0.0229435
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/461.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/461
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/461
........................................ [0.001597, 0.001429, 0.001426]
OUTPUT:%f [0.001597, 0.001429, 0.001426] 0.0014275
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9079.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9079
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9079
........................................ [0.011333, 0.012051, 0.011202]
OUTPUT:%f [0.011333, 0.012051, 0.011202] 0.0116265
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3284.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3284
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3284
........................................ [0.02253, 0.022651, 0.022257]
OUTPUT:%f [0.02253, 0.022651, 0.022257] 0.022454000000000002
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2459.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2459
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2459
........................................ [0.013146, 0.011752, 0.015537]
OUTPUT:%f [0.013146, 0.011752, 0.015537] 0.0136445
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7576.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7576
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7576
........................................ [0.011761, 0.01166, 0.0111]
OUTPUT:%f [0.011761, 0.01166, 0.0111] 0.011380000000000001
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2648.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2648
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2648
........................................ [0.003333, 0.003157, 0.003144]
OUTPUT:%f [0.003333, 0.003157, 0.003144] 0.0031505
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6126.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6126
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6126
........................................ [0.020363, 0.020324, 0.021128]
OUTPUT:%f [0.020363, 0.020324, 0.021128] 0.020726
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2943.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2943
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2943
........................................ [0.022394, 0.022225, 0.022114]
OUTPUT:%f [0.022394, 0.022225, 0.022114] 0.0221695
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3475.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3475
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3475
........................................ [0.012404, 0.012704, 0.012265]
OUTPUT:%f [0.012404, 0.012704, 0.012265] 0.012484499999999999
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4729.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4729
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4729
........................................ [0.025843, 0.025638, 0.02566]
OUTPUT:%f [0.025843, 0.025638, 0.02566] 0.025648999999999998
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3058.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3058
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3058
........................................ [0.027939, 0.027479, 0.027439]
OUTPUT:%f [0.027939, 0.027479, 0.027439] 0.027459
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2905.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2905
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2905
........................................ [0.024115, 0.023961, 0.023377]
OUTPUT:%f [0.024115, 0.023961, 0.023377] 0.023669
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3133.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3133
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3133
........................................ [0.022409, 0.021687, 0.022097]
OUTPUT:%f [0.022409, 0.021687, 0.022097] 0.021892000000000002
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3261.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3261
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3261
........................................ [0.008336, 0.008246, 0.008237]
OUTPUT:%f [0.008336, 0.008246, 0.008237] 0.008241499999999999
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/812.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/812
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/812
........................................ [0.018083, 0.018519, 0.018463]
OUTPUT:%f [0.018083, 0.018519, 0.018463] 0.018491
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/379.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/379
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/379
........................................ [0.023625, 0.023453, 0.023433]
OUTPUT:%f [0.023625, 0.023453, 0.023433] 0.023443
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1124.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1124
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1124
........................................ [0.00448, 0.00439, 0.004371]
OUTPUT:%f [0.00448, 0.00439, 0.004371] 0.0043805
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9289.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9289
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9289
........................................ [0.030142, 0.029996, 0.030327]
OUTPUT:%f [0.030142, 0.029996, 0.030327] 0.0301615
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5740.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5740
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5740
........................................ [0.027562, 0.027821, 0.027407]
OUTPUT:%f [0.027562, 0.027821, 0.027407] 0.027614
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9400.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9400
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9400
........................................ [0.01412, 0.014302, 0.013329]
OUTPUT:%f [0.01412, 0.014302, 0.013329] 0.013815500000000001
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/328.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/328
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/328
........................................ [0.004142, 0.004007, 0.003999]
OUTPUT:%f [0.004142, 0.004007, 0.003999] 0.004003
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7611.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7611
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7611
........................................ [0.002556, 0.002422, 0.002433]
OUTPUT:%f [0.002556, 0.002422, 0.002433] 0.0024275
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4256.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4256
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4256
........................................ [0.002442, 0.002383, 0.002295]
OUTPUT:%f [0.002442, 0.002383, 0.002295] 0.002339
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2745.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2745
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2745
........................................ [0.024768, 0.024486, 0.024249]
OUTPUT:%f [0.024768, 0.024486, 0.024249] 0.0243675
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3866.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3866
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3866
........................................ [0.00452, 0.00451, 0.004467]
OUTPUT:%f [0.00452, 0.00451, 0.004467] 0.0044884999999999994
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5110.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5110
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5110
........................................ [0.016539, 0.016116, 0.016088]
OUTPUT:%f [0.016539, 0.016116, 0.016088] 0.016101999999999998
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7088.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7088
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7088
........................................ [0.004051, 0.003799, 0.004005]
OUTPUT:%f [0.004051, 0.003799, 0.004005] 0.003902
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/895.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/895
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/895
........................................ [0.021323, 0.020991, 0.019058]
OUTPUT:%f [0.021323, 0.020991, 0.019058] 0.0200245
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4897.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4897
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4897
........................................ [0.018233, 0.018083, 0.018142]
OUTPUT:%f [0.018233, 0.018083, 0.018142] 0.018112499999999997
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5864.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5864
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5864
........................................ [0.019043, 0.018838, 0.01423]
OUTPUT:%f [0.019043, 0.018838, 0.01423] 0.016534
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7755.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7755
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7755
........................................ [0.007716, 0.007504, 0.007517]
OUTPUT:%f [0.007716, 0.007504, 0.007517] 0.0075105
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8974.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8974
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8974
........................................ [0.026038, 0.026042, 0.025868]
OUTPUT:%f [0.026038, 0.026042, 0.025868] 0.025955
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1179.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1179
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1179
........................................ [0.022717, 0.022392, 0.022267]
OUTPUT:%f [0.022717, 0.022392, 0.022267] 0.0223295
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9907.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9907
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9907
........................................ [0.022487, 0.022463, 0.022199]
OUTPUT:%f [0.022487, 0.022463, 0.022199] 0.022331
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/702.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/702
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/702
........................................ [0.025675, 0.025508, 0.025712]
OUTPUT:%f [0.025675, 0.025508, 0.025712] 0.02561
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9404.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9404
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9404
........................................ [0.026957, 0.026832, 0.026808]
OUTPUT:%f [0.026957, 0.026832, 0.026808] 0.02682
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9091.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9091
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9091
........................................ [0.027264, 0.027242, 0.027262]
OUTPUT:%f [0.027264, 0.027242, 0.027262] 0.027252
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1146.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1146
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1146
........................................ [0.023803, 0.023575, 0.02348]
OUTPUT:%f [0.023803, 0.023575, 0.02348] 0.0235275
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1693.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1693
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1693
........................................ [0.020421, 0.020512, 0.019928]
OUTPUT:%f [0.020421, 0.020512, 0.019928] 0.020220000000000002
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3787.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3787
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3787
........................................ [0.00409, 0.003959, 0.004058]
OUTPUT:%f [0.00409, 0.003959, 0.004058] 0.0040085
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3187.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3187
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3187
........................................ [0.025727, 0.024824, 0.024634]
OUTPUT:%f [0.025727, 0.024824, 0.024634] 0.024729
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1409.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1409
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1409
........................................ [0.024508, 0.024407, 0.024439]
OUTPUT:%f [0.024508, 0.024407, 0.024439] 0.024423
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7030.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7030
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7030
........................................ [0.013049, 0.012895, 0.013006]
OUTPUT:%f [0.013049, 0.012895, 0.013006] 0.0129505
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4249.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4249
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4249
........................................ [0.025072, 0.025154, 0.024615]
OUTPUT:%f [0.025072, 0.025154, 0.024615] 0.0248845
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4067.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4067
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4067
........................................ [0.018444, 0.018202, 0.018142]
OUTPUT:%f [0.018444, 0.018202, 0.018142] 0.018172
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5892.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5892
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5892
........................................ [0.001601, 0.001438, 0.001431]
OUTPUT:%f [0.001601, 0.001438, 0.001431] 0.0014345
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7392.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7392
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7392
........................................ [0.021221, 0.020785, 0.020633]
OUTPUT:%f [0.021221, 0.020785, 0.020633] 0.020708999999999998
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6691.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6691
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6691
........................................ [0.023537, 0.022964, 0.022847]
OUTPUT:%f [0.023537, 0.022964, 0.022847] 0.0229055
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1882.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1882
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1882
........................................ [0.016605, 0.016993, 0.016875]
OUTPUT:%f [0.016605, 0.016993, 0.016875] 0.016934
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5396.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5396
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5396
........................................ [0.003029, 0.002824, 0.004924]
OUTPUT:%f [0.003029, 0.002824, 0.004924] 0.0038740000000000003
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1055.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1055
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1055
........................................ [0.025075, 0.024052, 0.024176]
OUTPUT:%f [0.025075, 0.024052, 0.024176] 0.024114
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8556.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8556
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8556
........................................ [0.024686, 0.02301, 0.02491]
OUTPUT:%f [0.024686, 0.02301, 0.02491] 0.023960000000000002
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5974.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5974
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5974
........................................ [0.027554, 0.035286, 0.0599]
OUTPUT:%f [0.027554, 0.035286, 0.0599] 0.047592999999999996
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5900.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5900
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5900
........................................ [0.023707, 0.023415, 0.023205]
OUTPUT:%f [0.023707, 0.023415, 0.023205] 0.023309999999999997
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5694.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5694
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5694
........................................ [0.024048, 0.024381, 0.024204]
OUTPUT:%f [0.024048, 0.024381, 0.024204] 0.0242925
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1139.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1139
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1139
........................................ [0.026541, 0.024115, 0.026343]
OUTPUT:%f [0.026541, 0.024115, 0.026343] 0.025229
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/71.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/71
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/71
........................................ [0.012851, 0.012738, 0.012726]
OUTPUT:%f [0.012851, 0.012738, 0.012726] 0.012732
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9060.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9060
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9060
........................................ [0.026317, 0.0488, 0.049656]
OUTPUT:%f [0.026317, 0.0488, 0.049656] 0.049228
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7169.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7169
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7169
........................................ [0.027565, 0.028254, 0.027945]
OUTPUT:%f [0.027565, 0.028254, 0.027945] 0.0280995
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6781.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6781
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6781
........................................ [0.004922, 0.004809, 0.004771]
OUTPUT:%f [0.004922, 0.004809, 0.004771] 0.00479
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9281.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9281
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9281
........................................ [0.008531, 0.008642, 0.00847]
OUTPUT:%f [0.008531, 0.008642, 0.00847] 0.008556000000000001
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3281.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3281
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3281
........................................ [0.00461, 0.005531, 0.004469]
OUTPUT:%f [0.00461, 0.005531, 0.004469] 0.005
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7194.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7194
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7194
........................................ [0.029723, 0.029844, 0.029591]
OUTPUT:%f [0.029723, 0.029844, 0.029591] 0.0297175
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7078.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7078
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7078
........................................ [0.022521, 0.022388, 0.022578]
OUTPUT:%f [0.022521, 0.022388, 0.022578] 0.022483000000000003
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9180.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9180
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9180
........................................ [0.024917, 0.024912, 0.02409]
OUTPUT:%f [0.024917, 0.024912, 0.02409] 0.024501000000000002
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6241.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6241
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6241
........................................ [0.001594, 0.001422, 0.001439]
OUTPUT:%f [0.001594, 0.001422, 0.001439] 0.0014305
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/657.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/657
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/657
........................................ [0.02578, 0.025584, 0.025702]
OUTPUT:%f [0.02578, 0.025584, 0.025702] 0.025643
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9680.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9680
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9680
........................................ [0.026058, 0.025843, 0.026014]
OUTPUT:%f [0.026058, 0.025843, 0.026014] 0.0259285
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4868.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4868
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4868
........................................ [0.00254, 0.002352, 0.002366]
OUTPUT:%f [0.00254, 0.002352, 0.002366] 0.002359
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2184.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2184
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2184
........................................ [0.025715, 0.025605, 0.025552]
OUTPUT:%f [0.025715, 0.025605, 0.025552] 0.025578499999999997
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7133.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7133
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7133
........................................ [0.008908, 0.008785, 0.008784]
OUTPUT:%f [0.008908, 0.008785, 0.008784] 0.0087845
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5465.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5465
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5465
........................................ [0.028117, 0.027485, 0.027904]
OUTPUT:%f [0.028117, 0.027485, 0.027904] 0.0276945
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8843.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8843
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8843
........................................ [0.027762, 0.027613, 0.025603]
OUTPUT:%f [0.027762, 0.027613, 0.025603] 0.026608
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6736.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6736
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6736
........................................ [0.016406, 0.016661, 0.01607]
OUTPUT:%f [0.016406, 0.016661, 0.01607] 0.016365499999999998
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9714.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9714
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9714
........................................ [0.022846, 0.02305, 0.022789]
OUTPUT:%f [0.022846, 0.02305, 0.022789] 0.022919500000000002
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3796.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3796
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3796
........................................ [0.012471, 0.011721, 0.011806]
OUTPUT:%f [0.012471, 0.011721, 0.011806] 0.0117635
store_func_eval
problem.constants
None
NSmin:  100
NS:  200
MLA iteration:  0
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -1.808182e+02           nan     00s00  00001  -1.808182e+02   5.658588e+03     00s00  00002  -2.426989e+02   2.221110e+03     00s00  00003  -2.876607e+02   3.832351e+02 
    00s00  00004  -3.093541e+02   3.452316e+02     00s00  00005  -3.587098e+02   2.856863e+01     00s01  00006  -3.631398e+02   2.138875e+01     00s01  00007  -3.648416e+02   3.840594e+00     00s01  00008  -3.656868e+02   2.454589e+00     00s01  00009  -3.663028e+02   1.078629e+01     00s01  00010  -3.671220e+02   1.017806e+00     00s01  00011  -3.677819e+02   1.302868e+00     00s02  00012  -3.683075e+02   9.149890e-01 
    00s02  00013  -3.684255e+02   3.476350e-01     00s02  00014  -3.685068e+02   2.791838e-01     00s02  00015  -3.685526e+02   1.309546e-01     00s02  00016  -3.686064e+02   1.861827e-01     00s02  00017  -3.687512e+02   6.544057e-01     00s03  00018  -3.690269e+02   1.035663e+00     00s03  00019  -3.691130e+02   1.106622e+00     00s03  00020  -3.692644e+02   5.909617e-02 
    00s03  00021  -3.692687e+02   1.128135e-02     00s03  00022  -3.692696e+02   4.490631e-03     00s03  00023  -3.692707e+02   3.099032e-03     00s04  00024  -3.692740e+02   3.989924e-03     00s04  00025  -3.692853e+02   1.568450e-02     00s04  00026  -3.693014e+02   3.174540e-02     00s04  00027  -3.693124e+02   1.948486e-01     00s04  00028  -3.693338e+02   4.090597e-02 
    00s04  00029  -3.693467e+02   3.242849e-03     00s05  00030  -3.693478e+02   6.100150e-04     00s05  00031  -3.693479e+02   7.142999e-04 
    00s05  00032  -3.693480e+02   8.330973e-05     00s05  00033  -3.693480e+02   4.876277e-05     00s05  00034  -3.693480e+02   1.383381e-04     00s05  00035  -3.693482e+02   4.517292e-04     00s06  00036  -3.693484e+02   1.487197e-03     00s06  00037  -3.693488e+02   2.199788e-03     00s06  00038  -3.693491e+02   9.096341e-04     00s06  00039  -3.693493e+02   9.048990e-05     00s06  00040  -3.693494e+02   6.149966e-05     00s06  00041  -3.693494e+02   1.780561e-04     00s07  00042  -3.693496e+02   5.955450e-04     00s07  00043  -3.693499e+02   1.228011e-03     00s07  00044  -3.693503e+02   6.001882e-03     00s07  00045  -3.693510e+02   2.087649e-03     00s07  00046  -3.693518e+02   1.200126e-04     00s07  00047  -3.693521e+02   4.401948e-04     00s08  00048  -3.693522e+02   5.460038e-04     00s08  00049  -3.693508e+02   2.757807e-02     00s08  00050  -3.693523e+02   7.689125e-04     00s08  00051  -3.693524e+02   1.680302e-04     00s08  00052  -3.693525e+02   1.421171e-05     00s08  00053  -3.693525e+02   2.486235e-05     00s09  00054  -3.693525e+02   5.501710e-05     00s09  00055  -3.693525e+02   7.019782e-05     00s09  00056  -3.693525e+02   6.932916e-05     00s09  00057  -3.693524e+02   1.717885e-03     00s09  00058  -3.693526e+02   1.830378e-05 
    00s09  00059  -3.693526e+02   9.727369e-06     00s10  00060  -3.693526e+02   1.279320e-05     00s10  00061  -3.693526e+02   9.695575e-06     00s10  00062  -3.693526e+02   2.617402e-04     00s10  00063  -3.693526e+02   3.656685e-05     00s10  00064  -3.693526e+02   3.947975e-06     00s10  00065  -3.693526e+02   3.980981e-07     00s11  00066  -3.693526e+02   1.945248e-06     00s11  00067  -3.693526e+02   1.963695e-06     00s11  00068  -3.693526e+02   1.963695e-06 
Runtime:     00s11
Optimization status: Converged

Optimization restart 1/1, f = -369.3526044014069
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16']]
prob:  <search.SurrogateProblem object at 0x14a918038970>
0 OK
bestX [array([[0.7287, 0.6075, 0.9536, 0.9487, 0.0892]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/580.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/580
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/580
........................................ [0.001376, 0.001167, 0.001171]
OUTPUT:%f [0.001376, 0.001167, 0.001171] 0.001169
store_func_eval
problem.constants
None
MLA iteration:  1
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -1.828325e+02           nan     00s00  00001  -1.828325e+02   5.786766e+03     00s00  00002  -2.454736e+02   2.285111e+03 
    00s00  00003  -2.909848e+02   3.822614e+02     00s00  00004  -3.123273e+02   3.564611e+02     00s00  00005  -3.622919e+02   3.535644e+01     00s01  00006  -3.671431e+02   3.520245e+01     00s01  00007  -3.693475e+02   4.910365e+00     00s01  00008  -3.701573e+02   2.834794e+00     00s01  00009  -3.716207e+02   2.368408e+00 
    00s01  00010  -3.722782e+02   1.214606e+00     00s01  00011  -3.731311e+02   8.150746e-01     00s02  00012  -3.717005e+02   6.802918e+00     00s02  00013  -3.731935e+02   5.138907e-01     00s02  00014  -3.729620e+02   7.170247e+00     00s02  00015  -3.732654e+02   2.055648e-01     00s02  00016  -3.733473e+02   7.325323e-01     00s02  00017  -3.734224e+02   7.891283e-01     00s03  00018  -3.737336e+02   1.487842e+00     00s03  00019  -3.738914e+02   4.920870e-02     00s03  00020  -3.739011e+02   1.108840e-01 
    00s03  00021  -3.739123e+02   1.296821e-02     00s03  00022  -3.739179e+02   1.331181e-02     00s03  00023  -3.739277e+02   3.728548e-02     00s04  00024  -3.739575e+02   1.011175e-01     00s04  00025  -3.739923e+02   6.691246e-02     00s04  00026  -3.740139e+02   4.593331e-02     00s04  00027  -3.740196e+02   1.673641e-01     00s04  00028  -3.740315e+02   7.297125e-03 
    00s04  00029  -3.740329e+02   4.012105e-03     00s05  00030  -3.740346e+02   5.296676e-03     00s05  00031  -3.740285e+02   1.144013e-01     00s05  00032  -3.740349e+02   9.292617e-04     00s05  00033  -3.740353e+02   3.394365e-04     00s05  00034  -3.740357e+02   3.939375e-04     00s05  00035  -3.740365e+02   1.147103e-03     00s06  00036  -3.740372e+02   2.187865e-03     00s06  00037  -3.740373e+02   1.049006e-03     00s06  00038  -3.740377e+02   4.552215e-05 
    00s06  00039  -3.740377e+02   7.579653e-06     00s06  00040  -3.740377e+02   9.513733e-06     00s06  00041  -3.740377e+02   3.134204e-05     00s07  00042  -3.740377e+02   9.166744e-05     00s07  00043  -3.740378e+02   4.982416e-04     00s07  00044  -3.740378e+02   5.763198e-04     00s07  00045  -3.740380e+02   2.014654e-04     00s07  00046  -3.740383e+02   1.363797e-03     00s07  00047  -3.740385e+02   2.063589e-04     00s08  00048  -3.740387e+02   6.316609e-04     00s08  00049  -3.740388e+02   8.764289e-04     00s08  00050  -3.740390e+02   4.806686e-04     00s08  00051  -3.740391e+02   4.226319e-05     00s08  00052  -3.740392e+02   1.187530e-05     00s08  00053  -3.740392e+02   6.586303e-06     00s09  00054  -3.740392e+02   1.466121e-05     00s09  00055  -3.740392e+02   7.760376e-06     00s09  00056  -3.740392e+02   1.135160e-05     00s09  00057  -3.740392e+02   1.827330e-05     00s09  00058  -3.740392e+02   7.816245e-05     00s09  00059  -3.740392e+02   4.415887e-06     00s10  00060  -3.740392e+02   2.135897e-06     00s10  00061  -3.740392e+02   5.180041e-06     00s10  00062  -3.740392e+02   5.906490e-06     00s10  00063  -3.740392e+02   6.266163e-05     00s10  00064  -3.740392e+02   7.182088e-06 
    00s10  00065  -3.740392e+02   7.779685e-07     00s11  00066  -3.740392e+02   2.672380e-08     00s11  00067  -3.740392e+02   2.672380e-08 
Runtime:     00s11
Optimization status: Converged

Optimization restart 1/1, f = -374.039233593395
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4']]
prob:  <search.SurrogateProblem object at 0x14a9135056a0>
0 OK
bestX [array([[8.8019e-01, 6.5038e-01, 4.1757e-01, 9.0952e-01, 2.4359e-04]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3640.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3640
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3640
........................................ [0.001305, 0.001202, 0.001173]
OUTPUT:%f [0.001305, 0.001202, 0.001173] 0.0011875
store_func_eval
problem.constants
None
MLA iteration:  2
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -1.853422e+02           nan     00s00  00001  -1.853422e+02   5.938632e+03     00s00  00002  -2.488283e+02   2.352836e+03     00s00  00003  -2.948320e+02   3.731130e+02     00s00  00004  -3.147120e+02   3.533220e+02     00s00  00005  -3.642750e+02   4.857682e+01     00s01  00006  -3.708461e+02   5.873447e+01 
    00s01  00007  -3.735629e+02   7.899312e+00     00s01  00008  -3.745908e+02   3.060452e+00     00s01  00009  -3.756736e+02   3.528934e+00     00s01  00010  -3.762620e+02   1.989018e+00     00s01  00011  -3.768690e+02   1.827046e+00     00s02  00012  -3.774244e+02   4.497531e-01     00s02  00013  -3.776066e+02   5.475915e-01     00s02  00014  -3.776004e+02   2.804621e-01     00s02  00015  -3.769356e+02   1.599732e+01     00s02  00016  -3.777003e+02   1.267239e-01     00s02  00017  -3.776956e+02   2.267913e+00     00s03  00018  -3.777599e+02   1.925382e-01     00s03  00019  -3.778264e+02   2.173821e-01     00s03  00020  -3.780259e+02   4.332397e-01 
    00s03  00021  -3.782239e+02   1.124518e-01     00s03  00022  -3.782564e+02   7.138632e-02     00s03  00023  -3.782613e+02   6.482454e-03     00s04  00024  -3.782618e+02   7.715652e-04     00s04  00025  -3.782620e+02   7.283514e-04     00s04  00026  -3.782633e+02   6.202695e-03 
    00s04  00027  -3.782653e+02   1.680751e-02     00s04  00028  -3.782688e+02   2.225090e-02     00s04  00029  -3.782728e+02   8.540367e-03     00s05  00030  -3.782744e+02   1.721477e-02 
    00s05  00031  -3.782760e+02   2.488755e-03     00s05  00032  -3.782764e+02   3.637510e-03     00s05  00033  -3.782785e+02   1.190828e-02     00s05  00034  -3.782800e+02   9.813962e-03     00s05  00035  -3.782809e+02   1.655457e-02     00s06  00036  -3.782817e+02   5.605310e-03     00s06  00037  -3.782823e+02   5.048732e-04 
    00s06  00038  -3.782824e+02   1.473733e-04     00s06  00039  -3.782825e+02   2.456319e-05     00s06  00040  -3.782825e+02   3.520418e-05     00s06  00041  -3.782826e+02   1.652178e-04     00s07  00042  -3.782827e+02   3.726665e-04     00s07  00043  -3.782830e+02   2.304012e-03     00s07  00044  -3.782836e+02   8.427047e-04     00s07  00045  -3.782845e+02   3.379260e-04     00s07  00046  -3.782851e+02   9.348324e-04     00s07  00047  -3.782848e+02   5.877240e-03     00s08  00048  -3.782852e+02   1.088963e-04     00s08  00049  -3.782852e+02   4.243220e-05 
    00s08  00050  -3.782853e+02   4.155554e-05     00s08  00051  -3.782853e+02   2.034615e-05     00s08  00052  -3.782853e+02   3.874846e-06 
    00s08  00053  -3.782853e+02   6.119252e-06     00s09  00054  -3.782853e+02   6.077732e-06     00s09  00055  -3.782853e+02   8.267643e-06     00s09  00056  -3.782853e+02   8.391142e-05     00s09  00057  -3.782853e+02   3.052185e-06     00s09  00058  -3.782853e+02   3.218189e-06     00s09  00059  -3.782853e+02   3.264887e-06     00s10  00060  -3.782853e+02   3.708003e-05     00s10  00061  -3.782853e+02   5.306015e-06     00s10  00062  -3.782853e+02   5.306015e-06 
Runtime:     00s10
Optimization status: Converged

Optimization restart 1/1, f = -378.2853401438837
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4']]
prob:  <search.SurrogateProblem object at 0x14a912e0d9a0>
0 OK
bestX [array([[0.607 , 0.5738, 0.8261, 0.7209, 0.0379]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7061.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7061
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7061
........................................ [0.001334, 0.001231, 0.00119]
OUTPUT:%f [0.001334, 0.001231, 0.00119] 0.0012105000000000002
store_func_eval
problem.constants
None
MLA iteration:  3
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -1.885642e+02           nan     00s00  00001  -1.885642e+02   6.091999e+03     00s00  00002  -2.528254e+02   2.411065e+03     00s00  00003  -2.994628e+02   3.686092e+02     00s00  00004  -3.187487e+02   3.488780e+02 
    00s00  00005  -3.681928e+02   5.437402e+01     00s01  00006  -3.747598e+02   7.828610e+01     00s01  00007  -3.772326e+02   9.967767e+00     00s01  00008  -3.788936e+02   1.528098e+01     00s01  00009  -3.799893e+02   2.521901e+00     00s01  00010  -3.806778e+02   1.144815e+00     00s01  00011  -3.810900e+02   1.550084e+00     00s02  00012  -3.818825e+02   1.063525e+00     00s02  00013  -3.823067e+02   3.730056e-01     00s02  00014  -3.822724e+02   1.018070e+00 
    00s02  00015  -3.823475e+02   2.950648e-01     00s02  00016  -3.824184e+02   2.385642e-01     00s02  00017  -3.825388e+02   4.770139e-01     00s03  00018  -3.826360e+02   5.058207e-01     00s03  00019  -3.828973e+02   1.257642e-01     00s03  00020  -3.829783e+02   2.033031e-02     00s03  00021  -3.829933e+02   2.217169e-03 
    00s03  00022  -3.829951e+02   2.391550e-03     00s03  00023  -3.829972e+02   7.016073e-03     00s04  00024  -3.830003e+02   1.493119e-02     00s04  00025  -3.830027e+02   6.882034e-03     00s04  00026  -3.830037e+02   1.379069e-03     00s04  00027  -3.830040e+02   2.308487e-04     00s04  00028  -3.830041e+02   4.567477e-04     00s04  00029  -3.830045e+02   2.139814e-03     00s05  00030  -3.830052e+02   6.653116e-03     00s05  00031  -3.830067e+02   1.364288e-02     00s05  00032  -3.830091e+02   1.379587e-02     00s05  00033  -3.829275e+02   1.862633e+00     00s05  00034  -3.830091e+02   1.551487e-02     00s05  00035  -3.830110e+02   4.188630e-03 
    00s06  00036  -3.830115e+02   1.565135e-04 
    00s06  00037  -3.830116e+02   8.056290e-05     00s06  00038  -3.830116e+02   1.870032e-04     00s06  00039  -3.830117e+02   1.132011e-04     00s06  00040  -3.830118e+02   7.991665e-05     00s06  00041  -3.830115e+02   6.901720e-03     00s07  00042  -3.830119e+02   5.347587e-04     00s07  00043  -3.830120e+02   3.840126e-04     00s07  00044  -3.830122e+02   1.750538e-04     00s07  00045  -3.830124e+02   7.668129e-05     00s07  00046  -3.830128e+02   3.382101e-04     00s07  00047  -3.830135e+02   1.185525e-03     00s08  00048  -3.830142e+02   8.490781e-04     00s08  00049  -3.830144e+02   2.716717e-04 
    00s08  00050  -3.830145e+02   4.881306e-06     00s08  00051  -3.830145e+02   7.333496e-06     00s08  00052  -3.830146e+02   1.980800e-05     00s08  00053  -3.830145e+02   3.464717e-04     00s09  00054  -3.830146e+02   3.923639e-05     00s09  00055  -3.830146e+02   2.842135e-06     00s09  00056  -3.830146e+02   1.791894e-06     00s09  00057  -3.830146e+02   3.081922e-06     00s09  00058  -3.830146e+02   4.534639e-05     00s09  00059  -3.830146e+02   3.718251e-06     00s10  00060  -3.830146e+02   7.709966e-07     00s10  00061  -3.830146e+02   6.141617e-07     00s10  00062  -3.830146e+02   2.932548e-06     00s10  00063  -3.830146e+02   2.932548e-06 
Runtime:     00s10
Optimization status: Converged

Optimization restart 1/1, f = -383.0145982976201
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4']]
prob:  <search.SurrogateProblem object at 0x14a912e48100>
0 OK
bestX [array([[0.5088, 0.9412, 0.6367, 0.8881, 0.0344]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7209.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7209
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7209
........................................ [0.001317, 0.00123, 0.001174]
OUTPUT:%f [0.001317, 0.00123, 0.001174] 0.001202
store_func_eval
problem.constants
None
MLA iteration:  4
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -1.914067e+02           nan     00s00  00001  -1.914067e+02   6.244028e+03     00s00  00002  -2.564293e+02   2.462245e+03     00s00  00003  -3.031572e+02   3.705951e+02     00s00  00004  -3.221027e+02   3.527157e+02     00s00  00005  -3.718385e+02   6.148487e+01     00s01  00006  -3.783539e+02   9.808721e+01     00s01  00007  -3.815327e+02   1.084016e+01     00s01  00008  -3.835713e+02   1.226997e+01     00s01  00009  -3.845881e+02   2.575284e+00     00s01  00010  -3.852621e+02   1.580230e+00 
    00s01  00011  -3.855776e+02   1.063677e+00     00s02  00012  -3.866195e+02   3.574142e-01     00s02  00013  -3.866556e+02   6.767064e-01     00s02  00014  -3.866901e+02   2.061445e-01     00s02  00015  -3.866737e+02   1.937107e+00     00s02  00016  -3.867540e+02   1.481572e-01     00s02  00017  -3.868478e+02   2.818965e-01     00s03  00018  -3.870013e+02   4.421694e-01     00s03  00019  -3.872270e+02   9.079874e-01     00s03  00020  -3.872306e+02   9.840572e-01 
    00s03  00021  -3.873936e+02   8.651144e-02     00s03  00022  -3.874060e+02   1.053431e-01     00s03  00023  -3.874122e+02   1.057110e-03     00s04  00024  -3.874126e+02   1.129231e-03     00s04  00025  -3.874135e+02   1.204265e-03     00s04  00026  -3.874133e+02   8.424932e-02     00s04  00027  -3.874158e+02   2.060472e-02     00s04  00028  -3.874217e+02   4.189695e-03 
    00s04  00029  -3.874337e+02   8.785761e-03     00s05  00030  -3.874414e+02   1.168877e-02     00s05  00031  -3.874428e+02   8.177250e-03     00s05  00032  -3.874442e+02   2.421475e-03     00s05  00033  -3.874447e+02   1.316196e-03     00s05  00034  -3.874452e+02   9.802990e-04 
    00s05  00035  -3.874457e+02   6.515483e-04     00s06  00036  -3.874456e+02   3.886733e-03     00s06  00037  -3.874458e+02   6.322566e-04     00s06  00038  -3.874460e+02   5.716111e-05     00s06  00039  -3.874460e+02   2.286085e-05     00s06  00040  -3.874460e+02   1.512000e-04     00s06  00041  -3.874461e+02   9.821174e-05     00s07  00042  -3.874463e+02   5.755014e-04     00s07  00043  -3.874467e+02   1.973576e-03     00s07  00044  -3.874473e+02   3.503411e-03     00s07  00045  -3.874481e+02   9.641281e-04     00s07  00046  -3.874485e+02   2.826927e-04     00s07  00047  -3.874485e+02   6.600393e-04 
    00s08  00048  -3.874486e+02   5.480721e-05     00s08  00049  -3.874486e+02   2.584917e-05     00s08  00050  -3.874486e+02   1.005312e-04     00s08  00051  -3.874486e+02   3.628446e-05     00s08  00052  -3.874487e+02   4.307251e-05     00s08  00053  -3.874487e+02   5.661792e-05     00s09  00054  -3.874488e+02   9.897440e-05     00s09  00055  -3.874487e+02   1.031613e-03     00s09  00056  -3.874488e+02   2.150323e-04     00s09  00057  -3.874489e+02   2.187759e-05     00s09  00058  -3.874489e+02   3.990233e-07 
    00s10  00059  -3.874489e+02   1.058882e-07     00s10  00060  -3.874489e+02   1.058882e-07 
Runtime:     00s10
Optimization status: Converged

Optimization restart 1/1, f = -387.44886915387167
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4']]
prob:  <search.SurrogateProblem object at 0x14a912d868e0>
0 OK
bestX [array([[0.795 , 0.6238, 0.8998, 0.8398, 0.0264]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5524.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5524
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5524
........................................ [0.001358, 0.001207, 0.001182]
OUTPUT:%f [0.001358, 0.001207, 0.001182] 0.0011945
store_func_eval
problem.constants
None
MLA iteration:  5
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -1.948625e+02           nan     00s00  00001  -1.948625e+02   6.369633e+03     00s00  00002  -2.606605e+02   2.534700e+03     00s00  00003  -3.079489e+02   3.733951e+02     00s00  00004  -3.267521e+02   3.548375e+02     00s00  00005  -3.760932e+02   6.373429e+01     00s01  00006  -3.835344e+02   8.968241e+01 
    00s01  00007  -3.863832e+02   1.105182e+01     00s01  00008  -3.882401e+02   1.454090e+01     00s01  00009  -3.893048e+02   2.441012e+00     00s01  00010  -3.899514e+02   1.105293e+00     00s01  00011  -3.903034e+02   1.283838e+00     00s02  00012  -3.911847e+02   4.175409e-01     00s02  00013  -3.914899e+02   2.261508e-01     00s02  00014  -3.915746e+02   3.912447e-01     00s02  00015  -3.916856e+02   2.595942e-01     00s02  00016  -3.917648e+02   6.416799e-01     00s02  00017  -3.919801e+02   5.621464e-01     00s03  00018  -3.920637e+02   1.269633e-01 
    00s03  00019  -3.921143e+02   7.285758e-03     00s03  00020  -3.921208e+02   1.862592e-02     00s03  00021  -3.921231e+02   3.905504e-03     00s03  00022  -3.921235e+02   2.919251e-03     00s03  00023  -3.921282e+02   5.407950e-03     00s04  00024  -3.921330e+02   1.321332e-02     00s04  00025  -3.921375e+02   8.081089e-03     00s04  00026  -3.921362e+02   5.005589e-02     00s04  00027  -3.921383e+02   1.315825e-02     00s04  00028  -3.921398e+02   1.044432e-03     00s05  00029  -3.921404e+02   1.096720e-03     00s05  00030  -3.921418e+02   4.656279e-03     00s05  00031  -3.921447e+02   1.295481e-02     00s05  00032  -3.921491e+02   1.748950e-02     00s05  00033  -3.921434e+02   1.784682e-02     00s05  00034  -3.921502e+02   7.889130e-03     00s06  00035  -3.921521e+02   1.290330e-02     00s06  00036  -3.921526e+02   2.963337e-03 
    00s06  00037  -3.921531e+02   1.092399e-04     00s06  00038  -3.921531e+02   3.656264e-05     00s06  00039  -3.921531e+02   2.984479e-05     00s06  00040  -3.921531e+02   4.054434e-05     00s07  00041  -3.921533e+02   2.502065e-04     00s07  00042  -3.921533e+02   6.308424e-04     00s07  00043  -3.921536e+02   2.124055e-04     00s07  00044  -3.921538e+02   1.926314e-04     00s07  00045  -3.921541e+02   2.175864e-04     00s07  00046  -3.921432e+02   1.253292e-01     00s08  00047  -3.921542e+02   1.415028e-03     00s08  00048  -3.921544e+02   1.282509e-03     00s08  00049  -3.921550e+02   3.526218e-03     00s08  00050  -3.921556e+02   8.134480e-04     00s08  00051  -3.921560e+02   8.905180e-05 
    00s08  00052  -3.921562e+02   8.930374e-05     00s09  00053  -3.921563e+02   1.044248e-04     00s09  00054  -3.921564e+02   1.006514e-03     00s09  00055  -3.921564e+02   5.475348e-05     00s09  00056  -3.921565e+02   4.990273e-06     00s09  00057  -3.921565e+02   8.665984e-06     00s09  00058  -3.921565e+02   7.107665e-05     00s10  00059  -3.921565e+02   5.393949e-07     00s10  00060  -3.921565e+02   2.180333e-07 
    00s10  00061  -3.921565e+02   2.180333e-07 
Runtime:     00s10
Optimization status: Converged

Optimization restart 1/1, f = -392.15649695808935
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4']]
prob:  <search.SurrogateProblem object at 0x14a912a0fb50>
0 OK
bestX [array([[0.6118, 0.572 , 0.7778, 0.684 , 0.076 ]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1915.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1915
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1915
........................................ [0.001309, 0.001264, 0.001194]
OUTPUT:%f [0.001309, 0.001264, 0.001194] 0.001229
store_func_eval
problem.constants
None
MLA iteration:  6
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -1.992869e+02           nan     00s00  00001  -1.992869e+02   6.401353e+03     00s00  00002  -2.651429e+02   2.533621e+03     00s00  00003  -3.123290e+02   3.708282e+02     00s00  00004  -3.309217e+02   3.506030e+02     00s00  00005  -3.804505e+02   6.818456e+01     00s01  00006  -3.867772e+02   1.242382e+02 
    00s01  00007  -3.906705e+02   1.211984e+01     00s01  00008  -3.929266e+02   1.146314e+01     00s01  00009  -3.938936e+02   2.559289e+00     00s01  00010  -3.945977e+02   1.752112e+00     00s01  00011  -3.949275e+02   1.054723e+00     00s02  00012  -3.958740e+02   4.160831e-01     00s02  00013  -3.959474e+02   3.723542e-01     00s02  00014  -3.960329e+02   1.923236e-01     00s02  00015  -3.961122e+02   1.763886e-01     00s02  00016  -3.961847e+02   3.558952e+00     00s03  00017  -3.962215e+02   5.267763e-01     00s03  00018  -3.964583e+02   3.225272e-01     00s03  00019  -3.966068e+02   3.072551e-01 
    00s03  00020  -3.966733e+02   1.072017e-01     00s03  00021  -3.966819e+02   3.352393e-03 
    00s03  00022  -3.966823e+02   1.025692e-03     00s04  00023  -3.966825e+02   1.290462e-03     00s04  00024  -3.966844e+02   8.848715e-03     00s04  00025  -3.966878e+02   2.602542e-02     00s04  00026  -3.966950e+02   5.719840e-02     00s04  00027  -3.967041e+02   5.045041e-02     00s04  00028  -3.966983e+02   2.377907e-01     00s05  00029  -3.967093e+02   6.722754e-02     00s05  00030  -3.967146e+02   1.353984e-02     00s05  00031  -3.967159e+02   2.424939e-04     00s05  00032  -3.967159e+02   3.463701e-05     00s05  00033  -3.967159e+02   2.980067e-05     00s05  00034  -3.967159e+02   5.525438e-05 
    00s06  00035  -3.967160e+02   2.684477e-04     00s06  00036  -3.967160e+02   4.500588e-04     00s06  00037  -3.967161e+02   5.156833e-04     00s06  00038  -3.967162e+02   1.707339e-04     00s06  00039  -3.967163e+02   1.209044e-04     00s06  00040  -3.967164e+02   2.364740e-04     00s07  00041  -3.967165e+02   4.134047e-04     00s07  00042  -3.967165e+02   2.168766e-04 
    00s07  00043  -3.967166e+02   3.978002e-05     00s07  00044  -3.967167e+02   3.070257e-04     00s07  00045  -3.967168e+02   9.184952e-04     00s07  00046  -3.967169e+02   1.038862e-03     00s08  00047  -3.966813e+02   3.029325e-01     00s08  00048  -3.967169e+02   1.730186e-03     00s08  00049  -3.967171e+02   6.434871e-04     00s08  00050  -3.967172e+02   3.385963e-05     00s08  00051  -3.967172e+02   1.298030e-04     00s08  00052  -3.967172e+02   3.130087e-04     00s09  00053  -3.967173e+02   7.683156e-04     00s09  00054  -3.967174e+02   1.535911e-03     00s09  00055  -3.967177e+02   2.441205e-03     00s09  00056  -3.967181e+02   3.046261e-03     00s09  00057  -3.967182e+02   2.919872e-03     00s10  00058  -3.967184e+02   2.998638e-04     00s10  00059  -3.967184e+02   7.531400e-05 
    00s10  00060  -3.967185e+02   4.174071e-06     00s10  00061  -3.967185e+02   3.427457e-06     00s10  00062  -3.967185e+02   1.834841e-05     00s10  00063  -3.967185e+02   5.829744e-05     00s11  00064  -3.967185e+02   1.367172e-04     00s11  00065  -3.967185e+02   1.575395e-04     00s11  00066  -3.967174e+02   1.236015e-02     00s11  00067  -3.967185e+02   2.712466e-04     00s11  00068  -3.967186e+02   1.042804e-04     00s11  00069  -3.967186e+02   7.636288e-06     00s12  00070  -3.967186e+02   5.371340e-06     00s12  00071  -3.967186e+02   1.104201e-05     00s12  00072  -3.967186e+02   3.501068e-05     00s12  00073  -3.967186e+02   3.501068e-05 
Runtime:     00s12
Optimization status: Converged

Optimization restart 1/1, f = -396.71859900423783
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4']]
prob:  <search.SurrogateProblem object at 0x14a912db7a00>
0 OK
bestX [array([[0.7995, 0.7863, 0.6641, 0.9185, 0.0028]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3845.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3845
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3845
........................................ [0.001308, 0.00119, 0.001186]
OUTPUT:%f [0.001308, 0.00119, 0.001186] 0.001188
store_func_eval
problem.constants
None
MLA iteration:  7
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -2.026341e+02           nan     00s00  00001  -2.026341e+02   6.523280e+03     00s00  00002  -2.689623e+02   2.560909e+03     00s00  00003  -3.167592e+02   3.733998e+02     00s00  00004  -3.362137e+02   3.573343e+02     00s00  00005  -3.865338e+02   5.419857e+01     00s01  00006  -3.927345e+02   9.241621e+01 
    00s01  00007  -3.956286e+02   1.115924e+01     00s01  00008  -3.969687e+02   2.289027e+01     00s01  00009  -3.983490e+02   2.304425e+00     00s01  00010  -3.988554e+02   1.180864e+00     00s01  00011  -3.994766e+02   2.178228e+00     00s02  00012  -3.999581e+02   1.402596e+00     00s02  00013  -4.005543e+02   7.461328e-01     00s02  00014  -4.006151e+02   2.579102e-01     00s02  00015  -4.006780e+02   1.384774e-01     00s02  00016  -4.007170e+02   1.609043e-01     00s02  00017  -4.008479e+02   3.336383e-01     00s03  00018  -4.010678e+02   2.919413e-01     00s03  00019  -4.012240e+02   1.721835e+00     00s03  00020  -4.012227e+02   7.740777e-01 
    00s03  00021  -4.013412e+02   2.658442e-02     00s03  00022  -4.013477e+02   2.054683e-03     00s04  00023  -4.013484e+02   4.802578e-04     00s04  00024  -4.013487e+02   5.480555e-04 
    00s04  00025  -4.013516e+02   6.186715e-03     00s04  00026  -4.013553e+02   1.502602e-02     00s04  00027  -4.013597e+02   1.464124e-02     00s04  00028  -4.013315e+02   4.352240e-01     00s05  00029  -4.013601e+02   1.440681e-02     00s05  00030  -4.013615e+02   3.159477e-03 
    00s05  00031  -4.013621e+02   4.466701e-04     00s05  00032  -4.013624e+02   5.329104e-04     00s05  00033  -4.013628e+02   7.513054e-04     00s05  00034  -4.013632e+02   1.732816e-02     00s06  00035  -4.013644e+02   6.382295e-03     00s06  00036  -4.013659e+02   2.064175e-04     00s06  00037  -4.013668e+02   4.481874e-04     00s06  00038  -4.013671e+02   4.595969e-05     00s06  00039  -4.013672e+02   4.789399e-05     00s06  00040  -4.013672e+02   1.973391e-04     00s07  00041  -4.013672e+02   1.531198e-04     00s07  00042  -4.013675e+02   9.376974e-04     00s07  00043  -4.013679e+02   2.760718e-03     00s07  00044  -4.013686e+02   4.283670e-03     00s07  00045  -4.013694e+02   3.485684e-03     00s07  00046  -4.013662e+02   2.411836e-02     00s08  00047  -4.013696e+02   4.128079e-04 
    00s08  00048  -4.013699e+02   4.622765e-05     00s08  00049  -4.013700e+02   1.791493e-04     00s08  00050  -4.013701e+02   8.247694e-05     00s08  00051  -4.013701e+02   4.098227e-05     00s09  00052  -4.013701e+02   7.739560e-04     00s09  00053  -4.013701e+02   3.793195e-05     00s09  00054  -4.013702e+02   1.057060e-05     00s09  00055  -4.013702e+02   3.143705e-06     00s09  00056  -4.013702e+02   1.935094e-06     00s09  00057  -4.013702e+02   1.915165e-06 
    00s10  00058  -4.013702e+02   3.236484e-06     00s10  00059  -4.013702e+02   8.651195e-05     00s10  00060  -4.013702e+02   2.115682e-06     00s10  00061  -4.013702e+02   4.083048e-07     00s10  00062  -4.013702e+02   1.453219e-07     00s10  00063  -4.013702e+02   1.453219e-07 
Runtime:     00s10
Optimization status: Converged

Optimization restart 1/1, f = -401.37022227094343
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4']]
prob:  <search.SurrogateProblem object at 0x14a912de0670>
0 OK
bestX [array([[0.9313, 0.7373, 0.9994, 0.6468, 0.057 ]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9493.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9493
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9493
........................................ [0.001354, 0.001253, 0.001193]
OUTPUT:%f [0.001354, 0.001253, 0.001193] 0.0012230000000000001
store_func_eval
problem.constants
None
MLA iteration:  8
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -2.052687e+02           nan     00s00  00001  -2.052687e+02   6.626859e+03     00s00  00002  -2.720130e+02   2.587497e+03 
    00s00  00003  -3.209102e+02   3.739925e+02     00s00  00004  -3.410454e+02   3.632351e+02     00s00  00005  -3.922607e+02   4.855539e+01     00s01  00006  -3.965732e+02   1.127021e+02     00s01  00007  -4.001490e+02   1.173974e+01     00s01  00008  -4.012393e+02   2.827223e+01     00s02  00009  -4.028861e+02   2.530796e+00     00s02  00010  -4.033987e+02   1.381250e+00     00s02  00011  -4.041290e+02   2.799644e+00 
    00s02  00012  -4.046094e+02   1.407480e+00     00s02  00013  -4.052793e+02   4.040130e-01     00s02  00014  -4.053254e+02   1.697342e-01     00s03  00015  -4.053826e+02   2.244391e-01     00s03  00016  -4.054557e+02   4.384448e-01     00s03  00017  -4.055802e+02   4.227628e-01     00s03  00018  -4.058073e+02   5.109667e-01     00s03  00019  -4.059244e+02   5.554723e-01 
    00s03  00020  -4.060656e+02   6.520954e-02     00s04  00021  -4.060578e+02   6.217701e-01     00s04  00022  -4.060826e+02   2.314770e-02     00s04  00023  -4.060907e+02   4.338862e-03     00s04  00024  -4.060937e+02   1.041771e-03     00s04  00025  -4.060951e+02   1.516698e-03     00s05  00026  -4.061006e+02   3.083411e-03     00s05  00027  -4.059775e+02   2.351378e+00     00s05  00028  -4.061013e+02   1.469945e-02     00s05  00029  -4.061061e+02   7.880172e-03 
    00s05  00030  -4.061094e+02   1.097100e-03     00s05  00031  -4.061104e+02   7.943569e-04     00s06  00032  -4.061118e+02   3.484222e-03     00s06  00033  -4.061136e+02   8.121312e-03     00s06  00034  -4.061168e+02   1.830728e-03     00s06  00035  -4.061183e+02   5.325672e-02     00s06  00036  -4.061217e+02   5.284221e-03 
    00s06  00037  -4.061228e+02   6.789834e-05     00s07  00038  -4.061230e+02   6.177255e-05     00s07  00039  -4.061229e+02   8.337364e-04     00s07  00040  -4.061230e+02   1.407101e-04     00s07  00041  -4.061230e+02   3.032500e-05     00s07  00042  -4.061230e+02   1.854475e-05     00s08  00043  -4.061230e+02   7.061527e-05     00s08  00044  -4.061231e+02   2.141364e-04     00s08  00045  -4.061232e+02   6.213619e-04     00s08  00046  -4.061235e+02   1.245791e-03     00s08  00047  -4.061240e+02   1.994035e-03     00s08  00048  -4.061240e+02   8.908860e-03     00s09  00049  -4.061250e+02   1.512913e-03     00s09  00050  -4.061254e+02   1.227575e-03     00s09  00051  -4.061256e+02   5.891119e-04     00s09  00052  -4.061257e+02   1.099859e-04     00s09  00053  -4.061258e+02   1.926252e-04     00s09  00054  -4.061258e+02   1.120835e-04     00s10  00055  -4.061258e+02   3.025188e-05     00s10  00056  -4.061258e+02   6.189476e-06 
    00s10  00057  -4.061258e+02   2.752531e-06     00s10  00058  -4.061259e+02   2.454140e-06     00s10  00059  -4.061259e+02   3.029181e-04     00s11  00060  -4.061259e+02   3.613635e-05     00s11  00061  -4.061259e+02   2.010405e-05     00s11  00062  -4.061259e+02   4.679199e-05     00s11  00063  -4.061259e+02   1.938508e-05     00s11  00064  -4.061259e+02   7.475459e-06     00s11  00065  -4.061259e+02   6.286445e-06     00s12  00066  -4.061259e+02   5.230697e-07     00s12  00067  -4.061259e+02   1.096666e-06     00s12  00068  -4.061259e+02   1.096666e-06 
Runtime:     00s12
Optimization status: Converged

Optimization restart 1/1, f = -406.1259360695554
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4']]
prob:  <search.SurrogateProblem object at 0x14a912dcdcd0>
0 OK
bestX [array([[0.7045, 0.5725, 0.9874, 0.764 , 0.0514]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1623.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1623
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1623
........................................ [0.001309, 0.001236, 0.001244]
OUTPUT:%f [0.001309, 0.001236, 0.001244] 0.00124
store_func_eval
problem.constants
None
MLA iteration:  9
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -2.091707e+02           nan     00s00  00001  -2.091707e+02   6.769156e+03     00s00  00002  -2.764532e+02   2.603423e+03     00s00  00003  -3.249788e+02   3.768991e+02 
    00s00  00004  -3.450727e+02   3.592129e+02     00s00  00005  -3.970035e+02   4.814159e+01     00s01  00006  -4.009348e+02   1.199936e+02     00s01  00007  -4.046348e+02   1.171412e+01     00s01  00008  -4.060967e+02   2.534036e+01     00s01  00009  -4.075890e+02   2.582387e+00     00s01  00010  -4.081843e+02   1.335787e+00     00s02  00011  -4.088843e+02   2.603009e+00 
    00s02  00012  -4.093853e+02   1.464951e+00     00s02  00013  -4.100359e+02   5.830372e-01     00s02  00014  -4.100890e+02   1.892559e-01     00s02  00015  -4.101465e+02   2.061936e-01     00s02  00016  -4.101939e+02   2.747552e-01     00s03  00017  -4.103241e+02   3.039289e-01     00s03  00018  -4.105975e+02   4.173526e-01 
    00s03  00019  -4.107843e+02   4.567593e-02     00s03  00020  -4.108373e+02   1.457811e-01     00s03  00021  -4.108529e+02   9.571424e-02 
    00s03  00022  -4.108601e+02   5.350697e-03     00s04  00023  -4.108608e+02   1.095677e-03     00s04  00024  -4.108615e+02   2.366289e-03     00s04  00025  -4.108643e+02   1.641519e-02     00s04  00026  -4.108687e+02   3.678835e-02     00s04  00027  -4.108737e+02   3.175844e-02     00s05  00028  -4.107860e+02   1.583186e+00     00s05  00029  -4.108741e+02   2.855743e-02     00s05  00030  -4.108760e+02   3.647728e-03 
    00s05  00031  -4.108764e+02   3.676164e-04     00s05  00032  -4.108765e+02   5.198352e-04     00s05  00033  -4.108768e+02   1.416414e-03     00s06  00034  -4.108775e+02   2.197980e-03     00s06  00035  -4.108802e+02   7.015592e-03     00s06  00036  -4.108836e+02   7.110775e-03     00s06  00037  -4.108207e+02   2.455237e-01     00s06  00038  -4.108842e+02   8.955756e-03     00s06  00039  -4.108874e+02   3.802107e-03     00s07  00040  -4.108885e+02   7.841641e-04     00s07  00041  -4.108887e+02   3.636159e-03     00s07  00042  -4.108889e+02   1.038642e-03 
    00s07  00043  -4.108890e+02   2.186759e-05     00s07  00044  -4.108890e+02   9.752404e-06     00s07  00045  -4.108890e+02   1.801569e-05     00s08  00046  -4.108890e+02   7.322841e-05     00s08  00047  -4.108890e+02   2.518791e-04     00s08  00048  -4.108891e+02   6.824946e-04     00s08  00049  -4.108892e+02   1.442662e-03     00s08  00050  -4.108895e+02   1.866045e-03     00s09  00051  -4.108893e+02   8.876014e-03     00s09  00052  -4.108897e+02   3.599908e-03     00s09  00053  -4.108901e+02   1.044629e-03     00s09  00054  -4.108903e+02   1.055559e-04     00s09  00055  -4.108904e+02   4.436907e-04     00s09  00056  -4.108905e+02   7.395343e-04     00s10  00057  -4.108906e+02   8.909665e-04     00s10  00058  -4.108908e+02   7.587755e-04     00s10  00059  -4.108909e+02   6.754646e-05     00s10  00060  -4.108909e+02   5.357416e-05     00s10  00061  -4.108910e+02   1.118489e-04     00s10  00062  -4.108910e+02   2.816756e-04     00s11  00063  -4.108911e+02   4.804023e-04     00s11  00064  -4.108913e+02   4.076615e-04     00s11  00065  -4.108913e+02   1.682181e-03     00s11  00066  -4.108914e+02   8.193306e-04     00s11  00067  -4.108914e+02   6.370318e-04     00s12  00068  -4.108914e+02   1.322004e-04     00s12  00069  -4.108915e+02   7.368545e-05     00s12  00070  -4.108915e+02   3.458832e-05     00s12  00071  -4.108915e+02   5.962542e-05     00s12  00072  -4.108916e+02   1.547922e-04     00s12  00073  -4.108916e+02   6.472344e-04     00s13  00074  -4.108916e+02   7.596066e-05     00s13  00075  -4.108916e+02   1.570394e-05 
    00s13  00076  -4.108916e+02   7.495593e-07     00s13  00077  -4.108916e+02   1.683672e-06     00s13  00078  -4.108916e+02   8.073281e-07     00s13  00079  -4.108916e+02   3.733352e-06     00s14  00080  -4.108916e+02   1.016409e-06     00s14  00081  -4.108916e+02   1.016409e-06 
Runtime:     00s14
Optimization status: Converged

Optimization restart 1/1, f = -410.8916262833498
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4']]
prob:  <search.SurrogateProblem object at 0x14a91292ffd0>
0 OK
bestX [array([[0.6904, 0.5405, 0.5064, 0.8958, 0.0813]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2250.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2250
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2250
........................................ [0.001378, 0.001224, 0.00118]
OUTPUT:%f [0.001378, 0.001224, 0.00118] 0.001202
store_func_eval
problem.constants
None
MLA iteration:  10
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -2.129350e+02           nan     00s00  00001  -2.129350e+02   6.927636e+03     00s00  00002  -2.808193e+02   2.619809e+03     00s00  00003  -3.285976e+02   3.879512e+02     00s00  00004  -3.491439e+02   3.626164e+02     00s00  00005  -4.020300e+02   4.617458e+01 
    00s01  00006  -4.057978e+02   1.134941e+02     00s01  00007  -4.093225e+02   1.109381e+01     00s01  00008  -4.108033e+02   2.407055e+01     00s01  00009  -4.122359e+02   2.768618e+00     00s01  00010  -4.128848e+02   1.356250e+00     00s01  00011  -4.135455e+02   2.535478e+00     00s02  00012  -4.140788e+02   1.653112e+00     00s02  00013  -4.147658e+02   8.683542e-01     00s02  00014  -4.148207e+02   2.743265e-01     00s02  00015  -4.148720e+02   1.167327e-01     00s02  00016  -4.149347e+02   1.121000e-01 
    00s03  00017  -4.149315e+02   2.727289e+00     00s03  00018  -4.149909e+02   3.622157e-01     00s03  00019  -4.151890e+02   3.291857e-01     00s03  00020  -4.154504e+02   2.210619e-01     00s03  00021  -4.155763e+02   9.357801e-02     00s03  00022  -4.155795e+02   1.689818e-01     00s04  00023  -4.155926e+02   4.530695e-03     00s04  00024  -4.155934e+02   1.181958e-03 
    00s04  00025  -4.155947e+02   7.220019e-04     00s04  00026  -4.155973e+02   1.227720e-03     00s04  00027  -4.155729e+02   4.291920e-01     00s04  00028  -4.155976e+02   3.577484e-03     00s05  00029  -4.155985e+02   1.179352e-03     00s05  00030  -4.155996e+02   8.247877e-04     00s05  00031  -4.156029e+02   4.873008e-03     00s05  00032  -4.156070e+02   1.233839e-02     00s05  00033  -4.156116e+02   1.126060e-02     00s05  00034  -4.155662e+02   1.275234e-01     00s06  00035  -4.156121e+02   1.292879e-02     00s06  00036  -4.156136e+02   1.301661e-02     00s06  00037  -4.156133e+02   1.578366e-02     00s06  00038  -4.156145e+02   1.170320e-04     00s06  00039  -4.156146e+02   1.386426e-05     00s07  00040  -4.156146e+02   5.012951e-05     00s07  00041  -4.156139e+02   9.905849e-03 
    00s07  00042  -4.156146e+02   1.448645e-05     00s07  00043  -4.156147e+02   6.348622e-06     00s07  00044  -4.156147e+02   6.094546e-06     00s07  00045  -4.156147e+02   9.795204e-06     00s08  00046  -4.156150e+02   2.153020e-04     00s08  00047  -4.156155e+02   4.599580e-04     00s08  00048  -4.156161e+02   2.927232e-04     00s08  00049  -4.156162e+02   4.550431e-04     00s08  00050  -4.156165e+02   9.467881e-05     00s08  00051  -4.156165e+02   2.408693e-04     00s09  00052  -4.156166e+02   3.109139e-04     00s09  00053  -4.156166e+02   1.160335e-05     00s09  00054  -4.156166e+02   1.969490e-05     00s09  00055  -4.156167e+02   4.061209e-05     00s09  00056  -4.156165e+02   2.693865e-03     00s09  00057  -4.156167e+02   5.339438e-05     00s10  00058  -4.156167e+02   1.184861e-05     00s10  00059  -4.156167e+02   6.664453e-07 
    00s10  00060  -4.156167e+02   1.198382e-06     00s10  00061  -4.156167e+02   1.849149e-06     00s10  00062  -4.156167e+02   1.409584e-05     00s11  00063  -4.156167e+02   4.207220e-06     00s11  00064  -4.156167e+02   2.929540e-06     00s11  00065  -4.156167e+02   2.890870e-06     00s11  00066  -4.156167e+02   6.965558e-05     00s11  00067  -4.156167e+02   2.354473e-06     00s11  00068  -4.156167e+02   2.354473e-06 
Runtime:     00s11
Optimization status: Converged

Optimization restart 1/1, f = -415.6166976328836
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4']]
prob:  <search.SurrogateProblem object at 0x14a912a04550>
0 OK
bestX [array([[0.9849, 0.76  , 0.4709, 0.9213, 0.0204]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/253.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/253
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/253
........................................ [0.001311, 0.001196, 0.001218]
OUTPUT:%f [0.001311, 0.001196, 0.001218] 0.001207
store_func_eval
problem.constants
None
MLA iteration:  11
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -2.163793e+02           nan     00s00  00001  -2.163793e+02   7.071569e+03     00s00  00002  -2.848668e+02   2.661971e+03     00s00  00003  -3.329315e+02   3.864002e+02     00s00  00004  -3.531558e+02   3.611724e+02 
    00s00  00005  -4.060326e+02   4.772141e+01     00s01  00006  -4.104035e+02   1.143642e+02     00s01  00007  -4.137352e+02   1.187032e+01     00s01  00008  -4.151197e+02   2.940998e+01     00s01  00009  -4.167803e+02   2.583490e+00     00s01  00010  -4.173651e+02   1.510673e+00     00s02  00011  -4.182167e+02   3.058791e+00     00s02  00012  -4.187527e+02   1.504865e+00     00s02  00013  -4.193866e+02   5.173075e-01     00s02  00014  -4.194425e+02   1.187056e-01 
    00s02  00015  -4.195086e+02   1.456725e-01     00s02  00016  -4.195249e+02   8.257261e-01     00s03  00017  -4.195362e+02   2.382578e-01     00s03  00018  -4.195447e+02   2.082464e+00     00s03  00019  -4.195784e+02   3.180070e-01     00s03  00020  -4.197383e+02   4.099589e-01     00s03  00021  -4.200153e+02   1.201549e-01     00s03  00022  -4.201340e+02   2.893192e-01 
    00s04  00023  -4.201810e+02   4.973653e-02     00s04  00024  -4.201863e+02   2.979255e-03     00s04  00025  -4.201869e+02   8.696977e-04     00s04  00026  -4.201880e+02   1.301842e-03 
    00s04  00027  -4.201906e+02   5.145014e-03     00s05  00028  -4.201947e+02   1.505656e-02     00s05  00029  -4.201894e+02   1.000333e-01     00s05  00030  -4.201960e+02   1.234881e-02     00s05  00031  -4.201980e+02   2.682980e-03     00s05  00032  -4.201984e+02   2.679799e-04     00s05  00033  -4.201985e+02   2.093574e-04     00s06  00034  -4.201988e+02   9.624011e-04     00s06  00035  -4.201995e+02   4.118984e-03     00s06  00036  -4.202010e+02   8.711949e-03     00s06  00037  -4.202030e+02   2.319953e-02     00s06  00038  -4.202037e+02   3.194040e-03     00s06  00039  -4.202061e+02   1.823796e-03     00s07  00040  -4.202066e+02   6.453386e-04 
    00s07  00041  -4.202066e+02   6.064966e-05     00s07  00042  -4.202067e+02   2.131897e-05     00s07  00043  -4.202067e+02   2.236200e-05     00s07  00044  -4.202067e+02   7.964301e-05     00s08  00045  -4.202068e+02   1.465812e-04     00s08  00046  -4.202070e+02   3.728375e-04     00s08  00047  -4.202073e+02   8.754488e-04     00s08  00048  -4.202078e+02   7.753518e-05     00s08  00049  -4.202085e+02   3.741427e-04     00s08  00050  -4.202090e+02   5.322573e-05     00s09  00051  -4.202092e+02   8.067889e-05     00s09  00052  -4.202092e+02   1.913215e-04     00s09  00053  -4.202093e+02   3.206229e-04     00s09  00054  -4.202093e+02   2.062981e-05     00s09  00055  -4.202093e+02   3.133768e-06 
    00s10  00056  -4.202093e+02   6.761030e-06     00s10  00057  -4.202093e+02   2.176474e-05     00s10  00058  -4.202093e+02   1.347822e-04     00s10  00059  -4.202093e+02   1.273158e-05     00s10  00060  -4.202093e+02   1.152926e-06     00s10  00061  -4.202093e+02   2.023611e-07     00s11  00062  -4.202093e+02   5.849040e-07     00s11  00063  -4.202093e+02   5.849040e-07 
Runtime:     00s11
Optimization status: Converged

Optimization restart 1/1, f = -420.20934426866086
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4']]
prob:  <search.SurrogateProblem object at 0x14a9129ddac0>
0 OK
bestX [array([[0.9811, 0.9346, 0.9954, 0.4157, 0.0455]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9066.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9066
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9066
........................................ [0.001379, 0.001226, 0.001185]
OUTPUT:%f [0.001379, 0.001226, 0.001185] 0.0012055
store_func_eval
problem.constants
None
MLA iteration:  12
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -2.188326e+02           nan     00s00  00001  -2.188326e+02   7.206545e+03     00s00  00002  -2.875182e+02   2.607158e+03 
    00s00  00003  -3.342097e+02   3.975345e+02     00s00  00004  -3.549040e+02   3.642830e+02     00s00  00005  -4.101008e+02   5.659425e+01     00s01  00006  -4.105834e+02   2.474400e+02     00s01  00007  -4.172718e+02   1.341523e+01     00s01  00008  -4.203852e+02   7.756188e+00 
    00s01  00009  -4.215839e+02   4.297357e+00     00s01  00010  -4.221682e+02   7.828404e+00     00s02  00011  -4.226581e+02   1.205857e+00     00s02  00012  -4.229788e+02   1.723872e+00     00s02  00013  -4.235557e+02   1.463034e+00     00s02  00014  -4.240578e+02   1.359595e-01     00s02  00015  -4.241079e+02   1.804144e-01     00s02  00016  -4.241741e+02   7.030553e-02     00s03  00017  -4.242798e+02   1.512803e-01     00s03  00018  -4.244492e+02   2.833575e-01     00s03  00019  -4.244597e+02   5.138034e+00     00s03  00020  -4.245440e+02   3.237993e-01     00s03  00021  -4.247400e+02   3.698637e-01 
    00s03  00022  -4.247972e+02   8.950613e-02     00s04  00023  -4.248091e+02   4.970238e-02     00s04  00024  -4.248118e+02   6.251442e-03     00s04  00025  -4.248122e+02   4.605841e-04     00s04  00026  -4.248123e+02   3.116737e-04     00s04  00027  -4.248130e+02   2.197781e-03     00s04  00028  -4.248139e+02   5.841419e-03     00s05  00029  -4.248153e+02   6.416862e-03     00s05  00030  -4.248179e+02   3.269539e-03 
    00s05  00031  -4.248207e+02   4.953251e-03     00s05  00032  -4.248223e+02   5.149989e-03     00s05  00033  -4.248232e+02   2.808679e-03     00s06  00034  -4.248232e+02   5.502008e-03 
    00s06  00035  -4.248236e+02   2.283436e-04     00s06  00036  -4.248236e+02   3.134144e-05 
    00s06  00037  -4.248236e+02   2.189253e-05     00s06  00038  -4.248236e+02   4.605263e-05     00s06  00039  -4.248237e+02   1.632727e-04     00s07  00040  -4.248237e+02   3.897798e-04     00s07  00041  -4.248239e+02   8.336055e-04     00s07  00042  -4.248242e+02   1.018187e-03     00s07  00043  -4.248242e+02   6.813432e-03     00s07  00044  -4.248245e+02   2.256488e-03     00s07  00045  -4.248249e+02   4.526247e-04     00s08  00046  -4.248254e+02   4.588937e-04     00s08  00047  -4.248255e+02   7.864028e-04     00s08  00048  -4.248257e+02   3.650529e-04     00s08  00049  -4.248258e+02   1.398041e-04     00s08  00050  -4.248258e+02   1.311798e-05     00s09  00051  -4.248258e+02   1.556286e-05     00s09  00052  -4.248258e+02   1.353218e-05     00s09  00053  -4.248258e+02   4.444379e-05     00s09  00054  -4.248259e+02   2.898421e-05     00s09  00055  -4.248259e+02   1.416457e-05 
    00s09  00056  -4.248259e+02   6.992006e-06     00s10  00057  -4.248259e+02   8.427124e-05     00s10  00058  -4.248259e+02   2.848575e-05     00s10  00059  -4.248259e+02   1.476380e-06     00s10  00060  -4.248259e+02   6.915826e-07     00s10  00061  -4.248259e+02   6.915826e-07 
Runtime:     00s10
Optimization status: Converged

Optimization restart 1/1, f = -424.8259166701755
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4']]
prob:  <search.SurrogateProblem object at 0x14a91290c700>
0 OK
bestX [array([[0.599 , 0.986 , 0.7765, 0.852 , 0.007 ]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5088.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5088
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5088
........................................ [0.001304, 0.00121, 0.001177]
OUTPUT:%f [0.001304, 0.00121, 0.001177] 0.0011935000000000001
store_func_eval
problem.constants
None
MLA iteration:  13
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -2.225994e+02           nan     00s00  00001  -2.225994e+02   7.310523e+03     00s00  00002  -2.914334e+02   2.585257e+03 
    00s00  00003  -3.375578e+02   4.142541e+02     00s00  00004  -3.598042e+02   3.826174e+02     00s00  00005  -4.166750e+02   4.069897e+01     00s01  00006  -4.195810e+02   1.058143e+02     00s01  00007  -4.227475e+02   1.010737e+01     00s01  00008  -4.247557e+02   1.759194e+01 
    00s01  00009  -4.260819e+02   3.316700e+00     00s01  00010  -4.269381e+02   1.691561e+00     00s02  00011  -4.272909e+02   1.498468e+00     00s02  00012  -4.286504e+02   3.680919e-01     00s02  00013  -4.284483e+02   3.299395e+00     00s02  00014  -4.287436e+02   1.075979e-01     00s02  00015  -4.287789e+02   1.224288e-01     00s02  00016  -4.289078e+02   3.553331e-01 
    00s03  00017  -4.291244e+02   7.225606e-02     00s03  00018  -4.293591e+02   3.123535e-01     00s03  00019  -4.294263e+02   2.436088e-01     00s03  00020  -4.294646e+02   2.973738e-02     00s03  00021  -4.294701e+02   2.805622e-02     00s04  00022  -4.294723e+02   9.867543e-04     00s04  00023  -4.294725e+02   9.449737e-04 
    00s04  00024  -4.294731e+02   1.682060e-03     00s04  00025  -4.294744e+02   1.556839e-02     00s04  00026  -4.294764e+02   9.354517e-03     00s04  00027  -4.294802e+02   2.278643e-03 
    00s05  00028  -4.294809e+02   1.894166e-04     00s05  00029  -4.294811e+02   1.587591e-04     00s05  00030  -4.294814e+02   8.402236e-04     00s05  00031  -4.294820e+02   2.588010e-03     00s05  00032  -4.294834e+02   6.378218e-03     00s05  00033  -4.294855e+02   5.474023e-03     00s06  00034  -4.294144e+02   1.445937e+00     00s06  00035  -4.294859e+02   1.412925e-02     00s06  00036  -4.294878e+02   4.274639e-03     00s06  00037  -4.294887e+02   1.381483e-04 
    00s06  00038  -4.294887e+02   3.257959e-05     00s07  00039  -4.294887e+02   2.090890e-04     00s07  00040  -4.294887e+02   3.391996e-05     00s07  00041  -4.294887e+02   2.268685e-05     00s07  00042  -4.294888e+02   6.375553e-05     00s07  00043  -4.294888e+02   1.070155e-04     00s07  00044  -4.294888e+02   1.757740e-04     00s08  00045  -4.294890e+02   3.125968e-04     00s08  00046  -4.294892e+02   2.922278e-04     00s08  00047  -4.294895e+02   2.845117e-03     00s08  00048  -4.294900e+02   8.498102e-04     00s08  00049  -4.294907e+02   4.072268e-04     00s08  00050  -4.294910e+02   5.221838e-04     00s09  00051  -4.294892e+02   2.809433e-02     00s09  00052  -4.294911e+02   7.060675e-04     00s09  00053  -4.294913e+02   7.295044e-05     00s09  00054  -4.294914e+02   1.848023e-05     00s09  00055  -4.294915e+02   4.264782e-05     00s10  00056  -4.294907e+02   6.188881e-03     00s10  00057  -4.294915e+02   5.449242e-05     00s10  00058  -4.294916e+02   1.453225e-05 
    00s10  00059  -4.294916e+02   3.161218e-07     00s10  00060  -4.294916e+02   9.559334e-06     00s10  00061  -4.294916e+02   2.741253e-05     00s11  00062  -4.294916e+02   1.854379e-07 
    00s11  00063  -4.294916e+02   5.091535e-08     00s11  00064  -4.294916e+02   5.091535e-08 
Runtime:     00s11
Optimization status: Converged

Optimization restart 1/1, f = -429.4915769685797
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4']]
prob:  <search.SurrogateProblem object at 0x14a91293e5b0>
0 OK
bestX [array([[0.7798, 0.5551, 0.8963, 0.7998, 0.0371]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4624.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4624
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4624
........................................ [0.001405, 0.001219, 0.001184]
OUTPUT:%f [0.001405, 0.001219, 0.001184] 0.0012014999999999999
store_func_eval
problem.constants
None
MLA iteration:  14
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -2.270679e+02           nan     00s00  00001  -2.270679e+02   7.403497e+03     00s00  00002  -2.962709e+02   2.606744e+03     00s00  00003  -3.422857e+02   4.115065e+02     00s00  00004  -3.639961e+02   3.782032e+02     00s00  00005  -4.207606e+02   4.527407e+01     00s01  00006  -4.231805e+02   1.392055e+02     00s01  00007  -4.272209e+02   1.126754e+01 
    00s01  00008  -4.295979e+02   1.558022e+01     00s01  00009  -4.308720e+02   3.300790e+00     00s01  00010  -4.317633e+02   2.043447e+00     00s02  00011  -4.321213e+02   1.397420e+00     00s02  00012  -4.334231e+02   3.133550e-01     00s02  00013  -4.334242e+02   1.115111e+00     00s02  00014  -4.334851e+02   1.394095e-01     00s02  00015  -4.335377e+02   1.672937e-01     00s02  00016  -4.336583e+02   3.954933e-01     00s03  00017  -4.338218e+02   4.497887e-01     00s03  00018  -4.340518e+02   3.108350e-01     00s03  00019  -4.341589e+02   2.403748e-01 
    00s03  00020  -4.342407e+02   1.370490e-02     00s03  00021  -4.342489e+02   1.353942e-02     00s04  00022  -4.342508e+02   5.624151e-03     00s04  00023  -4.342511e+02   1.259691e-03 
    00s04  00024  -4.342515e+02   4.188405e-04     00s04  00025  -4.342525e+02   4.388092e-03     00s04  00026  -4.342544e+02   1.603166e-02     00s04  00027  -4.342569e+02   1.938615e-02     00s05  00028  -4.342595e+02   4.926167e-03     00s05  00029  -4.342613e+02   1.413268e-03     00s05  00030  -4.342628e+02   1.056797e-02     00s05  00031  -4.342640e+02   1.629372e-02     00s05  00032  -4.342663e+02   2.914145e-02     00s06  00033  -4.342677e+02   1.990505e-02     00s06  00034  -4.342693e+02   4.707303e-03     00s06  00035  -4.342698e+02   4.570045e-04     00s06  00036  -4.342699e+02   1.561886e-04     00s06  00037  -4.342700e+02   1.513693e-04 
    00s06  00038  -4.342700e+02   5.862902e-05     00s07  00039  -4.342700e+02   3.309966e-05     00s07  00040  -4.342701e+02   2.444977e-04     00s07  00041  -4.342702e+02   6.933171e-04     00s07  00042  -4.342705e+02   2.090156e-03     00s07  00043  -4.342710e+02   3.783195e-03     00s07  00044  -4.342717e+02   3.401953e-03     00s08  00045  -4.342610e+02   1.650337e-01     00s08  00046  -4.342718e+02   4.382760e-03     00s08  00047  -4.342724e+02   8.382981e-04     00s08  00048  -4.342726e+02   5.024751e-05     00s08  00049  -4.342726e+02   8.373191e-05     00s09  00050  -4.342727e+02   4.023714e-04     00s09  00051  -4.342727e+02   5.758397e-04     00s09  00052  -4.342729e+02   1.080790e-04     00s09  00053  -4.342730e+02   4.199900e-05     00s09  00054  -4.342730e+02   2.569571e-05     00s09  00055  -4.342731e+02   1.512136e-05     00s10  00056  -4.342731e+02   7.319779e-05     00s10  00057  -4.342731e+02   1.647774e-04 
    00s10  00058  -4.342732e+02   1.698075e-06     00s10  00059  -4.342732e+02   1.904549e-06     00s10  00060  -4.342732e+02   3.534213e-06     00s11  00061  -4.342732e+02   2.901200e-06     00s11  00062  -4.342732e+02   1.704402e-07     00s11  00063  -4.342732e+02   9.276422e-08 
    00s11  00064  -4.342732e+02   9.276422e-08 
Runtime:     00s11
Optimization status: Converged

Optimization restart 1/1, f = -434.27316080702815
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4']]
prob:  <search.SurrogateProblem object at 0x14a912906c10>
0 OK
bestX [array([[0.8516, 0.5339, 0.7979, 0.9672, 0.0353]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6741.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6741
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6741
........................................ [0.00133, 0.001179, 0.00118]
OUTPUT:%f [0.00133, 0.001179, 0.00118] 0.0011795
store_func_eval
problem.constants
None
MLA iteration:  15
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -2.309405e+02           nan     00s00  00001  -2.309405e+02   7.531277e+03     00s00  00002  -3.007302e+02   2.651660e+03     00s00  00003  -3.467654e+02   4.145151e+02     00s00  00004  -3.681882e+02   3.775536e+02     00s00  00005  -4.248634e+02   5.109160e+01     00s01  00006  -4.265905e+02   1.823389e+02 
    00s01  00007  -4.317245e+02   1.221724e+01     00s01  00008  -4.345419e+02   1.080838e+01     00s01  00009  -4.357365e+02   3.530437e+00     00s01  00010  -4.364814e+02   3.565121e+00     00s02  00011  -4.369638e+02   1.129625e+00     00s02  00012  -4.373570e+02   5.554609e-01     00s02  00013  -4.379045e+02   5.391953e-01     00s02  00014  -4.381858e+02   7.947732e-01     00s02  00015  -4.382626e+02   1.162851e-01     00s03  00016  -4.383097e+02   7.099525e-02     00s03  00017  -4.384009e+02   1.072184e-01     00s03  00018  -4.385151e+02   4.075034e-01     00s03  00019  -4.387375e+02   2.091462e-01 
    00s03  00020  -4.388086e+02   1.830080e+00     00s03  00021  -4.389423e+02   4.866604e-02     00s04  00022  -4.389628e+02   8.887254e-03     00s04  00023  -4.389714e+02   1.339041e-02     00s04  00024  -4.389799e+02   7.825368e-03     00s04  00025  -4.389860e+02   2.050786e-02     00s04  00026  -4.389908e+02   1.976303e-02 
    00s04  00027  -4.389978e+02   1.393491e-02     00s05  00028  -4.389892e+02   6.222440e-02 
    00s05  00029  -4.389989e+02   2.347003e-03     00s05  00030  -4.389998e+02   3.484674e-04     00s05  00031  -4.390001e+02   3.441421e-04 
    00s05  00032  -4.390004e+02   4.390897e-04     00s06  00033  -4.390009e+02   9.643754e-04     00s06  00034  -4.390018e+02   6.289418e-03     00s06  00035  -4.390027e+02   1.075512e-03     00s06  00036  -4.390035e+02   3.955703e-04     00s06  00037  -4.390035e+02   1.161063e-03     00s06  00038  -4.390036e+02   1.744909e-05     00s07  00039  -4.390036e+02   8.322363e-06     00s07  00040  -4.390036e+02   3.345738e-05     00s07  00041  -4.390036e+02   1.301181e-04     00s07  00042  -4.390037e+02   4.807080e-04     00s07  00043  -4.390038e+02   1.283243e-03     00s08  00044  -4.390040e+02   2.683755e-03     00s08  00045  -4.390044e+02   3.487449e-03     00s08  00046  -4.390049e+02   3.249572e-03     00s08  00047  -4.390039e+02   1.588134e-02     00s08  00048  -4.390052e+02   9.336752e-04     00s08  00049  -4.390054e+02   1.828787e-04 
    00s09  00050  -4.390055e+02   8.551507e-05     00s09  00051  -4.390055e+02   9.818661e-05     00s09  00052  -4.390055e+02   3.447488e-04     00s09  00053  -4.390055e+02   1.328605e-04     00s09  00054  -4.390055e+02   2.057545e-06     00s10  00055  -4.390055e+02   2.290067e-06     00s10  00056  -4.390056e+02   3.481127e-05     00s10  00057  -4.390056e+02   5.622610e-06     00s10  00058  -4.390056e+02   1.606038e-06     00s10  00059  -4.390056e+02   7.744311e-07     00s10  00060  -4.390056e+02   3.272342e-05     00s11  00061  -4.390056e+02   3.272342e-05 
Runtime:     00s11
Optimization status: Converged

Optimization restart 1/1, f = -439.0055735797205
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4']]
prob:  <search.SurrogateProblem object at 0x14a912960eb0>
0 OK
bestX [array([[0.9755, 0.5128, 0.8259, 0.9134, 0.0868]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1916.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1916
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1916
........................................ [0.001331, 0.001186, 0.001179]
OUTPUT:%f [0.001331, 0.001186, 0.001179] 0.0011825
store_func_eval
problem.constants
None
MLA iteration:  16
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -2.345172e+02           nan     00s00  00001  -2.345172e+02   7.657498e+03     00s00  00002  -3.049304e+02   2.708515e+03     00s00  00003  -3.515104e+02   4.125397e+02 
    00s00  00004  -3.723583e+02   3.686565e+02     00s00  00005  -4.285688e+02   6.179452e+01     00s01  00006  -4.274010e+02   3.241066e+02     00s01  00007  -4.375556e+02   7.258206e+00     00s01  00008  -4.394344e+02   5.606463e+00     00s01  00009  -4.411166e+02   1.727541e+00     00s01  00010  -4.415639e+02   1.524906e+00     00s02  00011  -4.418587e+02   2.435126e+01     00s02  00012  -4.423331e+02   4.878608e-01 
    00s02  00013  -4.429794e+02   9.423039e-01     00s02  00014  -4.430581e+02   1.490973e+00     00s02  00015  -4.431605e+02   7.860905e-02     00s02  00016  -4.431909e+02   2.373608e-01     00s03  00017  -4.432817e+02   3.406723e-01     00s03  00018  -4.435433e+02   3.634688e-01     00s03  00019  -4.436494e+02   4.955026e-01     00s03  00020  -4.437203e+02   1.212183e+00     00s03  00021  -4.437493e+02   1.249975e-01     00s04  00022  -4.437436e+02   7.241320e-01     00s04  00023  -4.437760e+02   1.968001e-02 
    00s04  00024  -4.437809e+02   5.004749e-03     00s04  00025  -4.437815e+02   2.371811e-04     00s04  00026  -4.437815e+02   4.255411e-05     00s04  00027  -4.437815e+02   6.339875e-05     00s05  00028  -4.437816e+02   1.017300e-04     00s05  00029  -4.437817e+02   3.586382e-04     00s05  00030  -4.437818e+02   1.197445e-03 
    00s05  00031  -4.437821e+02   3.561588e-04     00s05  00032  -4.437822e+02   1.197214e-04     00s06  00033  -4.437823e+02   7.898612e-05     00s06  00034  -4.437824e+02   1.692225e-04     00s06  00035  -4.437826e+02   6.746147e-04     00s06  00036  -4.437829e+02   2.042902e-03     00s06  00037  -4.437836e+02   3.990686e-03     00s06  00038  -4.437845e+02   3.778099e-03     00s07  00039  -4.437854e+02   1.550617e-03     00s07  00040  -4.437859e+02   1.097811e-03     00s07  00041  -4.437860e+02   9.539674e-05 
    00s07  00042  -4.437861e+02   2.040477e-05     00s07  00043  -4.437861e+02   2.863107e-05     00s08  00044  -4.437861e+02   2.562650e-05     00s08  00045  -4.437855e+02   3.644573e-03     00s08  00046  -4.437861e+02   1.103151e-04     00s08  00047  -4.437862e+02   2.367721e-05 
    00s08  00048  -4.437862e+02   5.433697e-06     00s08  00049  -4.437862e+02   1.317360e-05     00s09  00050  -4.437862e+02   3.896464e-05     00s09  00051  -4.437863e+02   2.619320e-04     00s09  00052  -4.437863e+02   1.310482e-04     00s09  00053  -4.437864e+02   7.771707e-06     00s09  00054  -4.437864e+02   6.288883e-05     00s10  00055  -4.437864e+02   6.798218e-06 
    00s10  00056  -4.437864e+02   2.437159e-07     00s10  00057  -4.437864e+02   7.431342e-09     00s10  00058  -4.437864e+02   7.431342e-09 
Runtime:     00s10
Optimization status: Converged

Optimization restart 1/1, f = -443.78639815536593
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4']]
prob:  <search.SurrogateProblem object at 0x14a91296ecd0>
0 OK
bestX [array([[0.7544, 0.6578, 0.9291, 0.9027, 0.0264]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8282.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8282
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8282
........................................ [0.001326, 0.001193, 0.001184]
OUTPUT:%f [0.001326, 0.001193, 0.001184] 0.0011884999999999999
store_func_eval
problem.constants
None
MLA iteration:  17
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -2.390924e+02           nan     00s00  00001  -2.390924e+02   7.685702e+03     00s00  00002  -3.095584e+02   2.708165e+03     00s00  00003  -3.561266e+02   4.146818e+02 
    00s00  00004  -3.769068e+02   3.615519e+02     00s00  00005  -4.330549e+02   6.668054e+01     00s01  00006  -4.300119e+02   4.152861e+02     00s01  00007  -4.421452e+02   7.701779e+00     00s01  00008  -4.441432e+02   5.169252e+00     00s01  00009  -4.459228e+02   1.758124e+00     00s01  00010  -4.463737e+02   1.511242e+00     00s02  00011  -4.466940e+02   1.784071e+01     00s02  00012  -4.471674e+02   4.020319e-01 
    00s02  00013  -4.475930e+02   9.027294e-01     00s02  00014  -4.477298e+02   5.829370e-01     00s02  00015  -4.477893e+02   1.081559e-01     00s03  00016  -4.478616e+02   2.342541e-01     00s03  00017  -4.479919e+02   7.251161e-01     00s03  00018  -4.481616e+02   7.016351e-01     00s03  00019  -4.482747e+02   1.010282e+00     00s03  00020  -4.483888e+02   7.412369e-01     00s03  00021  -4.484856e+02   1.383262e-01     00s04  00022  -4.485035e+02   3.392920e-01     00s04  00023  -4.485148e+02   2.572472e-02     00s04  00024  -4.485306e+02   7.746788e-02     00s04  00025  -4.485437e+02   2.191354e-02     00s04  00026  -4.485490e+02   6.012999e-03     00s05  00027  -4.485513e+02   1.710888e-03 
    00s05  00028  -4.485560e+02   1.292921e-02     00s05  00029  -4.485614e+02   1.793840e-02     00s05  00030  -4.485433e+02   2.513007e-01     00s05  00031  -4.485619e+02   2.759643e-02     00s05  00032  -4.485641e+02   5.288560e-03     00s06  00033  -4.485646e+02   7.631973e-05 
    00s06  00034  -4.485646e+02   4.712701e-05     00s06  00035  -4.485646e+02   6.826768e-05     00s06  00036  -4.485649e+02   4.427566e-04     00s06  00037  -4.485653e+02   1.504998e-03     00s07  00038  -4.485660e+02   2.754335e-03     00s07  00039  -4.485664e+02   1.262148e-02     00s07  00040  -4.485674e+02   1.916617e-03     00s07  00041  -4.485677e+02   1.798164e-04     00s07  00042  -4.485678e+02   2.775010e-05     00s07  00043  -4.485678e+02   8.697659e-06     00s08  00044  -4.485678e+02   5.144771e-05     00s08  00045  -4.485678e+02   1.827364e-04     00s08  00046  -4.485679e+02   6.564344e-04     00s08  00047  -4.485680e+02   1.619730e-03     00s08  00048  -4.485683e+02   2.932146e-03     00s09  00049  -4.485688e+02   3.103348e-03     00s09  00050  -4.485618e+02   8.938649e-02     00s09  00051  -4.485688e+02   2.297725e-03     00s09  00052  -4.485693e+02   8.295318e-04     00s09  00053  -4.485694e+02   5.418065e-04     00s10  00054  -4.485695e+02   5.136698e-05     00s10  00055  -4.485695e+02   5.753018e-05     00s10  00056  -4.485695e+02   5.914008e-05 
    00s10  00057  -4.485695e+02   4.250067e-06     00s10  00058  -4.485696e+02   1.018511e-05     00s10  00059  -4.485696e+02   9.120283e-06     00s11  00060  -4.485696e+02   1.723333e-05     00s11  00061  -4.485696e+02   1.842242e-06 
    00s11  00062  -4.485696e+02   2.011533e-07     00s11  00063  -4.485696e+02   2.011533e-07 
Runtime:     00s11
Optimization status: Converged

Optimization restart 1/1, f = -448.5695987450916
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4']]
prob:  <search.SurrogateProblem object at 0x14a9128c2640>
0 OK
bestX [array([[0.9597, 0.6743, 0.9206, 0.4979, 0.05  ]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7335.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7335
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7335
........................................ [0.001433, 0.001293, 0.001253]
OUTPUT:%f [0.001433, 0.001293, 0.001253] 0.001273
store_func_eval
problem.constants
None
MLA iteration:  18
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -2.424309e+02           nan     00s00  00001  -2.424309e+02   7.829989e+03     00s00  00002  -3.135183e+02   2.747534e+03     00s00  00003  -3.601057e+02   4.328203e+02 
    00s00  00004  -3.819647e+02   3.719323e+02     00s01  00005  -4.386989e+02   5.791234e+01     00s01  00006  -4.391718e+02   2.361929e+02     00s01  00007  -4.455537e+02   1.139846e+01     00s01  00008  -4.485390e+02   5.605403e+00     00s01  00009  -4.501343e+02   9.537871e+00     00s01  00010  -4.509888e+02   2.226757e+00     00s02  00011  -4.513058e+02   1.356268e+00     00s02  00012  -4.518348e+02   1.079167e+00 
    00s02  00013  -4.522956e+02   3.105421e-01     00s02  00014  -4.521503e+02   4.233474e+00     00s02  00015  -4.525708e+02   2.282539e-01     00s03  00016  -4.526349e+02   2.761700e-01     00s03  00017  -4.527433e+02   7.340254e-02     00s03  00018  -4.528788e+02   2.557845e-01     00s03  00019  -4.529911e+02   2.673309e-01     00s03  00020  -4.531428e+02   2.513391e-01     00s03  00021  -4.532729e+02   6.106175e-01     00s04  00022  -4.533353e+02   1.805724e-01     00s04  00023  -4.533464e+02   3.721917e-03 
    00s04  00024  -4.533468e+02   3.563042e-03     00s04  00025  -4.533471e+02   2.003987e-04     00s04  00026  -4.533471e+02   8.881678e-05     00s05  00027  -4.533472e+02   1.925126e-04     00s05  00028  -4.533474e+02   6.602594e-04     00s05  00029  -4.533478e+02   1.163913e-03 
    00s05  00030  -4.533481e+02   6.105335e-04     00s05  00031  -4.533484e+02   7.584236e-05     00s05  00032  -4.533485e+02   5.295262e-04     00s06  00033  -4.533486e+02   1.231512e-03     00s06  00034  -4.533491e+02   3.186419e-03     00s06  00035  -4.533494e+02   5.340001e-03     00s06  00036  -4.533499e+02   2.292936e-03     00s06  00037  -4.533502e+02   3.585098e-04     00s07  00038  -4.533502e+02   1.003020e-05     00s07  00039  -4.533502e+02   8.695377e-06 
    00s07  00040  -4.533502e+02   2.003385e-05     00s07  00041  -4.533502e+02   3.301502e-05     00s07  00042  -4.533502e+02   5.431861e-05     00s08  00043  -4.533503e+02   1.305187e-04     00s08  00044  -4.533504e+02   2.226596e-04     00s08  00045  -4.533504e+02   6.919346e-04     00s08  00046  -4.533505e+02   1.921666e-04 
    00s08  00047  -4.533506e+02   9.331311e-06     00s08  00048  -4.533506e+02   1.688292e-05     00s09  00049  -4.533507e+02   6.392446e-04     00s09  00050  -4.533507e+02   4.386360e-04     00s09  00051  -4.533511e+02   2.407901e-04     00s09  00052  -4.533514e+02   5.647164e-04     00s09  00053  -4.533517e+02   2.050154e-03     00s10  00054  -4.533519e+02   1.808348e-04     00s10  00055  -4.533520e+02   1.003400e-05     00s10  00056  -4.533520e+02   5.966646e-06     00s10  00057  -4.533520e+02   2.009570e-05     00s10  00058  -4.533513e+02   8.239462e-03     00s10  00059  -4.533520e+02   4.480657e-05     00s11  00060  -4.533520e+02   1.332672e-05     00s11  00061  -4.533520e+02   1.063496e-06     00s11  00062  -4.533520e+02   1.580286e-05     00s11  00063  -4.533520e+02   1.835803e-06 
    00s11  00064  -4.533521e+02   4.460381e-07     00s12  00065  -4.533521e+02   1.173450e-06     00s12  00066  -4.533521e+02   7.119012e-06     00s12  00067  -4.533521e+02   7.119012e-06 
Runtime:     00s12
Optimization status: Converged

Optimization restart 1/1, f = -453.3520522865914
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4']]
prob:  <search.SurrogateProblem object at 0x14a9127f5df0>
0 OK
bestX [array([[0.5074, 0.9315, 0.9107, 0.6003, 0.0572]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/587.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/587
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/587
........................................ [0.001362, 0.001224, 0.001192]
OUTPUT:%f [0.001362, 0.001224, 0.001192] 0.0012079999999999999
store_func_eval
problem.constants
None
MLA iteration:  19
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -2.458151e+02           nan     00s00  00001  -2.458151e+02   7.987520e+03     00s00  00002  -3.176328e+02   2.804036e+03     00s00  00003  -3.645579e+02   4.379224e+02 
    00s00  00004  -3.864849e+02   3.782468e+02     00s01  00005  -4.433307e+02   5.535668e+01     00s01  00006  -4.446627e+02   1.850545e+02     00s01  00007  -4.500401e+02   9.482797e+00     00s01  00008  -4.526822e+02   5.522330e+00     00s01  00009  -4.543851e+02   1.072709e+01     00s01  00010  -4.551870e+02   2.050862e+00     00s02  00011  -4.555374e+02   1.297123e+00 
    00s02  00012  -4.558600e+02   1.426785e+00     00s02  00013  -4.563557e+02   3.808285e-01     00s02  00014  -4.567337e+02   1.316570e+00     00s02  00015  -4.569177e+02   2.706659e-01     00s03  00016  -4.569644e+02   2.954365e-01     00s03  00017  -4.569853e+02   1.162185e-01     00s03  00018  -4.570645e+02   8.890854e-02     00s03  00019  -4.572155e+02   4.220038e-01     00s03  00020  -4.573727e+02   3.817284e-01     00s04  00021  -4.575755e+02   2.459377e-01     00s04  00022  -4.576194e+02   1.934876e+00     00s04  00023  -4.577362e+02   3.545419e-02 
    00s04  00024  -4.577416e+02   1.105617e-02     00s04  00025  -4.577431e+02   7.585173e-05     00s04  00026  -4.577431e+02   2.432096e-05     00s05  00027  -4.577431e+02   1.985371e-05     00s05  00028  -4.577432e+02   7.967885e-05 
    00s05  00029  -4.577434e+02   1.683869e-04     00s05  00030  -4.577435e+02   1.701487e-04     00s05  00031  -4.577436e+02   1.827924e-05 
    00s06  00032  -4.577436e+02   3.080022e-05     00s06  00033  -4.577438e+02   1.700798e-04     00s06  00034  -4.577439e+02   9.755154e-05     00s06  00035  -4.577437e+02   2.693655e-03     00s06  00036  -4.577439e+02   9.295729e-05 
    00s06  00037  -4.577439e+02   7.240758e-06     00s07  00038  -4.577439e+02   3.574068e-05     00s07  00039  -4.577439e+02   1.197339e-05     00s07  00040  -4.577439e+02   4.431832e-06     00s07  00041  -4.577439e+02   1.164999e-05     00s07  00042  -4.577439e+02   7.058365e-05     00s08  00043  -4.577440e+02   2.597763e-04     00s08  00044  -4.577441e+02   5.786403e-04     00s08  00045  -4.577443e+02   6.891466e-04     00s08  00046  -4.577438e+02   2.297283e-03     00s08  00047  -4.577444e+02   8.960852e-04     00s08  00048  -4.577446e+02   5.531691e-04     00s09  00049  -4.577447e+02   3.193866e-04     00s09  00050  -4.577447e+02   1.245904e-04     00s09  00051  -4.577447e+02   8.500433e-05     00s09  00052  -4.577448e+02   4.563717e-05     00s09  00053  -4.577448e+02   4.073685e-05     00s10  00054  -4.577448e+02   6.809284e-05     00s10  00055  -4.577448e+02   1.699321e-05     00s10  00056  -4.577448e+02   1.221426e-05     00s10  00057  -4.577448e+02   9.320774e-06     00s10  00058  -4.577448e+02   5.889448e-06     00s11  00059  -4.577449e+02   2.028284e-05     00s11  00060  -4.577449e+02   2.273908e-06 
    00s11  00061  -4.577449e+02   3.337505e-08     00s11  00062  -4.577449e+02   5.472907e-07     00s11  00063  -4.577449e+02   4.413744e-05     00s11  00064  -4.577449e+02   1.896012e-06     00s12  00065  -4.577449e+02   1.896012e-06 
Runtime:     00s12
Optimization status: Converged

Optimization restart 1/1, f = -457.7448597805776
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4']]
prob:  <search.SurrogateProblem object at 0x14a9128918b0>
0 OK
bestX [array([[0.5149, 0.9301, 0.8807, 0.5739, 0.0494]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4058.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4058
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4058
........................................ [0.001354, 0.001237, 0.001193]
OUTPUT:%f [0.001354, 0.001237, 0.001193] 0.001215
store_func_eval
problem.constants
None
MLA iteration:  20
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -2.504778e+02           nan     00s00  00001  -2.504778e+02   8.032419e+03     00s00  00002  -3.224461e+02   2.816577e+03     00s00  00003  -3.692762e+02   4.352797e+02     00s00  00004  -3.908343e+02   3.768927e+02     00s01  00005  -4.475469e+02   5.909904e+01 
    00s01  00006  -4.476909e+02   2.270888e+02     00s01  00007  -4.543561e+02   9.136840e+00     00s01  00008  -4.568026e+02   5.757439e+00     00s01  00009  -4.584955e+02   1.612111e+01     00s01  00010  -4.594561e+02   1.480823e+00     00s02  00011  -4.598159e+02   1.544712e+00     00s02  00012  -4.584079e+02   4.587575e+00     00s02  00013  -4.600359e+02   9.459547e-01     00s02  00014  -4.603699e+02   6.127083e-01     00s02  00015  -4.610279e+02   8.845462e-01     00s03  00016  -4.612879e+02   9.317336e-01     00s03  00017  -4.614006e+02   1.797039e-01 
    00s03  00018  -4.614734e+02   1.001948e-01     00s03  00019  -4.615504e+02   2.577427e-01     00s03  00020  -4.616909e+02   4.817233e-01     00s04  00021  -4.620377e+02   3.435345e-01     00s04  00022  -4.619256e+02   6.425356e+00     00s04  00023  -4.621464e+02   2.713599e-01     00s04  00024  -4.622706e+02   5.075882e-02     00s04  00025  -4.622778e+02   1.521778e-01 
    00s04  00026  -4.622863e+02   3.979175e-03     00s05  00027  -4.622869e+02   2.568301e-04     00s05  00028  -4.622870e+02   1.445985e-04 
    00s05  00029  -4.622871e+02   2.092094e-04     00s05  00030  -4.622879e+02   1.054852e-03     00s05  00031  -4.622887e+02   1.284111e-03     00s06  00032  -4.622894e+02   7.977882e-03     00s06  00033  -4.622903e+02   1.341737e-03     00s06  00034  -4.622907e+02   5.557084e-04     00s06  00035  -4.622910e+02   8.628173e-04     00s06  00036  -4.622914e+02   8.130980e-04     00s07  00037  -4.622859e+02   1.014891e-01     00s07  00038  -4.622914e+02   4.251660e-04     00s07  00039  -4.622915e+02   1.392758e-04     00s07  00040  -4.622916e+02   1.965119e-05 
    00s07  00041  -4.622916e+02   6.616231e-05     00s08  00042  -4.622916e+02   7.862191e-06     00s08  00043  -4.622916e+02   1.296539e-06     00s08  00044  -4.622916e+02   1.103179e-06 
    00s08  00045  -4.622916e+02   4.043969e-07     00s08  00046  -4.622916e+02   4.043969e-07 
Runtime:     00s08
Optimization status: Converged

Optimization restart 1/1, f = -462.2915892106229
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4']]
prob:  <search.SurrogateProblem object at 0x14a912db1670>
0 OK
bestX [array([[0.5866, 0.8828, 0.5821, 0.8903, 0.0525]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6184.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6184
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6184
........................................ [0.001333, 0.001211, 0.001174]
OUTPUT:%f [0.001333, 0.001211, 0.001174] 0.0011925
store_func_eval
problem.constants
None
MLA iteration:  21
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -2.551124e+02           nan     00s00  00001  -2.551124e+02   8.099225e+03     00s00  00002  -3.270933e+02   2.778652e+03     00s00  00003  -3.722989e+02   4.367288e+02 
    00s00  00004  -3.939604e+02   3.967839e+02     00s01  00005  -4.518198e+02   5.784625e+01     00s01  00006  -4.528405e+02   2.065204e+02     00s01  00007  -4.589152e+02   1.039850e+01     00s01  00008  -4.616713e+02   5.856836e+00     00s01  00009  -4.634010e+02   9.228489e+00     00s01  00010  -4.642304e+02   2.776201e+00     00s02  00011  -4.645833e+02   1.161641e+00     00s02  00012  -4.648999e+02   7.327963e-01 
    00s02  00013  -4.654810e+02   9.562943e-01     00s02  00014  -4.660501e+02   3.023302e-01     00s02  00015  -4.661192e+02   1.443360e-01     00s03  00016  -4.661618e+02   2.833434e-01     00s03  00017  -4.662617e+02   3.458313e-01     00s03  00018  -4.664084e+02   4.620357e-01     00s03  00019  -4.666776e+02   2.530096e-01 
    00s03  00020  -4.668468e+02   3.487888e-02     00s04  00021  -4.668876e+02   5.623584e-02     00s04  00022  -4.668876e+02   1.422794e-01     00s04  00023  -4.668939e+02   1.053769e-02 
    00s04  00024  -4.668952e+02   2.051356e-03     00s04  00025  -4.668954e+02   3.131370e-04     00s04  00026  -4.668955e+02   5.993483e-05     00s05  00027  -4.668955e+02   3.963830e-05     00s05  00028  -4.668956e+02   2.701303e-04     00s05  00029  -4.668957e+02   8.707350e-04     00s05  00030  -4.668960e+02   1.298959e-03     00s05  00031  -4.668962e+02   5.793076e-04     00s06  00032  -4.668964e+02   3.308068e-05 
    00s06  00033  -4.668964e+02   2.215499e-04     00s06  00034  -4.668965e+02   6.945363e-04     00s06  00035  -4.668966e+02   1.896563e-03     00s06  00036  -4.668969e+02   3.974449e-03     00s07  00037  -4.668975e+02   6.376102e-03     00s07  00038  -4.668972e+02   2.842867e-02     00s07  00039  -4.668979e+02   8.631389e-03     00s07  00040  -4.668988e+02   3.530991e-03     00s07  00041  -4.668994e+02   2.976924e-04     00s08  00042  -4.668995e+02   1.190742e-05 
    00s08  00043  -4.668995e+02   2.728084e-05     00s08  00044  -4.668995e+02   1.585868e-05     00s08  00045  -4.668996e+02   1.126867e-05     00s08  00046  -4.668996e+02   1.572806e-05     00s08  00047  -4.668996e+02   7.326433e-05     00s09  00048  -4.668996e+02   1.594870e-04     00s09  00049  -4.668996e+02   9.958094e-05     00s09  00050  -4.668996e+02   6.132372e-05     00s09  00051  -4.668997e+02   1.773489e-05     00s09  00052  -4.668997e+02   4.496189e-05     00s10  00053  -4.668997e+02   9.233764e-05     00s10  00054  -4.668997e+02   1.442045e-04     00s10  00055  -4.668997e+02   1.500526e-04     00s10  00056  -4.668997e+02   4.169087e-04     00s10  00057  -4.668998e+02   4.636630e-05     00s11  00058  -4.668998e+02   1.395808e-05     00s11  00059  -4.668998e+02   3.056602e-05     00s11  00060  -4.668998e+02   2.754933e-05     00s11  00061  -4.668998e+02   8.881516e-04     00s11  00062  -4.668998e+02   6.777761e-05     00s11  00063  -4.668998e+02   3.407501e-05     00s12  00064  -4.668998e+02   1.574936e-05 
    00s12  00065  -4.668998e+02   9.036177e-07     00s12  00066  -4.668998e+02   2.885027e-07     00s12  00067  -4.668998e+02   2.885027e-07 
Runtime:     00s12
Optimization status: Converged

Optimization restart 1/1, f = -466.89983554027356
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4']]
prob:  <search.SurrogateProblem object at 0x14a912a44160>
0 OK
bestX [array([[0.7194, 0.7029, 0.7447, 0.8024, 0.0661]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4317.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4317
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4317
........................................ [0.001342, 0.001228, 0.001178]
OUTPUT:%f [0.001342, 0.001228, 0.001178] 0.001203
store_func_eval
problem.constants
None
MLA iteration:  22
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -2.597804e+02           nan     00s00  00001  -2.597804e+02   8.198862e+03     00s00  00002  -3.320020e+02   2.780359e+03     00s00  00003  -3.767470e+02   4.345034e+02     00s00  00004  -3.981036e+02   3.978636e+02     00s01  00005  -4.561387e+02   6.048717e+01 
    00s01  00006  -4.564276e+02   2.455243e+02     00s01  00007  -4.634575e+02   1.154107e+01     00s01  00008  -4.663858e+02   6.060125e+00     00s01  00009  -4.680686e+02   8.781826e+00     00s01  00010  -4.689487e+02   3.415867e+00     00s02  00011  -4.693548e+02   1.150962e+00     00s02  00012  -4.696402e+02   8.395663e-01     00s02  00013  -4.704202e+02   1.343466e+00     00s02  00014  -4.706818e+02   1.249068e+00     00s02  00015  -4.707589e+02   6.322208e-01     00s03  00016  -4.677084e+02   1.912329e+01     00s03  00017  -4.708259e+02   3.246738e-01 
    00s03  00018  -4.708862e+02   2.070848e-01     00s03  00019  -4.709223e+02   1.779718e-01     00s03  00020  -4.710923e+02   2.237270e-01     00s04  00021  -4.713291e+02   2.393452e-01     00s04  00022  -4.714399e+02   3.149984e+00     00s04  00023  -4.714921e+02   3.189304e-01     00s04  00024  -4.714847e+02   3.708144e+00     00s04  00025  -4.715853e+02   2.991350e-01     00s05  00026  -4.716273e+02   2.859930e-02 
    00s05  00027  -4.716333e+02   5.216058e-03     00s05  00028  -4.716338e+02   2.124068e-04     00s05  00029  -4.716338e+02   1.278061e-04 
    00s05  00030  -4.716339e+02   3.016017e-04     00s05  00031  -4.716341e+02   1.036879e-03     00s06  00032  -4.716345e+02   2.332490e-03     00s06  00033  -4.716350e+02   2.133020e-03     00s06  00034  -4.716352e+02   1.573673e-03     00s06  00035  -4.716355e+02   1.182262e-04     00s06  00036  -4.716357e+02   2.228000e-04     00s07  00037  -4.716358e+02   1.179025e-03     00s07  00038  -4.716361e+02   2.566377e-03     00s07  00039  -4.716365e+02   6.898673e-03     00s07  00040  -4.716372e+02   3.264384e-03     00s07  00041  -4.716383e+02   1.288700e-03     00s08  00042  -4.716388e+02   9.668933e-04     00s08  00043  -4.716390e+02   1.837209e-04     00s08  00044  -4.716391e+02   1.698510e-04     00s08  00045  -4.716391e+02   4.048888e-05 
    00s08  00046  -4.716391e+02   2.326542e-05     00s08  00047  -4.716391e+02   2.879599e-05     00s09  00048  -4.716392e+02   6.844370e-05     00s09  00049  -4.716392e+02   1.997001e-04     00s09  00050  -4.716394e+02   3.072013e-04     00s09  00051  -4.716389e+02   1.318128e-02     00s09  00052  -4.716395e+02   1.333723e-03     00s10  00053  -4.716397e+02   4.687728e-04     00s10  00054  -4.716399e+02   3.609431e-05     00s10  00055  -4.716400e+02   1.208296e-04     00s10  00056  -4.716401e+02   2.711365e-04     00s10  00057  -4.716401e+02   1.317107e-03     00s11  00058  -4.716402e+02   1.390277e-04     00s11  00059  -4.716403e+02   2.900288e-05 
    00s11  00060  -4.716403e+02   2.073440e-06     00s11  00061  -4.716403e+02   3.070343e-07     00s11  00062  -4.716403e+02   3.070343e-07 
Runtime:     00s11
Optimization status: Converged

Optimization restart 1/1, f = -471.6402756843366
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4']]
prob:  <search.SurrogateProblem object at 0x14a912862b80>
0 OK
bestX [array([[0.89  , 0.5151, 0.5846, 0.96  , 0.024 ]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/764.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/764
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/764
........................................ [0.001348, 0.001171, 0.001178]
OUTPUT:%f [0.001348, 0.001171, 0.001178] 0.0011745
store_func_eval
problem.constants
None
MLA iteration:  23
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -2.641429e+02           nan     00s00  00001  -2.641429e+02   8.287637e+03     00s00  00002  -3.366733e+02   2.801521e+03     00s00  00003  -3.813935e+02   4.284534e+02 
    00s00  00004  -4.022413e+02   3.977857e+02     00s01  00005  -4.602187e+02   6.428909e+01     00s01  00006  -4.594713e+02   3.039865e+02     00s01  00007  -4.695111e+02   6.913130e+00     00s01  00008  -4.713596e+02   5.728135e+00     00s01  00009  -4.734524e+02   1.472068e+00     00s02  00010  -4.738987e+02   1.243138e+00     00s02  00011  -4.749913e+02   3.633962e+00     00s02  00012  -4.747874e+02   5.029106e+00     00s02  00013  -4.752167e+02   7.610938e-01     00s02  00014  -4.752936e+02   1.790069e-01 
    00s02  00015  -4.753386e+02   3.046027e-01     00s03  00016  -4.753892e+02   4.167517e-01     00s03  00017  -4.755440e+02   9.581368e-01     00s03  00018  -4.758610e+02   8.175409e-01     00s03  00019  -4.761393e+02   1.946798e-01     00s03  00020  -4.762776e+02   1.915469e-01     00s04  00021  -4.761005e+02   1.807932e+00 
    00s04  00022  -4.763076e+02   3.552773e-02     00s04  00023  -4.763197e+02   1.928450e-03     00s04  00024  -4.763201e+02   3.589285e-04 
    00s04  00025  -4.763203e+02   2.867268e-04     00s05  00026  -4.763208e+02   8.601297e-04     00s05  00027  -4.763215e+02   1.747671e-03     00s05  00028  -4.763226e+02   1.684475e-03     00s05  00029  -4.763154e+02   8.972381e-02     00s05  00030  -4.763228e+02   7.316048e-04     00s06  00031  -4.763232e+02   2.355535e-04     00s06  00032  -4.763234e+02   1.429967e-04     00s06  00033  -4.763238e+02   3.143251e-04     00s06  00034  -4.763218e+02   4.301176e-02     00s06  00035  -4.763239e+02   2.513619e-03     00s07  00036  -4.763243e+02   1.963918e-03     00s07  00037  -4.763251e+02   1.479706e-03     00s07  00038  -4.763136e+02   1.366475e-01     00s07  00039  -4.763255e+02   7.774585e-04     00s07  00040  -4.763259e+02   2.594710e-04 
    00s07  00041  -4.763261e+02   4.673096e-05     00s08  00042  -4.763261e+02   1.967388e-05     00s08  00043  -4.763262e+02   1.811225e-04     00s08  00044  -4.763262e+02   7.925632e-05     00s08  00045  -4.763266e+02   5.328222e-05     00s08  00046  -4.763272e+02   1.783491e-04     00s09  00047  -4.763269e+02   1.576218e-02     00s09  00048  -4.763274e+02   2.612877e-03     00s09  00049  -4.763282e+02   5.185857e-04     00s09  00050  -4.763287e+02   1.824232e-05     00s09  00051  -4.763289e+02   2.016065e-05     00s10  00052  -4.763287e+02   2.079963e-03     00s10  00053  -4.763289e+02   6.627057e-05     00s10  00054  -4.763290e+02   9.722509e-06     00s10  00055  -4.763290e+02   2.153539e-05     00s10  00056  -4.763287e+02   4.174427e-03     00s11  00057  -4.763290e+02   1.522303e-05 
    00s11  00058  -4.763290e+02   1.107853e-06     00s11  00059  -4.763290e+02   7.977028e-08     00s11  00060  -4.763291e+02   5.405980e-06     00s11  00061  -4.763291e+02   4.111798e-05     00s11  00062  -4.763291e+02   3.587868e-06 
    00s12  00063  -4.763291e+02   6.574673e-07     00s12  00064  -4.763291e+02   1.582214e-06     00s12  00065  -4.763291e+02   3.252584e-07     00s12  00066  -4.763291e+02   3.734052e-06     00s12  00067  -4.763291e+02   3.734052e-06 
Runtime:     00s12
Optimization status: Converged

Optimization restart 1/1, f = -476.3290633180419
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4']]
prob:  <search.SurrogateProblem object at 0x14a91359ce20>
0 OK
bestX [array([[0.8596, 0.7862, 0.8271, 0.5319, 0.0186]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/273.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/273
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/273
........................................ [0.001397, 0.001282, 0.001245]
OUTPUT:%f [0.001397, 0.001282, 0.001245] 0.0012634999999999999
store_func_eval
problem.constants
None
MLA iteration:  24
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -2.679318e+02           nan     00s00  00001  -2.679318e+02   8.319014e+03     00s00  00002  -3.406317e+02   2.863808e+03     00s00  00003  -3.871141e+02   4.284293e+02     00s00  00004  -4.082286e+02   3.911037e+02 
    00s01  00005  -4.656322e+02   6.027559e+01     00s01  00006  -4.656078e+02   2.605174e+02     00s01  00007  -4.743524e+02   6.955182e+00     00s01  00008  -4.762062e+02   5.685540e+00     00s01  00009  -4.782398e+02   1.567307e+00     00s02  00010  -4.786678e+02   1.240371e+00     00s02  00011  -4.795579e+02   5.300911e+00     00s02  00012  -4.798739e+02   1.246771e+00     00s02  00013  -4.800255e+02   2.034414e-01 
    00s02  00014  -4.801024e+02   1.275046e-01     00s02  00015  -4.799333e+02   3.116163e+00     00s03  00016  -4.801601e+02   1.849664e-01     00s03  00017  -4.802206e+02   2.774197e-01     00s03  00018  -4.806180e+02   6.243039e-01     00s03  00019  -4.808339e+02   1.384014e-01     00s03  00020  -4.809217e+02   1.202241e+00     00s04  00021  -4.810442e+02   2.295155e-01     00s04  00022  -4.810719e+02   4.711520e-02     00s04  00023  -4.810816e+02   2.923645e-02     00s04  00024  -4.810838e+02   8.886552e-04     00s04  00025  -4.810840e+02   5.903528e-04 
    00s05  00026  -4.810845e+02   6.405812e-04     00s05  00027  -4.810859e+02   8.333050e-04     00s05  00028  -4.810882e+02   3.680400e-02     00s05  00029  -4.810915e+02   1.218869e-02     00s05  00030  -4.810942e+02   4.174430e-04     00s06  00031  -4.810946e+02   2.168875e-04     00s06  00032  -4.810906e+02   2.283895e-02     00s06  00033  -4.810950e+02   1.253233e-03     00s06  00034  -4.810957e+02   8.296411e-04     00s06  00035  -4.810979e+02   2.416996e-04     00s07  00036  -4.810920e+02   7.877286e-02     00s07  00037  -4.810979e+02   1.404185e-04 
    00s07  00038  -4.810980e+02   5.807373e-05     00s07  00039  -4.810981e+02   1.576948e-05     00s07  00040  -4.810983e+02   2.914772e-04     00s07  00041  -4.810986e+02   4.072736e-04     00s08  00042  -4.810989e+02   1.210538e-02     00s08  00043  -4.810997e+02   2.450919e-03     00s08  00044  -4.811005e+02   1.083303e-04     00s08  00045  -4.811009e+02   2.795671e-04     00s08  00046  -4.811010e+02   3.626307e-05     00s09  00047  -4.811011e+02   1.514789e-05     00s09  00048  -4.811010e+02   1.413225e-03     00s09  00049  -4.811011e+02   1.199143e-04     00s09  00050  -4.811012e+02   3.679080e-05     00s09  00051  -4.811012e+02   9.631480e-06     00s10  00052  -4.811012e+02   2.464940e-05 
    00s10  00053  -4.811012e+02   3.910145e-06     00s10  00054  -4.811012e+02   1.914232e-06     00s10  00055  -4.811012e+02   1.571236e-06     00s10  00056  -4.811012e+02   1.338395e-04     00s11  00057  -4.811012e+02   1.739114e-06     00s11  00058  -4.811012e+02   1.739114e-06 
Runtime:     00s11
Optimization status: Converged

Optimization restart 1/1, f = -481.1012132175146
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4']]
prob:  <search.SurrogateProblem object at 0x14a91270e970>
0 OK
bestX [array([[0.5996, 0.8486, 0.6538, 0.7801, 0.0887]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/240.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/240
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/240
........................................ [0.001312, 0.001244, 0.001208]
OUTPUT:%f [0.001312, 0.001244, 0.001208] 0.001226
store_func_eval
problem.constants
None
MLA iteration:  25
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -2.724953e+02           nan     00s00  00001  -2.724953e+02   8.409063e+03     00s00  00002  -3.454555e+02   2.869171e+03 
    00s00  00003  -3.912875e+02   4.213263e+02     00s00  00004  -4.117419e+02   3.938992e+02     00s01  00005  -4.690857e+02   6.627596e+01     00s01  00006  -4.673043e+02   3.561516e+02     00s01  00007  -4.787343e+02   6.974443e+00     00s01  00008  -4.805785e+02   5.986390e+00     00s01  00009  -4.826424e+02   1.299508e+00 
    00s02  00010  -4.830885e+02   1.195651e+00     00s02  00011  -4.843266e+02   1.758607e+00     00s02  00012  -4.843165e+02   3.211897e+00     00s02  00013  -4.845191e+02   2.064085e-01     00s02  00014  -4.845600e+02   2.689112e-01     00s02  00015  -4.846395e+02   4.785014e-01     00s03  00016  -4.847901e+02   8.146565e-01     00s03  00017  -4.851086e+02   5.544495e-01     00s03  00018  -4.853097e+02   1.045054e-01     00s03  00019  -4.853094e+02   2.114871e+00     00s03  00020  -4.853716e+02   2.845822e-01 
    00s04  00021  -4.854199e+02   8.452383e-02     00s04  00022  -4.854271e+02   2.083030e-03     00s04  00023  -4.854275e+02   1.871709e-03     00s04  00024  -4.854299e+02   9.224443e-03     00s04  00025  -4.854334e+02   2.469092e-02     00s05  00026  -4.854401e+02   4.224364e-02     00s05  00027  -4.854360e+02   1.499982e-01     00s05  00028  -4.854423e+02   3.454377e-02     00s05  00029  -4.854481e+02   1.365444e-02     00s05  00030  -4.854506e+02   1.417188e-03     00s06  00031  -4.854509e+02   1.648243e-04 
    00s06  00032  -4.854510e+02   2.807098e-04     00s06  00033  -4.854512e+02   6.964003e-04     00s06  00034  -4.854516e+02   1.638333e-03     00s06  00035  -4.854524e+02   5.150903e-03     00s07  00036  -4.854537e+02   2.930392e-03     00s07  00037  -4.854535e+02   1.752622e-02     00s07  00038  -4.854542e+02   7.229338e-03     00s07  00039  -4.854548e+02   7.445438e-04     00s07  00040  -4.854549e+02   4.295803e-05 
    00s08  00041  -4.854550e+02   4.160146e-05     00s08  00042  -4.854551e+02   2.145659e-04     00s08  00043  -4.854551e+02   4.664675e-03     00s08  00044  -4.854552e+02   1.165139e-03     00s08  00045  -4.854554e+02   9.970453e-04     00s09  00046  -4.854564e+02   1.305960e-03     00s09  00047  -4.854575e+02   1.366698e-03     00s09  00048  -4.854586e+02   3.931520e-04     00s09  00049  -4.854591e+02   5.832635e-04     00s09  00050  -4.854592e+02   6.730164e-04     00s09  00051  -4.854593e+02   5.352410e-05     00s10  00052  -4.854594e+02   1.250899e-04     00s10  00053  -4.854595e+02   8.129051e-05     00s10  00054  -4.854595e+02   4.691892e-04     00s10  00055  -4.854595e+02   1.874194e-04     00s10  00056  -4.854596e+02   1.831297e-05 
    00s11  00057  -4.854596e+02   9.823949e-06     00s11  00058  -4.854596e+02   1.932110e-05     00s11  00059  -4.854596e+02   1.066741e-05     00s11  00060  -4.854596e+02   4.111972e-06     00s11  00061  -4.854596e+02   3.204680e-07     00s12  00062  -4.854596e+02   7.535003e-07     00s12  00063  -4.854596e+02   7.535003e-07 
Runtime:     00s12
Optimization status: Converged

Optimization restart 1/1, f = -485.45959246979146
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4']]
prob:  <search.SurrogateProblem object at 0x14a912a50970>
0 OK
bestX [array([[0.6354, 0.7611, 0.7346, 0.5965, 0.0046]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8921.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8921
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8921
........................................ [0.001314, 0.001235, 0.001222]
OUTPUT:%f [0.001314, 0.001235, 0.001222] 0.0012285
store_func_eval
problem.constants
None
MLA iteration:  26
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -2.765349e+02           nan     00s00  00001  -2.765349e+02   8.496947e+03     00s00  00002  -3.500823e+02   2.918470e+03     00s00  00003  -3.963325e+02   4.206819e+02 
    00s00  00004  -4.166016e+02   3.936457e+02     00s01  00005  -4.736091e+02   6.837009e+01     00s01  00006  -4.713601e+02   3.863377e+02     00s01  00007  -4.835487e+02   6.901495e+00     00s01  00008  -4.853715e+02   6.002451e+00     00s01  00009  -4.874420e+02   1.306551e+00     00s02  00010  -4.879126e+02   1.207504e+00     00s02  00011  -4.891469e+02   8.532720e-01     00s02  00012  -4.893057e+02   5.818729e-01 
    00s02  00013  -4.893666e+02   7.886486e-01     00s02  00014  -4.894323e+02   2.286957e-01     00s03  00015  -4.895282e+02   1.478483e-01     00s03  00016  -4.898726e+02   1.099714e+00     00s03  00017  -4.900325e+02   4.216373e-01 
    00s03  00018  -4.901256e+02   9.541503e-02     00s03  00019  -4.901752e+02   4.029545e-01     00s04  00020  -4.902049e+02   9.510285e-03     00s04  00021  -4.902154e+02   5.679834e-03     00s04  00022  -4.902232e+02   1.781828e-01     00s04  00023  -4.902340e+02   1.524209e-02     00s04  00024  -4.902401e+02   2.396592e-03     00s04  00025  -4.902493e+02   1.397811e-02     00s05  00026  -4.902523e+02   2.984573e-03 
    00s05  00027  -4.902531e+02   4.018620e-04     00s05  00028  -4.902535e+02   1.927260e-03     00s05  00029  -4.902543e+02   6.311414e-03     00s05  00030  -4.902558e+02   1.416538e-02     00s06  00031  -4.902578e+02   1.296216e-02     00s06  00032  -4.902539e+02   6.744599e-02     00s06  00033  -4.902586e+02   1.663197e-02     00s06  00034  -4.902599e+02   3.300701e-03     00s06  00035  -4.902602e+02   9.003272e-05     00s07  00036  -4.902602e+02   1.170708e-04     00s07  00037  -4.902603e+02   2.141327e-04     00s07  00038  -4.902605e+02   3.954872e-04     00s07  00039  -4.902608e+02   1.685535e-04     00s07  00040  -4.902610e+02   3.029709e-04     00s08  00041  -4.902613e+02   2.117063e-04     00s08  00042  -4.902622e+02   2.129489e-03     00s08  00043  -4.902636e+02   4.347785e-03     00s08  00044  -4.902653e+02   2.188962e-03     00s08  00045  -4.902659e+02   8.550919e-03 
    00s09  00046  -4.902667e+02   5.801211e-05     00s09  00047  -4.902669e+02   1.023261e-04     00s09  00048  -4.902670e+02   1.704921e-04     00s09  00049  -4.902670e+02   1.574908e-04     00s09  00050  -4.902671e+02   2.942249e-05     00s10  00051  -4.902671e+02   2.873675e-05     00s10  00052  -4.902671e+02   7.476762e-05     00s10  00053  -4.902672e+02   5.058269e-05     00s10  00054  -4.902672e+02   5.974103e-05 
    00s10  00055  -4.902672e+02   4.872558e-06     00s11  00056  -4.902672e+02   1.786941e-06     00s11  00057  -4.902672e+02   2.689329e-06     00s11  00058  -4.902672e+02   1.058516e-05     00s11  00059  -4.902672e+02   1.803428e-05 
    00s11  00060  -4.902672e+02   9.084705e-07     00s12  00061  -4.902672e+02   5.691055e-07     00s12  00062  -4.902672e+02   5.691055e-07 
Runtime:     00s12
Optimization status: Converged

Optimization restart 1/1, f = -490.267178437432
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4']]
prob:  <search.SurrogateProblem object at 0x14a9127ca4f0>
0 OK
bestX [array([[0.5787, 0.5738, 0.2832, 0.9732, 0.0542]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7187.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7187
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7187
........................................ [0.001321, 0.001188, 0.00117]
OUTPUT:%f [0.001321, 0.001188, 0.00117] 0.001179
store_func_eval
problem.constants
None
MLA iteration:  27
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -2.793183e+02           nan     00s00  00001  -2.793183e+02   8.477984e+03     00s00  00002  -3.528537e+02   2.970506e+03     00s00  00003  -4.011045e+02   4.462482e+02     00s00  00004  -4.239836e+02   4.299624e+02     00s01  00005  -4.817696e+02   3.948294e+01 
    00s01  00006  -4.859797e+02   6.445246e+01     00s01  00007  -4.879947e+02   8.746239e+00     00s01  00008  -4.896099e+02   1.885650e+01     00s01  00009  -4.910924e+02   4.378959e+00     00s02  00010  -4.922349e+02   2.005372e+00     00s02  00011  -4.925726e+02   1.335893e+00     00s02  00012  -4.938779e+02   9.485234e-01     00s02  00013  -4.939704e+02   1.147446e+00     00s02  00014  -4.941088e+02   2.333436e-01     00s03  00015  -4.941706e+02   1.308554e-01     00s03  00016  -4.942396e+02   1.051772e-01 
    00s03  00017  -4.945404e+02   2.858242e-01     00s03  00018  -4.947603e+02   4.109837e-02     00s03  00019  -4.948644e+02   3.273711e-01     00s04  00020  -4.949302e+02   1.692248e-01     00s04  00021  -4.949518e+02   6.613928e-03     00s04  00022  -4.949530e+02   1.890374e-03     00s04  00023  -4.949535e+02   1.008107e-03     00s04  00024  -4.949567e+02   7.392303e-03     00s05  00025  -4.949617e+02   2.675066e-02 
    00s05  00026  -4.949730e+02   6.779259e-02     00s05  00027  -4.949803e+02   4.970644e-02     00s05  00028  -4.949245e+02   1.199218e+00     00s05  00029  -4.949810e+02   5.460193e-02     00s06  00030  -4.949855e+02   5.032377e-03     00s06  00031  -4.949863e+02   7.090294e-04     00s06  00032  -4.949865e+02   6.067673e-04     00s06  00033  -4.949868e+02   1.078530e-03     00s06  00034  -4.949874e+02   1.813613e-03     00s06  00035  -4.949888e+02   2.478075e-03 
    00s07  00036  -4.949910e+02   2.352596e-03     00s07  00037  -4.949905e+02   3.763572e-03     00s07  00038  -4.949918e+02   4.053025e-04     00s07  00039  -4.949931e+02   1.713448e-04     00s07  00040  -4.949935e+02   1.451945e-04     00s08  00041  -4.949943e+02   7.095396e-04     00s08  00042  -4.949933e+02   4.235678e-02     00s08  00043  -4.949950e+02   5.374783e-03     00s08  00044  -4.949962e+02   4.753011e-04 
    00s08  00045  -4.949965e+02   6.237728e-04     00s09  00046  -4.949953e+02   2.447108e-02     00s09  00047  -4.949967e+02   1.243944e-03     00s09  00048  -4.949969e+02   6.621059e-04     00s09  00049  -4.949976e+02   1.131875e-04     00s09  00050  -4.949984e+02   4.372719e-04     00s10  00051  -4.949989e+02   2.650928e-04     00s10  00052  -4.949968e+02   6.370775e-03     00s10  00053  -4.949990e+02   4.297680e-04     00s10  00054  -4.949992e+02   2.433888e-05 
    00s10  00055  -4.949992e+02   1.111557e-05     00s11  00056  -4.949993e+02   2.740286e-05     00s11  00057  -4.949993e+02   2.361159e-04     00s11  00058  -4.949993e+02   2.051613e-05     00s11  00059  -4.949993e+02   1.474092e-05     00s11  00060  -4.949993e+02   9.257746e-05     00s12  00061  -4.949993e+02   1.502946e-04     00s12  00062  -4.949993e+02   1.414861e-04     00s12  00063  -4.949989e+02   4.506658e-03     00s12  00064  -4.949993e+02   1.621570e-04     00s12  00065  -4.949994e+02   5.164216e-05     00s13  00066  -4.949994e+02   2.111645e-06 
    00s13  00067  -4.949994e+02   1.222536e-06     00s13  00068  -4.949994e+02   2.508917e-06     00s13  00069  -4.949994e+02   9.544174e-07     00s13  00070  -4.949994e+02   8.247432e-07     00s14  00071  -4.949994e+02   1.358357e-06     00s14  00072  -4.949994e+02   7.477320e-05     00s14  00073  -4.949994e+02   1.989991e-05     00s14  00074  -4.949994e+02   4.021780e-06     00s14  00075  -4.949994e+02   4.028728e-07     00s14  00076  -4.949994e+02   4.028728e-07 
Runtime:     00s14
Optimization status: Converged

Optimization restart 1/1, f = -494.99938522029834
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4']]
prob:  <search.SurrogateProblem object at 0x14a9129897c0>
0 OK
bestX [array([[0.6729, 0.7633, 0.3986, 0.8319, 0.0846]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1305.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1305
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1305
........................................ [0.001344, 0.001215, 0.001179]
OUTPUT:%f [0.001344, 0.001215, 0.001179] 0.001197
store_func_eval
problem.constants
None
MLA iteration:  28
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -2.839668e+02           nan     00s00  00001  -2.839668e+02   8.532150e+03     00s00  00002  -3.576569e+02   2.978153e+03     00s00  00003  -4.055822e+02   4.392703e+02     00s00  00004  -4.277316e+02   4.261373e+02     00s01  00005  -4.855401e+02   4.453329e+01     00s01  00006  -4.895657e+02   8.908155e+01 
    00s01  00007  -4.923201e+02   1.018082e+01     00s01  00008  -4.940869e+02   2.104080e+01     00s01  00009  -4.955991e+02   4.192110e+00     00s02  00010  -4.967840e+02   1.581285e+00     00s02  00011  -4.971701e+02   1.590573e+00     00s02  00012  -4.983489e+02   3.894684e-01     00s02  00013  -4.986191e+02   2.271440e-01     00s02  00014  -4.987004e+02   2.016274e-01     00s03  00015  -4.987578e+02   1.260140e-01     00s03  00016  -4.988894e+02   2.651892e-01     00s03  00017  -4.990009e+02   3.461691e-01     00s03  00018  -4.992165e+02   1.181733e-01     00s04  00019  -4.993226e+02   9.128841e-02 
    00s04  00020  -4.993719e+02   4.506424e-02     00s04  00021  -4.994380e+02   1.183894e-02     00s04  00022  -4.994607e+02   5.000778e-02     00s04  00023  -4.994444e+02   4.483492e-01     00s05  00024  -4.994680e+02   1.447121e-02     00s05  00025  -4.994746e+02   1.384186e-02     00s05  00026  -4.994916e+02   3.399450e-02     00s05  00027  -4.995076e+02   8.685723e-02     00s05  00028  -4.995144e+02   2.130936e-02     00s06  00029  -4.995206e+02   2.113999e-03     00s06  00030  -4.995223e+02   1.203462e-03     00s06  00031  -4.995253e+02   1.730320e-03     00s06  00032  -4.995353e+02   1.463804e-03     00s07  00033  -4.995406e+02   1.502322e-02 
    00s07  00034  -4.995436e+02   5.884774e-04     00s07  00035  -4.995439e+02   6.460008e-05     00s07  00036  -4.995440e+02   6.908645e-04     00s07  00037  -4.995440e+02   1.105148e-04 
    00s08  00038  -4.995440e+02   6.509773e-05     00s08  00039  -4.995441e+02   6.114033e-04     00s08  00040  -4.995444e+02   2.696797e-03     00s08  00041  -4.995449e+02   7.648279e-03     00s08  00042  -4.995457e+02   1.311976e-02     00s09  00043  -4.995471e+02   1.247969e-02     00s09  00044  -4.990789e+02   2.350593e+00     00s09  00045  -4.995471e+02   1.393943e-02     00s09  00046  -4.995486e+02   3.223272e-03     00s09  00047  -4.995491e+02   3.919043e-05     00s10  00048  -4.995492e+02   6.459925e-04     00s10  00049  -4.995493e+02   1.539670e-03     00s10  00050  -4.995495e+02   1.892747e-03     00s10  00051  -4.995499e+02   6.719580e-04     00s10  00052  -4.995501e+02   5.472040e-05     00s11  00053  -4.995501e+02   1.176992e-05     00s11  00054  -4.995501e+02   2.698883e-04     00s11  00055  -4.995501e+02   3.780148e-05     00s11  00056  -4.995501e+02   3.197432e-05     00s12  00057  -4.995502e+02   1.988583e-05     00s12  00058  -4.995502e+02   3.322485e-05     00s12  00059  -4.995502e+02   2.778591e-05 
    00s12  00060  -4.995502e+02   1.892308e-06     00s12  00061  -4.995502e+02   9.619620e-08     00s13  00062  -4.995502e+02   9.619620e-08 
Runtime:     00s13
Optimization status: Converged

Optimization restart 1/1, f = -499.5501831742981
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4']]
prob:  <search.SurrogateProblem object at 0x14a912865e50>
0 OK
bestX [array([[7.7850e-01, 9.5894e-01, 5.9547e-01, 7.8262e-01, 1.1159e-04]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7988.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7988
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7988
........................................ [0.001335, 0.001219, 0.001175]
OUTPUT:%f [0.001335, 0.001219, 0.001175] 0.0011970000000000001
store_func_eval
problem.constants
None
MLA iteration:  29
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -2.875670e+02           nan     00s00  00001  -2.875670e+02   8.582564e+03     00s00  00002  -3.616174e+02   3.035153e+03     00s00  00003  -4.106699e+02   4.438772e+02     00s00  00004  -4.334443e+02   4.417698e+02 
    00s01  00005  -4.909245e+02   4.085971e+01     00s01  00006  -4.947798e+02   7.821646e+01     00s01  00007  -4.972701e+02   9.711681e+00     00s01  00008  -4.985711e+02   2.499001e+01     00s01  00009  -5.001589e+02   4.384862e+00     00s02  00010  -5.013011e+02   1.468104e+00     00s02  00011  -5.018424e+02   2.167906e+00     00s02  00012  -5.024666e+02   1.633598e+00     00s02  00013  -5.032301e+02   1.210562e+00     00s02  00014  -5.034056e+02   3.642992e-01 
    00s03  00015  -5.034412e+02   8.163730e-02     00s03  00016  -5.034753e+02   1.010834e-01     00s03  00017  -5.036283e+02   1.187696e+00     00s03  00018  -5.037916e+02   8.787430e-01     00s03  00019  -5.039104e+02   2.762170e-01     00s04  00020  -5.040397e+02   6.108415e-02     00s04  00021  -5.040764e+02   3.301617e-02     00s04  00022  -5.040653e+02   6.977483e-01     00s04  00023  -5.040960e+02   1.765619e-01     00s04  00024  -5.041269e+02   2.840677e-02     00s05  00025  -5.041433e+02   6.205043e-03 
    00s05  00026  -5.041542e+02   9.248000e-03     00s05  00027  -5.041665e+02   3.362188e-03     00s05  00028  -5.041968e+02   4.589635e-02     00s05  00029  -5.041718e+02   2.943601e-02     00s06  00030  -5.042304e+02   5.307713e-02     00s06  00031  -5.037669e+02   5.311135e+00     00s06  00032  -5.042325e+02   1.388965e-02 
    00s06  00033  -5.042323e+02   6.156245e-04     00s06  00034  -5.042362e+02   3.625759e-03     00s07  00035  -5.042383e+02   4.756674e-03     00s07  00036  -5.042390e+02   1.444253e-03     00s07  00037  -5.042398e+02   1.530350e-03     00s07  00038  -5.042427e+02   2.852854e-03     00s07  00039  -5.042439e+02   2.577023e-03     00s08  00040  -5.042437e+02   4.498776e-03     00s08  00041  -5.042444e+02   6.451154e-04     00s08  00042  -5.042446e+02   7.670212e-05     00s08  00043  -5.042446e+02   7.334164e-05     00s08  00044  -5.042447e+02   2.278046e-04     00s09  00045  -5.042449e+02   9.032409e-04     00s09  00046  -5.042452e+02   2.528860e-03     00s09  00047  -5.042459e+02   9.601162e-03     00s09  00048  -5.042471e+02   6.884815e-03     00s09  00049  -5.042496e+02   7.402612e-04 
    00s10  00050  -5.042502e+02   5.918723e-05     00s10  00051  -5.042505e+02   3.823922e-05     00s10  00052  -5.042410e+02   6.609181e-02     00s10  00053  -5.042506e+02   6.960270e-04     00s10  00054  -5.042507e+02   2.236416e-04     00s11  00055  -5.042508e+02   1.139735e-05     00s11  00056  -5.042509e+02   2.400031e-06     00s11  00057  -5.042509e+02   9.059201e-05 
    00s11  00058  -5.042509e+02   2.699335e-06     00s11  00059  -5.042509e+02   5.240266e-07     00s12  00060  -5.042509e+02   5.240266e-07 
Runtime:     00s12
Optimization status: Converged

Optimization restart 1/1, f = -504.25088186056064
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4']]
prob:  <search.SurrogateProblem object at 0x14a912a50130>
0 OK
bestX [array([[0.6537, 0.555 , 0.6931, 0.7109, 0.0498]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7249.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7249
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7249
........................................ [0.001318, 0.001249, 0.001219]
OUTPUT:%f [0.001318, 0.001249, 0.001219] 0.0012339999999999999
store_func_eval
problem.constants
None
MLA iteration:  30
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -2.923208e+02           nan     00s00  00001  -2.923208e+02   8.627838e+03     00s00  00002  -3.665606e+02   3.056710e+03     00s00  00003  -4.156629e+02   4.397361e+02     00s00  00004  -4.379962e+02   4.399535e+02     00s01  00005  -4.952410e+02   4.313422e+01     00s01  00006  -4.992329e+02   8.558553e+01 
    00s01  00007  -5.019203e+02   1.037841e+01     00s01  00008  -5.032330e+02   2.732342e+01     00s01  00009  -5.049039e+02   4.281527e+00     00s02  00010  -5.059948e+02   1.526352e+00     00s02  00011  -5.066229e+02   2.419240e+00     00s02  00012  -5.071855e+02   1.662076e+00     00s02  00013  -5.080315e+02   1.130105e+00     00s02  00014  -5.081419e+02   6.708862e-01 
    00s03  00015  -5.082016e+02   7.619760e-02     00s03  00016  -5.082279e+02   8.528253e-02     00s03  00017  -5.070934e+02   2.560929e+01     00s03  00018  -5.083365e+02   1.169881e-01     00s03  00019  -5.084907e+02   1.660288e-01     00s04  00020  -5.086993e+02   5.184493e-02     00s04  00021  -5.087455e+02   5.570454e-01     00s04  00022  -5.087999e+02   9.572101e-02     00s04  00023  -5.088359e+02   1.291115e-02 
    00s04  00024  -5.088585e+02   8.306335e-03     00s05  00025  -5.089152e+02   1.609793e-01     00s05  00026  -5.089763e+02   5.242906e-02     00s05  00027  -5.089585e+02   3.779140e-01     00s05  00028  -5.089854e+02   2.055676e-02     00s05  00029  -5.089979e+02   5.623494e-03     00s06  00030  -5.090016e+02   1.664178e-03     00s06  00031  -5.090054e+02   1.192328e-03     00s06  00032  -5.090076e+02   1.098557e-03     00s06  00033  -5.090134e+02   2.100615e-03     00s06  00034  -5.090018e+02   1.534459e-01 
    00s07  00035  -5.090139e+02   8.040605e-04     00s07  00036  -5.090161e+02   2.252862e-04     00s07  00037  -5.090163e+02   1.122674e-05     00s07  00038  -5.090163e+02   8.404956e-06     00s07  00039  -5.090163e+02   4.263352e-06 
    00s08  00040  -5.090163e+02   3.765625e-05     00s08  00041  -5.090164e+02   9.390071e-05     00s08  00042  -5.090164e+02   1.269779e-03     00s08  00043  -5.090165e+02   4.484607e-04     00s08  00044  -5.090167e+02   2.110815e-04     00s09  00045  -5.090170e+02   5.810929e-04     00s09  00046  -5.090173e+02   5.082279e-04     00s09  00047  -5.090163e+02   1.046399e-02     00s09  00048  -5.090174e+02   8.671956e-04     00s09  00049  -5.090176e+02   9.878064e-05     00s10  00050  -5.090176e+02   4.670504e-05     00s10  00051  -5.090177e+02   3.581329e-05     00s10  00052  -5.090177e+02   1.521067e-05     00s10  00053  -5.090177e+02   1.069275e-05     00s10  00054  -5.090177e+02   2.091174e-05 
    00s11  00055  -5.090177e+02   3.352823e-06     00s11  00056  -5.090177e+02   2.248251e-06     00s11  00057  -5.090177e+02   1.775671e-04     00s11  00058  -5.090177e+02   1.185610e-05     00s11  00059  -5.090177e+02   5.512808e-06 
    00s12  00060  -5.090177e+02   9.097193e-07     00s12  00061  -5.090177e+02   3.153103e-07     00s12  00062  -5.090177e+02   4.019183e-07     00s12  00063  -5.090177e+02   9.892505e-05     00s12  00064  -5.090177e+02   4.076368e-06     00s13  00065  -5.090177e+02   4.076368e-06 
Runtime:     00s13
Optimization status: Converged

Optimization restart 1/1, f = -509.0177412703495
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4']]
prob:  <search.SurrogateProblem object at 0x14a91274dfa0>
0 OK
bestX [array([[0.5046, 0.5324, 0.525 , 0.7891, 0.0191]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8186.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8186
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8186
........................................ [0.001339, 0.001235, 0.001184]
OUTPUT:%f [0.001339, 0.001235, 0.001184] 0.0012095
store_func_eval
problem.constants
None
MLA iteration:  31
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -2.967078e+02           nan     00s00  00001  -2.967078e+02   8.725948e+03     00s00  00002  -3.710505e+02   3.061106e+03     00s00  00003  -4.201488e+02   4.405469e+02 
    00s00  00004  -4.424826e+02   4.420997e+02     00s01  00005  -4.999960e+02   4.398661e+01     00s01  00006  -5.037127e+02   9.674848e+01     00s01  00007  -5.067325e+02   1.125408e+01     00s01  00008  -5.078273e+02   3.307098e+01     00s01  00009  -5.097134e+02   4.227412e+00     00s02  00010  -5.106523e+02   1.690173e+00     00s02  00011  -5.114068e+02   2.745219e+00     00s02  00012  -5.119001e+02   1.616143e+00     00s02  00013  -5.128599e+02   8.754566e-01     00s02  00014  -5.129261e+02   6.751101e-01     00s03  00015  -5.129878e+02   7.173321e-02 
    00s03  00016  -5.130123e+02   7.709938e-02     00s03  00017  -5.130811e+02   1.219552e-01     00s03  00018  -5.132161e+02   3.561248e-01     00s03  00019  -5.134606e+02   4.473965e-02     00s04  00020  -5.135446e+02   2.009900e-02     00s04  00021  -5.136171e+02   5.755251e-02     00s04  00022  -5.136460e+02   8.144293e-01     00s04  00023  -5.137030e+02   4.401318e-02     00s04  00024  -5.137201e+02   1.688612e-02     00s05  00025  -5.137328e+02   2.441968e-02     00s05  00026  -5.137536e+02   1.150979e-02     00s05  00027  -5.137849e+02   1.376746e-02     00s05  00028  -5.137390e+02   4.377091e-01 
    00s05  00029  -5.137898e+02   6.772904e-03     00s06  00030  -5.137920e+02   4.739227e-03     00s06  00031  -5.137955e+02   1.177642e-03     00s06  00032  -5.137967e+02   3.608407e-03 
    00s06  00033  -5.137973e+02   3.764225e-04     00s06  00034  -5.137977e+02   5.173617e-04     00s07  00035  -5.138006e+02   5.360478e-03     00s07  00036  -5.138022e+02   3.129081e-03     00s07  00037  -5.137991e+02   5.822325e-02     00s07  00038  -5.138025e+02   5.538274e-03     00s07  00039  -5.138031e+02   3.358655e-04     00s08  00040  -5.138031e+02   2.954899e-05 
    00s08  00041  -5.138031e+02   3.462201e-05     00s08  00042  -5.138031e+02   7.214219e-05     00s08  00043  -5.138032e+02   2.808403e-04     00s08  00044  -5.138034e+02   7.704338e-04     00s09  00045  -5.138038e+02   1.499018e-03     00s09  00046  -5.138040e+02   7.460979e-03     00s09  00047  -5.138048e+02   1.924873e-03     00s09  00048  -5.138054e+02   2.228216e-04     00s09  00049  -5.138057e+02   3.774399e-04     00s10  00050  -5.138059e+02   7.549245e-04     00s10  00051  -5.138062e+02   4.861467e-03     00s10  00052  -5.138067e+02   1.137127e-03     00s10  00053  -5.138071e+02   3.657179e-04     00s10  00054  -5.138072e+02   2.283358e-04     00s11  00055  -5.138073e+02   6.103225e-05     00s11  00056  -5.138074e+02   9.656864e-06     00s11  00057  -5.138074e+02   6.456294e-05     00s11  00058  -5.138075e+02   1.022343e-04     00s11  00059  -5.138075e+02   3.187339e-04     00s12  00060  -5.138075e+02   1.379954e-04 
    00s12  00061  -5.138076e+02   9.624570e-06     00s12  00062  -5.138076e+02   2.652365e-06     00s12  00063  -5.138076e+02   1.456936e-06     00s13  00064  -5.138076e+02   9.653373e-06     00s13  00065  -5.138076e+02   9.653373e-06 
Runtime:     00s13
Optimization status: Converged

Optimization restart 1/1, f = -513.8075772397967
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4']]
prob:  <search.SurrogateProblem object at 0x14a9135342b0>
0 OK
bestX [array([[0.5376, 0.6096, 0.2757, 0.8397, 0.0684]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7404.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7404
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7404
........................................ [0.001331, 0.001225, 0.001185]
OUTPUT:%f [0.001331, 0.001225, 0.001185] 0.001205
store_func_eval
problem.constants
None
MLA iteration:  32
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -3.003555e+02           nan     00s00  00001  -3.003555e+02   8.616459e+03     00s00  00002  -3.746648e+02   3.151838e+03     00s00  00003  -4.269035e+02   4.430305e+02     00s00  00004  -4.504009e+02   4.424040e+02     00s01  00005  -5.066065e+02   3.682688e+01     00s01  00006  -5.090916e+02   8.533711e+01 
    00s01  00007  -5.120332e+02   8.736556e+00     00s01  00008  -5.132170e+02   2.018047e+01     00s01  00009  -5.145378e+02   4.464800e+00     00s02  00010  -5.157215e+02   1.527720e+00     00s02  00011  -5.161862e+02   2.116019e+00     00s02  00012  -5.169658e+02   1.590280e+00     00s02  00013  -5.175426e+02   9.234625e-01     00s02  00014  -5.176891e+02   1.271772e-01     00s03  00015  -5.177078e+02   6.346110e-02     00s03  00016  -5.177804e+02   3.243421e-01     00s03  00017  -5.178797e+02   9.194332e-01     00s03  00018  -5.180181e+02   7.141454e-01     00s03  00019  -5.181665e+02   1.970773e-01 
    00s04  00020  -5.182130e+02   2.383009e-01     00s04  00021  -5.182461e+02   1.022233e-01     00s04  00022  -5.182628e+02   5.760790e-02     00s04  00023  -5.183001e+02   3.073926e-02     00s04  00024  -5.183347e+02   1.152471e-02 
    00s05  00025  -5.183518e+02   2.068425e-02     00s05  00026  -5.183844e+02   3.821609e-02     00s05  00027  -5.184157e+02   6.052811e-02     00s05  00028  -5.183540e+02   2.558220e-02     00s06  00029  -5.184396e+02   2.162793e-02     00s06  00030  -5.184428e+02   1.261387e-02     00s06  00031  -5.184440e+02   8.444616e-03     00s06  00032  -5.184443e+02   5.678135e-03 
    00s06  00033  -5.184450e+02   4.720111e-04     00s07  00034  -5.184454e+02   1.533882e-03     00s07  00035  -5.184468e+02   9.371854e-03     00s07  00036  -5.184487e+02   1.385310e-02     00s07  00037  -5.184503e+02   6.586393e-03     00s07  00038  -5.184509e+02   9.968184e-04     00s08  00039  -5.184511e+02   9.592884e-05     00s08  00040  -5.184511e+02   3.555075e-05     00s08  00041  -5.184511e+02   1.111604e-04     00s08  00042  -5.184512e+02   3.346858e-04     00s08  00043  -5.184513e+02   1.022179e-03     00s09  00044  -5.184515e+02   2.384381e-03     00s09  00045  -5.184520e+02   3.890301e-03     00s09  00046  -5.184528e+02   5.158713e-03     00s09  00047  -5.184493e+02   3.299618e-02     00s09  00048  -5.184531e+02   2.122630e-03     00s10  00049  -5.184541e+02   1.113474e-03     00s10  00050  -5.184547e+02   4.722265e-04     00s10  00051  -5.184549e+02   9.294832e-04     00s10  00052  -5.184550e+02   1.769000e-03     00s10  00053  -5.184553e+02   3.034938e-04     00s11  00054  -5.184554e+02   1.917882e-04     00s11  00055  -5.184555e+02   1.409180e-04     00s11  00056  -5.184556e+02   1.128792e-04 
    00s11  00057  -5.184557e+02   4.547582e-05     00s11  00058  -5.184557e+02   2.063102e-04     00s12  00059  -5.184558e+02   1.867957e-04     00s12  00060  -5.184558e+02   1.649839e-04     00s12  00061  -5.184558e+02   3.049380e-05     00s12  00062  -5.184558e+02   2.306655e-06     00s12  00063  -5.184558e+02   2.518202e-06     00s13  00064  -5.184558e+02   3.831534e-06 
    00s13  00065  -5.184558e+02   3.831534e-06 
Runtime:     00s13
Optimization status: Converged

Optimization restart 1/1, f = -518.4558307685488
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4']]
prob:  <search.SurrogateProblem object at 0x14a912dfed30>
0 OK
bestX [array([[0.6225, 0.9276, 0.2632, 0.9447, 0.034 ]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4064.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4064
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4064
........................................ [0.00129, 0.001168, 0.001157]
OUTPUT:%f [0.00129, 0.001168, 0.001157] 0.0011625
store_func_eval
problem.constants
None
MLA iteration:  33
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -3.032253e+02           nan     00s00  00001  -3.032253e+02   8.668073e+03     00s00  00002  -3.778901e+02   3.166571e+03 
    00s00  00003  -4.298695e+02   4.575384e+02     00s00  00004  -4.542845e+02   4.636078e+02     00s01  00005  -5.115636e+02   3.657796e+01     00s01  00006  -5.136497e+02   8.826773e+01     00s01  00007  -5.167641e+02   8.351424e+00     00s01  00008  -5.180296e+02   1.656858e+01     00s01  00009  -5.192362e+02   4.703289e+00     00s02  00010  -5.205718e+02   2.130617e+00 
    00s02  00011  -5.209432e+02   1.672723e+00     00s02  00012  -5.222083e+02   7.050110e-01     00s02  00013  -5.222648e+02   9.910025e-01     00s02  00014  -5.223340e+02   4.606446e-02     00s03  00015  -5.223552e+02   7.652299e-02     00s03  00016  -5.224151e+02   1.158119e-01     00s03  00017  -5.194899e+02   3.863096e+01     00s03  00018  -5.224925e+02   1.708169e-01     00s04  00019  -5.226212e+02   3.165035e-01     00s04  00020  -5.227455e+02   3.509253e-01 
    00s04  00021  -5.227889e+02   2.561999e-02     00s04  00022  -5.228073e+02   5.829778e-02     00s04  00023  -5.228214e+02   5.565938e-02     00s05  00024  -5.228626e+02   2.269495e-01     00s05  00025  -5.229365e+02   4.248712e-02     00s05  00026  -5.230350e+02   1.125169e-02     00s05  00027  -5.231238e+02   1.728830e-02     00s05  00028  -5.230010e+02   6.206244e-01     00s06  00029  -5.231309e+02   3.707593e-02 
    00s06  00030  -5.231521e+02   6.452961e-03     00s06  00031  -5.231704e+02   1.772966e-02     00s06  00032  -5.231721e+02   3.373933e-02     00s06  00033  -5.231766e+02   3.670467e-03     00s07  00034  -5.231773e+02   2.628298e-03     00s07  00035  -5.231776e+02   1.140062e-04     00s07  00036  -5.231777e+02   4.452232e-05     00s07  00037  -5.231777e+02   4.420648e-05     00s07  00038  -5.231778e+02   2.962655e-04 
    00s08  00039  -5.231781e+02   8.800832e-04     00s08  00040  -5.231787e+02   1.221530e-03     00s08  00041  -5.231789e+02   3.862760e-04     00s08  00042  -5.231789e+02   1.944684e-04 
    00s08  00043  -5.231789e+02   3.763567e-06     00s09  00044  -5.231789e+02   4.323066e-06     00s09  00045  -5.231790e+02   8.792455e-06     00s09  00046  -5.231790e+02   1.292391e-05     00s09  00047  -5.231784e+02   5.331156e-03     00s09  00048  -5.231790e+02   1.240117e-04     00s10  00049  -5.231790e+02   9.834532e-05     00s10  00050  -5.231791e+02   8.613800e-05     00s10  00051  -5.231791e+02   2.454316e-03     00s10  00052  -5.231792e+02   4.310771e-04     00s10  00053  -5.231794e+02   1.034873e-04     00s11  00054  -5.231796e+02   2.230419e-05     00s11  00055  -5.231797e+02   2.012567e-05     00s11  00056  -5.231797e+02   2.102713e-05     00s11  00057  -5.231797e+02   8.415846e-06     00s11  00058  -5.231797e+02   1.456678e-06     00s12  00059  -5.231797e+02   2.646755e-06     00s12  00060  -5.231797e+02   3.356809e-05     00s12  00061  -5.231797e+02   6.179666e-06     00s12  00062  -5.231797e+02   6.128293e-07 
    00s13  00063  -5.231797e+02   1.078185e-07     00s13  00064  -5.231797e+02   4.282776e-08     00s13  00065  -5.231797e+02   4.282776e-08 
Runtime:     00s13
Optimization status: Converged

Optimization restart 1/1, f = -523.1797368442501
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4']]
prob:  <search.SurrogateProblem object at 0x14a91284ab80>
0 OK
bestX [array([[0.7661, 0.9453, 0.4359, 0.7482, 0.0202]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8971.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8971
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8971
........................................ [0.001346, 0.001211, 0.001176]
OUTPUT:%f [0.001346, 0.001211, 0.001176] 0.0011935000000000001
store_func_eval
problem.constants
None
MLA iteration:  34
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -3.075831e+02           nan     00s00  00001  -3.075831e+02   8.760892e+03     00s00  00002  -3.825683e+02   3.187413e+03     00s00  00003  -4.344716e+02   4.538295e+02     00s00  00004  -4.582861e+02   4.594572e+02 
    00s01  00005  -5.157395e+02   3.919215e+01     00s01  00006  -5.181166e+02   9.478499e+01     00s01  00007  -5.213697e+02   9.283166e+00     00s01  00008  -5.226404e+02   2.002289e+01     00s01  00009  -5.239678e+02   4.553062e+00     00s02  00010  -5.252072e+02   1.591576e+00     00s02  00011  -5.256669e+02   2.145272e+00     00s02  00012  -5.264625e+02   1.557915e+00     00s02  00013  -5.270037e+02   9.249650e-01 
    00s02  00014  -5.271453e+02   1.256922e-01     00s03  00015  -5.271609e+02   5.038014e-02     00s03  00016  -5.271991e+02   1.644108e-01     00s03  00017  -5.272440e+02   4.470514e-01     00s03  00018  -5.273660e+02   1.054095e+00     00s03  00019  -5.274735e+02   4.283753e-01     00s04  00020  -5.275686e+02   1.351234e-01 
    00s04  00021  -5.275955e+02   8.770766e-02     00s04  00022  -5.276144e+02   4.866445e-02     00s04  00023  -5.276342e+02   8.505843e-02     00s05  00024  -5.276961e+02   2.340009e-01     00s05  00025  -5.277952e+02   3.793617e-01     00s05  00026  -5.278930e+02   2.270434e-01     00s05  00027  -5.279311e+02   4.214954e-02     00s05  00028  -5.279406e+02   2.396979e-02     00s06  00029  -5.279476e+02   2.963595e-02     00s06  00030  -5.279516e+02   3.381171e-03     00s06  00031  -5.279520e+02   2.735020e-04 
    00s06  00032  -5.279520e+02   2.429766e-04     00s06  00033  -5.279524e+02   2.528880e-04     00s07  00034  -5.279538e+02   8.848159e-04     00s07  00035  -5.279551e+02   9.412895e-04     00s07  00036  -5.279563e+02   7.511269e-04     00s07  00037  -5.279565e+02   2.897398e-04     00s07  00038  -5.279566e+02   8.369060e-05     00s08  00039  -5.279567e+02   1.137800e-04     00s08  00040  -5.279569e+02   4.343191e-04     00s08  00041  -5.279573e+02   2.603575e-03     00s08  00042  -5.279579e+02   1.138803e-03     00s08  00043  -5.279586e+02   6.860487e-04     00s09  00044  -5.279588e+02   1.149475e-03     00s09  00045  -5.279590e+02   7.215511e-05 
    00s09  00046  -5.279590e+02   4.108091e-05     00s09  00047  -5.279591e+02   1.948023e-05     00s09  00048  -5.279591e+02   3.496871e-04     00s10  00049  -5.279591e+02   2.289527e-06     00s10  00050  -5.279591e+02   3.019662e-06 
    00s10  00051  -5.279591e+02   2.525381e-06     00s10  00052  -5.279591e+02   4.238387e-05     00s10  00053  -5.279591e+02   1.236340e-05     00s11  00054  -5.279591e+02   1.747326e-06     00s11  00055  -5.279591e+02   1.217428e-06     00s11  00056  -5.279591e+02   3.174951e-06     00s11  00057  -5.279591e+02   3.174951e-06 
Runtime:     00s11
Optimization status: Converged

Optimization restart 1/1, f = -527.9591376632068
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '32', '100', '4']]
prob:  <search.SurrogateProblem object at 0x14a91359c190>
0 OK
bestX [array([[0.55  , 0.5212, 0.2505, 0.7652, 0.0184]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9825.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9825
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9825
........................................ [0.00131, 0.001207, 0.001172]
OUTPUT:%f [0.00131, 0.001207, 0.001172] 0.0011895
store_func_eval
problem.constants
None
MLA iteration:  35
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -3.117737e+02           nan     00s00  00001  -3.117737e+02   8.835556e+03     00s00  00002  -3.870452e+02   3.251629e+03     00s00  00003  -4.398008e+02   4.437729e+02 
    00s00  00004  -4.629656e+02   4.556565e+02     00s01  00005  -5.198229e+02   4.244530e+01     00s01  00006  -5.224067e+02   1.069036e+02     00s01  00007  -5.259311e+02   1.059461e+01     00s01  00008  -5.271807e+02   2.520502e+01     00s01  00009  -5.286880e+02   4.224078e+00     00s02  00010  -5.297457e+02   1.576743e+00     00s02  00011  -5.304010e+02   2.807219e+00 
    00s02  00012  -5.309261e+02   1.677824e+00     00s02  00013  -5.318311e+02   6.965926e-01     00s02  00014  -5.318781e+02   6.089638e-01     00s03  00015  -5.319345e+02   5.284798e-02     00s03  00016  -5.319510e+02   5.590056e-02     00s03  00017  -5.320090e+02   1.257389e-01     00s03  00018  -5.313312e+02   1.276319e+01     00s04  00019  -5.321144e+02   1.550271e-01     00s04  00020  -5.322905e+02   2.457941e-01 
    00s04  00021  -5.324004e+02   3.553772e-02     00s04  00022  -5.324463e+02   3.960148e-02     00s04  00023  -5.324915e+02   3.551921e-02     00s05  00024  -5.325277e+02   1.352895e-02     00s05  00025  -5.326226e+02   7.202762e-02     00s05  00026  -5.326784e+02   5.794733e-02     00s05  00027  -5.326996e+02   1.695876e-01     00s05  00028  -5.327216e+02   4.482130e-02     00s06  00029  -5.327452e+02   3.343877e-02 
    00s06  00030  -5.327482e+02   7.046754e-03     00s06  00031  -5.327492e+02   6.737513e-04     00s06  00032  -5.327494e+02   2.030619e-04 
    00s06  00033  -5.327495e+02   4.110033e-04     00s07  00034  -5.327500e+02   1.287129e-03     00s07  00035  -5.327513e+02   3.327900e-03     00s07  00036  -5.327533e+02   3.240250e-03     00s07  00037  -5.327537e+02   5.790812e-03     00s07  00038  -5.327543e+02   1.427982e-04     00s08  00039  -5.327543e+02   2.058135e-05 
    00s08  00040  -5.327543e+02   2.625908e-06     00s08  00041  -5.327543e+02   4.101208e-06     00s08  00042  -5.327543e+02   7.490671e-06     00s09  00043  -5.327543e+02   1.308234e-05     00s09  00044  -5.327543e+02   2.774852e-05     00s09  00045  -5.327544e+02   5.420099e-05     00s09  00046  -5.327545e+02   1.003796e-04     00s09  00047  -5.327545e+02   6.617476e-04     00s10  00048  -5.327547e+02   2.703837e-04     00s10  00049  -5.327547e+02   3.017724e-03     00s10  00050  -5.327548e+02   6.281668e-04     00s10  00051  -5.327549e+02   1.017832e-04     00s10  00052  -5.327550e+02   2.371369e-05     00s11  00053  -5.327551e+02   2.347119e-05     00s11  00054  -5.327521e+02   3.022887e-02     00s11  00055  -5.327551e+02   3.710508e-05     00s11  00056  -5.327551e+02   5.469584e-06 
    00s11  00057  -5.327551e+02   7.194494e-07     00s12  00058  -5.327551e+02   8.923617e-07     00s12  00059  -5.327551e+02   1.626709e-04     00s12  00060  -5.327551e+02   1.360562e-07     00s12  00061  -5.327551e+02   1.360562e-07 
Runtime:     00s12
Optimization status: Converged

Optimization restart 1/1, f = -532.7551457536571
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '32', '100', '4'], [' ', ' ', '16', '100', '4']]
prob:  <search.SurrogateProblem object at 0x14a9128d4280>
0 OK
bestX [array([[7.0829e-01, 8.6276e-01, 5.2405e-04, 9.6640e-01, 2.4306e-02]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5632.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5632
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5632
........................................ [0.001387, 0.001185, 0.001166]
OUTPUT:%f [0.001387, 0.001185, 0.001166] 0.0011755
store_func_eval
problem.constants
None
MLA iteration:  36
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -3.146772e+02           nan     00s00  00001  -3.146772e+02   8.977686e+03     00s00  00002  -3.905837e+02   3.304392e+03     00s00  00003  -4.435982e+02   4.470815e+02 
    00s00  00004  -4.667696e+02   4.691479e+02     00s01  00005  -5.241510e+02   4.483051e+01     00s01  00006  -5.266200e+02   1.195183e+02     00s01  00007  -5.305070e+02   1.134896e+01     00s01  00008  -5.317637e+02   2.678092e+01     00s01  00009  -5.333245e+02   4.205952e+00     00s02  00010  -5.343602e+02   1.697393e+00     00s02  00011  -5.351049e+02   3.347997e+00 
    00s02  00012  -5.356286e+02   1.690386e+00     00s02  00013  -5.365572e+02   9.892090e-01     00s03  00014  -5.366622e+02   3.392240e-01     00s03  00015  -5.366984e+02   7.403339e-02     00s03  00016  -5.367264e+02   8.371968e-02     00s03  00017  -5.366576e+02   1.786371e+00     00s03  00018  -5.368161e+02   1.799467e-01     00s04  00019  -5.369162e+02   2.564835e-01     00s04  00020  -5.371391e+02   2.601176e-01     00s04  00021  -5.372443e+02   1.289342e-01 
    00s04  00022  -5.372884e+02   1.660341e-02     00s04  00023  -5.373125e+02   2.952425e-02     00s05  00024  -5.373210e+02   2.461576e-01     00s05  00025  -5.373576e+02   3.352380e-02     00s05  00026  -5.373788e+02   1.329888e-02     00s05  00027  -5.374166e+02   3.737641e-02     00s05  00028  -5.374533e+02   6.240447e-02     00s06  00029  -5.374856e+02   2.551228e-02     00s06  00030  -5.374967e+02   7.073672e-03     00s06  00031  -5.375042e+02   1.402047e-02     00s06  00032  -5.375075e+02   1.490599e-02     00s07  00033  -5.375093e+02   2.161854e-03     00s07  00034  -5.375099e+02   9.173910e-04     00s07  00035  -5.375112e+02   1.292826e-03 
    00s07  00036  -5.375153e+02   8.024817e-03     00s07  00037  -5.375180e+02   9.085397e-04     00s08  00038  -5.375187e+02   7.017636e-04     00s08  00039  -5.375183e+02   4.534738e-03     00s08  00040  -5.375187e+02   2.809141e-04     00s08  00041  -5.375187e+02   2.187628e-05     00s08  00042  -5.375188e+02   1.047632e-05     00s09  00043  -5.375188e+02   1.901168e-05     00s09  00044  -5.375188e+02   5.928547e-05     00s09  00045  -5.375188e+02   1.800299e-04 
    00s09  00046  -5.375189e+02   6.982750e-04     00s09  00047  -5.375192e+02   1.030696e-03     00s10  00048  -5.375192e+02   9.216781e-03     00s10  00049  -5.375194e+02   3.825591e-03     00s10  00050  -5.375199e+02   1.969558e-03     00s10  00051  -5.375206e+02   1.682699e-04     00s10  00052  -5.375209e+02   6.679316e-06     00s11  00053  -5.375210e+02   6.501042e-05     00s11  00054  -5.375205e+02   5.995488e-03 
    00s11  00055  -5.375210e+02   8.185002e-05     00s11  00056  -5.375210e+02   1.552866e-05     00s12  00057  -5.375211e+02   4.094757e-05     00s12  00058  -5.375211e+02   1.617488e-05 
    00s12  00059  -5.375211e+02   7.574904e-07     00s12  00060  -5.375211e+02   1.625467e-06     00s12  00061  -5.375211e+02   1.569931e-06     00s13  00062  -5.375211e+02   1.569931e-06 
Runtime:     00s13
Optimization status: Converged

Optimization restart 1/1, f = -537.5210918479494
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '32', '100', '4'], [' ', ' ', '16', '100', '4'], [' ', ' ', '4', '2048', '4']]
prob:  <search.SurrogateProblem object at 0x14a9126c3fa0>
0 OK
bestX [array([[0.9137, 0.7261, 0.3029, 0.7756, 0.0406]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6803.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6803
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6803
........................................ [0.001332, 0.001224, 0.001188]
OUTPUT:%f [0.001332, 0.001224, 0.001188] 0.001206
store_func_eval
problem.constants
None
MLA iteration:  37
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -3.183427e+02           nan     00s00  00001  -3.183427e+02   8.881265e+03     00s00  00002  -3.935426e+02   3.276493e+03     00s00  00003  -4.482447e+02   4.774834e+02     00s00  00004  -4.748054e+02   4.857021e+02     00s01  00005  -5.325110e+02   3.198153e+01     00s01  00006  -5.325887e+02   9.935422e+01 
    00s01  00007  -5.365156e+02   5.924043e+00     00s01  00008  -5.376331e+02   7.350549e+00     00s01  00009  -5.386262e+02   4.915187e+00     00s02  00010  -5.375187e+02   2.576540e+01     00s02  00011  -5.401303e+02   1.297988e+00     00s02  00012  -5.405279e+02   1.501615e+00     00s02  00013  -5.414534e+02   2.224272e-01     00s03  00014  -5.415345e+02   3.816932e-01     00s03  00015  -5.415989e+02   1.183962e-01     00s03  00016  -5.417465e+02   6.256460e-01     00s03  00017  -5.418726e+02   7.148966e-01     00s03  00018  -5.420185e+02   3.489395e-01     00s04  00019  -5.420994e+02   1.415719e-01 
    00s04  00020  -5.421298e+02   7.005734e-02     00s04  00021  -5.421700e+02   3.075008e-02     00s04  00022  -5.421886e+02   8.823695e-03     00s04  00023  -5.422039e+02   7.454456e-03     00s05  00024  -5.422200e+02   5.878574e-03     00s05  00025  -5.422749e+02   1.868454e-02     00s05  00026  -5.420533e+02   2.491325e+00     00s05  00027  -5.422799e+02   3.671996e-02 
    00s06  00028  -5.422864e+02   8.253079e-03     00s06  00029  -5.422898e+02   9.041092e-04     00s06  00030  -5.422902e+02   1.922947e-04     00s06  00031  -5.422903e+02   1.442324e-03     00s06  00032  -5.422904e+02   3.436620e-04     00s07  00033  -5.422906e+02   1.230843e-04     00s07  00034  -5.422910e+02   1.210226e-03     00s07  00035  -5.422917e+02   2.633496e-03     00s07  00036  -5.422924e+02   1.659513e-03 
    00s07  00037  -5.422928e+02   6.756208e-04     00s08  00038  -5.422925e+02   6.683908e-03     00s08  00039  -5.422930e+02   1.013388e-03     00s08  00040  -5.422932e+02   2.251547e-04     00s08  00041  -5.422934e+02   1.355403e-03     00s08  00042  -5.422937e+02   2.821610e-03     00s09  00043  -5.422943e+02   3.824431e-03     00s09  00044  -5.422952e+02   6.261775e-03     00s09  00045  -5.422964e+02   5.480012e-04     00s09  00046  -5.422970e+02   1.286730e-04     00s10  00047  -5.422974e+02   2.728014e-04     00s10  00048  -5.422974e+02   2.920271e-04 
    00s10  00049  -5.422975e+02   3.103419e-05     00s10  00050  -5.422976e+02   6.231532e-05     00s10  00051  -5.422976e+02   2.555753e-04     00s11  00052  -5.422976e+02   6.539884e-05     00s11  00053  -5.422977e+02   9.031017e-06     00s11  00054  -5.422977e+02   4.680418e-06 
    00s11  00055  -5.422977e+02   3.314274e-06     00s11  00056  -5.422976e+02   1.174063e-03     00s12  00057  -5.422977e+02   2.738506e-06     00s12  00058  -5.422977e+02   2.738506e-06 
Runtime:     00s12
Optimization status: Converged

Optimization restart 1/1, f = -542.2976921744223
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '32', '100', '4'], [' ', ' ', '16', '100', '4'], [' ', ' ', '4', '2048', '4'], [' ', ' ', '20', '100', '4']]
prob:  <search.SurrogateProblem object at 0x14a918060af0>
0 OK
bestX [array([[0.858 , 0.7905, 0.0089, 0.846 , 0.0873]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2307.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2307
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2307
........................................ [0.001379, 0.001212, 0.001184]
OUTPUT:%f [0.001379, 0.001212, 0.001184] 0.0011979999999999998
store_func_eval
problem.constants
None
MLA iteration:  38
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -3.215976e+02           nan     00s00  00001  -3.215976e+02   9.081032e+03     00s00  00002  -3.978349e+02   3.341511e+03     00s00  00003  -4.526898e+02   4.804187e+02     00s00  00004  -4.788106e+02   4.849709e+02     00s01  00005  -5.367495e+02   3.483542e+01 
    00s01  00006  -5.368851e+02   1.096237e+02     00s01  00007  -5.411404e+02   6.729065e+00     00s01  00008  -5.423091e+02   8.672683e+00     00s01  00009  -5.432537e+02   4.790829e+00     00s02  00010  -5.433947e+02   1.467524e+01     00s02  00011  -5.445787e+02   1.262020e+00     00s02  00012  -5.450467e+02   2.094698e+00     00s02  00013  -5.455990e+02   1.547492e+00     00s03  00014  -5.460921e+02   6.130367e-01     00s03  00015  -5.461964e+02   1.920358e-01     00s03  00016  -5.462207e+02   6.420595e-02 
    00s03  00017  -5.462653e+02   1.380689e-01     00s03  00018  -5.463709e+02   7.837893e-01     00s04  00019  -5.465233e+02   1.241762e+00     00s04  00020  -5.466311e+02   4.392660e-01     00s04  00021  -5.467186e+02   6.447222e-02     00s04  00022  -5.467473e+02   2.199742e-02     00s04  00023  -5.467620e+02   4.434582e-02     00s05  00024  -5.467951e+02   1.164443e-01     00s05  00025  -5.468377e+02   5.053244e-02     00s05  00026  -5.468694e+02   3.575934e-03 
    00s05  00027  -5.468902e+02   5.720212e-02     00s06  00028  -5.469303e+02   2.224134e-01     00s06  00029  -5.469352e+02   3.919703e-02     00s06  00030  -5.469549e+02   1.451360e-01     00s06  00031  -5.469637e+02   3.170633e-02 
    00s06  00032  -5.469674e+02   1.618404e-03     00s07  00033  -5.469676e+02   1.882980e-03     00s07  00034  -5.469699e+02   6.965046e-03     00s07  00035  -5.469718e+02   6.494583e-03     00s07  00036  -5.469748e+02   5.742581e-03     00s07  00037  -5.469815e+02   1.719604e-02     00s08  00038  -5.469840e+02   4.228961e-03     00s08  00039  -5.469854e+02   4.051669e-05     00s08  00040  -5.469855e+02   2.339227e-05     00s08  00041  -5.469855e+02   1.258917e-04     00s09  00042  -5.469855e+02   1.274021e-04     00s09  00043  -5.469856e+02   5.864206e-03     00s09  00044  -5.469857e+02   1.472239e-03 
    00s09  00045  -5.469860e+02   3.508668e-04     00s09  00046  -5.469866e+02   5.151199e-04     00s10  00047  -5.469874e+02   8.011696e-04     00s10  00048  -5.469879e+02   7.726851e-05     00s10  00049  -5.469881e+02   6.806099e-05     00s10  00050  -5.469882e+02   1.489933e-04 
    00s10  00051  -5.469882e+02   7.842858e-05     00s11  00052  -5.469882e+02   2.441503e-05     00s11  00053  -5.469883e+02   5.521609e-06     00s11  00054  -5.469883e+02   1.715796e-06     00s11  00055  -5.469883e+02   5.869022e-05     00s11  00056  -5.469883e+02   4.091578e-06 
    00s12  00057  -5.469883e+02   4.091578e-06 
Runtime:     00s12
Optimization status: Converged

Optimization restart 1/1, f = -546.9882714063682
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '32', '100', '4'], [' ', ' ', '16', '100', '4'], [' ', ' ', '4', '2048', '4'], [' ', ' ', '20', '100', '4'], [' ', ' ', '4', '128', '4']]
prob:  <search.SurrogateProblem object at 0x14a9135ba4f0>
0 OK
bestX [array([[0.7232, 0.6287, 0.1794, 0.8401, 0.074 ]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/451.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/451
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/451
........................................ [0.001333, 0.001228, 0.001177]
OUTPUT:%f [0.001333, 0.001228, 0.001177] 0.0012025
store_func_eval
problem.constants
None
MLA iteration:  39
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -3.262107e+02           nan     00s00  00001  -3.262107e+02   9.173352e+03     00s00  00002  -4.027166e+02   3.358689e+03     00s00  00003  -4.573747e+02   4.750153e+02 
    00s00  00004  -4.828319e+02   4.839631e+02     00s01  00005  -5.408690e+02   3.771549e+01     00s01  00006  -5.412540e+02   1.197707e+02     00s01  00007  -5.457272e+02   8.013800e+00     00s01  00008  -5.469540e+02   1.181805e+01     00s02  00009  -5.479246e+02   4.622763e+00     00s02  00010  -5.491854e+02   3.954247e+00     00s02  00011  -5.496454e+02   1.312639e+00     00s02  00012  -5.502113e+02   6.859702e-01     00s02  00013  -5.507315e+02   6.486305e-01     00s03  00014  -5.509389e+02   3.224777e-01 
    00s03  00015  -5.509830e+02   6.410545e-02     00s03  00016  -5.510122e+02   6.444731e-02     00s03  00017  -5.510656e+02   3.057032e-01     00s03  00018  -5.511193e+02   9.417311e-02     00s04  00019  -5.512099e+02   6.322965e-02     00s04  00020  -5.514274e+02   5.274067e-02     00s04  00021  -5.500703e+02   1.481991e+01     00s04  00022  -5.514535e+02   1.921014e-01     00s05  00023  -5.515091e+02   1.128233e-01     00s05  00024  -5.515795e+02   5.734337e-02     00s05  00025  -5.516629e+02   1.603111e-02     00s05  00026  -5.517072e+02   3.726908e-02     00s05  00027  -5.516602e+02   4.228847e-01     00s06  00028  -5.517154e+02   1.757246e-02     00s06  00029  -5.517312e+02   1.515605e-02 
    00s06  00030  -5.517369e+02   3.330034e-03     00s06  00031  -5.517463e+02   7.185298e-03     00s06  00032  -5.516896e+02   9.803466e-01     00s07  00033  -5.517474e+02   7.341797e-03     00s07  00034  -5.517495e+02   1.834690e-03     00s07  00035  -5.517508e+02   1.242928e-03     00s07  00036  -5.517549e+02   2.782390e-03     00s08  00037  -5.517566e+02   3.849997e-02     00s08  00038  -5.517616e+02   3.170264e-04     00s08  00039  -5.517618e+02   9.840169e-05 
    00s08  00040  -5.517619e+02   3.741629e-06     00s08  00041  -5.517619e+02   8.878950e-06     00s09  00042  -5.517619e+02   4.032529e-05     00s09  00043  -5.517619e+02   1.322748e-04     00s09  00044  -5.517620e+02   2.937179e-04     00s09  00045  -5.517621e+02   6.168050e-04     00s09  00046  -5.517622e+02   1.128141e-03     00s10  00047  -5.517624e+02   2.302571e-04     00s10  00048  -5.517626e+02   9.946364e-05     00s10  00049  -5.517627e+02   2.290722e-04     00s10  00050  -5.517627e+02   1.635834e-04     00s11  00051  -5.517614e+02   2.778994e-02     00s11  00052  -5.517628e+02   8.145429e-04     00s11  00053  -5.517628e+02   5.644742e-04     00s11  00054  -5.517630e+02   1.947500e-04     00s11  00055  -5.517632e+02   3.959411e-05     00s12  00056  -5.517633e+02   1.597702e-05     00s12  00057  -5.517633e+02   5.144348e-05     00s12  00058  -5.517633e+02   6.495259e-06     00s12  00059  -5.517633e+02   3.260573e-06     00s12  00060  -5.517633e+02   1.261457e-05     00s13  00061  -5.517633e+02   1.008286e-05     00s13  00062  -5.517620e+02   6.160086e-03     00s13  00063  -5.517633e+02   1.350752e-05     00s13  00064  -5.517633e+02   1.350752e-05 
Runtime:     00s13
Optimization status: Converged

Optimization restart 1/1, f = -551.7633438751894
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '32', '100', '4'], [' ', ' ', '16', '100', '4'], [' ', ' ', '4', '2048', '4'], [' ', ' ', '20', '100', '4'], [' ', ' ', '4', '128', '4'], [' ', ' ', '8', '128', '4']]
prob:  <search.SurrogateProblem object at 0x14a91297cb20>
0 OK
bestX [array([[0.7369, 0.6467, 0.4857, 0.6318, 0.0105]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7923.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7923
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7923
........................................ [0.001391, 0.001228, 0.0012]
OUTPUT:%f [0.001391, 0.001228, 0.0012] 0.0012139999999999998
store_func_eval
problem.constants
None
MLA iteration:  40
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -3.301680e+02           nan     00s00  00001  -3.301680e+02   9.171843e+03     00s00  00002  -4.068451e+02   3.395806e+03     00s00  00003  -4.628366e+02   4.854258e+02 
    00s00  00004  -4.893960e+02   4.833651e+02     00s01  00005  -5.469404e+02   3.250752e+01     00s01  00006  -5.469453e+02   9.838476e+01     00s01  00007  -5.512730e+02   3.731984e+00     00s01  00008  -5.520379e+02   3.630020e+00     00s02  00009  -5.525959e+02   1.817869e+01     00s02  00010  -5.539941e+02   1.205714e+00     00s02  00011  -5.547612e+02   3.497765e+00 
    00s02  00012  -5.554270e+02   4.373142e-01     00s02  00013  -5.556776e+02   6.992840e-01     00s03  00014  -5.557439e+02   1.452677e-01     00s03  00015  -5.557950e+02   2.624004e-01     00s03  00016  -5.558235e+02   2.878780e-01     00s03  00017  -5.559200e+02   3.735997e-01     00s03  00018  -5.560526e+02   3.516016e-01     00s04  00019  -5.561579e+02   6.254868e-01     00s04  00020  -5.563088e+02   1.191874e-01 
    00s04  00021  -5.563338e+02   2.309725e-02     00s04  00022  -5.563503e+02   2.335786e-02     00s05  00023  -5.563634e+02   2.433253e-02     00s05  00024  -5.564536e+02   4.246309e-02     00s05  00025  -5.564937e+02   1.236233e-01     00s05  00026  -5.565171e+02   6.236039e-02 
    00s05  00027  -5.565239e+02   3.022728e-03     00s06  00028  -5.565253e+02   3.674495e-03     00s06  00029  -5.565263e+02   2.426214e-03     00s06  00030  -5.565317e+02   6.543985e-03     00s06  00031  -5.565407e+02   1.931024e-03     00s07  00032  -5.565457e+02   1.239316e-02 
    00s07  00033  -5.565474e+02   2.713512e-04     00s07  00034  -5.565475e+02   3.093701e-05     00s07  00035  -5.565475e+02   5.540983e-06     00s07  00036  -5.565475e+02   1.829851e-05     00s08  00037  -5.565475e+02   5.539424e-05     00s08  00038  -5.565476e+02   2.010868e-04     00s08  00039  -5.565477e+02   4.409930e-04     00s08  00040  -5.565478e+02   2.203953e-03     00s08  00041  -5.565481e+02   1.790787e-03     00s09  00042  -5.565479e+02   1.360659e-02     00s09  00043  -5.565485e+02   5.423230e-03     00s09  00044  -5.565489e+02   7.439134e-04     00s09  00045  -5.565490e+02   4.251240e-05 
    00s10  00046  -5.565490e+02   1.754160e-05     00s10  00047  -5.565490e+02   1.088504e-04     00s10  00048  -5.565491e+02   1.904286e-04     00s10  00049  -5.565492e+02   4.357697e-04     00s10  00050  -5.565493e+02   3.283558e-04     00s11  00051  -5.565494e+02   7.718921e-04     00s11  00052  -5.565494e+02   2.233228e-05     00s11  00053  -5.565494e+02   2.443070e-06     00s11  00054  -5.565495e+02   9.029075e-06     00s11  00055  -5.565495e+02   1.448009e-05     00s12  00056  -5.565495e+02   1.668041e-05     00s12  00057  -5.565495e+02   7.294171e-05 
    00s12  00058  -5.565495e+02   2.198664e-06     00s12  00059  -5.565495e+02   2.876116e-06     00s13  00060  -5.565495e+02   2.766885e-06     00s13  00061  -5.565495e+02   1.197517e-07 
    00s13  00062  -5.565495e+02   1.197517e-07 
Runtime:     00s13
Optimization status: Converged

Optimization restart 1/1, f = -556.5494799527289
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '32', '100', '4'], [' ', ' ', '16', '100', '4'], [' ', ' ', '4', '2048', '4'], [' ', ' ', '20', '100', '4'], [' ', ' ', '4', '128', '4'], [' ', ' ', '8', '128', '4'], [' ', ' ', '50', '64', '4']]
prob:  <search.SurrogateProblem object at 0x14a91359ceb0>
0 OK
bestX [array([[0.6236, 0.5717, 0.1056, 0.9333, 0.0695]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/415.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/415
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/415
........................................ [0.001336, 0.001186, 0.001161]
OUTPUT:%f [0.001336, 0.001186, 0.001161] 0.0011735
store_func_eval
problem.constants
None
MLA iteration:  41
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -3.342682e+02           nan     00s00  00001  -3.342682e+02   9.261100e+03     00s00  00002  -4.114990e+02   3.433213e+03     00s00  00003  -4.675726e+02   4.863450e+02     00s00  00004  -4.939103e+02   4.856128e+02 
    00s01  00005  -5.514583e+02   3.460082e+01     00s01  00006  -5.512584e+02   1.097353e+02     00s01  00007  -5.560662e+02   3.700483e+00     00s01  00008  -5.568250e+02   3.629828e+00     00s02  00009  -5.576190e+02   1.589763e+01     00s02  00010  -5.588076e+02   1.202236e+00     00s02  00011  -5.596034e+02   3.122158e+00     00s02  00012  -5.602818e+02   3.420834e-01     00s02  00013  -5.604906e+02   4.382166e-01     00s03  00014  -5.605494e+02   1.308637e-01 
    00s03  00015  -5.605717e+02   1.202649e+00     00s03  00016  -5.606013e+02   1.668691e-01     00s03  00017  -5.606416e+02   4.128074e-01     00s04  00018  -5.607159e+02   6.222401e-01     00s04  00019  -5.609204e+02   5.868413e-01     00s04  00020  -5.610502e+02   9.845148e-01     00s04  00021  -5.610076e+02   1.459736e+00     00s04  00022  -5.612084e+02   9.307759e-02     00s05  00023  -5.612464e+02   3.403194e-02 
    00s05  00024  -5.612632e+02   2.230660e-02     00s05  00025  -5.612733e+02   5.838238e-03     00s05  00026  -5.612834e+02   5.047366e-03     00s05  00027  -5.612957e+02   1.717923e-02     00s06  00028  -5.613042e+02   3.951106e-02     00s06  00029  -5.613087e+02   9.412978e-04 
    00s06  00030  -5.613092e+02   3.701262e-04     00s06  00031  -5.613096e+02   4.995648e-04     00s07  00032  -5.613111e+02   2.533575e-03     00s07  00033  -5.613129e+02   3.495653e-03     00s07  00034  -5.613064e+02   4.919894e-02     00s07  00035  -5.613133e+02   2.334439e-03     00s07  00036  -5.613143e+02   5.539923e-04     00s08  00037  -5.613145e+02   1.683750e-04     00s08  00038  -5.613145e+02   1.926627e-04 
    00s08  00039  -5.613145e+02   4.828572e-06     00s08  00040  -5.613145e+02   3.618131e-06     00s09  00041  -5.613145e+02   3.974908e-06     00s09  00042  -5.613146e+02   7.597567e-06     00s09  00043  -5.613137e+02   1.360383e-02     00s09  00044  -5.613146e+02   3.361999e-04     00s09  00045  -5.613148e+02   1.702475e-04     00s10  00046  -5.613152e+02   6.130648e-05     00s10  00047  -5.613156e+02   3.267023e-05     00s10  00048  -5.613124e+02   6.732298e-03     00s10  00049  -5.613156e+02   1.073858e-04     00s10  00050  -5.613158e+02   4.658524e-06     00s11  00051  -5.613158e+02   3.128788e-06     00s11  00052  -5.613158e+02   3.164917e-04     00s11  00053  -5.613159e+02   4.006255e-05     00s11  00054  -5.613159e+02   1.637975e-05     00s12  00055  -5.613159e+02   5.860855e-06     00s12  00056  -5.613159e+02   3.381334e-06     00s12  00057  -5.613159e+02   1.318616e-06     00s12  00058  -5.613159e+02   5.431635e-04     00s12  00059  -5.613159e+02   6.306544e-06     00s13  00060  -5.613159e+02   6.306544e-06 
Runtime:     00s13
Optimization status: Converged

Optimization restart 1/1, f = -561.3159133427118
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '32', '100', '4'], [' ', ' ', '16', '100', '4'], [' ', ' ', '4', '2048', '4'], [' ', ' ', '20', '100', '4'], [' ', ' ', '4', '128', '4'], [' ', ' ', '8', '128', '4'], [' ', ' ', '50', '64', '4'], [' ', ' ', '8', '2048', '4']]
prob:  <search.SurrogateProblem object at 0x14a912e22dc0>
0 OK
bestX [array([[0.6415, 0.9474, 0.6627, 0.55  , 0.0155]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3482.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3482
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3482
........................................ [0.001348, 0.001227, 0.00119]
OUTPUT:%f [0.001348, 0.001227, 0.00119] 0.0012085
store_func_eval
problem.constants
None
MLA iteration:  42
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -3.382421e+02           nan     00s00  00001  -3.382421e+02   9.351276e+03 
    00s00  00002  -4.160474e+02   3.500203e+03     00s00  00003  -4.727868e+02   4.856825e+02     00s00  00004  -4.989999e+02   4.897438e+02     00s01  00005  -5.560849e+02   3.585375e+01     00s01  00006  -5.556550e+02   1.159159e+02     00s01  00007  -5.607936e+02   3.639969e+00 
    00s01  00008  -5.615350e+02   3.582102e+00     00s02  00009  -5.620972e+02   1.894972e+01     00s02  00010  -5.635289e+02   1.192938e+00     00s02  00011  -5.643467e+02   3.640637e+00     00s02  00012  -5.650093e+02   2.863664e-01     00s02  00013  -5.652094e+02   4.592137e-01     00s03  00014  -5.652745e+02   1.642860e-01     00s03  00015  -5.652643e+02   1.337574e+00     00s03  00016  -5.653216e+02   2.093585e-01     00s03  00017  -5.653615e+02   3.019745e-01     00s04  00018  -5.654428e+02   4.326085e-01     00s04  00019  -5.656257e+02   4.430602e-01     00s04  00020  -5.657942e+02   5.389434e-01     00s04  00021  -5.658177e+02   8.031880e-01 
    00s04  00022  -5.659310e+02   5.645655e-02     00s05  00023  -5.659435e+02   9.587644e-03     00s05  00024  -5.659538e+02   9.974669e-03     00s05  00025  -5.659751e+02   5.903049e-03     00s05  00026  -5.659589e+02   4.727991e-01     00s06  00027  -5.659810e+02   6.443034e-02     00s06  00028  -5.659983e+02   2.642895e-02     00s06  00029  -5.660298e+02   4.109828e-03     00s06  00030  -5.660611e+02   2.674636e-02     00s06  00031  -5.660679e+02   2.822714e-03     00s07  00032  -5.660704e+02   3.795680e-03 
    00s07  00033  -5.660717e+02   5.503985e-03     00s07  00034  -5.660787e+02   1.518721e-02     00s07  00035  -5.660808e+02   1.187808e-02     00s07  00036  -5.660840e+02   8.493016e-03 
    00s08  00037  -5.660846e+02   4.421207e-04     00s08  00038  -5.660847e+02   3.667809e-05     00s08  00039  -5.660847e+02   1.397066e-05     00s08  00040  -5.660847e+02   1.498888e-05 
    00s09  00041  -5.660848e+02   7.571785e-05     00s09  00042  -5.660849e+02   2.444024e-04     00s09  00043  -5.660851e+02   6.317027e-04     00s09  00044  -5.660856e+02   1.230525e-03     00s09  00045  -5.660861e+02   2.506178e-03     00s10  00046  -5.660869e+02   6.708282e-04     00s10  00047  -5.660871e+02   1.292998e-04     00s10  00048  -5.660873e+02   5.171424e-04     00s10  00049  -5.660873e+02   2.100445e-03     00s11  00050  -5.660874e+02   2.079499e-04     00s11  00051  -5.660874e+02   1.421955e-04     00s11  00052  -5.660876e+02   3.597066e-05     00s11  00053  -5.660875e+02   9.596886e-04     00s11  00054  -5.660876e+02   2.206899e-05 
    00s12  00055  -5.660877e+02   6.314350e-06     00s12  00056  -5.660877e+02   2.213874e-06     00s12  00057  -5.660877e+02   1.202616e-06     00s12  00058  -5.660877e+02   1.921606e-04     00s12  00059  -5.660877e+02   8.380126e-06     00s13  00060  -5.660878e+02   4.637561e-07 
    00s13  00061  -5.660878e+02   1.439463e-08     00s13  00062  -5.660878e+02   1.026495e-07     00s13  00063  -5.660877e+02   1.372779e-03     00s14  00064  -5.660878e+02   3.227590e-07     00s14  00065  -5.660878e+02   3.227590e-07 
Runtime:     00s14
Optimization status: Converged

Optimization restart 1/1, f = -566.0877668839929
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '32', '100', '4'], [' ', ' ', '16', '100', '4'], [' ', ' ', '4', '2048', '4'], [' ', ' ', '20', '100', '4'], [' ', ' ', '4', '128', '4'], [' ', ' ', '8', '128', '4'], [' ', ' ', '50', '64', '4'], [' ', ' ', '8', '2048', '4'], [' ', ' ', '80', '64', '4']]
prob:  <search.SurrogateProblem object at 0x14a91297c220>
0 OK
bestX [array([[0.648 , 0.6356, 0.2322, 0.8337, 0.0439]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9803.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9803
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9803
........................................ [0.00133, 0.001197, 0.001161]
OUTPUT:%f [0.00133, 0.001197, 0.001161] 0.001179
store_func_eval
problem.constants
None
MLA iteration:  43
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -3.431372e+02           nan     00s00  00001  -3.431372e+02   9.360225e+03     00s00  00002  -4.210087e+02   3.517170e+03     00s00  00003  -4.779540e+02   4.797546e+02 
    00s01  00004  -5.037413e+02   4.877576e+02     00s01  00005  -5.605517e+02   3.742598e+01     00s01  00006  -5.601936e+02   1.231837e+02     00s01  00007  -5.655846e+02   3.691907e+00     00s01  00008  -5.663522e+02   3.670354e+00     00s02  00009  -5.673029e+02   1.467782e+01     00s02  00010  -5.683794e+02   1.189034e+00     00s02  00011  -5.691976e+02   2.860886e+00     00s02  00012  -5.698756e+02   2.426497e-01 
    00s03  00013  -5.700443e+02   3.039365e-01     00s03  00014  -5.701087e+02   1.372866e-01     00s03  00015  -5.698754e+02   4.467496e+00     00s03  00016  -5.701568e+02   1.708157e-01     00s03  00017  -5.702083e+02   3.370168e-01     00s04  00018  -5.703093e+02   6.318261e-01     00s04  00019  -5.705034e+02   5.099103e-01     00s04  00020  -5.703259e+02   4.575052e+00     00s04  00021  -5.705765e+02   8.141456e-01 
    00s05  00022  -5.707364e+02   5.302764e-02     00s05  00023  -5.707709e+02   4.035327e-02     00s05  00024  -5.707942e+02   1.876206e-02     00s05  00025  -5.708144e+02   8.559481e-03     00s05  00026  -5.708288e+02   1.009745e-02     00s06  00027  -5.708549e+02   4.775765e-02     00s06  00028  -5.708766e+02   1.143026e-02     00s06  00029  -5.708827e+02   5.193582e-03     00s06  00030  -5.708834e+02   1.315662e-03     00s07  00031  -5.708840e+02   1.278681e-03     00s07  00032  -5.708860e+02   1.516812e-03     00s07  00033  -5.708886e+02   1.752334e-02     00s07  00034  -5.708927e+02   4.147038e-03 
    00s07  00035  -5.708948e+02   1.389199e-03     00s08  00036  -5.708952e+02   1.224461e-03     00s08  00037  -5.708955e+02   8.101698e-05     00s08  00038  -5.708955e+02   1.987644e-05     00s08  00039  -5.708955e+02   8.953930e-05     00s08  00040  -5.708956e+02   3.866009e-04     00s09  00041  -5.708957e+02   1.428437e-03     00s09  00042  -5.708959e+02   3.301934e-03     00s09  00043  -5.708963e+02   4.697807e-03     00s09  00044  -5.708969e+02   3.378968e-03     00s10  00045  -5.708972e+02   1.808517e-03 
    00s10  00046  -5.708976e+02   2.140825e-04     00s10  00047  -5.708977e+02   5.315713e-04     00s10  00048  -5.708979e+02   1.218793e-03     00s10  00049  -5.708982e+02   1.431215e-03     00s11  00050  -5.708982e+02   1.760536e-04     00s11  00051  -5.708984e+02   1.462440e-04     00s11  00052  -5.708985e+02   5.003682e-05     00s11  00053  -5.708985e+02   1.317873e-04     00s12  00054  -5.708986e+02   2.492380e-04     00s12  00055  -5.708987e+02   3.804189e-04     00s12  00056  -5.708988e+02   6.621322e-04     00s12  00057  -5.708989e+02   1.624823e-04 
    00s12  00058  -5.708990e+02   2.116157e-05     00s13  00059  -5.708990e+02   8.840864e-06     00s13  00060  -5.708990e+02   2.384998e-05     00s13  00061  -5.708990e+02   1.543915e-05     00s13  00062  -5.708990e+02   7.251203e-05     00s14  00063  -5.708991e+02   4.688483e-06     00s14  00064  -5.708991e+02   5.949971e-07 
    00s14  00065  -5.708991e+02   1.471243e-06     00s14  00066  -5.708991e+02   1.471243e-06 
Runtime:     00s14
Optimization status: Converged

Optimization restart 1/1, f = -570.8990622226709
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '32', '100', '4'], [' ', ' ', '16', '100', '4'], [' ', ' ', '4', '2048', '4'], [' ', ' ', '20', '100', '4'], [' ', ' ', '4', '128', '4'], [' ', ' ', '8', '128', '4'], [' ', ' ', '50', '64', '4'], [' ', ' ', '8', '2048', '4'], [' ', ' ', '80', '64', '4'], [' ', ' ', '16', '128', '4']]
prob:  <search.SurrogateProblem object at 0x14a912e4f580>
0 OK
bestX [array([[0.8018, 0.709 , 0.0684, 0.6668, 0.0502]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9774.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9774
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9774
........................................ [0.001429, 0.001191, 0.001168]
OUTPUT:%f [0.001429, 0.001191, 0.001168] 0.0011795
store_func_eval
problem.constants
None
MLA iteration:  44
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -3.471132e+02           nan     00s00  00001  -3.471132e+02   9.498281e+03     00s00  00002  -4.254281e+02   3.554475e+03     00s00  00003  -4.826813e+02   4.741560e+02     00s00  00004  -5.078938e+02   4.882000e+02     00s01  00005  -5.647595e+02   3.987363e+01     00s01  00006  -5.645729e+02   1.329792e+02     00s01  00007  -5.702922e+02   3.842812e+00 
    00s01  00008  -5.711061e+02   3.856804e+00     00s02  00009  -5.724901e+02   1.034198e+01     00s02  00010  -5.732175e+02   1.204217e+00     00s02  00011  -5.740195e+02   2.089761e+00     00s02  00012  -5.747590e+02   1.225450e-01     00s02  00013  -5.748566e+02   1.543323e-01     00s03  00014  -5.749542e+02   1.300476e-01     00s03  00015  -5.750181e+02   2.634486e-01     00s03  00016  -5.751368e+02   2.952393e-01     00s03  00017  -5.753004e+02   1.194284e+00     00s04  00018  -5.754423e+02   1.591338e-01 
    00s04  00019  -5.755001e+02   1.321527e-02     00s04  00020  -5.755235e+02   1.569109e-02     00s04  00021  -5.755515e+02   1.149242e-02     00s04  00022  -5.755796e+02   2.809852e-02     00s05  00023  -5.756026e+02   8.175589e-03     00s05  00024  -5.756648e+02   3.284860e-02     00s05  00025  -5.756691e+02   3.556398e-03     00s05  00026  -5.756781e+02   1.382514e-02     00s06  00027  -5.756824e+02   2.377620e-03     00s06  00028  -5.756843e+02   7.643149e-03     00s06  00029  -5.756893e+02   1.626034e-02     00s06  00030  -5.756929e+02   1.166491e-02     00s06  00031  -5.756946e+02   1.350698e-02     00s07  00032  -5.756956e+02   4.604557e-03     00s07  00033  -5.756963e+02   3.509524e-04 
    00s07  00034  -5.756965e+02   3.847311e-05     00s07  00035  -5.756965e+02   2.494087e-05     00s08  00036  -5.756965e+02   3.227754e-05     00s08  00037  -5.756967e+02   2.688201e-04     00s08  00038  -5.756970e+02   1.643432e-04     00s08  00039  -5.756867e+02   1.252579e-01     00s08  00040  -5.756971e+02   1.640833e-03     00s09  00041  -5.756979e+02   1.024506e-03     00s09  00042  -5.756996e+02   1.682028e-04     00s09  00043  -5.757005e+02   1.051519e-04     00s09  00044  -5.756919e+02   1.124159e-01     00s10  00045  -5.757005e+02   7.763690e-05     00s10  00046  -5.757006e+02   7.113447e-06     00s10  00047  -5.757006e+02   2.042809e-04     00s10  00048  -5.757007e+02   1.582788e-05     00s11  00049  -5.757007e+02   1.510748e-05     00s11  00050  -5.757008e+02   1.993084e-05     00s11  00051  -5.757008e+02   1.641505e-04     00s11  00052  -5.757009e+02   5.835317e-04     00s11  00053  -5.757009e+02   6.169825e-05 
    00s12  00054  -5.757010e+02   3.610724e-06     00s12  00055  -5.757010e+02   5.016069e-06     00s12  00056  -5.757010e+02   2.653270e-05     00s12  00057  -5.757010e+02   7.882200e-05     00s12  00058  -5.757010e+02   1.168765e-07     00s13  00059  -5.757010e+02   9.409941e-08 
    00s13  00060  -5.757010e+02   9.409941e-08 
Runtime:     00s13
Optimization status: Converged

Optimization restart 1/1, f = -575.7010133436052
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '32', '100', '4'], [' ', ' ', '16', '100', '4'], [' ', ' ', '4', '2048', '4'], [' ', ' ', '20', '100', '4'], [' ', ' ', '4', '128', '4'], [' ', ' ', '8', '128', '4'], [' ', ' ', '50', '64', '4'], [' ', ' ', '8', '2048', '4'], [' ', ' ', '80', '64', '4'], [' ', ' ', '16', '128', '4'], [' ', ' ', '4', '80', '4']]
prob:  <search.SurrogateProblem object at 0x14a91352a640>
0 OK
bestX [array([[0.8683, 0.8586, 0.4868, 0.6896, 0.0626]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1393.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1393
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1393
........................................ [0.001359, 0.00124, 0.001188]
OUTPUT:%f [0.001359, 0.00124, 0.001188] 0.001214
store_func_eval
problem.constants
None
MLA iteration:  45
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -3.517446e+02           nan     00s00  00001  -3.517446e+02   9.601135e+03 
    00s00  00002  -4.303562e+02   3.570994e+03     00s00  00003  -4.871612e+02   4.672299e+02     00s00  00004  -5.116047e+02   4.890312e+02     00s01  00005  -5.686796e+02   4.415989e+01     00s01  00006  -5.685600e+02   1.533091e+02 
    00s01  00007  -5.750343e+02   3.975936e+00     00s01  00008  -5.758901e+02   4.044255e+00     00s02  00009  -5.776683e+02   6.365645e+00     00s02  00010  -5.785666e+02   1.013797e+00     00s02  00011  -5.788978e+02   8.375097e-01     00s02  00012  -5.796527e+02   8.270504e-02     00s03  00013  -5.797718e+02   6.273176e-02     00s03  00014  -5.781908e+02   4.210360e+01     00s03  00015  -5.798595e+02   2.131272e-01     00s03  00016  -5.798261e+02   2.188261e+00     00s03  00017  -5.798927e+02   6.183906e-01     00s04  00018  -5.800085e+02   4.136478e-01     00s04  00019  -5.801825e+02   3.845098e-01 
    00s04  00020  -5.802511e+02   1.640190e-02     00s04  00021  -5.802726e+02   2.731151e-02     00s05  00022  -5.803001e+02   3.580228e-02     00s05  00023  -5.803266e+02   1.545056e-02     00s05  00024  -5.803522e+02   1.572013e-02     00s05  00025  -5.803902e+02   6.901027e-03     00s05  00026  -5.804621e+02   1.981240e-02     00s06  00027  -5.804580e+02   6.272437e-02     00s06  00028  -5.804716e+02   4.238356e-03 
    00s06  00029  -5.804727e+02   1.518116e-03     00s06  00030  -5.804741e+02   2.730618e-03     00s07  00031  -5.804760e+02   5.123299e-03     00s07  00032  -5.804771e+02   7.594456e-03     00s07  00033  -5.804782e+02   4.424844e-04     00s07  00034  -5.804785e+02   1.097868e-04 
    00s07  00035  -5.804785e+02   1.922461e-04     00s08  00036  -5.804785e+02   4.605930e-05     00s08  00037  -5.804786e+02   4.220392e-05     00s08  00038  -5.804788e+02   2.062639e-04     00s08  00039  -5.804792e+02   7.123176e-04     00s09  00040  -5.804799e+02   9.665100e-04     00s09  00041  -5.804655e+02   1.420541e-01     00s09  00042  -5.804800e+02   2.706951e-03     00s09  00043  -5.804809e+02   1.304132e-03     00s09  00044  -5.804818e+02   2.088185e-04     00s10  00045  -5.804817e+02   4.898256e-03     00s10  00046  -5.804819e+02   6.808963e-04 
    00s10  00047  -5.804821e+02   2.699689e-05     00s10  00048  -5.804821e+02   5.101188e-06     00s11  00049  -5.804822e+02   2.032123e-04     00s11  00050  -5.804823e+02   1.565913e-05     00s11  00051  -5.804823e+02   9.167147e-07     00s11  00052  -5.804824e+02   2.422000e-06     00s11  00053  -5.804824e+02   4.312962e-06     00s12  00054  -5.804824e+02   8.136518e-05     00s12  00055  -5.804824e+02   7.297513e-06     00s12  00056  -5.804824e+02   7.297513e-06 
Runtime:     00s12
Optimization status: Converged

Optimization restart 1/1, f = -580.4823649019039
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '32', '100', '4'], [' ', ' ', '16', '100', '4'], [' ', ' ', '4', '2048', '4'], [' ', ' ', '20', '100', '4'], [' ', ' ', '4', '128', '4'], [' ', ' ', '8', '128', '4'], [' ', ' ', '50', '64', '4'], [' ', ' ', '8', '2048', '4'], [' ', ' ', '80', '64', '4'], [' ', ' ', '16', '128', '4'], [' ', ' ', '4', '80', '4'], [' ', ' ', '50', '80', '4']]
prob:  <search.SurrogateProblem object at 0x14a912e46be0>
0 OK
bestX [array([[0.8334, 0.9844, 0.8582, 0.4117, 0.0526]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/600.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/600
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/600
........................................ [0.001351, 0.001229, 0.001179]
OUTPUT:%f [0.001351, 0.001229, 0.001179] 0.001204
store_func_eval
problem.constants
None
MLA iteration:  46
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -3.552713e+02           nan     00s00  00001  -3.552713e+02   9.675035e+03     00s00  00002  -4.342867e+02   3.627543e+03     00s00  00003  -4.919174e+02   4.641338e+02     00s00  00004  -5.160944e+02   4.888623e+02     00s01  00005  -5.731601e+02   4.403751e+01     00s01  00006  -5.737964e+02   1.387229e+02     00s01  00007  -5.789495e+02   9.904322e+00     00s01  00008  -5.801490e+02   1.615378e+01     00s02  00009  -5.812115e+02   4.180806e+00     00s02  00010  -5.823537e+02   1.560891e+00     00s02  00011  -5.828340e+02   2.329789e+00 
    00s02  00012  -5.835034e+02   1.679729e+00     00s03  00013  -5.841134e+02   6.625996e-01     00s03  00014  -5.842250e+02   1.116311e-01     00s03  00015  -5.842393e+02   4.060369e-02     00s03  00016  -5.842657e+02   1.068348e-01     00s03  00017  -5.843306e+02   5.522623e-01     00s04  00018  -5.843437e+02   1.211017e+00     00s04  00019  -5.843865e+02   7.851007e-01     00s04  00020  -5.845227e+02   7.125181e-01     00s04  00021  -5.846360e+02   1.613193e+00     00s05  00022  -5.847709e+02   5.631855e-02 
    00s05  00023  -5.847868e+02   5.125765e-02     00s05  00024  -5.848027e+02   8.041163e-02     00s05  00025  -5.848542e+02   7.483662e-02     00s06  00026  -5.849878e+02   2.673867e-02     00s06  00027  -5.850814e+02   4.260169e-02     00s06  00028  -5.850830e+02   2.598758e-01     00s06  00029  -5.850940e+02   1.039898e-01     00s06  00030  -5.851180e+02   4.236976e-02     00s07  00031  -5.851085e+02   1.427400e-01     00s07  00032  -5.851606e+02   6.493835e-03 
    00s07  00033  -5.851627e+02   5.207173e-03     00s07  00034  -5.851665e+02   1.382438e-03     00s08  00035  -5.851697e+02   5.036149e-03     00s08  00036  -5.851734e+02   1.081925e-02     00s08  00037  -5.851791e+02   1.011667e-02     00s08  00038  -5.851808e+02   2.239457e-03 
    00s08  00039  -5.851811e+02   1.591443e-06     00s09  00040  -5.851812e+02   8.473363e-07     00s09  00041  -5.851812e+02   2.982515e-06     00s09  00042  -5.851812e+02   1.683336e-05     00s09  00043  -5.851812e+02   3.576387e-05     00s10  00044  -5.851812e+02   1.825931e-04     00s10  00045  -5.851813e+02   1.495241e-04     00s10  00046  -5.851815e+02   5.171941e-05     00s10  00047  -5.851817e+02   1.079383e-04     00s11  00048  -5.851815e+02   4.759449e-03     00s11  00049  -5.851817e+02   1.752138e-04     00s11  00050  -5.851817e+02   9.769343e-06     00s11  00051  -5.851817e+02   3.733649e-06     00s11  00052  -5.851817e+02   8.355568e-06     00s12  00053  -5.851817e+02   1.043893e-04     00s12  00054  -5.851817e+02   1.146626e-05 
    00s12  00055  -5.851818e+02   4.938640e-07     00s12  00056  -5.851818e+02   3.753223e-07     00s13  00057  -5.851818e+02   3.191787e-07     00s13  00058  -5.851818e+02   5.841469e-07     00s13  00059  -5.851818e+02   5.841469e-07 
Runtime:     00s13
Optimization status: Converged

Optimization restart 1/1, f = -585.1817622469462
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '32', '100', '4'], [' ', ' ', '16', '100', '4'], [' ', ' ', '4', '2048', '4'], [' ', ' ', '20', '100', '4'], [' ', ' ', '4', '128', '4'], [' ', ' ', '8', '128', '4'], [' ', ' ', '50', '64', '4'], [' ', ' ', '8', '2048', '4'], [' ', ' ', '80', '64', '4'], [' ', ' ', '16', '128', '4'], [' ', ' ', '4', '80', '4'], [' ', ' ', '50', '80', '4'], [' ', ' ', '100', '32', '4']]
prob:  <search.SurrogateProblem object at 0x14a912db7df0>
0 OK
bestX [array([[0.9088, 0.7103, 0.7601, 0.4009, 0.0183]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9300.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9300
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9300
........................................ [0.001333, 0.00123, 0.001194]
OUTPUT:%f [0.001333, 0.00123, 0.001194] 0.001212
store_func_eval
problem.constants
None
MLA iteration:  47
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -3.594677e+02           nan     00s00  00001  -3.594677e+02   9.784496e+03     00s00  00002  -4.387687e+02   3.638263e+03     00s00  00003  -4.956871e+02   4.677602e+02     00s00  00004  -5.198757e+02   5.038023e+02     00s01  00005  -5.773761e+02   4.589975e+01     00s01  00006  -5.786027e+02   1.377491e+02 
    00s01  00007  -5.835386e+02   1.094432e+01     00s01  00008  -5.846633e+02   2.096859e+01     00s02  00009  -5.859174e+02   4.082798e+00     00s02  00010  -5.868712e+02   1.541567e+00     00s02  00011  -5.875222e+02   2.808649e+00     00s02  00012  -5.880214e+02   1.774678e+00     00s03  00013  -5.888938e+02   6.955455e-01     00s03  00014  -5.889540e+02   6.633589e-01     00s03  00015  -5.890141e+02   5.408159e-02 
    00s03  00016  -5.890326e+02   6.707275e-02     00s03  00017  -5.890803e+02   1.192576e-01     00s04  00018  -5.891772e+02   8.194023e-01     00s04  00019  -5.895103e+02   1.627259e-01     00s04  00020  -5.896395e+02   3.900857e-02     00s04  00021  -5.897320e+02   9.495769e-02     00s05  00022  -5.893624e+02   5.228244e+00     00s05  00023  -5.897642e+02   8.892830e-02     00s05  00024  -5.898110e+02   1.408345e-02 
    00s05  00025  -5.898373e+02   6.083632e-03     00s06  00026  -5.898633e+02   4.616099e-03     00s06  00027  -5.899309e+02   6.195752e-03     00s06  00028  -5.896523e+02   2.709985e+00     00s06  00029  -5.899339e+02   1.932081e-02     00s06  00030  -5.899331e+02   5.649155e-03     00s07  00031  -5.899435e+02   3.492461e-03     00s07  00032  -5.899438e+02   1.659293e-02     00s07  00033  -5.899460e+02   1.380093e-03     00s07  00034  -5.899478e+02   1.363995e-03     00s08  00035  -5.899509e+02   8.851318e-03     00s08  00036  -5.899534e+02   5.138827e-03     00s08  00037  -5.899451e+02   7.209448e-02     00s08  00038  -5.899538e+02   8.258887e-03 
    00s08  00039  -5.899547e+02   8.617469e-04     00s09  00040  -5.899548e+02   1.351155e-05 
    00s09  00041  -5.899548e+02   8.169727e-06     00s09  00042  -5.899548e+02   1.441500e-05     00s09  00043  -5.899548e+02   2.343366e-05     00s10  00044  -5.899548e+02   7.289477e-04     00s10  00045  -5.899548e+02   1.657650e-04     00s10  00046  -5.899548e+02   9.024033e-05     00s10  00047  -5.899549e+02   2.217912e-05     00s11  00048  -5.899550e+02   2.753363e-04     00s11  00049  -5.899552e+02   4.760057e-04     00s11  00050  -5.899554e+02   2.055163e-03     00s11  00051  -5.899556e+02   2.211814e-04     00s11  00052  -5.899557e+02   3.577000e-05     00s12  00053  -5.899557e+02   2.874582e-05     00s12  00054  -5.899558e+02   5.935791e-05     00s12  00055  -5.899558e+02   1.862307e-03     00s12  00056  -5.899561e+02   4.179162e-04     00s13  00057  -5.899564e+02   1.545652e-04     00s13  00058  -5.899566e+02   4.007107e-04     00s13  00059  -5.899568e+02   3.525644e-04     00s13  00060  -5.899569e+02   5.650550e-05     00s13  00061  -5.899570e+02   8.083129e-06     00s14  00062  -5.899570e+02   1.182980e-05     00s14  00063  -5.899570e+02   6.684468e-06     00s14  00064  -5.899570e+02   2.191651e-04     00s14  00065  -5.899570e+02   4.208797e-05     00s15  00066  -5.899570e+02   1.320039e-05     00s15  00067  -5.899570e+02   1.737145e-06 
    00s15  00068  -5.899570e+02   5.520124e-07     00s15  00069  -5.899570e+02   6.594611e-07     00s16  00070  -5.899570e+02   3.307768e-04     00s16  00071  -5.899570e+02   7.725321e-07     00s16  00072  -5.899570e+02   7.725321e-07 
Runtime:     00s16
Optimization status: Converged

Optimization restart 1/1, f = -589.9570307636727
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '32', '100', '4'], [' ', ' ', '16', '100', '4'], [' ', ' ', '4', '2048', '4'], [' ', ' ', '20', '100', '4'], [' ', ' ', '4', '128', '4'], [' ', ' ', '8', '128', '4'], [' ', ' ', '50', '64', '4'], [' ', ' ', '8', '2048', '4'], [' ', ' ', '80', '64', '4'], [' ', ' ', '16', '128', '4'], [' ', ' ', '4', '80', '4'], [' ', ' ', '50', '80', '4'], [' ', ' ', '100', '32', '4'], [' ', ' ', '96', '32', '4']]
prob:  <search.SurrogateProblem object at 0x14a912d7f9d0>
0 OK
bestX [array([[0.7636, 0.9538, 0.1128, 0.7667, 0.0213]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9144.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9144
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9144
........................................ [0.001349, 0.001242, 0.001188]
OUTPUT:%f [0.001349, 0.001242, 0.001188] 0.001215
store_func_eval
problem.constants
None
MLA iteration:  48
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -3.630836e+02           nan     00s00  00001  -3.630836e+02   9.818556e+03     00s00  00002  -4.424903e+02   3.695057e+03     00s00  00003  -5.010991e+02   4.761415e+02 
    00s00  00004  -5.262436e+02   5.061526e+02     00s01  00005  -5.833326e+02   4.129914e+01     00s01  00006  -5.836500e+02   1.267780e+02     00s01  00007  -5.886018e+02   8.266795e+00     00s01  00008  -5.898004e+02   1.118905e+01     00s02  00009  -5.907239e+02   4.530639e+00     00s02  00010  -5.920898e+02   4.035934e+00     00s02  00011  -5.925428e+02   1.324039e+00     00s02  00012  -5.931281e+02   6.946915e-01 
    00s03  00013  -5.935742e+02   6.042660e-01     00s03  00014  -5.937598e+02   2.465003e-01     00s03  00015  -5.938042e+02   7.120400e-02     00s03  00016  -5.938565e+02   8.448017e-02     00s03  00017  -5.938439e+02   6.326298e-01     00s04  00018  -5.938859e+02   1.273569e-01     00s04  00019  -5.939435e+02   2.070981e-01     00s04  00020  -5.942372e+02   6.728229e-01     00s04  00021  -5.943822e+02   1.508362e-01     00s05  00022  -5.944332e+02   3.042828e-01 
    00s05  00023  -5.945024e+02   2.728056e-02     00s05  00024  -5.945246e+02   2.567670e-02     00s05  00025  -5.945502e+02   2.549424e-02     00s06  00026  -5.945886e+02   1.344323e-02     00s06  00027  -5.946258e+02   5.753726e-02     00s06  00028  -5.946628e+02   5.440508e-02     00s06  00029  -5.946593e+02   9.526316e-02     00s06  00030  -5.946911e+02   8.079434e-02     00s07  00031  -5.946931e+02   1.134864e-01     00s07  00032  -5.946997e+02   1.469094e-02     00s07  00033  -5.947034e+02   1.007315e-02     00s07  00034  -5.947058e+02   1.593023e-02     00s08  00035  -5.947097e+02   7.038067e-03     00s08  00036  -5.947203e+02   3.301875e-02 
    00s08  00037  -5.947281e+02   1.482142e-03     00s08  00038  -5.947309e+02   1.445816e-04     00s08  00039  -5.947313e+02   6.345301e-04     00s09  00040  -5.947314e+02   1.029568e-05     00s09  00041  -5.947314e+02   6.088495e-06     00s09  00042  -5.947314e+02   5.770927e-06     00s09  00043  -5.947315e+02   6.867072e-05 
    00s10  00044  -5.947316e+02   5.523500e-05     00s10  00045  -5.947317e+02   6.956159e-04     00s10  00046  -5.947320e+02   7.526468e-04     00s10  00047  -5.947237e+02   4.002498e-02     00s11  00048  -5.947320e+02   4.054540e-04     00s11  00049  -5.947329e+02   1.676193e-04     00s11  00050  -5.947302e+02   1.507455e-02     00s11  00051  -5.947329e+02   8.284050e-05     00s11  00052  -5.947331e+02   1.472495e-06     00s12  00053  -5.947332e+02   3.176948e-05     00s12  00054  -5.947326e+02   4.627436e-03     00s12  00055  -5.947332e+02   1.122197e-04     00s12  00056  -5.947333e+02   2.055001e-05     00s13  00057  -5.947333e+02   2.235571e-07     00s13  00058  -5.947333e+02   4.018535e-06     00s13  00059  -5.947333e+02   7.558628e-04 
    00s13  00060  -5.947333e+02   8.966335e-06     00s14  00061  -5.947333e+02   2.905338e-07     00s14  00062  -5.947333e+02   4.378440e-07     00s14  00063  -5.947333e+02   4.397274e-07     00s14  00064  -5.947333e+02   2.145736e-04     00s14  00065  -5.947333e+02   8.670188e-07     00s15  00066  -5.947333e+02   8.670188e-07 
Runtime:     00s15
Optimization status: Converged

Optimization restart 1/1, f = -594.73333209766
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '32', '100', '4'], [' ', ' ', '16', '100', '4'], [' ', ' ', '4', '2048', '4'], [' ', ' ', '20', '100', '4'], [' ', ' ', '4', '128', '4'], [' ', ' ', '8', '128', '4'], [' ', ' ', '50', '64', '4'], [' ', ' ', '8', '2048', '4'], [' ', ' ', '80', '64', '4'], [' ', ' ', '16', '128', '4'], [' ', ' ', '4', '80', '4'], [' ', ' ', '50', '80', '4'], [' ', ' ', '100', '32', '4'], [' ', ' ', '96', '32', '4'], [' ', ' ', '8', '100', '4']]
prob:  <search.SurrogateProblem object at 0x14a9127c1a60>
0 OK
bestX [array([[0.9092, 0.9089, 0.962 , 0.3051, 0.0093]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1743.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1743
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1743
........................................ [0.001423, 0.00124, 0.001221]
OUTPUT:%f [0.001423, 0.00124, 0.001221] 0.0012305
store_func_eval
problem.constants
None
MLA iteration:  49
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -3.666343e+02           nan     00s00  00001  -3.666343e+02   9.941134e+03     00s00  00002  -4.466944e+02   3.775776e+03     00s00  00003  -5.060978e+02   4.746390e+02 
    00s00  00004  -5.309736e+02   5.074881e+02     00s01  00005  -5.877718e+02   4.257026e+01     00s01  00006  -5.883910e+02   1.276591e+02     00s01  00007  -5.932894e+02   8.889738e+00     00s01  00008  -5.944859e+02   1.309587e+01     00s02  00009  -5.954530e+02   4.398275e+00     00s02  00010  -5.968493e+02   2.322816e+00     00s02  00011  -5.972341e+02   1.882130e+00     00s02  00012  -5.983617e+02   8.135167e-01     00s03  00013  -5.984803e+02   5.901874e-01 
    00s03  00014  -5.985318e+02   4.666718e-02     00s03  00015  -5.985487e+02   6.755917e-02     00s03  00016  -5.983745e+02   1.585082e+00     00s04  00017  -5.986087e+02   1.309035e-01     00s04  00018  -5.986265e+02   7.246264e-01     00s04  00019  -5.986704e+02   1.721357e-01     00s04  00020  -5.988970e+02   2.399194e-01     00s04  00021  -5.990842e+02   3.067590e-02     00s05  00022  -5.991798e+02   3.746489e-02     00s05  00023  -5.992342e+02   2.249425e-01     00s05  00024  -5.992845e+02   1.402298e-02     00s05  00025  -5.993065e+02   1.278072e-02     00s06  00026  -5.993466e+02   1.248252e-02     00s06  00027  -5.994162e+02   3.681382e-02     00s06  00028  -5.989973e+02   6.621146e+00     00s06  00029  -5.994263e+02   3.604682e-02     00s06  00030  -5.994635e+02   1.576049e-02 
    00s07  00031  -5.994614e+02   7.461573e-03     00s07  00032  -5.994745e+02   1.247935e-02     00s07  00033  -5.994610e+02   1.364614e-01     00s07  00034  -5.994773e+02   5.334024e-03     00s08  00035  -5.994793e+02   2.753865e-03     00s08  00036  -5.994863e+02   1.712111e-02     00s08  00037  -5.994912e+02   1.617256e-02     00s08  00038  -5.994951e+02   2.240073e-03     00s09  00039  -5.994969e+02   1.354738e-03     00s09  00040  -5.994971e+02   2.778243e-06 
    00s09  00041  -5.994971e+02   2.883015e-06     00s09  00042  -5.994971e+02   2.591357e-04     00s09  00043  -5.994971e+02   1.068969e-06     00s10  00044  -5.994971e+02   1.068969e-06 
Runtime:     00s10
Optimization status: Converged

Optimization restart 1/1, f = -599.4971146027395
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '32', '100', '4'], [' ', ' ', '16', '100', '4'], [' ', ' ', '4', '2048', '4'], [' ', ' ', '20', '100', '4'], [' ', ' ', '4', '128', '4'], [' ', ' ', '8', '128', '4'], [' ', ' ', '50', '64', '4'], [' ', ' ', '8', '2048', '4'], [' ', ' ', '80', '64', '4'], [' ', ' ', '16', '128', '4'], [' ', ' ', '4', '80', '4'], [' ', ' ', '50', '80', '4'], [' ', ' ', '100', '32', '4'], [' ', ' ', '96', '32', '4'], [' ', ' ', '8', '100', '4'], [' ', ' ', '128', '20', '4']]
prob:  <search.SurrogateProblem object at 0x14a912df1af0>
0 OK
bestX [array([[0.5839, 0.709 , 0.3163, 0.7059, 0.0719]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6899.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6899
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6899
........................................ [0.001319, 0.001204, 0.001166]
OUTPUT:%f [0.001319, 0.001204, 0.001166] 0.0011849999999999999
store_func_eval
problem.constants
None
MLA iteration:  50
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -3.714662e+02           nan     00s00  00001  -3.714662e+02   9.976501e+03     00s00  00002  -4.515923e+02   3.778516e+03     00s00  00003  -5.108570e+02   4.696660e+02     00s01  00004  -5.352391e+02   5.035087e+02     00s01  00005  -5.919818e+02   4.414804e+01     00s01  00006  -5.928379e+02   1.325073e+02     00s01  00007  -5.977849e+02   9.805925e+00 
    00s01  00008  -5.989664e+02   1.622198e+01     00s02  00009  -6.000341e+02   4.298614e+00     00s02  00010  -6.012557e+02   1.654172e+00     00s02  00011  -6.017717e+02   2.557491e+00     00s02  00012  -6.024802e+02   1.791030e+00     00s03  00013  -6.030843e+02   6.104509e-01     00s03  00014  -6.031721e+02   1.014126e-01 
    00s03  00015  -6.031844e+02   3.157508e-02     00s04  00016  -6.031998e+02   4.943185e-02     00s06  00017  -6.032441e+02   2.226560e-01     00s07  00018  -6.033282e+02   4.934170e-01     00s08  00019  -6.033298e+02   9.561059e-01     00s08  00020  -6.034322e+02   5.482443e-01     00s09  00021  -6.032078e+02   2.056845e+00     00s11  00022  -6.035400e+02   5.679758e-01     00s11  00023  -6.035740e+02   1.367531e+00     00s11  00024  -6.037618e+02   1.135367e-01     00s13  00025  -6.038080e+02   5.606872e-02     00s14  00026  -6.038666e+02   5.599741e-02     00s14  00027  -6.040032e+02   4.128017e-02     00s15  00028  -6.040560e+02   3.994259e-02     00s16  00029  -6.040725e+02   2.800189e-02 
    00s16  00030  -6.040835e+02   5.970293e-03     00s16  00031  -6.040817e+02   5.906478e-02     00s16  00032  -6.040879e+02   1.358509e-02     00s17  00033  -6.040888e+02   3.549796e-03     00s17  00034  -6.040892e+02   4.707377e-04     00s17  00035  -6.040894e+02   4.760589e-04     00s17  00036  -6.040916e+02   7.435732e-03     00s18  00037  -6.040942e+02   1.606146e-02     00s18  00038  -6.040977e+02   1.162631e-02     00s18  00039  -6.040932e+02   6.168639e-02     00s18  00040  -6.040980e+02   1.450275e-02     00s19  00041  -6.040993e+02   1.259253e-03     00s19  00042  -6.040994e+02   6.779898e-05 
    00s19  00043  -6.040994e+02   5.875126e-06     00s19  00044  -6.040994e+02   9.542577e-07     00s20  00046  -6.040994e+02   4.907692e-07 
Runtime:     00s20
Optimization status: Converged

Optimization restart 1/1, f = -604.0993632970195
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '32', '100', '4'], [' ', ' ', '16', '100', '4'], [' ', ' ', '4', '2048', '4'], [' ', ' ', '20', '100', '4'], [' ', ' ', '4', '128', '4'], [' ', ' ', '8', '128', '4'], [' ', ' ', '50', '64', '4'], [' ', ' ', '8', '2048', '4'], [' ', ' ', '80', '64', '4'], [' ', ' ', '16', '128', '4'], [' ', ' ', '4', '80', '4'], [' ', ' ', '50', '80', '4'], [' ', ' ', '100', '32', '4'], [' ', ' ', '96', '32', '4'], [' ', ' ', '8', '100', '4'], [' ', ' ', '128', '20', '4'], [' ', ' ', '20', '80', '4']]
prob:  <search.SurrogateProblem object at 0x14a913597310>
0 OK
bestX [array([[0.5166, 0.8838, 0.389 , 0.5896, 0.0707]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3186.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3186
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3186
........................................ [0.001348, 0.001208, 0.001182]
OUTPUT:%f [0.001348, 0.001208, 0.001182] 0.001195
store_func_eval
problem.constants
None
MLA iteration:  51
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -3.756102e+02           nan     00s00  00001  -3.756102e+02   1.005978e+04     00s00  00002  -4.561428e+02   3.813313e+03 
    00s00  00003  -5.155049e+02   4.614126e+02     00s01  00004  -5.391361e+02   4.991641e+02     00s01  00005  -5.953901e+02   4.758878e+01     00s01  00006  -5.965473e+02   1.464915e+02     00s01  00007  -6.017803e+02   1.158603e+01     00s02  00008  -6.028915e+02   2.293788e+01 
    00s02  00009  -6.042344e+02   4.233352e+00     00s02  00010  -6.051963e+02   1.653166e+00     00s02  00011  -6.059309e+02   3.258204e+00     00s03  00012  -6.064347e+02   1.881618e+00     00s03  00013  -6.073402e+02   8.685067e-01     00s03  00014  -6.073938e+02   4.801299e-01 
    00s03  00015  -6.074401e+02   3.347300e-02     00s03  00016  -6.074493e+02   3.211582e-02     00s04  00017  -6.074786e+02   6.085706e-02     00s04  00018  -6.075768e+02   9.085193e-02     00s04  00019  -6.071924e+02   8.342758e+00     00s04  00020  -6.077174e+02   8.592140e-02     00s05  00021  -6.077143e+02   1.667164e+00     00s05  00022  -6.077811e+02   4.380386e-01     00s05  00023  -6.079339e+02   1.083406e-01     00s05  00024  -6.079929e+02   9.722560e-02     00s06  00025  -6.080302e+02   2.191731e-02     00s06  00026  -6.080787e+02   5.009304e-02     00s06  00027  -6.081430e+02   1.158522e-01     00s06  00028  -6.082605e+02   1.500332e-01     00s07  00029  -6.083365e+02   1.769345e-01     00s07  00030  -6.082676e+02   9.208350e-01     00s07  00031  -6.083583e+02   7.585318e-02     00s07  00032  -6.083949e+02   1.309720e-02     00s07  00033  -6.084099e+02   6.408044e-02     00s08  00034  -6.084142e+02   1.249267e-02 
    00s08  00035  -6.084173e+02   4.094881e-03     00s08  00036  -6.084193e+02   2.887834e-03     00s08  00037  -6.084294e+02   5.027395e-03     00s09  00038  -6.084382e+02   7.648950e-03     00s09  00039  -6.083629e+02   1.220194e-01     00s09  00040  -6.084398e+02   3.996948e-03     00s09  00041  -6.084466e+02   1.117777e-03 
    00s10  00042  -6.084476e+02   8.455496e-04     00s10  00043  -6.084476e+02   4.119630e-03     00s10  00044  -6.084479e+02   1.160467e-03     00s10  00045  -6.084481e+02   8.479531e-06     00s11  00046  -6.084481e+02   2.352028e-06     00s11  00047  -6.084480e+02   3.283969e-04     00s11  00048  -6.084481e+02   1.045811e-05 
    00s11  00049  -6.084481e+02   1.045811e-05 
Runtime:     00s11
Optimization status: Converged

Optimization restart 1/1, f = -608.4480613547536
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '32', '100', '4'], [' ', ' ', '16', '100', '4'], [' ', ' ', '4', '2048', '4'], [' ', ' ', '20', '100', '4'], [' ', ' ', '4', '128', '4'], [' ', ' ', '8', '128', '4'], [' ', ' ', '50', '64', '4'], [' ', ' ', '8', '2048', '4'], [' ', ' ', '80', '64', '4'], [' ', ' ', '16', '128', '4'], [' ', ' ', '4', '80', '4'], [' ', ' ', '50', '80', '4'], [' ', ' ', '100', '32', '4'], [' ', ' ', '96', '32', '4'], [' ', ' ', '8', '100', '4'], [' ', ' ', '128', '20', '4'], [' ', ' ', '20', '80', '4'], [' ', ' ', '32', '64', '4']]
prob:  <search.SurrogateProblem object at 0x14a9128ba9a0>
0 OK
bestX [array([[0.6967, 0.7536, 0.1341, 0.7039, 0.003 ]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9261.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9261
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9261
........................................ [0.001343, 0.001244, 0.001188]
OUTPUT:%f [0.001343, 0.001244, 0.001188] 0.001216
store_func_eval
problem.constants
None
MLA iteration:  52
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -3.800284e+02           nan     00s00  00001  -3.800284e+02   1.011717e+04     00s00  00002  -4.607870e+02   3.843173e+03     00s00  00003  -5.204892e+02   4.512376e+02     00s01  00004  -5.434360e+02   4.985220e+02     00s01  00005  -5.994040e+02   5.078166e+01 
    00s01  00006  -6.007081e+02   1.629204e+02     00s01  00007  -6.063173e+02   1.339022e+01     00s01  00008  -6.072457e+02   3.113402e+01     00s02  00009  -6.089488e+02   4.016834e+00     00s02  00010  -6.097227e+02   1.906653e+00     00s02  00011  -6.106495e+02   3.846990e+00     00s02  00012  -6.111431e+02   1.700412e+00     00s03  00013  -6.119226e+02   1.525392e+00     00s03  00014  -6.121613e+02   5.238500e-02 
    00s03  00015  -6.121914e+02   7.149197e-02     00s03  00016  -6.122296e+02   4.134778e-02     00s04  00017  -6.123640e+02   1.238749e-01     00s04  00018  -6.121140e+02   4.724294e+00     00s04  00019  -6.124035e+02   3.785206e-01     00s04  00020  -6.125017e+02   2.813186e-01     00s05  00021  -6.126719e+02   7.338821e-02     00s05  00022  -6.127545e+02   2.010363e-01     00s05  00023  -6.128204e+02   4.399526e-02     00s05  00024  -6.128715e+02   3.613524e-02     00s05  00025  -6.129675e+02   4.281736e-02     00s06  00026  -6.130431e+02   3.312896e-01     00s06  00027  -6.130884e+02   1.924760e-02     00s06  00028  -6.131137e+02   1.139845e-02     00s06  00029  -6.131551e+02   9.482401e-02     00s07  00030  -6.131688e+02   2.346340e-02 
    00s07  00031  -6.131708e+02   7.809572e-03     00s07  00032  -6.131777e+02   7.887408e-03     00s07  00033  -6.131764e+02   7.610260e-02     00s08  00034  -6.131795e+02   9.957819e-03     00s08  00035  -6.131814e+02   7.284101e-03     00s08  00036  -6.131890e+02   5.650436e-03     00s08  00037  -6.132007e+02   9.143942e-03     00s09  00038  -6.132130e+02   5.100071e-04     00s09  00039  -6.132128e+02   3.254926e-02     00s09  00040  -6.132149e+02   9.680052e-03     00s09  00041  -6.132171e+02   3.265341e-04     00s09  00042  -6.132173e+02   2.068484e-04 
    00s10  00043  -6.132173e+02   1.796079e-04     00s10  00044  -6.132174e+02   2.770782e-06     00s10  00045  -6.132174e+02   4.725469e-07     00s10  00046  -6.132174e+02   4.725469e-07 
Runtime:     00s10
Optimization status: Converged

Optimization restart 1/1, f = -613.2174039743709
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '32', '100', '4'], [' ', ' ', '16', '100', '4'], [' ', ' ', '4', '2048', '4'], [' ', ' ', '20', '100', '4'], [' ', ' ', '4', '128', '4'], [' ', ' ', '8', '128', '4'], [' ', ' ', '50', '64', '4'], [' ', ' ', '8', '2048', '4'], [' ', ' ', '80', '64', '4'], [' ', ' ', '16', '128', '4'], [' ', ' ', '4', '80', '4'], [' ', ' ', '50', '80', '4'], [' ', ' ', '100', '32', '4'], [' ', ' ', '96', '32', '4'], [' ', ' ', '8', '100', '4'], [' ', ' ', '128', '20', '4'], [' ', ' ', '20', '80', '4'], [' ', ' ', '32', '64', '4'], [' ', ' ', '8', '80', '4']]
prob:  <search.SurrogateProblem object at 0x14a912db66a0>
0 OK
bestX [array([[0.5342, 0.6245, 0.0447, 0.7295, 0.0397]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3327.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3327
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3327
........................................ [0.001394, 0.001182, 0.001165]
OUTPUT:%f [0.001394, 0.001182, 0.001165] 0.0011735
store_func_eval
problem.constants
None
MLA iteration:  53
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -3.838373e+02           nan     00s00  00001  -3.838373e+02   1.017102e+04     00s00  00002  -4.642630e+02   3.762609e+03     00s00  00003  -5.238476e+02   4.836055e+02     00s01  00004  -5.486984e+02   5.058016e+02 
    00s01  00005  -6.063404e+02   4.316664e+01     00s01  00006  -6.067331e+02   1.309694e+02     00s01  00007  -6.118540e+02   8.619329e+00     00s01  00008  -6.130459e+02   1.157377e+01     00s02  00009  -6.139645e+02   4.421543e+00     00s02  00010  -6.153463e+02   3.040949e+00     00s02  00011  -6.157347e+02   1.628765e+00     00s02  00012  -6.168149e+02   1.388305e+00     00s03  00013  -6.169731e+02   2.127246e-01     00s03  00014  -6.170092e+02   9.670900e-02     00s03  00015  -6.170493e+02   5.115803e-02 
    00s03  00016  -6.170970e+02   1.178456e-01     00s04  00017  -6.171203e+02   5.925065e-01     00s04  00018  -6.172332e+02   4.459493e-01     00s04  00019  -6.176345e+02   1.172235e-01     00s04  00020  -6.177005e+02   7.271245e-01     00s05  00021  -6.177801e+02   7.432382e-02 
    00s05  00022  -6.178198e+02   1.455960e-02     00s05  00023  -6.178486e+02   6.287804e-02     00s05  00024  -6.178705e+02   1.001992e-02     00s06  00025  -6.178845e+02   1.143540e-02     00s06  00026  -6.178968e+02   7.739006e-02     00s06  00027  -6.179263e+02   2.796956e-02     00s06  00028  -6.179302e+02   3.637555e-02     00s07  00029  -6.179552e+02   1.051164e-02     00s07  00030  -6.179612e+02   4.840081e-03     00s07  00031  -6.179698e+02   1.069790e-02     00s07  00032  -6.179728e+02   1.880870e-02 
    00s07  00033  -6.179781e+02   4.847917e-03     00s08  00034  -6.179869e+02   5.644620e-03     00s08  00035  -6.179913e+02   5.706198e-03     00s08  00036  -6.179336e+02   1.033148e+00     00s08  00037  -6.179918e+02   6.380181e-03     00s09  00038  -6.179946e+02   4.777520e-04 
    00s09  00039  -6.179949e+02   2.757449e-05     00s09  00040  -6.179950e+02   1.546018e-05     00s09  00041  -6.179950e+02   7.987883e-05     00s10  00042  -6.179950e+02   4.881278e-06 
    00s10  00043  -6.179950e+02   3.664512e-06     00s10  00044  -6.179950e+02   3.878106e-06     00s10  00045  -6.179950e+02   1.476512e-05     00s11  00046  -6.179950e+02   3.717200e-05     00s11  00047  -6.179952e+02   1.665598e-04     00s11  00048  -6.179953e+02   2.130124e-04     00s11  00049  -6.179954e+02   1.467071e-03     00s12  00050  -6.179956e+02   1.699598e-04     00s12  00051  -6.179957e+02   2.220422e-05     00s12  00052  -6.179957e+02   2.457189e-05     00s12  00053  -6.179959e+02   2.067261e-04     00s12  00054  -6.179960e+02   1.496367e-04     00s13  00055  -6.179953e+02   4.604845e-03     00s13  00056  -6.179960e+02   2.664309e-04     00s13  00057  -6.179961e+02   2.265929e-05     00s13  00058  -6.179961e+02   4.465999e-05     00s14  00059  -6.179961e+02   1.048719e-04     00s14  00060  -6.179962e+02   1.070373e-04     00s14  00061  -6.179661e+02   3.969528e-01     00s14  00062  -6.179962e+02   5.712406e-05     00s15  00063  -6.179962e+02   1.712051e-05     00s15  00064  -6.179962e+02   1.350637e-05 
    00s15  00065  -6.179962e+02   2.031597e-07     00s15  00066  -6.179962e+02   1.029510e-07     00s16  00067  -6.179962e+02   1.029510e-07 
Runtime:     00s16
Optimization status: Converged

Optimization restart 1/1, f = -617.9961930823047
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '32', '100', '4'], [' ', ' ', '16', '100', '4'], [' ', ' ', '4', '2048', '4'], [' ', ' ', '20', '100', '4'], [' ', ' ', '4', '128', '4'], [' ', ' ', '8', '128', '4'], [' ', ' ', '50', '64', '4'], [' ', ' ', '8', '2048', '4'], [' ', ' ', '80', '64', '4'], [' ', ' ', '16', '128', '4'], [' ', ' ', '4', '80', '4'], [' ', ' ', '50', '80', '4'], [' ', ' ', '100', '32', '4'], [' ', ' ', '96', '32', '4'], [' ', ' ', '8', '100', '4'], [' ', ' ', '128', '20', '4'], [' ', ' ', '20', '80', '4'], [' ', ' ', '32', '64', '4'], [' ', ' ', '8', '80', '4'], [' ', ' ', '4', '100', '4']]
prob:  <search.SurrogateProblem object at 0x14a9128a8b20>
0 OK
bestX [array([[0.7441, 0.909 , 0.7469, 0.4954, 0.0434]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8034.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8034
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8034
........................................ [0.001432, 0.001273, 0.001244]
OUTPUT:%f [0.001432, 0.001273, 0.001244] 0.0012585
store_func_eval
problem.constants
None
MLA iteration:  54
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -3.885532e+02           nan     00s00  00001  -3.885532e+02   1.020507e+04     00s00  00002  -4.691229e+02   3.782502e+03     00s00  00003  -5.289091e+02   4.799247e+02     00s01  00004  -5.534779e+02   5.047096e+02 
    00s01  00005  -6.108943e+02   4.389666e+01     00s01  00006  -6.114678e+02   1.310759e+02     00s01  00007  -6.165593e+02   8.972323e+00     00s01  00008  -6.177530e+02   1.260368e+01     00s02  00009  -6.187001e+02   4.375021e+00     00s02  00010  -6.200567e+02   2.363429e+00     00s02  00011  -6.204316e+02   1.850467e+00     00s02  00012  -6.216116e+02   9.561113e-01     00s03  00013  -6.216960e+02   5.900300e-01     00s03  00014  -6.217500e+02   2.561290e-02     00s03  00015  -6.217579e+02   2.779583e-02     00s03  00016  -6.218233e+02   4.135635e-02 
    00s04  00017  -6.217311e+02   3.234562e+00     00s04  00018  -6.219276e+02   2.381041e-01     00s04  00019  -6.219667e+02   1.096964e+00     00s04  00020  -6.221543e+02   7.486310e-02     00s05  00021  -6.222102e+02   3.834383e-02     00s05  00022  -6.222709e+02   4.531718e-02     00s05  00023  -6.223516e+02   1.496460e-01     00s05  00024  -6.224571e+02   3.320544e-01     00s06  00025  -6.225305e+02   1.388984e-01     00s06  00026  -6.226676e+02   4.250021e-02 
    00s06  00027  -6.226899e+02   2.708838e-02     00s06  00028  -6.227238e+02   4.501810e-02     00s07  00029  -6.225543e+02   8.434466e-01     00s07  00030  -6.227360e+02   4.446455e-02     00s07  00031  -6.227424e+02   2.465528e-03     00s07  00032  -6.227442e+02   8.980690e-04     00s07  00033  -6.227454e+02   6.410096e-04     00s08  00034  -6.227484e+02   2.174888e-03     00s08  00035  -6.227516e+02   2.012145e-02 
    00s08  00036  -6.227560e+02   7.785394e-03     00s08  00037  -6.227599e+02   4.458896e-03     00s09  00038  -6.227068e+02   5.700652e-01     00s09  00039  -6.227606e+02   8.422070e-05     00s09  00040  -6.227606e+02   2.251012e-05     00s09  00041  -6.227606e+02   8.657615e-07 
    00s10  00042  -6.227606e+02   1.590467e-07     00s10  00043  -6.227606e+02   1.590467e-07 
Runtime:     00s10
Optimization status: Converged

Optimization restart 1/1, f = -622.7605924039564
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '32', '100', '4'], [' ', ' ', '16', '100', '4'], [' ', ' ', '4', '2048', '4'], [' ', ' ', '20', '100', '4'], [' ', ' ', '4', '128', '4'], [' ', ' ', '8', '128', '4'], [' ', ' ', '50', '64', '4'], [' ', ' ', '8', '2048', '4'], [' ', ' ', '80', '64', '4'], [' ', ' ', '16', '128', '4'], [' ', ' ', '4', '80', '4'], [' ', ' ', '50', '80', '4'], [' ', ' ', '100', '32', '4'], [' ', ' ', '96', '32', '4'], [' ', ' ', '8', '100', '4'], [' ', ' ', '128', '20', '4'], [' ', ' ', '20', '80', '4'], [' ', ' ', '32', '64', '4'], [' ', ' ', '8', '80', '4'], [' ', ' ', '4', '100', '4'], [' ', ' ', '96', '50', '4']]
prob:  <search.SurrogateProblem object at 0x14a9127b20a0>
0 OK
bestX [array([[0.5357, 0.9954, 0.6144, 0.6758, 0.0501]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3812.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3812
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3812
........................................ [0.00133, 0.001221, 0.001201]
OUTPUT:%f [0.00133, 0.001221, 0.001201] 0.001211
store_func_eval
problem.constants
None
MLA iteration:  55
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -3.930875e+02           nan     00s00  00001  -3.930875e+02   1.028832e+04     00s00  00002  -4.739346e+02   3.804944e+03     00s00  00003  -5.336608e+02   4.761308e+02 
    00s01  00004  -5.577034e+02   5.012358e+02     00s01  00005  -6.149257e+02   4.494510e+01     00s01  00006  -6.163056e+02   1.221966e+02     00s01  00007  -6.209338e+02   9.652406e+00     00s02  00008  -6.221315e+02   1.564304e+01     00s02  00009  -6.232098e+02   4.425761e+00     00s02  00010  -6.244520e+02   1.729847e+00     00s02  00011  -6.248759e+02   2.120714e+00 
    00s03  00012  -6.257905e+02   1.360299e+00     00s03  00013  -6.261854e+02   9.288473e-01     00s03  00014  -6.263337e+02   9.666230e-02     00s03  00015  -6.263459e+02   3.684874e-02     00s03  00016  -6.263715e+02   1.057710e-01     00s04  00017  -6.263899e+02   1.943704e-01     00s04  00018  -6.264513e+02   3.179611e-01     00s04  00019  -6.265014e+02   8.096772e-02     00s04  00020  -6.265229e+02   8.358371e-03     00s05  00021  -6.265279e+02   2.269245e-02 
    00s05  00022  -6.265326e+02   2.810928e-02     00s05  00023  -6.265391e+02   8.723284e-03     00s05  00024  -6.265411e+02   5.261044e-04     00s06  00025  -6.265416e+02   1.738636e-03     00s06  00026  -6.265421e+02   4.020500e-03     00s06  00027  -6.265428e+02   4.542703e-03     00s06  00028  -6.265433e+02   2.470647e-03     00s07  00029  -6.265438e+02   3.548712e-04 
    00s07  00030  -6.265439e+02   2.970063e-04     00s07  00031  -6.265441e+02   7.761657e-04     00s07  00032  -6.265447e+02   2.235049e-03     00s08  00033  -6.265456e+02   3.961812e-03     00s08  00034  -6.265472e+02   4.229135e-03     00s08  00035  -6.265413e+02   8.581623e-03     00s08  00036  -6.265475e+02   3.588025e-03     00s09  00037  -6.265491e+02   1.596676e-03     00s09  00038  -6.265491e+02   5.063611e-03     00s09  00039  -6.265495e+02   3.991464e-04     00s09  00040  -6.265497e+02   2.516238e-05 
    00s10  00041  -6.265499e+02   9.242836e-05     00s10  00042  -6.265499e+02   8.968680e-04     00s10  00043  -6.265499e+02   2.300814e-04     00s10  00044  -6.265500e+02   8.083999e-05     00s10  00045  -6.265501e+02   4.798365e-06 
    00s11  00046  -6.265501e+02   1.763823e-06     00s11  00047  -6.265501e+02   2.774734e-06     00s11  00048  -6.265501e+02   5.175299e-05     00s11  00049  -6.265501e+02   8.793547e-06     00s12  00050  -6.265501e+02   4.200967e-07     00s12  00051  -6.265501e+02   1.668498e-07 
    00s12  00052  -6.265501e+02   5.815859e-07     00s12  00053  -6.265501e+02   5.815859e-07 
Runtime:     00s12
Optimization status: Converged

Optimization restart 1/1, f = -626.550129344037
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '32', '100', '4'], [' ', ' ', '16', '100', '4'], [' ', ' ', '4', '2048', '4'], [' ', ' ', '20', '100', '4'], [' ', ' ', '4', '128', '4'], [' ', ' ', '8', '128', '4'], [' ', ' ', '50', '64', '4'], [' ', ' ', '8', '2048', '4'], [' ', ' ', '80', '64', '4'], [' ', ' ', '16', '128', '4'], [' ', ' ', '4', '80', '4'], [' ', ' ', '50', '80', '4'], [' ', ' ', '100', '32', '4'], [' ', ' ', '96', '32', '4'], [' ', ' ', '8', '100', '4'], [' ', ' ', '128', '20', '4'], [' ', ' ', '20', '80', '4'], [' ', ' ', '32', '64', '4'], [' ', ' ', '8', '80', '4'], [' ', ' ', '4', '100', '4'], [' ', ' ', '96', '50', '4'], [' ', ' ', '64', '80', '4']]
prob:  <search.SurrogateProblem object at 0x14a91280e280>
0 OK
bestX [array([[0.5497, 0.9387, 0.4246, 0.6369, 0.0545]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2438.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2438
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2438
........................................ [0.001348, 0.001228, 0.001182]
OUTPUT:%f [0.001348, 0.001228, 0.001182] 0.001205
store_func_eval
problem.constants
None
MLA iteration:  56
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -3.979339e+02           nan     00s00  00001  -3.979339e+02   1.030587e+04     00s00  00002  -4.788797e+02   3.816279e+03     00s00  00003  -5.385678e+02   4.700772e+02     00s01  00004  -5.621146e+02   4.969521e+02 
    00s01  00005  -6.189511e+02   4.639259e+01     00s01  00006  -6.207732e+02   1.224071e+02     00s01  00007  -6.252991e+02   1.043254e+01     00s02  00008  -6.264831e+02   1.898612e+01     00s02  00009  -6.277073e+02   4.496901e+00     00s02  00010  -6.288438e+02   1.556435e+00     00s02  00011  -6.293563e+02   2.348615e+00     00s02  00012  -6.299744e+02   1.790779e+00     00s03  00013  -6.306648e+02   1.370124e+00 
    00s03  00014  -6.308803e+02   2.541192e-01     00s03  00015  -6.309030e+02   5.437210e-02     00s03  00016  -6.309202e+02   4.734170e-02     00s04  00017  -6.309418e+02   1.619018e-01     00s04  00018  -6.309766e+02   3.165622e-01     00s04  00019  -6.310256e+02   2.319450e-01     00s04  00020  -6.310813e+02   3.146810e-02 
    00s05  00021  -6.311007e+02   3.009719e-03     00s05  00022  -6.311051e+02   9.370340e-03     00s05  00023  -6.311065e+02   1.272077e-02     00s05  00024  -6.311096e+02   2.399957e-03     00s06  00025  -6.311111e+02   1.235685e-03     00s06  00026  -6.311132e+02   6.489421e-03     00s06  00027  -6.311156e+02   1.186631e-02     00s06  00028  -6.311172e+02   5.328277e-03 
    00s07  00029  -6.311184e+02   6.628254e-04     00s07  00030  -6.311185e+02   1.324413e-04     00s07  00031  -6.311186e+02   1.024575e-04     00s07  00032  -6.311187e+02   3.613028e-04     00s08  00033  -6.311188e+02   8.511551e-04     00s08  00034  -6.311192e+02   1.656227e-03     00s08  00035  -6.311199e+02   2.740805e-03     00s08  00036  -6.311212e+02   3.551517e-03     00s09  00037  -6.311200e+02   1.340073e-02     00s09  00038  -6.311217e+02   4.976644e-03     00s09  00039  -6.311227e+02   1.742970e-03 
    00s09  00040  -6.311231e+02   6.822868e-05     00s10  00041  -6.311233e+02   1.749760e-04     00s10  00042  -6.311235e+02   2.546925e-03     00s10  00043  -6.311237e+02   1.348655e-03     00s10  00044  -6.311240e+02   2.125613e-04     00s11  00045  -6.311242e+02   1.425887e-04     00s11  00046  -6.311243e+02   1.412148e-04     00s11  00047  -6.311245e+02   2.362508e-05     00s11  00048  -6.311245e+02   2.963605e-05 
    00s11  00049  -6.311246e+02   4.918483e-06     00s12  00050  -6.311246e+02   4.781930e-06     00s12  00051  -6.311246e+02   5.722798e-06     00s12  00052  -6.311246e+02   1.916208e-05     00s12  00053  -6.311246e+02   1.352799e-05     00s13  00054  -6.311246e+02   1.851286e-04     00s13  00055  -6.311246e+02   2.378921e-05     00s13  00056  -6.311246e+02   9.818728e-07     00s13  00057  -6.311246e+02   2.832478e-06     00s14  00058  -6.311246e+02   3.676294e-07 
    00s14  00059  -6.311246e+02   3.676294e-07 
Runtime:     00s14
Optimization status: Converged

Optimization restart 1/1, f = -631.1246083391277
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '32', '100', '4'], [' ', ' ', '16', '100', '4'], [' ', ' ', '4', '2048', '4'], [' ', ' ', '20', '100', '4'], [' ', ' ', '4', '128', '4'], [' ', ' ', '8', '128', '4'], [' ', ' ', '50', '64', '4'], [' ', ' ', '8', '2048', '4'], [' ', ' ', '80', '64', '4'], [' ', ' ', '16', '128', '4'], [' ', ' ', '4', '80', '4'], [' ', ' ', '50', '80', '4'], [' ', ' ', '100', '32', '4'], [' ', ' ', '96', '32', '4'], [' ', ' ', '8', '100', '4'], [' ', ' ', '128', '20', '4'], [' ', ' ', '20', '80', '4'], [' ', ' ', '32', '64', '4'], [' ', ' ', '8', '80', '4'], [' ', ' ', '4', '100', '4'], [' ', ' ', '96', '50', '4'], [' ', ' ', '64', '80', '4'], [' ', ' ', '32', '80', '4']]
prob:  <search.SurrogateProblem object at 0x14a913578eb0>
0 OK
bestX [array([[0.7536, 0.156 , 0.0402, 0.9877, 0.047 ]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4670.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4670
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4670
........................................ [0.003268, 0.00299, 0.002975]
OUTPUT:%f [0.003268, 0.00299, 0.002975] 0.0029825
store_func_eval
problem.constants
None
MLA iteration:  57
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -3.997971e+02           nan     00s00  00001  -3.997971e+02   1.033187e+04     00s00  00002  -4.812685e+02   3.912345e+03     00s00  00003  -5.428521e+02   5.033028e+02     00s01  00004  -5.689420e+02   5.193038e+02 
    00s01  00005  -6.258988e+02   3.713648e+01     00s01  00006  -6.269422e+02   8.510454e+01     00s01  00007  -6.306199e+02   5.611131e+00     00s02  00008  -6.316612e+02   6.296451e+00     00s02  00009  -6.326773e+02   4.806548e+00     00s02  00010  -6.312556e+02   2.197191e+01     00s02  00011  -6.345064e+02   9.706501e-01     00s03  00012  -6.349616e+02   1.472057e+00     00s03  00013  -6.354283e+02   6.821303e-01 
    00s03  00014  -6.354817e+02   1.063634e-01     00s03  00015  -6.355127e+02   1.025508e-01     00s04  00016  -6.355417e+02   5.933649e-01     00s04  00017  -6.355818e+02   2.796195e-01     00s04  00018  -6.357251e+02   1.420653e-01     00s04  00019  -6.361876e+02   6.558811e-01     00s04  00020  -6.363760e+02   4.903953e-01     00s05  00021  -6.364669e+02   1.825427e-01     00s05  00022  -6.364947e+02   1.152638e-01     00s05  00023  -6.365159e+02   5.795197e-02     00s05  00024  -6.365548e+02   1.208160e-02 
    00s06  00025  -6.365868e+02   2.364494e-02     00s06  00026  -6.366430e+02   5.108278e-02     00s06  00027  -6.366672e+02   2.335594e-02     00s06  00028  -6.366939e+02   1.233203e-02     00s07  00029  -6.367277e+02   4.512822e-02     00s07  00030  -6.367312e+02   5.257341e-02 
    00s07  00031  -6.367382e+02   5.319635e-03     00s07  00032  -6.367394e+02   1.524132e-03     00s08  00033  -6.367412e+02   7.968598e-03     00s08  00034  -6.367453e+02   1.034702e-02     00s08  00035  -6.367659e+02   5.353218e-02     00s08  00036  -6.367769e+02   2.163058e-02     00s09  00037  -6.367827e+02   4.778602e-04     00s09  00038  -6.367837e+02   1.141474e-04     00s09  00039  -6.367849e+02   6.356745e-05 
    00s09  00040  -6.367854e+02   7.716390e-04     00s10  00041  -6.367858e+02   7.939091e-05     00s10  00042  -6.367864e+02   6.027838e-05     00s10  00043  -6.367926e+02   2.131253e-03     00s10  00044  -6.367699e+02   3.095347e-01     00s11  00045  -6.367991e+02   2.968497e-02     00s11  00046  -6.362464e+02   2.882537e+00     00s11  00047  -6.367994e+02   3.878903e-02     00s11  00048  -6.368016e+02   3.640643e-02     00s12  00049  -6.367795e+02   6.119675e-01     00s12  00050  -6.368074e+02   4.675599e-02     00s12  00051  -6.368172e+02   2.654697e-03     00s12  00052  -6.368205e+02   8.315128e-04     00s13  00053  -6.368226e+02   1.107910e-03     00s13  00054  -6.368237e+02   8.499106e-04     00s13  00055  -6.368246e+02   3.799765e-04     00s13  00056  -6.368255e+02   4.920477e-04     00s14  00057  -6.368275e+02   3.091633e-04 
    00s14  00058  -6.368291e+02   5.838494e-05     00s14  00059  -6.368289e+02   3.165476e-04     00s14  00060  -6.368292e+02   3.549420e-05     00s15  00061  -6.368294e+02   1.240437e-04     00s15  00062  -6.368289e+02   9.347429e-03     00s15  00063  -6.368295e+02   3.106442e-04     00s15  00064  -6.368296e+02   1.073007e-04     00s15  00065  -6.368300e+02   8.755693e-05     00s16  00066  -6.368297e+02   5.002899e-03     00s16  00067  -6.368301e+02   2.935327e-04     00s16  00068  -6.368303e+02   3.612766e-05 
    00s16  00069  -6.368304e+02   7.225493e-06     00s17  00070  -6.368304e+02   1.381545e-05     00s17  00071  -6.368305e+02   7.539845e-05     00s17  00072  -6.368305e+02   4.452375e-06     00s17  00073  -6.368305e+02   5.229460e-06     00s18  00074  -6.368306e+02   1.326979e-05     00s18  00075  -6.368306e+02   1.328297e-04     00s18  00076  -6.368306e+02   1.256696e-05     00s18  00077  -6.368306e+02   4.149379e-06     00s19  00078  -6.368306e+02   2.239759e-07     00s19  00079  -6.368306e+02   2.492688e-06     00s19  00080  -6.368306e+02   8.127120e-06     00s19  00081  -6.368306e+02   5.090556e-07 
    00s20  00084  -6.368306e+02   4.028541e-07 
Runtime:     00s20
Optimization status: Converged

Optimization restart 1/1, f = -636.8305879478609
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '32', '100', '4'], [' ', ' ', '16', '100', '4'], [' ', ' ', '4', '2048', '4'], [' ', ' ', '20', '100', '4'], [' ', ' ', '4', '128', '4'], [' ', ' ', '8', '128', '4'], [' ', ' ', '50', '64', '4'], [' ', ' ', '8', '2048', '4'], [' ', ' ', '80', '64', '4'], [' ', ' ', '16', '128', '4'], [' ', ' ', '4', '80', '4'], [' ', ' ', '50', '80', '4'], [' ', ' ', '100', '32', '4'], [' ', ' ', '96', '32', '4'], [' ', ' ', '8', '100', '4'], [' ', ' ', '128', '20', '4'], [' ', ' ', '20', '80', '4'], [' ', ' ', '32', '64', '4'], [' ', ' ', '8', '80', '4'], [' ', ' ', '4', '100', '4'], [' ', ' ', '96', '50', '4'], [' ', ' ', '64', '80', '4'], [' ', ' ', '32', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4']]
prob:  <search.SurrogateProblem object at 0x14a9127b22e0>
0 OK
bestX [array([[0.5431, 0.6781, 0.052 , 0.632 , 0.0226]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6150.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6150
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6150
........................................ [0.001373, 0.001209, 0.001171]
OUTPUT:%f [0.001373, 0.001209, 0.001171] 0.00119
store_func_eval
problem.constants
None
MLA iteration:  58
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -4.041568e+02           nan     00s00  00001  -4.041568e+02   1.042168e+04     00s00  00002  -4.858847e+02   3.918209e+03     00s00  00003  -5.472680e+02   5.069112e+02     00s01  00004  -5.732171e+02   5.194716e+02     00s01  00005  -6.305426e+02   3.786548e+01     00s01  00006  -6.317619e+02   8.491348e+01     00s01  00007  -6.353910e+02   5.851729e+00 
    00s02  00008  -6.364533e+02   6.707162e+00     00s02  00009  -6.374533e+02   4.796888e+00     00s02  00010  -6.367093e+02   2.255581e+01     00s02  00011  -6.392305e+02   1.139864e+00     00s03  00012  -6.396734e+02   1.332398e+00     00s03  00013  -6.401627e+02   2.079334e+00 
    00s03  00014  -6.403063e+02   6.920835e-02     00s03  00015  -6.403183e+02   3.823997e-02     00s04  00016  -6.403427e+02   3.622893e-02     00s04  00017  -6.403819e+02   6.772208e-02     00s04  00018  -6.404509e+02   1.092709e-01     00s04  00019  -6.406075e+02   1.300877e+00     00s05  00020  -6.408396e+02   2.537212e-01     00s05  00021  -6.409835e+02   2.693778e-02     00s05  00022  -6.410357e+02   3.454647e-02     00s05  00023  -6.411458e+02   2.482948e-02     00s05  00024  -6.398400e+02   4.419872e+00     00s06  00025  -6.412090e+02   1.400241e-01     00s06  00026  -6.414604e+02   6.639858e-01     00s06  00027  -6.414742e+02   7.448001e-01     00s06  00028  -6.415051e+02   7.499835e-02     00s07  00029  -6.415111e+02   1.063760e-01 
    00s07  00030  -6.415254e+02   7.082714e-03     00s07  00031  -6.415299e+02   7.628699e-03     00s07  00032  -6.415345e+02   7.138319e-03     00s08  00033  -6.415373e+02   1.693852e-03     00s08  00034  -6.415404e+02   1.890184e-03     00s08  00035  -6.415596e+02   7.758768e-03     00s08  00036  -6.415535e+02   9.162818e-02     00s09  00037  -6.415685e+02   1.447118e-02     00s09  00038  -6.415767e+02   3.934446e-03 
    00s09  00039  -6.415812e+02   2.937183e-04     00s09  00040  -6.415818e+02   1.267517e-02     00s10  00041  -6.415830e+02   8.343410e-04     00s10  00042  -6.415836e+02   1.433758e-04     00s10  00043  -6.415840e+02   1.283707e-04     00s10  00044  -6.415841e+02   5.023874e-03     00s11  00045  -6.415885e+02   7.413264e-03     00s11  00046  -6.415865e+02   1.861767e-01     00s11  00047  -6.415958e+02   4.732501e-02     00s11  00048  -6.415781e+02   2.272228e-01     00s12  00049  -6.415965e+02   6.139669e-02     00s12  00050  -6.416019e+02   2.614764e-02     00s12  00051  -6.416070e+02   1.378084e-02     00s12  00052  -6.416116e+02   1.761758e-02     00s13  00053  -6.416162e+02   1.407965e-02     00s13  00054  -6.416191e+02   1.582897e-03     00s13  00055  -6.416202e+02   6.253972e-04     00s13  00056  -6.416209e+02   6.034422e-04     00s14  00057  -6.416197e+02   1.255913e-02     00s14  00058  -6.416211e+02   8.900162e-04     00s14  00059  -6.416214e+02   8.509685e-04     00s14  00060  -6.416237e+02   4.544185e-03     00s15  00061  -6.416251e+02   5.005204e-03     00s15  00062  -6.416262e+02   7.347721e-04 
    00s15  00063  -6.416266e+02   4.831739e-05     00s15  00064  -6.416269e+02   1.440338e-04     00s16  00065  -6.416272e+02   4.246899e-04     00s16  00066  -6.416248e+02   4.138357e-02     00s16  00067  -6.416274e+02   4.335404e-04     00s16  00068  -6.416276e+02   5.860550e-05     00s17  00069  -6.416277e+02   1.056893e-05     00s17  00070  -6.416278e+02   1.717934e-05     00s17  00071  -6.416271e+02   3.215194e-03     00s17  00072  -6.416278e+02   2.660425e-05 
    00s18  00073  -6.416279e+02   6.519866e-06     00s18  00074  -6.416279e+02   1.405481e-04     00s18  00075  -6.416280e+02   5.465289e-06     00s18  00076  -6.416280e+02   9.202119e-06     00s18  00077  -6.416280e+02   6.875440e-06     00s19  00078  -6.416280e+02   2.608098e-05     00s19  00079  -6.416280e+02   2.045477e-04     00s19  00080  -6.416280e+02   2.045477e-04 
Runtime:     00s19
Optimization status: Converged

Optimization restart 1/1, f = -641.6280335817682
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '32', '100', '4'], [' ', ' ', '16', '100', '4'], [' ', ' ', '4', '2048', '4'], [' ', ' ', '20', '100', '4'], [' ', ' ', '4', '128', '4'], [' ', ' ', '8', '128', '4'], [' ', ' ', '50', '64', '4'], [' ', ' ', '8', '2048', '4'], [' ', ' ', '80', '64', '4'], [' ', ' ', '16', '128', '4'], [' ', ' ', '4', '80', '4'], [' ', ' ', '50', '80', '4'], [' ', ' ', '100', '32', '4'], [' ', ' ', '96', '32', '4'], [' ', ' ', '8', '100', '4'], [' ', ' ', '128', '20', '4'], [' ', ' ', '20', '80', '4'], [' ', ' ', '32', '64', '4'], [' ', ' ', '8', '80', '4'], [' ', ' ', '4', '100', '4'], [' ', ' ', '96', '50', '4'], [' ', ' ', '64', '80', '4'], [' ', ' ', '32', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '4', '64', '4']]
prob:  <search.SurrogateProblem object at 0x14a912975a30>
0 OK
bestX [array([[0.7806, 0.7904, 0.0521, 0.518 , 0.0352]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/91.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/91
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/91
........................................ [0.001451, 0.001331, 0.001293]
OUTPUT:%f [0.001451, 0.001331, 0.001293] 0.001312
store_func_eval
problem.constants
None
MLA iteration:  59
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -4.082812e+02           nan     00s00  00001  -4.082812e+02   1.053402e+04     00s00  00002  -4.904272e+02   3.954442e+03     00s00  00003  -5.518931e+02   5.086866e+02     00s01  00004  -5.776329e+02   5.207594e+02     00s01  00005  -6.350236e+02   3.894847e+01     00s01  00006  -6.365324e+02   8.414477e+01     00s01  00007  -6.400808e+02   6.179237e+00 
    00s02  00008  -6.411788e+02   7.350013e+00     00s02  00009  -6.421803e+02   4.870422e+00     00s02  00010  -6.417835e+02   2.218342e+01     00s02  00011  -6.439166e+02   1.282695e+00     00s03  00012  -6.443420e+02   1.315223e+00     00s03  00013  -6.447929e+02   4.272057e+00     00s03  00014  -6.451183e+02   1.266312e-01     00s03  00015  -6.451353e+02   3.242432e-02     00s04  00016  -6.451459e+02   3.511698e-02     00s04  00017  -6.452165e+02   1.172047e-01     00s04  00018  -6.452907e+02   1.194753e-01 
    00s04  00019  -6.453210e+02   8.661484e-02     00s05  00020  -6.453488e+02   1.554796e-02     00s05  00021  -6.453507e+02   4.450028e-02     00s05  00022  -6.453544e+02   4.700760e-03     00s05  00023  -6.453552e+02   2.247315e-03     00s06  00024  -6.453566e+02   7.569862e-04 
    00s06  00025  -6.453571e+02   4.091177e-04     00s06  00026  -6.453579e+02   5.535161e-04     00s06  00027  -6.453599e+02   2.577009e-03     00s07  00028  -6.453633e+02   8.500761e-03     00s07  00029  -6.453668e+02   1.098991e-02     00s07  00030  -6.453640e+02   7.582660e-03     00s07  00031  -6.453677e+02   6.821712e-03     00s08  00032  -6.453697e+02   4.681591e-04     00s08  00033  -6.453702e+02   1.667833e-04     00s08  00034  -6.453703e+02   1.125559e-04     00s08  00035  -6.453704e+02   1.562813e-04     00s09  00036  -6.453704e+02   8.913996e-04 
    00s09  00037  -6.453704e+02   6.525979e-05     00s09  00038  -6.453704e+02   6.629369e-05     00s09  00039  -6.453705e+02   1.483705e-04     00s10  00040  -6.453709e+02   4.413009e-04     00s10  00041  -6.453716e+02   8.099329e-04     00s10  00042  -6.453723e+02   2.639332e-04     00s10  00043  -6.453727e+02   1.252016e-05     00s11  00044  -6.453728e+02   2.001571e-05     00s11  00045  -6.453729e+02   2.650456e-05     00s11  00046  -6.453728e+02   2.099273e-04     00s11  00047  -6.453729e+02   4.262010e-05     00s12  00048  -6.453729e+02   6.261618e-06     00s12  00049  -6.453729e+02   1.516499e-06     00s12  00050  -6.453729e+02   1.674700e-04     00s12  00051  -6.453729e+02   1.086255e-05     00s12  00052  -6.453729e+02   1.086255e-05 
Runtime:     00s12
Optimization status: Converged

Optimization restart 1/1, f = -645.3729394627101
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '32', '100', '4'], [' ', ' ', '16', '100', '4'], [' ', ' ', '4', '2048', '4'], [' ', ' ', '20', '100', '4'], [' ', ' ', '4', '128', '4'], [' ', ' ', '8', '128', '4'], [' ', ' ', '50', '64', '4'], [' ', ' ', '8', '2048', '4'], [' ', ' ', '80', '64', '4'], [' ', ' ', '16', '128', '4'], [' ', ' ', '4', '80', '4'], [' ', ' ', '50', '80', '4'], [' ', ' ', '100', '32', '4'], [' ', ' ', '96', '32', '4'], [' ', ' ', '8', '100', '4'], [' ', ' ', '128', '20', '4'], [' ', ' ', '20', '80', '4'], [' ', ' ', '32', '64', '4'], [' ', ' ', '8', '80', '4'], [' ', ' ', '4', '100', '4'], [' ', ' ', '96', '50', '4'], [' ', ' ', '64', '80', '4'], [' ', ' ', '32', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '4', '64', '4'], [' ', ' ', '4', '50', '4']]
prob:  <search.SurrogateProblem object at 0x14a9129dd400>
0 OK
bestX [array([[0.6292, 0.5285, 0.6187, 0.6147, 0.0815]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8942.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8942
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8942
........................................ [0.001321, 0.00123, 0.001192]
OUTPUT:%f [0.001321, 0.00123, 0.001192] 0.0012109999999999998
store_func_eval
problem.constants
None
MLA iteration:  60
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -4.131921e+02           nan     00s00  00001  -4.131921e+02   1.057743e+04     00s00  00002  -4.954707e+02   3.961013e+03 
    00s00  00003  -5.565196e+02   5.005384e+02     00s01  00004  -5.815001e+02   5.182964e+02     00s01  00005  -6.389055e+02   4.176711e+01     00s01  00006  -6.409159e+02   8.821751e+01     00s01  00007  -6.445059e+02   7.279052e+00     00s02  00008  -6.456575e+02   9.846597e+00 
    00s02  00009  -6.466204e+02   4.776458e+00     00s02  00010  -6.476716e+02   9.330032e+00     00s02  00011  -6.485457e+02   9.974334e-01     00s03  00012  -6.488786e+02   7.348019e-01     00s03  00013  -6.497572e+02   2.325310e-01     00s03  00014  -6.498178e+02   1.687282e-01     00s03  00015  -6.498457e+02   5.107263e-02 
    00s04  00016  -6.498838e+02   2.017158e-02     00s04  00017  -6.499121e+02   3.669761e-02     00s04  00018  -6.499600e+02   4.761122e-02     00s04  00019  -6.499780e+02   6.174717e-02 
    00s05  00020  -6.499886e+02   2.336961e-03     00s05  00021  -6.499900e+02   2.919972e-04     00s05  00022  -6.499904e+02   2.702436e-04     00s05  00023  -6.499915e+02   1.934010e-04     00s06  00024  -6.499949e+02   1.085360e-03     00s06  00025  -6.499977e+02   1.140662e-03     00s06  00026  -6.499930e+02   2.141699e-02     00s06  00027  -6.499980e+02   1.341296e-03 
    00s07  00028  -6.499985e+02   1.302786e-04     00s07  00029  -6.499987e+02   1.789060e-04     00s07  00030  -6.499989e+02   1.776016e-04     00s07  00031  -6.499852e+02   1.412955e-01     00s08  00032  -6.499990e+02   1.527009e-03     00s08  00033  -6.499993e+02   7.708840e-04     00s08  00034  -6.500001e+02   1.036847e-04     00s08  00035  -6.500009e+02   3.241651e-04     00s09  00036  -6.500014e+02   1.538452e-04     00s09  00037  -6.500018e+02   2.367694e-04 
    00s09  00038  -6.500019e+02   2.010378e-05     00s09  00039  -6.500020e+02   1.610786e-05     00s10  00040  -6.500021e+02   1.589656e-05     00s10  00041  -6.499992e+02   7.055358e-03     00s10  00042  -6.500021e+02   1.542319e-05     00s10  00043  -6.500021e+02   1.542319e-05 
Runtime:     00s10
Optimization status: Converged

Optimization restart 1/1, f = -650.002060764837
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '32', '100', '4'], [' ', ' ', '16', '100', '4'], [' ', ' ', '4', '2048', '4'], [' ', ' ', '20', '100', '4'], [' ', ' ', '4', '128', '4'], [' ', ' ', '8', '128', '4'], [' ', ' ', '50', '64', '4'], [' ', ' ', '8', '2048', '4'], [' ', ' ', '80', '64', '4'], [' ', ' ', '16', '128', '4'], [' ', ' ', '4', '80', '4'], [' ', ' ', '50', '80', '4'], [' ', ' ', '100', '32', '4'], [' ', ' ', '96', '32', '4'], [' ', ' ', '8', '100', '4'], [' ', ' ', '128', '20', '4'], [' ', ' ', '20', '80', '4'], [' ', ' ', '32', '64', '4'], [' ', ' ', '8', '80', '4'], [' ', ' ', '4', '100', '4'], [' ', ' ', '96', '50', '4'], [' ', ' ', '64', '80', '4'], [' ', ' ', '32', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '4', '64', '4'], [' ', ' ', '4', '50', '4'], [' ', ' ', '64', '64', '4']]
prob:  <search.SurrogateProblem object at 0x14a912a07790>
0 OK
bestX [array([[0.6279, 0.5624, 0.2293, 0.6954, 0.0012]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9184.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9184
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9184
........................................ [0.00132, 0.00122, 0.001167]
OUTPUT:%f [0.00132, 0.00122, 0.001167] 0.0011935000000000001
store_func_eval
problem.constants
None
MLA iteration:  61
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -4.180156e+02           nan     00s00  00001  -4.180156e+02   1.062906e+04     00s00  00002  -5.003869e+02   3.946615e+03     00s00  00003  -5.606695e+02   5.047677e+02     00s01  00004  -5.856737e+02   5.238335e+02 
    00s01  00005  -6.434278e+02   4.381194e+01     00s01  00006  -6.454042e+02   9.470639e+01     00s01  00007  -6.492916e+02   7.567834e+00     00s02  00008  -6.504342e+02   9.969473e+00     00s02  00009  -6.513627e+02   4.630458e+00     00s02  00010  -6.526765e+02   6.479827e+00     00s02  00011  -6.533279e+02   1.138809e+00     00s03  00012  -6.537313e+02   6.048664e-01     00s03  00013  -6.544111e+02   9.212303e-01     00s03  00014  -6.545357e+02   7.409822e-02     00s03  00015  -6.545523e+02   4.687712e-02     00s04  00016  -6.545912e+02   1.500672e-01 
    00s04  00017  -6.546108e+02   9.825882e-02     00s04  00018  -6.546639e+02   2.597877e-02     00s04  00019  -6.546772e+02   3.691302e-02     00s05  00020  -6.547043e+02   5.111449e-03     00s05  00021  -6.547092e+02   3.687271e-04     00s05  00022  -6.547099e+02   3.767867e-04 
    00s05  00023  -6.547157e+02   7.593234e-04     00s06  00024  -6.547202e+02   4.735614e-03     00s06  00025  -6.547182e+02   2.095713e-02     00s06  00026  -6.547206e+02   5.636012e-04     00s06  00027  -6.547209e+02   6.138243e-05     00s07  00028  -6.547209e+02   8.012916e-05     00s07  00029  -6.547212e+02   9.623187e-05     00s07  00030  -6.547221e+02   1.603614e-03     00s07  00031  -6.547231e+02   3.465616e-04     00s08  00032  -6.547239e+02   1.292046e-04 
    00s08  00033  -6.547241e+02   8.413896e-05     00s08  00034  -6.547242e+02   2.486909e-05     00s08  00035  -6.547242e+02   2.336977e-06     00s09  00036  -6.547242e+02   3.073275e-06 
    00s09  00037  -6.547242e+02   9.091197e-06     00s09  00038  -6.547243e+02   1.896931e-05     00s09  00039  -6.547243e+02   1.965400e-06     00s10  00040  -6.547243e+02   1.490004e-05     00s10  00041  -6.547243e+02   2.502889e-05     00s10  00042  -6.547243e+02   3.444407e-05     00s10  00043  -6.547243e+02   2.067574e-04     00s11  00044  -6.547243e+02   1.754280e-05     00s11  00045  -6.547243e+02   3.439703e-06     00s11  00046  -6.547243e+02   4.598893e-06     00s11  00047  -6.547243e+02   7.069845e-06     00s12  00048  -6.547243e+02   7.169930e-06     00s12  00049  -6.547243e+02   1.586420e-06     00s12  00050  -6.547243e+02   2.033386e-06     00s12  00051  -6.547243e+02   7.806539e-05     00s13  00052  -6.547243e+02   5.839637e-07     00s13  00053  -6.547243e+02   5.839637e-07 
Runtime:     00s13
Optimization status: Converged

Optimization restart 1/1, f = -654.7243458479663
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '32', '100', '4'], [' ', ' ', '16', '100', '4'], [' ', ' ', '4', '2048', '4'], [' ', ' ', '20', '100', '4'], [' ', ' ', '4', '128', '4'], [' ', ' ', '8', '128', '4'], [' ', ' ', '50', '64', '4'], [' ', ' ', '8', '2048', '4'], [' ', ' ', '80', '64', '4'], [' ', ' ', '16', '128', '4'], [' ', ' ', '4', '80', '4'], [' ', ' ', '50', '80', '4'], [' ', ' ', '100', '32', '4'], [' ', ' ', '96', '32', '4'], [' ', ' ', '8', '100', '4'], [' ', ' ', '128', '20', '4'], [' ', ' ', '20', '80', '4'], [' ', ' ', '32', '64', '4'], [' ', ' ', '8', '80', '4'], [' ', ' ', '4', '100', '4'], [' ', ' ', '96', '50', '4'], [' ', ' ', '64', '80', '4'], [' ', ' ', '32', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '4', '64', '4'], [' ', ' ', '4', '50', '4'], [' ', ' ', '64', '64', '4'], [' ', ' ', '16', '80', '4']]
prob:  <search.SurrogateProblem object at 0x14a912dcbdc0>
0 OK
bestX [array([[0.9286, 0.9708, 0.7108, 0.5199, 0.0401]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1939.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1939
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1939
........................................ [0.001398, 0.001289, 0.001239]
OUTPUT:%f [0.001398, 0.001289, 0.001239] 0.001264
store_func_eval
problem.constants
None
MLA iteration:  62
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -4.222346e+02           nan     00s00  00001  -4.222346e+02   1.071650e+04     00s00  00002  -5.047525e+02   3.957470e+03     00s00  00003  -5.649724e+02   5.064125e+02     00s01  00004  -5.899356e+02   5.278803e+02     00s01  00005  -6.481337e+02   4.516928e+01     00s01  00006  -6.500855e+02   9.898460e+01     00s01  00007  -6.541704e+02   7.786556e+00     00s02  00008  -6.553000e+02   1.008421e+01     00s02  00009  -6.562001e+02   4.481488e+00 
    00s02  00010  -6.576142e+02   4.837144e+00     00s02  00011  -6.581401e+02   1.348269e+00     00s03  00012  -6.587075e+02   6.669700e-01     00s03  00013  -6.591493e+02   8.679879e-01     00s03  00014  -6.593396e+02   8.070061e-02     00s03  00015  -6.593599e+02   3.963056e-02     00s04  00016  -6.593979e+02   9.139973e-02 
    00s04  00017  -6.594206e+02   5.797516e-02     00s04  00018  -6.594687e+02   1.321177e-02     00s04  00019  -6.594922e+02   1.485326e-02     00s05  00020  -6.595013e+02   5.099174e-02     00s05  00021  -6.595093e+02   1.198332e-03     00s05  00022  -6.595101e+02   3.091972e-04     00s05  00023  -6.595106e+02   2.945535e-04     00s06  00024  -6.594503e+02   2.129405e-01 
    00s06  00025  -6.595112e+02   2.190648e-03     00s06  00026  -6.595137e+02   2.075324e-03     00s06  00027  -6.595179e+02   1.065862e-03     00s07  00028  -6.595186e+02   1.521048e-02     00s07  00029  -6.595213e+02   2.549349e-04     00s07  00030  -6.595216e+02   8.299924e-05     00s07  00031  -6.595218e+02   1.032318e-04     00s08  00032  -6.595221e+02   5.206498e-04     00s08  00033  -6.595224e+02   4.123595e-03     00s08  00034  -6.595232e+02   4.638425e-04 
    00s08  00035  -6.595238e+02   2.309802e-04     00s09  00036  -6.595244e+02   4.391706e-04     00s09  00037  -6.595248e+02   1.706778e-04     00s09  00038  -6.595250e+02   2.479937e-04     00s10  00039  -6.595251e+02   5.186998e-04     00s10  00040  -6.595252e+02   3.128688e-05     00s10  00041  -6.595252e+02   5.532402e-06     00s10  00042  -6.595253e+02   2.056746e-05 
    00s11  00043  -6.595253e+02   1.276329e-05     00s11  00044  -6.595253e+02   3.888507e-05     00s11  00045  -6.595253e+02   5.360912e-06     00s11  00046  -6.595253e+02   8.748094e-07     00s12  00047  -6.595253e+02   5.568460e-07     00s12  00048  -6.595253e+02   2.573550e-07     00s12  00049  -6.595253e+02   2.573550e-07 
Runtime:     00s12
Optimization status: Converged

Optimization restart 1/1, f = -659.5253157207533
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '32', '100', '4'], [' ', ' ', '16', '100', '4'], [' ', ' ', '4', '2048', '4'], [' ', ' ', '20', '100', '4'], [' ', ' ', '4', '128', '4'], [' ', ' ', '8', '128', '4'], [' ', ' ', '50', '64', '4'], [' ', ' ', '8', '2048', '4'], [' ', ' ', '80', '64', '4'], [' ', ' ', '16', '128', '4'], [' ', ' ', '4', '80', '4'], [' ', ' ', '50', '80', '4'], [' ', ' ', '100', '32', '4'], [' ', ' ', '96', '32', '4'], [' ', ' ', '8', '100', '4'], [' ', ' ', '128', '20', '4'], [' ', ' ', '20', '80', '4'], [' ', ' ', '32', '64', '4'], [' ', ' ', '8', '80', '4'], [' ', ' ', '4', '100', '4'], [' ', ' ', '96', '50', '4'], [' ', ' ', '64', '80', '4'], [' ', ' ', '32', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '4', '64', '4'], [' ', ' ', '4', '50', '4'], [' ', ' ', '64', '64', '4'], [' ', ' ', '16', '80', '4'], [' ', ' ', '80', '50', '4']]
prob:  <search.SurrogateProblem object at 0x14a912e46ee0>
0 OK
bestX [array([[0.6056, 0.0475, 0.0483, 0.8316, 0.0887]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5834.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5834
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5834
........................................ [0.003244, 0.003127, 0.003088]
OUTPUT:%f [0.003244, 0.003127, 0.003088] 0.0031075
store_func_eval
problem.constants
None
MLA iteration:  63
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -4.253068e+02           nan     00s00  00001  -4.253068e+02   1.088575e+04     00s00  00002  -5.085701e+02   4.043362e+03     00s00  00003  -5.696612e+02   5.015840e+02     00s01  00004  -5.940269e+02   5.258910e+02     00s01  00005  -6.521650e+02   4.764988e+01 
    00s01  00006  -6.547423e+02   9.779647e+01     00s01  00007  -6.587307e+02   8.420845e+00     00s02  00008  -6.598870e+02   1.169757e+01     00s02  00009  -6.608403e+02   4.392386e+00     00s02  00010  -6.622717e+02   2.884998e+00     00s02  00011  -6.626702e+02   1.750683e+00     00s03  00012  -6.638153e+02   1.208098e+00     00s03  00013  -6.638888e+02   2.429406e-01 
    00s03  00014  -6.639281e+02   6.678333e-02     00s03  00015  -6.639582e+02   4.267867e-02     00s04  00016  -6.639857e+02   7.409743e-02     00s04  00017  -6.640359e+02   1.048102e-01     00s04  00018  -6.640858e+02   1.802958e-02     00s04  00019  -6.641221e+02   1.050620e-02     00s05  00020  -6.641340e+02   8.066154e-03     00s05  00021  -6.641378e+02   1.931934e-03 
    00s05  00022  -6.641394e+02   5.576721e-04     00s05  00023  -6.641409e+02   7.406365e-04     00s06  00024  -6.641429e+02   1.378484e-03     00s06  00025  -6.641448e+02   4.341026e-03     00s06  00026  -6.641458e+02   1.434058e-03     00s06  00027  -6.641462e+02   2.375801e-04     00s07  00028  -6.641464e+02   1.260327e-04     00s07  00029  -6.641469e+02   2.975619e-04     00s07  00030  -6.641478e+02   5.100476e-04     00s08  00031  -6.641484e+02   8.152045e-03     00s08  00032  -6.641501e+02   1.748680e-03     00s08  00033  -6.641515e+02   2.926949e-04     00s08  00034  -6.641523e+02   2.703342e-04 
    00s09  00035  -6.641528e+02   5.272258e-05     00s09  00036  -6.641524e+02   3.485734e-03     00s09  00037  -6.641529e+02   2.747951e-04     00s09  00038  -6.641531e+02   2.059287e-04     00s10  00039  -6.641532e+02   5.990230e-05     00s10  00040  -6.641533e+02   5.917747e-06     00s10  00041  -6.641533e+02   3.317853e-06 
    00s10  00042  -6.641533e+02   5.091800e-07     00s11  00043  -6.641534e+02   5.732232e-06     00s11  00044  -6.641534e+02   1.440674e-07     00s11  00045  -6.641534e+02   1.528884e-07     00s11  00046  -6.641534e+02   2.828772e-06     00s12  00047  -6.641534e+02   2.828772e-06 
Runtime:     00s12
Optimization status: Converged

Optimization restart 1/1, f = -664.1533613301058
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '32', '100', '4'], [' ', ' ', '16', '100', '4'], [' ', ' ', '4', '2048', '4'], [' ', ' ', '20', '100', '4'], [' ', ' ', '4', '128', '4'], [' ', ' ', '8', '128', '4'], [' ', ' ', '50', '64', '4'], [' ', ' ', '8', '2048', '4'], [' ', ' ', '80', '64', '4'], [' ', ' ', '16', '128', '4'], [' ', ' ', '4', '80', '4'], [' ', ' ', '50', '80', '4'], [' ', ' ', '100', '32', '4'], [' ', ' ', '96', '32', '4'], [' ', ' ', '8', '100', '4'], [' ', ' ', '128', '20', '4'], [' ', ' ', '20', '80', '4'], [' ', ' ', '32', '64', '4'], [' ', ' ', '8', '80', '4'], [' ', ' ', '4', '100', '4'], [' ', ' ', '96', '50', '4'], [' ', ' ', '64', '80', '4'], [' ', ' ', '32', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '4', '64', '4'], [' ', ' ', '4', '50', '4'], [' ', ' ', '64', '64', '4'], [' ', ' ', '16', '80', '4'], [' ', ' ', '80', '50', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '4']]
prob:  <search.SurrogateProblem object at 0x14a9135055e0>
0 OK
bestX [array([[0.8622, 0.6688, 0.3598, 0.6001, 0.0705]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/900.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/900
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/900
........................................ [0.001328, 0.001229, 0.001182]
OUTPUT:%f [0.001328, 0.001229, 0.001182] 0.0012055
store_func_eval
problem.constants
None
MLA iteration:  64
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -4.294747e+02           nan     00s00  00001  -4.294747e+02   1.079256e+04 
    00s00  00002  -5.125113e+02   4.083514e+03     00s00  00003  -5.758219e+02   5.039954e+02     00s01  00004  -6.010596e+02   5.214648e+02     00s01  00005  -6.583835e+02   4.192377e+01 
    00s01  00006  -6.598890e+02   9.170137e+01     00s01  00007  -6.638448e+02   6.443614e+00     00s02  00008  -6.649143e+02   7.313907e+00     00s02  00009  -6.658058e+02   4.443975e+00     00s02  00010  -6.662924e+02   1.600221e+01     00s03  00011  -6.672942e+02   1.039094e+00     00s03  00012  -6.678266e+02   1.905105e+00     00s03  00013  -6.684407e+02   7.384547e-01     00s03  00014  -6.686488e+02   7.062957e-01 
    00s04  00015  -6.687393e+02   4.823381e-02     00s04  00016  -6.687521e+02   3.959063e-02     00s04  00017  -6.687905e+02   3.291528e-02     00s04  00018  -6.688297e+02   7.657842e-02     00s05  00019  -6.688729e+02   3.099567e-02     00s05  00020  -6.689136e+02   1.936173e-02     00s05  00021  -6.688780e+02   5.622829e-01     00s05  00022  -6.689210e+02   1.806943e-02     00s06  00023  -6.689349e+02   4.386554e-03     00s06  00024  -6.689404e+02   9.947264e-04 
    00s06  00025  -6.689428e+02   6.794402e-04     00s06  00026  -6.689446e+02   1.062917e-03     00s07  00027  -6.689460e+02   4.345200e-04     00s07  00028  -6.689472e+02   7.479850e-04     00s07  00029  -6.689452e+02   1.380054e-02     00s07  00030  -6.689474e+02   4.169110e-04     00s08  00031  -6.689477e+02   1.807521e-04     00s08  00032  -6.689481e+02   1.220872e-04     00s08  00033  -6.689504e+02   1.138096e-03     00s08  00034  -6.689426e+02   1.033026e-01     00s09  00035  -6.689508e+02   2.550349e-03     00s09  00036  -6.689521e+02   8.532268e-04 
    00s09  00037  -6.689535e+02   7.371226e-06     00s10  00038  -6.689539e+02   5.174369e-06     00s10  00039  -6.689540e+02   3.225128e-04     00s10  00040  -6.689543e+02   4.400074e-06     00s10  00041  -6.689543e+02   4.759603e-06     00s11  00042  -6.689544e+02   5.885381e-05     00s11  00043  -6.689544e+02   1.031940e-04     00s11  00044  -6.689544e+02   4.335979e-06 
    00s11  00045  -6.689544e+02   2.335831e-07     00s12  00046  -6.689544e+02   1.002266e-06     00s12  00047  -6.689544e+02   1.739928e-05     00s12  00048  -6.689544e+02   1.739928e-05 
Runtime:     00s12
Optimization status: Converged

Optimization restart 1/1, f = -668.9544306823748
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '32', '100', '4'], [' ', ' ', '16', '100', '4'], [' ', ' ', '4', '2048', '4'], [' ', ' ', '20', '100', '4'], [' ', ' ', '4', '128', '4'], [' ', ' ', '8', '128', '4'], [' ', ' ', '50', '64', '4'], [' ', ' ', '8', '2048', '4'], [' ', ' ', '80', '64', '4'], [' ', ' ', '16', '128', '4'], [' ', ' ', '4', '80', '4'], [' ', ' ', '50', '80', '4'], [' ', ' ', '100', '32', '4'], [' ', ' ', '96', '32', '4'], [' ', ' ', '8', '100', '4'], [' ', ' ', '128', '20', '4'], [' ', ' ', '20', '80', '4'], [' ', ' ', '32', '64', '4'], [' ', ' ', '8', '80', '4'], [' ', ' ', '4', '100', '4'], [' ', ' ', '96', '50', '4'], [' ', ' ', '64', '80', '4'], [' ', ' ', '32', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '4', '64', '4'], [' ', ' ', '4', '50', '4'], [' ', ' ', '64', '64', '4'], [' ', ' ', '16', '80', '4'], [' ', ' ', '80', '50', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '4'], [' ', ' ', '20', '64', '4']]
prob:  <search.SurrogateProblem object at 0x14a912903790>
0 OK
bestX [array([[0.7364, 0.04  , 0.033 , 0.7855, 0.0802]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6493.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6493
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6493
........................................ [0.003371, 0.003077, 0.003091]
OUTPUT:%f [0.003371, 0.003077, 0.003091] 0.003084
store_func_eval
problem.constants
None
MLA iteration:  65
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -4.327530e+02           nan     00s00  00001  -4.327530e+02   1.087153e+04     00s00  00002  -5.161505e+02   4.131481e+03     00s00  00003  -5.805827e+02   5.177244e+02     00s01  00004  -6.067654e+02   5.255882e+02     00s01  00005  -6.640473e+02   3.811440e+01     00s01  00006  -6.651373e+02   8.070316e+01     00s01  00007  -6.687957e+02   4.976110e+00 
    00s02  00008  -6.697299e+02   5.077725e+00     00s02  00009  -6.707722e+02   4.368386e+00     00s02  00010  -6.701624e+02   2.012247e+01     00s02  00011  -6.725970e+02   8.389970e-01     00s03  00012  -6.730289e+02   8.193408e-01     00s03  00013  -6.730429e+02   4.089300e+00     00s03  00014  -6.732570e+02   3.808974e-01     00s03  00015  -6.733197e+02   1.915654e-01 
    00s04  00016  -6.733826e+02   3.600801e-02     00s04  00017  -6.734092e+02   6.708911e-02     00s04  00018  -6.734773e+02   1.715797e-01     00s05  00019  -6.736063e+02   3.671827e-01     00s05  00020  -6.736463e+02   2.955178e-02     00s05  00021  -6.736561e+02   8.825363e-03 
    00s05  00022  -6.736578e+02   5.055600e-03     00s06  00023  -6.736614e+02   3.802591e-03     00s06  00024  -6.736709e+02   1.265138e-02     00s06  00025  -6.736799e+02   1.945364e-02     00s06  00026  -6.736848e+02   4.798567e-03     00s07  00027  -6.736859e+02   1.862584e-03 
    00s07  00028  -6.736863e+02   7.467438e-05     00s07  00029  -6.736863e+02   4.948234e-05     00s07  00030  -6.736865e+02   8.269654e-05     00s08  00031  -6.736870e+02   1.705309e-03     00s08  00032  -6.736876e+02   1.119446e-03     00s08  00033  -6.736883e+02   7.433854e-04     00s08  00034  -6.736888e+02   1.548198e-03     00s09  00035  -6.736898e+02   1.155636e-04     00s09  00036  -6.736900e+02   9.879049e-05     00s09  00037  -6.736906e+02   6.426701e-04     00s09  00038  -6.736909e+02   6.742791e-05     00s10  00039  -6.736909e+02   1.861076e-05     00s10  00040  -6.736909e+02   1.258375e-05     00s10  00041  -6.736909e+02   1.310676e-06 
    00s11  00042  -6.736909e+02   1.157856e-06     00s11  00043  -6.736909e+02   3.802153e-04     00s11  00044  -6.736909e+02   3.170576e-05     00s11  00045  -6.736909e+02   8.313980e-06     00s12  00046  -6.736910e+02   8.427644e-07     00s12  00047  -6.736910e+02   6.647973e-07 
    00s12  00048  -6.736910e+02   1.374327e-07     00s12  00049  -6.736910e+02   1.400814e-05     00s13  00050  -6.736910e+02   3.298442e-07     00s13  00051  -6.736910e+02   3.298442e-07 
Runtime:     00s13
Optimization status: Converged

Optimization restart 1/1, f = -673.690966635556
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '32', '100', '4'], [' ', ' ', '16', '100', '4'], [' ', ' ', '4', '2048', '4'], [' ', ' ', '20', '100', '4'], [' ', ' ', '4', '128', '4'], [' ', ' ', '8', '128', '4'], [' ', ' ', '50', '64', '4'], [' ', ' ', '8', '2048', '4'], [' ', ' ', '80', '64', '4'], [' ', ' ', '16', '128', '4'], [' ', ' ', '4', '80', '4'], [' ', ' ', '50', '80', '4'], [' ', ' ', '100', '32', '4'], [' ', ' ', '96', '32', '4'], [' ', ' ', '8', '100', '4'], [' ', ' ', '128', '20', '4'], [' ', ' ', '20', '80', '4'], [' ', ' ', '32', '64', '4'], [' ', ' ', '8', '80', '4'], [' ', ' ', '4', '100', '4'], [' ', ' ', '96', '50', '4'], [' ', ' ', '64', '80', '4'], [' ', ' ', '32', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '4', '64', '4'], [' ', ' ', '4', '50', '4'], [' ', ' ', '64', '64', '4'], [' ', ' ', '16', '80', '4'], [' ', ' ', '80', '50', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '4'], [' ', ' ', '20', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '100', '4']]
prob:  <search.SurrogateProblem object at 0x14a9128de850>
0 OK
bestX [array([[0.5542, 0.319 , 0.0595, 0.6496, 0.0404]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2545.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2545
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2545
........................................ [0.003374, 0.003102, 0.003106]
OUTPUT:%f [0.003374, 0.003102, 0.003106] 0.003104
store_func_eval
problem.constants
None
MLA iteration:  66
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -4.366587e+02           nan     00s00  00001  -4.366587e+02   1.103641e+04     00s00  00002  -5.205931e+02   4.173480e+03     00s00  00003  -5.850381e+02   5.220387e+02 
    00s01  00004  -6.110606e+02   5.262887e+02     00s01  00005  -6.684706e+02   3.947889e+01     00s01  00006  -6.698330e+02   8.117299e+01     00s01  00007  -6.734492e+02   5.347596e+00     00s02  00008  -6.744265e+02   5.538804e+00     00s02  00009  -6.754255e+02   4.382069e+00     00s02  00010  -6.748421e+02   2.051875e+01     00s02  00011  -6.772545e+02   8.918406e-01 
    00s03  00012  -6.776847e+02   1.000418e+00     00s03  00013  -6.778255e+02   3.359765e+00 
    00s03  00014  -6.780545e+02   9.996069e-02     00s04  00015  -6.780777e+02   6.174258e-02     00s04  00016  -6.781555e+02   1.624052e-01     00s04  00017  -6.782162e+02   3.545506e-01     00s04  00018  -6.782675e+02   4.778248e-01     00s05  00019  -6.783399e+02   1.746442e-02     00s05  00020  -6.783539e+02   5.944510e-03     00s05  00021  -6.783599e+02   1.522929e-02     00s05  00022  -6.783698e+02   1.394005e-02     00s06  00023  -6.783851e+02   3.327231e-02     00s06  00024  -6.783876e+02   3.556880e-03     00s06  00025  -6.783882e+02   6.843894e-04 
    00s06  00026  -6.783884e+02   1.838291e-04     00s07  00027  -6.783886e+02   2.950705e-04     00s07  00028  -6.783888e+02   3.628520e-04     00s07  00029  -6.783894e+02   5.290250e-04     00s07  00030  -6.783904e+02   4.560253e-04     00s08  00031  -6.783913e+02   3.196345e-03     00s08  00032  -6.783930e+02   8.158984e-04     00s08  00033  -6.783943e+02   2.557394e-04     00s08  00034  -6.783948e+02   3.222470e-04     00s09  00035  -6.783950e+02   7.760687e-04     00s09  00036  -6.783952e+02   5.423582e-03     00s09  00037  -6.783957e+02   2.043421e-04     00s10  00038  -6.783958e+02   4.080249e-06     00s10  00039  -6.783959e+02   4.065586e-05 
    00s10  00040  -6.783959e+02   3.698937e-05     00s10  00041  -6.783825e+02   2.728963e-02     00s11  00042  -6.783959e+02   2.049732e-05     00s11  00043  -6.783959e+02   2.248546e-06 
    00s11  00044  -6.783959e+02   1.267436e-07     00s11  00045  -6.783959e+02   1.669256e-05     00s12  00046  -6.783960e+02   4.228506e-07     00s12  00047  -6.783960e+02   1.370382e-07     00s12  00048  -6.783960e+02   1.370382e-07 
Runtime:     00s12
Optimization status: Converged

Optimization restart 1/1, f = -678.3959570188438
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '32', '100', '4'], [' ', ' ', '16', '100', '4'], [' ', ' ', '4', '2048', '4'], [' ', ' ', '20', '100', '4'], [' ', ' ', '4', '128', '4'], [' ', ' ', '8', '128', '4'], [' ', ' ', '50', '64', '4'], [' ', ' ', '8', '2048', '4'], [' ', ' ', '80', '64', '4'], [' ', ' ', '16', '128', '4'], [' ', ' ', '4', '80', '4'], [' ', ' ', '50', '80', '4'], [' ', ' ', '100', '32', '4'], [' ', ' ', '96', '32', '4'], [' ', ' ', '8', '100', '4'], [' ', ' ', '128', '20', '4'], [' ', ' ', '20', '80', '4'], [' ', ' ', '32', '64', '4'], [' ', ' ', '8', '80', '4'], [' ', ' ', '4', '100', '4'], [' ', ' ', '96', '50', '4'], [' ', ' ', '64', '80', '4'], [' ', ' ', '32', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '4', '64', '4'], [' ', ' ', '4', '50', '4'], [' ', ' ', '64', '64', '4'], [' ', ' ', '16', '80', '4'], [' ', ' ', '80', '50', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '4'], [' ', ' ', '20', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '4']]
prob:  <search.SurrogateProblem object at 0x14a9125f2c10>
0 OK
bestX [array([[0.8183, 0.7054, 0.2525, 0.6253, 0.0152]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2828.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2828
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2828
........................................ [0.001303, 0.001193, 0.001162]
OUTPUT:%f [0.001303, 0.001193, 0.001162] 0.0011775000000000002
store_func_eval
problem.constants
None
MLA iteration:  67
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -4.415510e+02           nan 
    00s00  00001  -4.415510e+02   1.106474e+04     00s00  00002  -5.253997e+02   4.147168e+03     00s00  00003  -5.893055e+02   5.301589e+02     00s01  00004  -6.156066e+02   5.286676e+02     00s01  00005  -6.733874e+02   3.909215e+01     00s01  00006  -6.747814e+02   7.766224e+01 
    00s01  00007  -6.782903e+02   5.054858e+00     00s02  00008  -6.792257e+02   5.110347e+00     00s02  00009  -6.802512e+02   4.241098e+00     00s02  00010  -6.799583e+02   1.950093e+01     00s03  00011  -6.820696e+02   8.527430e-01     00s03  00012  -6.824900e+02   8.115775e-01     00s03  00013  -6.824839e+02   4.564438e+00     00s03  00014  -6.827338e+02   4.553886e-01     00s04  00015  -6.827975e+02   1.844421e-01 
    00s04  00016  -6.828544e+02   3.503503e-02     00s04  00017  -6.828778e+02   5.985603e-02     00s04  00018  -6.829299e+02   1.283306e-01     00s05  00019  -6.830538e+02   1.991855e-01     00s05  00020  -6.829087e+02   5.612595e-01     00s05  00021  -6.830932e+02   1.500425e-01     00s05  00022  -6.829301e+02   7.789381e-01     00s06  00023  -6.831120e+02   1.944215e-02     00s06  00024  -6.831156e+02   3.438798e-03     00s06  00025  -6.831173e+02   2.746961e-03     00s06  00026  -6.831202e+02   1.341809e-02     00s07  00027  -6.831251e+02   3.474169e-02     00s07  00028  -6.831331e+02   5.053309e-02     00s07  00029  -6.831390e+02   1.107381e-02 
    00s08  00030  -6.831415e+02   1.239574e-03     00s08  00031  -6.831423e+02   9.898425e-04     00s08  00032  -6.831442e+02   1.996528e-03 
    00s08  00033  -6.831447e+02   4.190137e-04     00s09  00034  -6.831448e+02   8.936877e-05     00s09  00035  -6.831449e+02   2.106323e-04     00s09  00036  -6.831450e+02   6.401433e-04     00s09  00037  -6.831453e+02   2.027671e-03     00s10  00038  -6.831458e+02   3.577588e-03     00s10  00039  -6.831470e+02   4.756290e-03     00s10  00040  -6.831482e+02   9.992006e-03     00s10  00041  -6.831494e+02   2.954546e-04     00s11  00042  -6.831497e+02   1.636743e-04     00s11  00043  -6.831496e+02   5.592416e-04     00s11  00044  -6.831498e+02   1.790348e-04 
    00s12  00045  -6.831499e+02   6.437701e-05     00s12  00046  -6.831499e+02   7.210430e-05     00s12  00047  -6.831499e+02   7.332976e-05     00s12  00048  -6.831500e+02   1.840898e-05     00s13  00049  -6.831500e+02   6.382301e-06     00s13  00050  -6.831500e+02   1.423111e-05     00s13  00051  -6.831500e+02   2.488233e-06 
    00s13  00052  -6.831500e+02   3.674168e-07     00s14  00053  -6.831500e+02   1.092691e-06     00s14  00054  -6.831500e+02   1.092691e-06 
Runtime:     00s14
Optimization status: Converged

Optimization restart 1/1, f = -683.1500173470489
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '32', '100', '4'], [' ', ' ', '16', '100', '4'], [' ', ' ', '4', '2048', '4'], [' ', ' ', '20', '100', '4'], [' ', ' ', '4', '128', '4'], [' ', ' ', '8', '128', '4'], [' ', ' ', '50', '64', '4'], [' ', ' ', '8', '2048', '4'], [' ', ' ', '80', '64', '4'], [' ', ' ', '16', '128', '4'], [' ', ' ', '4', '80', '4'], [' ', ' ', '50', '80', '4'], [' ', ' ', '100', '32', '4'], [' ', ' ', '96', '32', '4'], [' ', ' ', '8', '100', '4'], [' ', ' ', '128', '20', '4'], [' ', ' ', '20', '80', '4'], [' ', ' ', '32', '64', '4'], [' ', ' ', '8', '80', '4'], [' ', ' ', '4', '100', '4'], [' ', ' ', '96', '50', '4'], [' ', ' ', '64', '80', '4'], [' ', ' ', '32', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '4', '64', '4'], [' ', ' ', '4', '50', '4'], [' ', ' ', '64', '64', '4'], [' ', ' ', '16', '80', '4'], [' ', ' ', '80', '50', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '4'], [' ', ' ', '20', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '4'], [' ', ' ', '16', '64', '4']]
prob:  <search.SurrogateProblem object at 0x14a912932940>
0 OK
bestX [array([[0.9652, 0.489 , 0.1254, 0.7845, 0.0088]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2162.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2162
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2162
........................................ [0.003015, 0.00282, 0.002797]
OUTPUT:%f [0.003015, 0.00282, 0.002797] 0.0028085000000000002
store_func_eval
problem.constants
None
MLA iteration:  68
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -4.454065e+02           nan     00s00  00001  -4.454065e+02   1.122264e+04     00s00  00002  -5.297783e+02   4.178133e+03     00s00  00003  -5.926088e+02   5.206879e+02     00s01  00004  -6.179498e+02   5.382970e+02     00s01  00005  -6.757872e+02   4.857672e+01 
    00s01  00006  -6.781248e+02   9.404187e+01     00s01  00007  -6.823281e+02   6.438684e+00     00s02  00008  -6.833181e+02   6.491604e+00     00s02  00009  -6.840888e+02   3.906411e+00     00s02  00010  -6.851310e+02   1.059977e+01     00s03  00011  -6.856219e+02   9.816827e-01     00s03  00012  -6.861064e+02   1.595138e+00     00s03  00013  -6.867795e+02   3.433345e-01     00s03  00014  -6.868997e+02   7.005781e-01 
    00s04  00015  -6.869647e+02   6.580849e-02     00s04  00016  -6.869788e+02   3.626467e-02     00s04  00017  -6.870176e+02   1.822229e-01     00s04  00018  -6.870378e+02   1.844510e-01     00s05  00019  -6.871036e+02   1.741302e-02     00s05  00020  -6.871328e+02   1.110085e-02     00s05  00021  -6.871504e+02   1.458613e-02     00s05  00022  -6.871589e+02   1.725017e-03     00s06  00023  -6.871611e+02   7.515408e-04 
    00s06  00024  -6.871623e+02   1.460440e-03     00s06  00025  -6.871640e+02   2.270754e-03     00s07  00026  -6.871624e+02   8.062395e-03 
    00s07  00027  -6.871645e+02   7.324788e-04     00s07  00028  -6.871656e+02   2.150661e-04     00s07  00029  -6.871661e+02   2.761607e-04     00s08  00030  -6.871502e+02   1.349870e-01     00s08  00031  -6.871663e+02   3.168406e-04     00s08  00032  -6.871665e+02   1.371647e-04     00s08  00033  -6.871670e+02   3.797090e-04     00s09  00034  -6.871681e+02   1.222133e-03     00s09  00035  -6.871694e+02   3.984329e-04     00s09  00036  -6.871714e+02   8.834169e-05 
    00s09  00037  -6.871722e+02   8.621536e-06     00s10  00038  -6.871725e+02   7.321852e-05     00s10  00039  -6.871710e+02   1.003317e-02     00s10  00040  -6.871726e+02   1.758194e-04     00s11  00041  -6.871727e+02   4.203607e-05     00s11  00042  -6.871728e+02   1.598953e-06     00s11  00043  -6.871729e+02   2.904879e-05     00s11  00044  -6.871729e+02   3.818109e-04     00s12  00045  -6.871729e+02   3.465538e-05     00s12  00046  -6.871729e+02   3.205447e-06 
    00s12  00047  -6.871729e+02   8.697290e-07     00s12  00048  -6.871729e+02   4.001631e-07     00s13  00049  -6.871729e+02   2.150361e-06     00s13  00050  -6.871729e+02   2.150361e-06 
Runtime:     00s13
Optimization status: Converged

Optimization restart 1/1, f = -687.1729260295239
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '32', '100', '4'], [' ', ' ', '16', '100', '4'], [' ', ' ', '4', '2048', '4'], [' ', ' ', '20', '100', '4'], [' ', ' ', '4', '128', '4'], [' ', ' ', '8', '128', '4'], [' ', ' ', '50', '64', '4'], [' ', ' ', '8', '2048', '4'], [' ', ' ', '80', '64', '4'], [' ', ' ', '16', '128', '4'], [' ', ' ', '4', '80', '4'], [' ', ' ', '50', '80', '4'], [' ', ' ', '100', '32', '4'], [' ', ' ', '96', '32', '4'], [' ', ' ', '8', '100', '4'], [' ', ' ', '128', '20', '4'], [' ', ' ', '20', '80', '4'], [' ', ' ', '32', '64', '4'], [' ', ' ', '8', '80', '4'], [' ', ' ', '4', '100', '4'], [' ', ' ', '96', '50', '4'], [' ', ' ', '64', '80', '4'], [' ', ' ', '32', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '4', '64', '4'], [' ', ' ', '4', '50', '4'], [' ', ' ', '64', '64', '4'], [' ', ' ', '16', '80', '4'], [' ', ' ', '80', '50', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '4'], [' ', ' ', '20', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '4'], [' ', ' ', '16', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '100', '4']]
prob:  <search.SurrogateProblem object at 0x14a912925370>
0 OK
bestX [array([[0.6305, 0.1735, 0.0975, 0.9349, 0.0289]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9280.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9280
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9280
........................................ [0.00299, 0.002797, 0.002783]
OUTPUT:%f [0.00299, 0.002797, 0.002783] 0.00279
store_func_eval
problem.constants
None
MLA iteration:  69
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -4.496071e+02           nan     00s00  00001  -4.496071e+02   1.135668e+04     00s00  00002  -5.345256e+02   4.214792e+03     00s00  00003  -5.970358e+02   5.174850e+02     00s01  00004  -6.217981e+02   5.367785e+02     00s01  00005  -6.797364e+02   5.155192e+01 
    00s01  00006  -6.828950e+02   9.419013e+01     00s01  00007  -6.869475e+02   7.516295e+00     00s02  00008  -6.879811e+02   8.517047e+00     00s02  00009  -6.887526e+02   3.857976e+00     00s02  00010  -6.901896e+02   3.283415e+00     00s03  00011  -6.906069e+02   1.502551e+00     00s03  00012  -6.914634e+02   2.501424e+00     00s03  00013  -6.916481e+02   2.958416e-01     00s03  00014  -6.917000e+02   1.177834e-01     00s04  00015  -6.917392e+02   5.130490e-02     00s04  00016  -6.917542e+02   5.908681e-02 
    00s04  00017  -6.918238e+02   8.169268e-02     00s04  00018  -6.918647e+02   6.169480e-03     00s05  00019  -6.918857e+02   3.349581e-03 
    00s05  00020  -6.918964e+02   6.565681e-03     00s05  00021  -6.919021e+02   1.735087e-03     00s05  00022  -6.919039e+02   4.872492e-04     00s06  00023  -6.919062e+02   9.104377e-04     00s06  00024  -6.919077e+02   2.274615e-03     00s06  00025  -6.919074e+02   1.355487e-02     00s07  00026  -6.919087e+02   1.856728e-03 
    00s07  00027  -6.919093e+02   1.426903e-04     00s07  00028  -6.919094e+02   1.238143e-04     00s07  00029  -6.919096e+02   2.032985e-04     00s08  00030  -6.919102e+02   8.340296e-04     00s08  00031  -6.919113e+02   1.649289e-03     00s08  00032  -6.919129e+02   2.250164e-03     00s08  00033  -6.919145e+02   1.201226e-03     00s09  00034  -6.919156e+02   1.951122e-05     00s09  00035  -6.919158e+02   7.860913e-05     00s09  00036  -6.919160e+02   2.111120e-04     00s09  00037  -6.919159e+02   2.318518e-03     00s10  00038  -6.919160e+02   1.162831e-04 
    00s10  00039  -6.919161e+02   1.837405e-05     00s10  00040  -6.919162e+02   5.658403e-06     00s11  00041  -6.919163e+02   1.545797e-06     00s11  00042  -6.919163e+02   2.221965e-05 
    00s11  00043  -6.919163e+02   5.485392e-07     00s11  00044  -6.919163e+02   3.488990e-07     00s12  00045  -6.919163e+02   4.664547e-05     00s12  00046  -6.919163e+02   3.091101e-06     00s12  00047  -6.919163e+02   3.091101e-06 
Runtime:     00s12
Optimization status: Converged

Optimization restart 1/1, f = -691.9162939704524
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '32', '100', '4'], [' ', ' ', '16', '100', '4'], [' ', ' ', '4', '2048', '4'], [' ', ' ', '20', '100', '4'], [' ', ' ', '4', '128', '4'], [' ', ' ', '8', '128', '4'], [' ', ' ', '50', '64', '4'], [' ', ' ', '8', '2048', '4'], [' ', ' ', '80', '64', '4'], [' ', ' ', '16', '128', '4'], [' ', ' ', '4', '80', '4'], [' ', ' ', '50', '80', '4'], [' ', ' ', '100', '32', '4'], [' ', ' ', '96', '32', '4'], [' ', ' ', '8', '100', '4'], [' ', ' ', '128', '20', '4'], [' ', ' ', '20', '80', '4'], [' ', ' ', '32', '64', '4'], [' ', ' ', '8', '80', '4'], [' ', ' ', '4', '100', '4'], [' ', ' ', '96', '50', '4'], [' ', ' ', '64', '80', '4'], [' ', ' ', '32', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '4', '64', '4'], [' ', ' ', '4', '50', '4'], [' ', ' ', '64', '64', '4'], [' ', ' ', '16', '80', '4'], [' ', ' ', '80', '50', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '4'], [' ', ' ', '20', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '4'], [' ', ' ', '16', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4']]
prob:  <search.SurrogateProblem object at 0x14a9128ae4c0>
0 OK
bestX [array([[0.922 , 0.8396, 0.4814, 0.5067, 0.0014]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/730.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/730
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/730
........................................ [0.001388, 0.001295, 0.001242]
OUTPUT:%f [0.001388, 0.001295, 0.001242] 0.0012685
store_func_eval
problem.constants
None
MLA iteration:  70
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -4.539260e+02           nan     00s00  00001  -4.539260e+02   1.146174e+04     00s00  00002  -5.391887e+02   4.248762e+03 
    00s00  00003  -6.019234e+02   5.110880e+02     00s01  00004  -6.261222e+02   5.348703e+02     00s01  00005  -6.838686e+02   5.306507e+01     00s01  00006  -6.877668e+02   9.089470e+01     00s01  00007  -6.915431e+02   8.395926e+00     00s02  00008  -6.925823e+02   1.089252e+01 
    00s02  00009  -6.934234e+02   3.826519e+00     00s02  00010  -6.947001e+02   1.864160e+00     00s03  00011  -6.951544e+02   2.134942e+00     00s03  00012  -6.962899e+02   5.863537e-01     00s03  00013  -6.964526e+02   1.624087e-01     00s03  00014  -6.964870e+02   3.257113e-02     00s04  00015  -6.965060e+02   2.806759e-02     00s04  00016  -6.965473e+02   5.235530e-02 
    00s04  00017  -6.965767e+02   4.961907e-02     00s05  00018  -6.966305e+02   6.927356e-03     00s05  00019  -6.966411e+02   1.201764e-03     00s05  00020  -6.966425e+02   1.243397e-03     00s05  00021  -6.966428e+02   6.508065e-04     00s06  00022  -6.966430e+02   1.528612e-04     00s06  00023  -6.966431e+02   5.401819e-04 
    00s06  00024  -6.966435e+02   2.176891e-03     00s06  00025  -6.966442e+02   5.180755e-03     00s07  00026  -6.966453e+02   6.471026e-03     00s07  00027  -6.966465e+02   3.245408e-03     00s07  00028  -6.966476e+02   5.778645e-04     00s07  00029  -6.966484e+02   2.315944e-03     00s08  00030  -6.966489e+02   4.308983e-03     00s08  00031  -6.966501e+02   5.692102e-03     00s08  00032  -6.966514e+02   1.823163e-03     00s09  00033  -6.966519e+02   2.402924e-04     00s09  00034  -6.966520e+02   4.241460e-05 
    00s09  00035  -6.966520e+02   5.695359e-05     00s09  00036  -6.966521e+02   1.376429e-04     00s10  00037  -6.966523e+02   2.071688e-04     00s10  00038  -6.966524e+02   1.745080e-04     00s10  00039  -6.966525e+02   1.744608e-04     00s10  00040  -6.966526e+02   4.612124e-05     00s11  00041  -6.966527e+02   1.701707e-05 
    00s11  00042  -6.966527e+02   4.598576e-06     00s11  00043  -6.966527e+02   6.573396e-06     00s12  00044  -6.966527e+02   4.133873e-06     00s12  00045  -6.966527e+02   3.917795e-07     00s12  00046  -6.966527e+02   3.380127e-07     00s12  00047  -6.966527e+02   1.982136e-06     00s13  00048  -6.966527e+02   1.982136e-06 
Runtime:     00s13
Optimization status: Converged

Optimization restart 1/1, f = -696.6527077576313
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '32', '100', '4'], [' ', ' ', '16', '100', '4'], [' ', ' ', '4', '2048', '4'], [' ', ' ', '20', '100', '4'], [' ', ' ', '4', '128', '4'], [' ', ' ', '8', '128', '4'], [' ', ' ', '50', '64', '4'], [' ', ' ', '8', '2048', '4'], [' ', ' ', '80', '64', '4'], [' ', ' ', '16', '128', '4'], [' ', ' ', '4', '80', '4'], [' ', ' ', '50', '80', '4'], [' ', ' ', '100', '32', '4'], [' ', ' ', '96', '32', '4'], [' ', ' ', '8', '100', '4'], [' ', ' ', '128', '20', '4'], [' ', ' ', '20', '80', '4'], [' ', ' ', '32', '64', '4'], [' ', ' ', '8', '80', '4'], [' ', ' ', '4', '100', '4'], [' ', ' ', '96', '50', '4'], [' ', ' ', '64', '80', '4'], [' ', ' ', '32', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '4', '64', '4'], [' ', ' ', '4', '50', '4'], [' ', ' ', '64', '64', '4'], [' ', ' ', '16', '80', '4'], [' ', ' ', '80', '50', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '4'], [' ', ' ', '20', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '4'], [' ', ' ', '16', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], [' ', ' ', '50', '50', '4']]
prob:  <search.SurrogateProblem object at 0x14a912e4f7c0>
0 OK
bestX [array([[0.5726, 0.8465, 0.1517, 0.5606, 0.0079]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3377.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3377
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3377
........................................ [0.001393, 0.001267, 0.001228]
OUTPUT:%f [0.001393, 0.001267, 0.001228] 0.0012475
store_func_eval
problem.constants
None
MLA iteration:  71
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -4.582279e+02           nan     00s00  00001  -4.582279e+02   1.149184e+04     00s00  00002  -5.438218e+02   4.310690e+03     00s00  00003  -6.074331e+02   5.072231e+02 
    00s01  00004  -6.315319e+02   5.346428e+02     00s01  00005  -6.886649e+02   5.301164e+01     00s01  00006  -6.926035e+02   8.997628e+01     00s01  00007  -6.963689e+02   8.209312e+00     00s02  00008  -6.974053e+02   1.053998e+01     00s02  00009  -6.982368e+02   3.828462e+00     00s02  00010  -6.995534e+02   1.992584e+00     00s03  00011  -6.999885e+02   2.091596e+00     00s03  00012  -7.011927e+02   1.376625e-01     00s03  00013  -7.012606e+02   4.271272e-02     00s03  00014  -7.012925e+02   5.293757e-02 
    00s04  00015  -7.013352e+02   9.528299e-02     00s04  00016  -7.013711e+02   9.832509e-02     00s04  00017  -7.014284e+02   1.397065e-02     00s04  00018  -7.014387e+02   4.117887e-03     00s05  00019  -7.014415e+02   1.653422e-03     00s05  00020  -7.014427e+02   1.497899e-04     00s05  00021  -7.014432e+02   4.734704e-04 
    00s06  00022  -7.014438e+02   9.620458e-04     00s06  00023  -7.014449e+02   6.607225e-03     00s06  00024  -7.014461e+02   1.887291e-03     00s06  00025  -7.014470e+02   3.869255e-04     00s07  00026  -7.014473e+02   2.852737e-04     00s07  00027  -7.014478e+02   8.739756e-04     00s07  00028  -7.014485e+02   1.453125e-03     00s08  00029  -7.014497e+02   4.573492e-04     00s08  00030  -7.014499e+02   6.732593e-03     00s08  00031  -7.014509e+02   2.603969e-04     00s08  00032  -7.014512e+02   1.243439e-04     00s09  00033  -7.014515e+02   3.213929e-04     00s09  00034  -7.014517e+02   1.648478e-04     00s09  00035  -7.014512e+02   3.920718e-03     00s09  00036  -7.014517e+02   4.286694e-04     00s10  00037  -7.014518e+02   1.329231e-04 
    00s10  00038  -7.014519e+02   1.002982e-05     00s10  00039  -7.014519e+02   2.298949e-05     00s11  00040  -7.014519e+02   1.320025e-05 
    00s11  00041  -7.014519e+02   6.841212e-06     00s11  00042  -7.014519e+02   2.124411e-06 
    00s11  00043  -7.014519e+02   2.374687e-07     00s12  00044  -7.014519e+02   1.564685e-06     00s12  00045  -7.014519e+02   1.564685e-06 
Runtime:     00s12
Optimization status: Converged

Optimization restart 1/1, f = -701.4519029247851
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '32', '100', '4'], [' ', ' ', '16', '100', '4'], [' ', ' ', '4', '2048', '4'], [' ', ' ', '20', '100', '4'], [' ', ' ', '4', '128', '4'], [' ', ' ', '8', '128', '4'], [' ', ' ', '50', '64', '4'], [' ', ' ', '8', '2048', '4'], [' ', ' ', '80', '64', '4'], [' ', ' ', '16', '128', '4'], [' ', ' ', '4', '80', '4'], [' ', ' ', '50', '80', '4'], [' ', ' ', '100', '32', '4'], [' ', ' ', '96', '32', '4'], [' ', ' ', '8', '100', '4'], [' ', ' ', '128', '20', '4'], [' ', ' ', '20', '80', '4'], [' ', ' ', '32', '64', '4'], [' ', ' ', '8', '80', '4'], [' ', ' ', '4', '100', '4'], [' ', ' ', '96', '50', '4'], [' ', ' ', '64', '80', '4'], [' ', ' ', '32', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '4', '64', '4'], [' ', ' ', '4', '50', '4'], [' ', ' ', '64', '64', '4'], [' ', ' ', '16', '80', '4'], [' ', ' ', '80', '50', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '4'], [' ', ' ', '20', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '4'], [' ', ' ', '16', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], [' ', ' ', '50', '50', '4'], [' ', ' ', '8', '64', '4']]
prob:  <search.SurrogateProblem object at 0x14a9126cec70>
0 OK
bestX [array([[0.6934, 0.0783, 0.0619, 0.5736, 0.0664]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/911.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/911
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/911
........................................ [0.003259, 0.003109, 0.003101]
OUTPUT:%f [0.003259, 0.003109, 0.003101] 0.003105
store_func_eval
problem.constants
None
MLA iteration:  72
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -4.620376e+02           nan     00s00  00001  -4.620376e+02   1.162819e+04     00s00  00002  -5.481521e+02   4.372816e+03     00s00  00003  -6.121504e+02   4.999286e+02 
    00s01  00004  -6.356201e+02   5.338759e+02     00s01  00005  -6.926676e+02   5.537528e+01     00s01  00006  -6.974213e+02   8.871223e+01     00s01  00007  -7.009827e+02   9.242905e+00     00s02  00008  -7.019984e+02   1.392485e+01     00s02  00009  -7.029584e+02   3.826646e+00     00s02  00010  -7.040168e+02   1.543301e+00     00s03  00011  -7.046046e+02   2.404203e+00     00s03  00012  -7.053059e+02   1.963377e+00 
    00s03  00013  -7.054844e+02   2.718170e+00     00s03  00014  -7.058890e+02   4.777800e-01     00s04  00015  -7.060215e+02   7.307160e-02 
    00s04  00016  -7.060487e+02   3.329281e-02     00s04  00017  -7.060797e+02   1.073030e-01     00s04  00018  -7.061159e+02   1.500626e-01     00s05  00019  -7.061682e+02   9.298296e-02     00s05  00020  -7.062037e+02   2.500170e-03     00s05  00021  -7.062084e+02   1.456107e-03     00s06  00022  -7.062095e+02   1.250344e-03     00s06  00023  -7.062044e+02   5.074998e-02 
    00s06  00024  -7.062102e+02   2.305312e-03     00s06  00025  -7.062114e+02   1.899043e-03     00s07  00026  -7.062130e+02   7.670259e-04 
    00s07  00027  -7.062135e+02   7.763478e-04     00s07  00028  -7.062139e+02   2.361969e-04     00s07  00029  -7.062141e+02   2.402612e-04     00s08  00030  -7.062151e+02   9.143393e-04     00s08  00031  -7.062170e+02   2.167207e-04     00s08  00032  -7.062178e+02   7.010975e-03     00s09  00033  -7.062191e+02   6.842668e-04     00s09  00034  -7.062198e+02   1.042281e-04     00s09  00035  -7.062201e+02   1.764109e-04     00s09  00036  -7.062194e+02   3.997414e-03 
    00s10  00037  -7.062201e+02   9.526813e-05     00s10  00038  -7.062203e+02   5.544139e-05     00s10  00039  -7.062204e+02   6.061894e-05     00s11  00040  -7.062205e+02   4.214263e-06     00s11  00041  -7.062205e+02   4.835767e-06     00s11  00042  -7.062205e+02   2.259581e-06 
    00s11  00043  -7.062205e+02   1.575181e-06     00s12  00044  -7.062205e+02   2.379027e-06     00s12  00045  -7.062205e+02   9.632623e-07     00s12  00046  -7.062205e+02   2.284820e-05     00s12  00047  -7.062205e+02   2.679200e-06     00s13  00048  -7.062205e+02   2.679200e-06 
Runtime:     00s13
Optimization status: Converged

Optimization restart 1/1, f = -706.2205408174467
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '32', '100', '4'], [' ', ' ', '16', '100', '4'], [' ', ' ', '4', '2048', '4'], [' ', ' ', '20', '100', '4'], [' ', ' ', '4', '128', '4'], [' ', ' ', '8', '128', '4'], [' ', ' ', '50', '64', '4'], [' ', ' ', '8', '2048', '4'], [' ', ' ', '80', '64', '4'], [' ', ' ', '16', '128', '4'], [' ', ' ', '4', '80', '4'], [' ', ' ', '50', '80', '4'], [' ', ' ', '100', '32', '4'], [' ', ' ', '96', '32', '4'], [' ', ' ', '8', '100', '4'], [' ', ' ', '128', '20', '4'], [' ', ' ', '20', '80', '4'], [' ', ' ', '32', '64', '4'], [' ', ' ', '8', '80', '4'], [' ', ' ', '4', '100', '4'], [' ', ' ', '96', '50', '4'], [' ', ' ', '64', '80', '4'], [' ', ' ', '32', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '4', '64', '4'], [' ', ' ', '4', '50', '4'], [' ', ' ', '64', '64', '4'], [' ', ' ', '16', '80', '4'], [' ', ' ', '80', '50', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '4'], [' ', ' ', '20', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '4'], [' ', ' ', '16', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], [' ', ' ', '50', '50', '4'], [' ', ' ', '8', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '4']]
prob:  <search.SurrogateProblem object at 0x14a9127eba30>
0 OK
bestX [array([[0.7055, 0.4665, 0.1731, 0.8213, 0.0275]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/904.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/904
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/904
........................................ [0.00297, 0.002837, 0.002854]
OUTPUT:%f [0.00297, 0.002837, 0.002854] 0.0028455
store_func_eval
problem.constants
None
MLA iteration:  73
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -4.668575e+02           nan     00s00  00001  -4.668575e+02   1.168905e+04 
    00s00  00002  -5.531678e+02   4.383957e+03     00s00  00003  -6.167162e+02   4.891090e+02     00s01  00004  -6.393379e+02   5.293378e+02     00s01  00005  -6.961209e+02   5.861445e+01     00s01  00006  -7.021686e+02   8.518737e+01 
    00s02  00007  -7.053990e+02   1.043642e+01     00s02  00008  -7.063116e+02   1.929905e+01     00s02  00009  -7.075122e+02   3.855852e+00     00s02  00010  -7.083571e+02   1.548394e+00     00s03  00011  -7.091295e+02   2.499656e+00     00s03  00012  -7.096632e+02   2.110950e+00     00s03  00013  -7.100189e+02   3.031135e+00     00s03  00014  -7.104457e+02   4.448904e-01     00s04  00015  -7.105992e+02   6.149137e-02 
    00s04  00016  -7.106249e+02   3.592934e-02     00s04  00017  -7.106582e+02   7.884032e-02     00s05  00018  -7.107136e+02   1.040962e-01     00s05  00019  -7.107661e+02   4.147394e-02     00s05  00020  -7.107851e+02   3.679087e-03     00s05  00021  -7.107876e+02   1.474439e-03     00s06  00022  -7.107886e+02   6.098253e-04 
    00s06  00023  -7.107892e+02   6.938784e-03     00s06  00024  -7.107900e+02   1.731719e-03     00s06  00025  -7.107909e+02   4.759030e-04     00s07  00026  -7.107919e+02   1.209395e-03     00s07  00027  -7.107925e+02   6.589726e-04     00s07  00028  -7.107930e+02   1.416947e-04     00s08  00029  -7.107936e+02   1.511206e-03     00s08  00030  -7.107943e+02   3.973803e-03     00s08  00031  -7.107959e+02   6.002914e-03     00s08  00032  -7.107969e+02   9.500402e-03 
    00s09  00033  -7.107984e+02   6.082987e-04     00s09  00034  -7.107989e+02   2.105732e-04     00s09  00035  -7.107993e+02   3.158377e-04     00s09  00036  -7.107994e+02   1.780904e-04     00s10  00037  -7.107995e+02   2.718899e-05     00s10  00038  -7.107997e+02   4.825195e-05     00s10  00039  -7.107997e+02   2.211126e-05 
    00s11  00040  -7.107998e+02   6.456103e-06     00s11  00041  -7.107998e+02   2.614013e-05     00s11  00042  -7.107998e+02   2.608064e-06     00s11  00043  -7.107998e+02   1.898000e-07     00s12  00044  -7.107998e+02   1.374214e-07     00s12  00045  -7.107995e+02   1.910192e-03     00s12  00046  -7.107998e+02   3.967870e-07     00s12  00047  -7.107998e+02   3.967870e-07 
Runtime:     00s12
Optimization status: Converged

Optimization restart 1/1, f = -710.7998003764931
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '32', '100', '4'], [' ', ' ', '16', '100', '4'], [' ', ' ', '4', '2048', '4'], [' ', ' ', '20', '100', '4'], [' ', ' ', '4', '128', '4'], [' ', ' ', '8', '128', '4'], [' ', ' ', '50', '64', '4'], [' ', ' ', '8', '2048', '4'], [' ', ' ', '80', '64', '4'], [' ', ' ', '16', '128', '4'], [' ', ' ', '4', '80', '4'], [' ', ' ', '50', '80', '4'], [' ', ' ', '100', '32', '4'], [' ', ' ', '96', '32', '4'], [' ', ' ', '8', '100', '4'], [' ', ' ', '128', '20', '4'], [' ', ' ', '20', '80', '4'], [' ', ' ', '32', '64', '4'], [' ', ' ', '8', '80', '4'], [' ', ' ', '4', '100', '4'], [' ', ' ', '96', '50', '4'], [' ', ' ', '64', '80', '4'], [' ', ' ', '32', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '4', '64', '4'], [' ', ' ', '4', '50', '4'], [' ', ' ', '64', '64', '4'], [' ', ' ', '16', '80', '4'], [' ', ' ', '80', '50', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '4'], [' ', ' ', '20', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '4'], [' ', ' ', '16', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], [' ', ' ', '50', '50', '4'], [' ', ' ', '8', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '4']]
prob:  <search.SurrogateProblem object at 0x14a918060bb0>
0 OK
bestX [array([[0.9526, 0.9077, 0.4489, 0.4856, 0.0836]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3500.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3500
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3500
........................................ [0.001372, 0.001254, 0.001209]
OUTPUT:%f [0.001372, 0.001254, 0.001209] 0.0012315
store_func_eval
problem.constants
None
MLA iteration:  74
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -4.712090e+02           nan     00s00  00001  -4.712090e+02   1.179801e+04     00s00  00002  -5.579098e+02   4.422698e+03     00s00  00003  -6.211218e+02   4.711312e+02     00s01  00004  -6.424145e+02   5.208228e+02     00s01  00005  -6.990511e+02   6.441755e+01 
    00s01  00006  -7.069194e+02   8.353516e+01     00s02  00007  -7.098995e+02   1.174246e+01     00s02  00008  -7.105944e+02   2.685367e+01     00s02  00009  -7.121445e+02   3.817799e+00     00s02  00010  -7.128375e+02   1.759996e+00     00s03  00011  -7.138291e+02   2.552647e+00     00s03  00012  -7.143006e+02   2.033123e+00     00s03  00013  -7.146188e+02   3.426669e+00     00s03  00014  -7.150750e+02   3.388178e-01     00s04  00015  -7.152208e+02   8.684923e-02 
    00s04  00016  -7.152526e+02   4.517839e-02     00s04  00017  -7.152742e+02   4.884307e-02     00s05  00018  -7.153580e+02   2.146354e-02     00s05  00019  -7.153865e+02   1.215013e-02     00s05  00020  -7.153974e+02   2.272545e-03     00s05  00021  -7.153989e+02   3.305211e-04 
    00s06  00022  -7.153994e+02   2.875340e-04     00s06  00023  -7.153985e+02   3.135255e-02     00s06  00024  -7.154001e+02   4.853304e-03     00s07  00025  -7.154013e+02   2.501482e-03     00s07  00026  -7.154047e+02   3.021349e-04     00s07  00027  -7.154065e+02   5.222853e-04     00s07  00028  -7.154079e+02   4.982197e-04     00s08  00029  -7.154077e+02   5.975764e-03     00s08  00030  -7.154085e+02   9.923068e-04     00s08  00031  -7.154094e+02   4.570424e-04     00s08  00032  -7.154102e+02   3.608073e-04     00s09  00033  -7.154113e+02   2.982794e-04     00s09  00034  -7.154104e+02   6.038501e-03     00s09  00035  -7.154115e+02   4.048113e-04 
    00s10  00036  -7.154120e+02   6.002022e-05     00s10  00037  -7.154122e+02   2.169638e-03     00s10  00038  -7.154126e+02   1.681342e-04     00s10  00039  -7.154127e+02   1.480551e-05     00s11  00040  -7.154128e+02   2.571306e-05     00s11  00041  -7.154128e+02   5.932890e-06     00s11  00042  -7.154129e+02   1.028752e-05     00s11  00043  -7.154129e+02   1.311675e-05     00s12  00044  -7.154129e+02   3.552774e-06 
    00s12  00045  -7.154129e+02   3.269057e-07     00s12  00046  -7.154129e+02   1.889713e-07     00s13  00047  -7.154129e+02   5.504514e-07     00s13  00048  -7.154129e+02   5.504514e-07 
Runtime:     00s13
Optimization status: Converged

Optimization restart 1/1, f = -715.4128917065502
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '32', '100', '4'], [' ', ' ', '16', '100', '4'], [' ', ' ', '4', '2048', '4'], [' ', ' ', '20', '100', '4'], [' ', ' ', '4', '128', '4'], [' ', ' ', '8', '128', '4'], [' ', ' ', '50', '64', '4'], [' ', ' ', '8', '2048', '4'], [' ', ' ', '80', '64', '4'], [' ', ' ', '16', '128', '4'], [' ', ' ', '4', '80', '4'], [' ', ' ', '50', '80', '4'], [' ', ' ', '100', '32', '4'], [' ', ' ', '96', '32', '4'], [' ', ' ', '8', '100', '4'], [' ', ' ', '128', '20', '4'], [' ', ' ', '20', '80', '4'], [' ', ' ', '32', '64', '4'], [' ', ' ', '8', '80', '4'], [' ', ' ', '4', '100', '4'], [' ', ' ', '96', '50', '4'], [' ', ' ', '64', '80', '4'], [' ', ' ', '32', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '4', '64', '4'], [' ', ' ', '4', '50', '4'], [' ', ' ', '64', '64', '4'], [' ', ' ', '16', '80', '4'], [' ', ' ', '80', '50', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '4'], [' ', ' ', '20', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '4'], [' ', ' ', '16', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], [' ', ' ', '50', '50', '4'], [' ', ' ', '8', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '4'], [' ', ' ', '32', '50', '4']]
prob:  <search.SurrogateProblem object at 0x14a9126d7340>
0 OK
bestX [array([[0.9177, 0.8275, 0.3511, 0.5161, 0.0601]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2858.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2858
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2858
........................................ [0.001349, 0.001251, 0.001232]
OUTPUT:%f [0.001349, 0.001251, 0.001232] 0.0012415
store_func_eval
problem.constants
None
MLA iteration:  75
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -4.760913e+02           nan     00s00  00001  -4.760913e+02   1.182301e+04     00s00  00002  -5.627968e+02   4.421419e+03     00s00  00003  -6.260299e+02   4.664079e+02     00s01  00004  -6.469330e+02   5.139361e+02     00s01  00005  -7.034899e+02   6.538710e+01     00s01  00006  -7.116561e+02   8.435219e+01     00s02  00007  -7.145888e+02   1.229911e+01     00s02  00008  -7.152056e+02   3.005363e+01 
    00s02  00009  -7.169125e+02   3.854267e+00     00s02  00010  -7.175794e+02   1.843238e+00     00s03  00011  -7.186218e+02   2.548804e+00     00s03  00012  -7.190844e+02   2.009512e+00     00s03  00013  -7.193989e+02   3.542487e+00     00s04  00014  -7.198616e+02   3.276358e-01     00s04  00015  -7.200067e+02   1.031206e-01     00s04  00016  -7.200409e+02   5.101150e-02 
    00s04  00017  -7.200593e+02   4.221716e-02     00s05  00018  -7.201497e+02   9.843365e-03     00s05  00019  -7.201725e+02   9.445212e-03     00s05  00020  -7.201806e+02   1.037477e-03     00s05  00021  -7.201817e+02   2.914775e-04 
    00s06  00022  -7.201823e+02   3.324785e-04     00s06  00023  -7.201842e+02   5.443388e-03     00s06  00024  -7.201867e+02   1.038582e-03     00s07  00025  -7.201915e+02   1.002859e-03     00s07  00026  -7.201928e+02   3.679949e-04     00s07  00027  -7.201936e+02   6.958714e-04     00s07  00028  -7.201943e+02   3.030381e-03     00s08  00029  -7.201952e+02   2.343620e-04     00s08  00030  -7.201957e+02   8.025436e-05     00s08  00031  -7.201961e+02   1.338938e-04 
    00s09  00032  -7.201963e+02   7.203977e-05     00s09  00033  -7.201965e+02   3.982583e-04     00s09  00034  -7.201965e+02   1.989259e-03     00s09  00035  -7.201966e+02   2.409255e-04     00s10  00036  -7.201966e+02   9.922231e-05     00s10  00037  -7.201967e+02   5.436338e-06 
    00s10  00038  -7.201967e+02   3.523131e-06     00s11  00039  -7.201968e+02   5.693992e-06     00s11  00040  -7.201968e+02   1.166965e-05     00s11  00041  -7.201968e+02   9.534570e-07     00s11  00042  -7.201968e+02   4.624147e-08 
    00s12  00043  -7.201968e+02   1.023663e-07     00s12  00044  -7.201968e+02   1.023663e-07 
Runtime:     00s12
Optimization status: Converged

Optimization restart 1/1, f = -720.1967722756654
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '32', '100', '4'], [' ', ' ', '16', '100', '4'], [' ', ' ', '4', '2048', '4'], [' ', ' ', '20', '100', '4'], [' ', ' ', '4', '128', '4'], [' ', ' ', '8', '128', '4'], [' ', ' ', '50', '64', '4'], [' ', ' ', '8', '2048', '4'], [' ', ' ', '80', '64', '4'], [' ', ' ', '16', '128', '4'], [' ', ' ', '4', '80', '4'], [' ', ' ', '50', '80', '4'], [' ', ' ', '100', '32', '4'], [' ', ' ', '96', '32', '4'], [' ', ' ', '8', '100', '4'], [' ', ' ', '128', '20', '4'], [' ', ' ', '20', '80', '4'], [' ', ' ', '32', '64', '4'], [' ', ' ', '8', '80', '4'], [' ', ' ', '4', '100', '4'], [' ', ' ', '96', '50', '4'], [' ', ' ', '64', '80', '4'], [' ', ' ', '32', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '4', '64', '4'], [' ', ' ', '4', '50', '4'], [' ', ' ', '64', '64', '4'], [' ', ' ', '16', '80', '4'], [' ', ' ', '80', '50', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '4'], [' ', ' ', '20', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '4'], [' ', ' ', '16', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], [' ', ' ', '50', '50', '4'], [' ', ' ', '8', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '4'], [' ', ' ', '32', '50', '4'], [' ', ' ', '20', '50', '4']]
prob:  <search.SurrogateProblem object at 0x14a912d7aa60>
0 OK
bestX [array([[0.5126, 0.8415, 0.6248, 0.4192, 0.0747]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5402.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5402
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5402
........................................ [0.001319, 0.001194, 0.00116]
OUTPUT:%f [0.001319, 0.001194, 0.00116] 0.001177
store_func_eval
problem.constants
None
MLA iteration:  76
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -4.805649e+02           nan     00s00  00001  -4.805649e+02   1.194111e+04     00s00  00002  -5.676341e+02   4.429538e+03     00s00  00003  -6.301024e+02   4.596669e+02     00s01  00004  -6.502425e+02   5.086151e+02     00s01  00005  -7.067586e+02   6.847159e+01     00s01  00006  -7.161399e+02   7.846457e+01 
    00s02  00007  -7.195681e+02   1.102963e+01     00s02  00008  -7.207583e+02   3.156096e+00     00s02  00009  -7.215378e+02   2.917372e+00     00s03  00010  -7.226507e+02   1.995678e+00     00s03  00011  -7.232650e+02   4.336713e+00     00s03  00012  -7.234918e+02   6.168611e-01     00s03  00013  -7.238234e+02   1.825332e+00     00s04  00014  -7.242271e+02   3.022008e+00     00s04  00015  -4.214929e+02   4.528916e+03     00s04  00016  -7.242505e+02   3.041985e+00     00s05  00017  -7.243998e+02   2.155015e+00     00s05  00018  -7.245414e+02   2.580068e-01     00s05  00019  -7.246067e+02   2.688971e-01 
    00s06  00020  -7.247333e+02   8.696211e-01     00s06  00021  -7.248215e+02   9.497075e-01     00s06  00022  -7.252592e+02   2.207233e-01     00s06  00023  -7.254053e+02   9.743586e-02     00s07  00024  -7.254778e+02   3.079851e-02     00s07  00025  -7.255023e+02   1.860129e-02 
    00s07  00026  -7.255220e+02   6.577837e-03     00s08  00027  -7.255323e+02   2.162362e-03     00s08  00028  -7.255403e+02   2.744581e-03     00s08  00029  -7.255281e+02   3.520575e-01     00s08  00030  -7.255422e+02   2.011445e-02     00s09  00031  -7.255476e+02   6.718952e-03     00s09  00032  -7.255528e+02   3.006091e-03     00s09  00033  -7.255607e+02   3.140698e-03     00s10  00034  -7.255663e+02   2.872261e-03     00s10  00035  -7.255699e+02   2.281619e-03     00s10  00036  -7.255784e+02   1.002950e-02     00s10  00037  -7.255862e+02   2.182898e-02     00s11  00038  -7.255955e+02   3.149992e-02     00s11  00039  -7.256094e+02   3.531181e-03     00s11  00040  -7.256287e+02   1.622098e-03     00s12  00041  -7.256557e+02   1.864195e-01     00s12  00042  -7.256777e+02   7.523269e-02     00s12  00043  -7.256966e+02   1.872592e-02     00s12  00044  -7.257125e+02   1.545932e-03 
    00s13  00045  -7.257213e+02   3.471947e-04     00s13  00046  -7.257147e+02   7.103616e-02     00s13  00047  -7.257241e+02   1.006504e-02     00s13  00048  -7.257309e+02   8.860295e-04     00s14  00049  -7.257349e+02   3.160017e-04     00s14  00050  -7.257371e+02   2.943730e-03     00s14  00051  -7.257393e+02   4.112872e-04     00s15  00052  -7.257402e+02   2.183541e-04     00s15  00053  -7.257407e+02   4.701683e-03     00s15  00054  -7.257415e+02   4.033981e-04     00s15  00055  -7.257419e+02   2.503830e-04     00s16  00056  -7.257422e+02   1.287478e-04     00s16  00057  -7.257422e+02   1.756848e-03     00s16  00058  -7.257425e+02   3.492124e-05     00s17  00059  -7.257425e+02   9.499682e-06 
    00s17  00060  -7.257426e+02   1.718551e-05     00s17  00061  -7.257426e+02   3.115427e-05     00s17  00062  -7.257427e+02   1.411272e-04     00s18  00063  -7.257428e+02   6.791579e-05     00s18  00064  -7.257428e+02   1.319929e-04     00s18  00065  -7.257428e+02   4.502375e-06     00s19  00066  -7.257428e+02   4.742047e-06 
    00s19  00067  -7.257428e+02   6.422268e-06     00s19  00068  -7.257428e+02   1.241574e-05     00s19  00069  -7.257428e+02   7.463059e-04     00s21  00076  -7.257428e+02   5.214575e-07 
Runtime:     00s21
Optimization status: Converged

Optimization restart 1/1, f = -725.742845071726
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '32', '100', '4'], [' ', ' ', '16', '100', '4'], [' ', ' ', '4', '2048', '4'], [' ', ' ', '20', '100', '4'], [' ', ' ', '4', '128', '4'], [' ', ' ', '8', '128', '4'], [' ', ' ', '50', '64', '4'], [' ', ' ', '8', '2048', '4'], [' ', ' ', '80', '64', '4'], [' ', ' ', '16', '128', '4'], [' ', ' ', '4', '80', '4'], [' ', ' ', '50', '80', '4'], [' ', ' ', '100', '32', '4'], [' ', ' ', '96', '32', '4'], [' ', ' ', '8', '100', '4'], [' ', ' ', '128', '20', '4'], [' ', ' ', '20', '80', '4'], [' ', ' ', '32', '64', '4'], [' ', ' ', '8', '80', '4'], [' ', ' ', '4', '100', '4'], [' ', ' ', '96', '50', '4'], [' ', ' ', '64', '80', '4'], [' ', ' ', '32', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '4', '64', '4'], [' ', ' ', '4', '50', '4'], [' ', ' ', '64', '64', '4'], [' ', ' ', '16', '80', '4'], [' ', ' ', '80', '50', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '4'], [' ', ' ', '20', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '4'], [' ', ' ', '16', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], [' ', ' ', '50', '50', '4'], [' ', ' ', '8', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '4'], [' ', ' ', '32', '50', '4'], [' ', ' ', '20', '50', '4'], [' ', ' ', '64', '32', '4']]
prob:  <search.SurrogateProblem object at 0x14a91292da60>
0 OK
bestX [array([[0.5497, 0.6698, 0.0067, 0.4197, 0.0218]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8731.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8731
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8731
........................................ [0.001378, 0.001198, 0.001197]
OUTPUT:%f [0.001378, 0.001198, 0.001197] 0.0011975
store_func_eval
problem.constants
None
MLA iteration:  77
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -4.844480e+02           nan     00s00  00001  -4.844480e+02   1.208113e+04     00s00  00002  -5.720803e+02   4.485525e+03     00s00  00003  -6.348276e+02   4.600547e+02 
    00s01  00004  -6.547496e+02   5.075582e+02     00s01  00005  -7.110607e+02   6.883422e+01     00s01  00006  -7.212614e+02   6.924374e+01     00s02  00007  -7.242596e+02   1.104155e+01     00s02  00008  -7.254494e+02   3.244269e+00     00s02  00009  -7.262682e+02   2.980615e+00     00s02  00010  -7.274397e+02   1.821790e+00     00s03  00011  -7.280459e+02   3.972982e+00     00s03  00012  -7.282654e+02   6.590350e-01 
    00s03  00013  -7.286266e+02   2.588525e+00     00s04  00014  -7.292384e+02   2.572688e+00     00s04  00015  -6.882956e+02   1.593792e+03     00s04  00016  -7.293067e+02   1.808418e+00     00s04  00017  -7.167724e+02   2.450873e+02     00s05  00018  -7.293457e+02   1.058470e+00     00s05  00019  -7.294398e+02   7.464986e-01     00s05  00020  -7.294921e+02   3.452033e-01     00s06  00021  -7.295753e+02   1.842835e-01     00s06  00022  -7.297524e+02   5.199299e-01     00s06  00023  -7.299899e+02   5.562410e-01     00s06  00024  -7.301877e+02   7.542488e-02 
    00s07  00025  -7.302632e+02   7.363238e-03     00s07  00026  -7.302925e+02   3.636953e-02     00s07  00027  -7.303086e+02   5.697390e-03     00s08  00028  -7.303140e+02   1.349895e-03     00s08  00029  -7.303134e+02   2.754545e-02     00s08  00030  -7.303150e+02   4.595230e-03     00s08  00031  -7.303163e+02   2.075152e-03     00s09  00032  -7.303182e+02   1.707683e-03     00s09  00033  -7.303222e+02   3.730187e-03     00s09  00034  -7.303289e+02   4.202717e-03     00s10  00035  -7.303313e+02   1.174606e-01     00s10  00036  -7.303425e+02   6.369192e-03     00s10  00037  -7.303451e+02   1.647624e-03 
    00s10  00038  -7.303462e+02   8.475327e-04     00s11  00039  -7.303495e+02   1.271222e-03     00s11  00040  -7.303576e+02   7.962787e-03     00s11  00041  -7.303673e+02   1.157159e-02     00s12  00042  -7.303715e+02   1.326805e-01     00s12  00043  -7.303874e+02   1.953544e-02     00s12  00044  -7.304066e+02   9.429820e-03     00s12  00045  -7.304285e+02   8.908073e-02     00s13  00046  -7.304449e+02   3.056150e-02     00s13  00047  -7.304632e+02   4.938937e-02     00s13  00048  -7.304769e+02   8.636833e-04     00s13  00049  -7.304851e+02   6.514680e-04     00s14  00050  -7.304934e+02   3.765042e-04     00s14  00051  -7.304805e+02   5.959981e-02     00s14  00052  -7.304948e+02   2.632378e-03     00s15  00053  -7.304983e+02   3.190013e-04     00s15  00054  -7.304998e+02   1.539527e-04     00s15  00055  -7.305012e+02   3.210515e-03     00s15  00056  -7.305029e+02   2.590289e-04 
    00s16  00057  -7.305038e+02   1.871752e-05     00s16  00058  -7.305043e+02   2.519939e-04     00s16  00059  -7.305046e+02   3.857570e-05     00s17  00060  -7.305049e+02   6.817302e-04     00s17  00061  -7.305051e+02   6.315421e-05 
    00s17  00062  -7.305053e+02   6.827672e-06     00s17  00063  -7.305053e+02   1.145927e-05     00s18  00064  -7.305053e+02   6.421072e-04     00s18  00065  -7.305054e+02   7.307344e-05     00s18  00066  -7.305054e+02   7.035137e-06     00s19  00067  -7.305054e+02   7.463138e-06     00s19  00068  -7.305055e+02   1.273948e-05     00s19  00069  -7.305054e+02   4.668924e-04     00s19  00070  -7.305055e+02   3.728680e-05     00s22  00079  -7.305055e+02   6.556448e-06 
Runtime:     00s22
Optimization status: Converged

Optimization restart 1/1, f = -730.5055257667644
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '32', '100', '4'], [' ', ' ', '16', '100', '4'], [' ', ' ', '4', '2048', '4'], [' ', ' ', '20', '100', '4'], [' ', ' ', '4', '128', '4'], [' ', ' ', '8', '128', '4'], [' ', ' ', '50', '64', '4'], [' ', ' ', '8', '2048', '4'], [' ', ' ', '80', '64', '4'], [' ', ' ', '16', '128', '4'], [' ', ' ', '4', '80', '4'], [' ', ' ', '50', '80', '4'], [' ', ' ', '100', '32', '4'], [' ', ' ', '96', '32', '4'], [' ', ' ', '8', '100', '4'], [' ', ' ', '128', '20', '4'], [' ', ' ', '20', '80', '4'], [' ', ' ', '32', '64', '4'], [' ', ' ', '8', '80', '4'], [' ', ' ', '4', '100', '4'], [' ', ' ', '96', '50', '4'], [' ', ' ', '64', '80', '4'], [' ', ' ', '32', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '4', '64', '4'], [' ', ' ', '4', '50', '4'], [' ', ' ', '64', '64', '4'], [' ', ' ', '16', '80', '4'], [' ', ' ', '80', '50', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '4'], [' ', ' ', '20', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '4'], [' ', ' ', '16', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], [' ', ' ', '50', '50', '4'], [' ', ' ', '8', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '4'], [' ', ' ', '32', '50', '4'], [' ', ' ', '20', '50', '4'], [' ', ' ', '64', '32', '4'], [' ', ' ', '4', '32', '4']]
prob:  <search.SurrogateProblem object at 0x14a912a07a00>
0 OK
bestX [array([[0.6215, 0.7543, 0.0298, 0.3264, 0.001 ]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2818.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2818
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2818
........................................ [0.001479, 0.00178, 0.001756]
OUTPUT:%f [0.001479, 0.00178, 0.001756] 0.001768
store_func_eval
problem.constants
None
MLA iteration:  78
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -4.885932e+02           nan     00s00  00001  -4.885932e+02   1.214168e+04     00s00  00002  -5.764111e+02   4.534639e+03     00s00  00003  -6.399284e+02   4.613533e+02 
    00s01  00004  -6.599202e+02   5.055209e+02     00s01  00005  -7.160726e+02   6.687901e+01     00s01  00006  -7.263800e+02   6.156635e+01     00s02  00007  -7.290738e+02   1.059271e+01     00s02  00008  -7.302174e+02   3.253464e+00     00s02  00009  -7.310757e+02   2.998728e+00     00s02  00010  -7.323089e+02   1.570630e+00     00s03  00011  -7.328917e+02   3.219381e+00 
    00s03  00012  -7.330799e+02   5.982424e-01     00s03  00013  -7.334226e+02   2.546379e+00     00s04  00014  -7.339967e+02   3.164933e+00     00s04  00015  -7.072021e+02   1.065915e+03     00s04  00016  -7.341950e+02   1.432319e+00     00s04  00017  -7.238037e+02   1.368324e+02     00s05  00018  -7.342221e+02   9.313514e-01     00s05  00019  -7.342990e+02   7.250163e-01     00s05  00020  -7.343506e+02   4.426215e-01     00s06  00021  -7.344156e+02   2.275221e-01     00s06  00022  -7.347011e+02   4.448550e-01     00s06  00023  -7.348973e+02   2.985613e-01 
    00s06  00024  -7.350340e+02   5.873514e-02     00s07  00025  -7.350785e+02   1.806524e-02     00s07  00026  -7.350969e+02   1.968636e-02     00s07  00027  -7.351067e+02   2.797766e-02 
    00s08  00028  -7.351105e+02   8.227407e-03     00s08  00029  -7.351129e+02   3.818379e-03     00s08  00030  -7.351167e+02   1.867379e-03     00s08  00031  -7.351253e+02   5.201865e-03     00s09  00032  -7.351421e+02   2.251697e-02     00s09  00033  -7.351753e+02   1.952175e-02     00s09  00034  -7.351663e+02   1.881201e-01     00s10  00035  -7.351914e+02   4.220063e-02     00s10  00036  -7.351998e+02   1.349457e-03     00s10  00037  -7.352079e+02   1.917287e-02     00s10  00038  -7.352177e+02   3.612072e-02     00s11  00039  -7.352295e+02   1.199978e-02     00s11  00040  -7.352416e+02   7.205278e-03     00s11  00041  -7.352543e+02   3.445564e-02     00s12  00042  -7.352738e+02   6.378074e-02     00s12  00043  -7.352917e+02   2.936886e-02     00s12  00044  -7.352995e+02   1.908593e-02     00s13  00045  -7.352868e+02   6.935066e-02     00s13  00046  -7.353006e+02   8.469893e-03 
    00s13  00047  -7.353023e+02   6.453193e-04     00s13  00048  -7.353031e+02   1.205442e-03     00s14  00049  -7.353038e+02   3.168121e-03     00s14  00050  -7.353051e+02   3.350073e-03     00s14  00051  -7.353028e+02   4.514530e-02     00s15  00052  -7.353054e+02   9.287108e-03     00s15  00053  -7.353072e+02   2.634982e-03     00s15  00054  -7.353090e+02   3.313468e-05     00s15  00055  -7.353100e+02   2.644507e-04     00s16  00056  -7.353105e+02   5.157256e-04     00s16  00057  -7.353101e+02   4.392081e-03     00s16  00058  -7.353107e+02   5.224638e-04     00s17  00059  -7.353111e+02   1.134932e-04     00s17  00060  -7.353114e+02   3.305734e-04     00s17  00061  -7.353116e+02   4.520126e-04 
    00s17  00062  -7.353117e+02   4.507526e-05     00s18  00063  -7.353118e+02   1.849278e-05     00s18  00064  -7.353118e+02   5.140642e-05     00s18  00065  -7.353114e+02   6.743809e-03     00s19  00066  -7.353118e+02   8.002354e-05     00s19  00067  -7.353119e+02   1.156456e-05     00s19  00068  -7.353119e+02   7.364465e-08     00s19  00069  -7.353119e+02   7.711683e-07     00s22  00078  -7.353120e+02   5.317516e-07 
Runtime:     00s22
Optimization status: Converged

Optimization restart 1/1, f = -735.3119677294515
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '32', '100', '4'], [' ', ' ', '16', '100', '4'], [' ', ' ', '4', '2048', '4'], [' ', ' ', '20', '100', '4'], [' ', ' ', '4', '128', '4'], [' ', ' ', '8', '128', '4'], [' ', ' ', '50', '64', '4'], [' ', ' ', '8', '2048', '4'], [' ', ' ', '80', '64', '4'], [' ', ' ', '16', '128', '4'], [' ', ' ', '4', '80', '4'], [' ', ' ', '50', '80', '4'], [' ', ' ', '100', '32', '4'], [' ', ' ', '96', '32', '4'], [' ', ' ', '8', '100', '4'], [' ', ' ', '128', '20', '4'], [' ', ' ', '20', '80', '4'], [' ', ' ', '32', '64', '4'], [' ', ' ', '8', '80', '4'], [' ', ' ', '4', '100', '4'], [' ', ' ', '96', '50', '4'], [' ', ' ', '64', '80', '4'], [' ', ' ', '32', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '4', '64', '4'], [' ', ' ', '4', '50', '4'], [' ', ' ', '64', '64', '4'], [' ', ' ', '16', '80', '4'], [' ', ' ', '80', '50', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '4'], [' ', ' ', '20', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '4'], [' ', ' ', '16', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], [' ', ' ', '50', '50', '4'], [' ', ' ', '8', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '4'], [' ', ' ', '32', '50', '4'], [' ', ' ', '20', '50', '4'], [' ', ' ', '64', '32', '4'], [' ', ' ', '4', '32', '4'], [' ', ' ', '4', '20', '4']]
prob:  <search.SurrogateProblem object at 0x14a912db10a0>
0 OK
bestX [array([[0.8829, 0.696 , 0.1566, 0.4732, 0.0398]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3068.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3068
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3068
........................................ [0.001387, 0.001279, 0.001236]
OUTPUT:%f [0.001387, 0.001279, 0.001236] 0.0012575
store_func_eval
problem.constants
None
MLA iteration:  79
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -4.932744e+02           nan     00s00  00001  -4.932744e+02   1.222483e+04     00s00  00002  -5.813354e+02   4.544989e+03     00s00  00003  -6.446677e+02   4.598904e+02 
    00s01  00004  -6.643450e+02   5.007595e+02     00s01  00005  -7.205172e+02   6.807215e+01     00s01  00006  -7.312070e+02   6.023437e+01     00s02  00007  -7.338315e+02   1.077537e+01     00s02  00008  -7.349929e+02   3.343627e+00     00s02  00009  -7.358756e+02   3.032902e+00     00s02  00010  -7.371214e+02   1.552821e+00     00s03  00011  -7.377027e+02   3.239584e+00 
    00s03  00012  -7.378910e+02   5.835758e-01     00s03  00013  -7.382339e+02   2.598889e+00     00s04  00014  -7.388014e+02   3.354296e+00     00s04  00015  -7.148336e+02   9.693862e+02     00s05  00016  -7.390319e+02   1.402793e+00     00s06  00017  -7.317975e+02   8.813212e+01     00s07  00018  -7.390572e+02   9.219674e-01     00s07  00019  -7.391217e+02   8.706447e-01     00s08  00020  -7.391834e+02   4.598325e-01     00s09  00021  -7.392430e+02   2.073588e-01     00s09  00022  -7.394791e+02   4.016032e-01     00s10  00023  -7.396829e+02   3.666555e-01 
    00s10  00024  -7.398432e+02   5.949710e-02     00s12  00025  -7.398922e+02   2.617993e-02     00s13  00026  -7.399155e+02   3.154105e-02     00s13  00027  -7.399255e+02   3.234839e-02     00s13  00028  -7.399295e+02   4.900511e-03     00s13  00029  -7.399308e+02   1.814051e-03     00s14  00030  -7.399327e+02   1.248218e-03 
    00s14  00031  -7.399377e+02   2.825224e-03     00s14  00032  -7.399483e+02   7.019063e-03     00s15  00033  -7.399664e+02   6.769365e-02     00s15  00034  -7.399990e+02   2.619061e-02     00s15  00035  -7.400388e+02   2.241296e-02     00s16  00036  -7.400403e+02   8.117542e-02     00s16  00037  -7.400604e+02   1.008347e-02     00s16  00038  -7.400770e+02   4.338980e-03     00s17  00039  -7.400871e+02   1.005330e-02     00s17  00040  -7.400962e+02   7.550865e-03     00s17  00041  -7.400272e+02   1.081592e+00     00s17  00042  -7.400974e+02   9.070882e-03     00s18  00043  -7.401028e+02   1.339530e-03     00s18  00044  -7.401057e+02   1.053419e-03     00s18  00045  -7.401095e+02   2.227748e-03     00s19  00046  -7.401122e+02   2.383444e-02     00s19  00047  -7.401181e+02   1.277289e-03     00s19  00048  -7.401200e+02   2.178585e-03 
    00s29  00071  -7.401330e+02   2.226492e-04 
Runtime:     00s29
Optimization status: Converged

Optimization restart 1/1, f = -740.1330271476999
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '32', '100', '4'], [' ', ' ', '16', '100', '4'], [' ', ' ', '4', '2048', '4'], [' ', ' ', '20', '100', '4'], [' ', ' ', '4', '128', '4'], [' ', ' ', '8', '128', '4'], [' ', ' ', '50', '64', '4'], [' ', ' ', '8', '2048', '4'], [' ', ' ', '80', '64', '4'], [' ', ' ', '16', '128', '4'], [' ', ' ', '4', '80', '4'], [' ', ' ', '50', '80', '4'], [' ', ' ', '100', '32', '4'], [' ', ' ', '96', '32', '4'], [' ', ' ', '8', '100', '4'], [' ', ' ', '128', '20', '4'], [' ', ' ', '20', '80', '4'], [' ', ' ', '32', '64', '4'], [' ', ' ', '8', '80', '4'], [' ', ' ', '4', '100', '4'], [' ', ' ', '96', '50', '4'], [' ', ' ', '64', '80', '4'], [' ', ' ', '32', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '4', '64', '4'], [' ', ' ', '4', '50', '4'], [' ', ' ', '64', '64', '4'], [' ', ' ', '16', '80', '4'], [' ', ' ', '80', '50', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '4'], [' ', ' ', '20', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '4'], [' ', ' ', '16', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], [' ', ' ', '50', '50', '4'], [' ', ' ', '8', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '4'], [' ', ' ', '32', '50', '4'], [' ', ' ', '20', '50', '4'], [' ', ' ', '64', '32', '4'], [' ', ' ', '4', '32', '4'], [' ', ' ', '4', '20', '4'], [' ', ' ', '8', '50', '4']]
prob:  <search.SurrogateProblem object at 0x14a9125ad580>
0 OK
bestX [array([[0.876 , 0.5497, 0.3623, 0.3891, 0.0572]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3966.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3966
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3966
........................................ [0.001329, 0.001227, 0.001175]
OUTPUT:%f [0.001329, 0.001227, 0.001175] 0.001201
store_func_eval
problem.constants
None
MLA iteration:  80
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -4.975424e+02           nan     00s00  00001  -4.975424e+02   1.233984e+04     00s00  00002  -5.859810e+02   4.589016e+03     00s00  00003  -6.494000e+02   4.534824e+02     00s01  00004  -6.686017e+02   4.998480e+02 
    00s01  00005  -7.246066e+02   7.140269e+01     00s01  00006  -7.357058e+02   6.619962e+01     00s02  00007  -7.385030e+02   1.166579e+01     00s02  00008  -7.397547e+02   3.418233e+00     00s02  00009  -7.406134e+02   3.082867e+00     00s03  00010  -7.418202e+02   1.847118e+00     00s03  00011  -7.423882e+02   4.798077e+00     00s03  00012  -7.426501e+02   7.235554e-01     00s03  00013  -7.430724e+02   3.372671e+00     00s04  00014  -7.433457e+02   6.373138e+00 
    00s04  00015  -7.432868e+02   4.526049e+00     00s04  00016  -7.436623e+02   2.612388e+00     00s05  00017  -7.439005e+02   1.643498e+00     00s05  00018  -7.437939e+02   4.635045e-01     00s05  00019  -7.439704e+02   5.659006e-01     00s05  00020  -7.440260e+02   2.026755e-01     00s06  00021  -7.441413e+02   1.820389e-01     00s06  00022  -7.444251e+02   3.437013e-01     00s06  00023  -7.445939e+02   5.075936e-02 
    00s07  00024  -7.446743e+02   1.082452e-02     00s07  00025  -7.447046e+02   2.192961e-02     00s07  00026  -7.447238e+02   4.729846e-03     00s07  00027  -7.447340e+02   6.293323e-04     00s08  00028  -7.447377e+02   2.089052e-03 
    00s08  00029  -7.447391e+02   5.174443e-03     00s08  00030  -7.447410e+02   4.608221e-03     00s09  00031  -7.447428e+02   1.698882e-03     00s09  00032  -7.447459e+02   2.882779e-03     00s09  00033  -7.447453e+02   3.022825e-02     00s09  00034  -7.447465e+02   2.809883e-03     00s10  00035  -7.447469e+02   2.324031e-03     00s10  00036  -7.447481e+02   2.634206e-03     00s10  00037  -7.447530e+02   9.597314e-03     00s11  00038  -7.447604e+02   1.987666e-02     00s11  00039  -7.447741e+02   2.313862e-02     00s11  00040  -7.447977e+02   2.387159e-02     00s12  00041  -7.448339e+02   1.294479e-01     00s12  00042  -7.448493e+02   5.717470e-02     00s12  00043  -7.448738e+02   7.319960e-03     00s12  00044  -7.448806e+02   4.610692e-03     00s13  00045  -7.448834e+02   3.368692e-02     00s13  00046  -7.448870e+02   5.739646e-03     00s13  00047  -7.448911e+02   4.699074e-03     00s14  00048  -7.448961e+02   1.073169e-02     00s14  00049  -7.449023e+02   4.759391e-03     00s14  00050  -7.449081e+02   1.169778e-03     00s14  00051  -7.449089e+02   6.197939e-03 
    00s15  00052  -7.449105e+02   2.673037e-04     00s15  00053  -7.449112e+02   8.708730e-05     00s15  00054  -7.449124e+02   6.423677e-04     00s16  00055  -7.449133e+02   1.113041e-03     00s16  00056  -7.449117e+02   2.143980e-02     00s16  00057  -7.449137e+02   5.597870e-04 
    00s16  00058  -7.449143e+02   5.026692e-05     00s17  00059  -7.449146e+02   1.394004e-03     00s17  00060  -7.449149e+02   1.919876e-04     00s17  00061  -7.449150e+02   5.026080e-05     00s18  00062  -7.449152e+02   3.228579e-05     00s18  00063  -7.449153e+02   1.374010e-05     00s18  00064  -7.449153e+02   5.788162e-04     00s18  00065  -7.449154e+02   6.659616e-05     00s19  00066  -7.449154e+02   3.958121e-07     00s19  00067  -7.449155e+02   1.043618e-05     00s19  00068  -7.449155e+02   1.143421e-05     00s20  00070  -7.449155e+02   8.224552e-05 
Runtime:     00s20
Optimization status: Converged

Optimization restart 1/1, f = -744.9154776975633
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '32', '100', '4'], [' ', ' ', '16', '100', '4'], [' ', ' ', '4', '2048', '4'], [' ', ' ', '20', '100', '4'], [' ', ' ', '4', '128', '4'], [' ', ' ', '8', '128', '4'], [' ', ' ', '50', '64', '4'], [' ', ' ', '8', '2048', '4'], [' ', ' ', '80', '64', '4'], [' ', ' ', '16', '128', '4'], [' ', ' ', '4', '80', '4'], [' ', ' ', '50', '80', '4'], [' ', ' ', '100', '32', '4'], [' ', ' ', '96', '32', '4'], [' ', ' ', '8', '100', '4'], [' ', ' ', '128', '20', '4'], [' ', ' ', '20', '80', '4'], [' ', ' ', '32', '64', '4'], [' ', ' ', '8', '80', '4'], [' ', ' ', '4', '100', '4'], [' ', ' ', '96', '50', '4'], [' ', ' ', '64', '80', '4'], [' ', ' ', '32', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '4', '64', '4'], [' ', ' ', '4', '50', '4'], [' ', ' ', '64', '64', '4'], [' ', ' ', '16', '80', '4'], [' ', ' ', '80', '50', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '4'], [' ', ' ', '20', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '4'], [' ', ' ', '16', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], [' ', ' ', '50', '50', '4'], [' ', ' ', '8', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '4'], [' ', ' ', '32', '50', '4'], [' ', ' ', '20', '50', '4'], [' ', ' ', '64', '32', '4'], [' ', ' ', '4', '32', '4'], [' ', ' ', '4', '20', '4'], [' ', ' ', '8', '50', '4'], [' ', ' ', '20', '32', '4']]
prob:  <search.SurrogateProblem object at 0x14a913561550>
0 OK
bestX [array([[0.6322, 0.5706, 0.2636, 0.3788, 0.0341]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2656.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2656
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2656
........................................ [0.001329, 0.001203, 0.001163]
OUTPUT:%f [0.001329, 0.001203, 0.001163] 0.001183
store_func_eval
problem.constants
None
MLA iteration:  81
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -5.019093e+02           nan     00s00  00001  -5.019093e+02   1.248944e+04     00s00  00002  -5.907938e+02   4.615118e+03     00s00  00003  -6.540657e+02   4.557653e+02     00s01  00004  -6.730740e+02   4.962744e+02 
    00s01  00005  -7.291311e+02   7.201195e+01     00s01  00006  -7.405414e+02   6.232662e+01     00s02  00007  -7.431993e+02   1.159323e+01     00s02  00008  -7.444375e+02   3.516349e+00     00s02  00009  -7.453323e+02   3.163815e+00     00s03  00010  -7.465947e+02   1.810093e+00     00s03  00011  -7.471878e+02   4.883671e+00     00s03  00012  -7.474470e+02   7.515646e-01     00s03  00013  -7.479128e+02   4.077019e+00     00s04  00014  -7.444073e+02   8.552150e+01     00s04  00015  -7.482524e+02   5.093558e+00 
    00s04  00016  -7.483798e+02   3.861719e+00     00s05  00017  -7.477087e+02   2.966935e+01     00s05  00018  -7.485497e+02   1.198106e+00     00s05  00019  -7.487355e+02   1.048490e+00     00s05  00020  -7.488426e+02   2.808631e-01     00s06  00021  -7.489225e+02   2.192836e-01     00s06  00022  -7.490132e+02   2.801780e-01     00s06  00023  -7.492354e+02   1.867928e-01     00s07  00024  -7.494001e+02   1.339670e-02 
    00s07  00025  -7.494594e+02   1.822211e-02     00s07  00026  -7.494918e+02   1.617283e-02     00s08  00027  -7.495150e+02   2.050425e-02     00s08  00028  -7.495201e+02   1.750996e-03     00s08  00029  -7.495210e+02   4.232810e-04     00s08  00030  -7.495212e+02   3.030175e-03     00s09  00031  -7.495215e+02   1.325650e-03 
    00s09  00032  -7.495222e+02   4.223639e-04     00s09  00033  -7.495227e+02   7.273617e-04     00s10  00034  -7.495239e+02   1.430472e-03     00s10  00035  -7.495254e+02   2.090612e-02     00s10  00036  -7.495293e+02   8.121489e-03     00s10  00037  -7.495384e+02   9.995513e-03     00s11  00038  -7.495488e+02   3.197692e-02     00s11  00039  -7.495614e+02   5.074353e-02     00s11  00040  -7.495807e+02   1.421102e-01     00s12  00041  -7.495946e+02   9.146105e-03     00s12  00042  -7.496086e+02   2.552557e-02     00s12  00043  -7.496182e+02   2.374451e-02     00s12  00044  -7.494434e+02   1.043554e+00     00s13  00045  -7.496306e+02   9.470518e-02     00s13  00046  -7.496504e+02   5.082022e-03     00s13  00047  -7.496562e+02   8.705325e-03     00s14  00048  -7.496596e+02   6.179210e-03     00s14  00049  -7.496640e+02   2.405541e-03     00s14  00050  -7.496669e+02   2.938738e-04 
    00s15  00051  -7.496689e+02   4.462160e-05     00s15  00052  -7.496700e+02   3.979886e-05     00s15  00053  -7.490353e+02   3.206354e+00     00s15  00054  -7.496700e+02   1.041379e-04     00s16  00055  -7.496709e+02   9.132756e-05     00s16  00056  -7.496673e+02   5.127457e-03     00s16  00057  -7.496710e+02   3.597397e-05     00s17  00058  -7.496715e+02   2.430416e-05     00s17  00059  -7.496705e+02   1.376337e-02     00s17  00060  -7.496716e+02   5.843352e-04     00s17  00061  -7.496719e+02   7.378320e-05 
    00s18  00062  -7.496722e+02   9.027114e-06     00s18  00063  -7.496723e+02   1.193810e-05     00s18  00064  -7.496707e+02   6.952273e-03     00s19  00065  -7.496724e+02   3.738536e-05     00s19  00066  -7.496724e+02   5.462441e-06     00s19  00067  -7.496725e+02   3.557936e-06     00s19  00068  -7.496722e+02   3.661082e-03     00s21  00075  -7.496726e+02   8.171611e-06 
Runtime:     00s21
Optimization status: Converged

Optimization restart 1/1, f = -749.6725954474919
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '32', '100', '4'], [' ', ' ', '16', '100', '4'], [' ', ' ', '4', '2048', '4'], [' ', ' ', '20', '100', '4'], [' ', ' ', '4', '128', '4'], [' ', ' ', '8', '128', '4'], [' ', ' ', '50', '64', '4'], [' ', ' ', '8', '2048', '4'], [' ', ' ', '80', '64', '4'], [' ', ' ', '16', '128', '4'], [' ', ' ', '4', '80', '4'], [' ', ' ', '50', '80', '4'], [' ', ' ', '100', '32', '4'], [' ', ' ', '96', '32', '4'], [' ', ' ', '8', '100', '4'], [' ', ' ', '128', '20', '4'], [' ', ' ', '20', '80', '4'], [' ', ' ', '32', '64', '4'], [' ', ' ', '8', '80', '4'], [' ', ' ', '4', '100', '4'], [' ', ' ', '96', '50', '4'], [' ', ' ', '64', '80', '4'], [' ', ' ', '32', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '4', '64', '4'], [' ', ' ', '4', '50', '4'], [' ', ' ', '64', '64', '4'], [' ', ' ', '16', '80', '4'], [' ', ' ', '80', '50', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '4'], [' ', ' ', '20', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '4'], [' ', ' ', '16', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], [' ', ' ', '50', '50', '4'], [' ', ' ', '8', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '4'], [' ', ' ', '32', '50', '4'], [' ', ' ', '20', '50', '4'], [' ', ' ', '64', '32', '4'], [' ', ' ', '4', '32', '4'], [' ', ' ', '4', '20', '4'], [' ', ' ', '8', '50', '4'], [' ', ' ', '20', '32', '4'], [' ', ' ', '16', '32', '4']]
prob:  <search.SurrogateProblem object at 0x14a9125ad490>
0 OK
bestX [array([[0.5921, 0.8818, 0.2043, 0.3199, 0.0362]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7918.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7918
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7918
........................................ [0.001373, 0.001238, 0.001202]
OUTPUT:%f [0.001373, 0.001238, 0.001202] 0.00122
store_func_eval
problem.constants
None
MLA iteration:  82
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -5.062680e+02           nan 
    00s00  00001  -5.062680e+02   1.256075e+04     00s00  00002  -5.951164e+02   4.619886e+03     00s00  00003  -6.586663e+02   4.679397e+02     00s01  00004  -6.783103e+02   5.049971e+02     00s01  00005  -7.344485e+02   6.410398e+01     00s01  00006  -7.463265e+02   3.310774e+01 
    00s02  00007  -7.480062e+02   8.322462e+00     00s02  00008  -7.489631e+02   3.481134e+00     00s02  00009  -7.503287e+02   2.500465e+00     00s03  00010  -7.517614e+02   7.208672e-01     00s03  00011  -7.520865e+02   8.203623e-01     00s03  00012  -7.522580e+02   3.646522e+00     00s03  00013  -7.524509e+02   1.499248e+00     00s04  00014  -7.530658e+02   4.522161e-01     00s04  00015  -7.306428e+02   9.844186e+02     00s04  00016  -7.531692e+02   1.686019e+00     00s05  00017  -7.533172e+02   8.428820e-01 
    00s05  00018  -7.534125e+02   9.774495e-02     00s05  00019  -7.534438e+02   1.589005e-01     00s06  00020  -7.535082e+02   4.107459e-01     00s06  00021  -7.536894e+02   8.122183e-01     00s06  00022  -7.539281e+02   6.780304e-01     00s06  00023  -7.540901e+02   1.437258e-01     00s07  00024  -7.541441e+02   2.902611e-02     00s07  00025  -7.541636e+02   3.038290e-02     00s07  00026  -7.541918e+02   7.072702e-03 
    00s08  00027  -7.542028e+02   1.564563e-03     00s08  00028  -7.542041e+02   2.434237e-03     00s08  00029  -7.542050e+02   7.313504e-03     00s08  00030  -7.542059e+02   1.726239e-03     00s09  00031  -7.542082e+02   3.437726e-03     00s09  00032  -7.542102e+02   9.114191e-03     00s09  00033  -7.542124e+02   3.102112e-03     00s10  00034  -7.542146e+02   1.729953e-03     00s10  00035  -7.542173e+02   3.643518e-02     00s10  00036  -7.542205e+02   3.070143e-02     00s11  00037  -7.542322e+02   1.232253e-02     00s11  00038  -7.542483e+02   1.147748e-02     00s11  00039  -7.542774e+02   1.666152e-02     00s11  00040  -7.543278e+02   2.513661e-02     00s12  00041  -7.543329e+02   9.464889e-02     00s12  00042  -7.543542e+02   9.560856e-03     00s12  00043  -7.543609e+02   4.790804e-03     00s13  00044  -7.543686e+02   9.927847e-03     00s13  00045  -7.543738e+02   4.803952e-03     00s13  00046  -7.543740e+02   5.906086e-02 
    00s14  00047  -7.543798e+02   8.674982e-04     00s14  00048  -7.543810e+02   1.176448e-03     00s14  00049  -7.543822e+02   3.100185e-03     00s14  00050  -7.543834e+02   9.269244e-04     00s15  00051  -7.543845e+02   4.417266e-04     00s15  00052  -7.543849e+02   2.165185e-04     00s15  00053  -7.543852e+02   3.409557e-04     00s16  00054  -7.543854e+02   6.732068e-04     00s16  00055  -7.543855e+02   1.958050e-03 
    00s16  00056  -7.543857e+02   9.033251e-05     00s16  00057  -7.543858e+02   8.200353e-06     00s17  00058  -7.543858e+02   3.307871e-05     00s17  00059  -7.543859e+02   1.531765e-05     00s17  00060  -7.543858e+02   1.450804e-03     00s18  00061  -7.543859e+02   6.773229e-05     00s18  00062  -7.543859e+02   3.610949e-06     00s18  00063  -7.543859e+02   1.985233e-06 
    00s19  00064  -7.543859e+02   3.794183e-06     00s19  00065  -7.543859e+02   4.149839e-06     00s19  00066  -7.543859e+02   1.017079e-06     00s19  00067  -7.543859e+02   2.519550e-06     00s22  00075  -7.543860e+02   3.661140e-06 
Runtime:     00s22
Optimization status: Converged

Optimization restart 1/1, f = -754.3859844244332
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '32', '100', '4'], [' ', ' ', '16', '100', '4'], [' ', ' ', '4', '2048', '4'], [' ', ' ', '20', '100', '4'], [' ', ' ', '4', '128', '4'], [' ', ' ', '8', '128', '4'], [' ', ' ', '50', '64', '4'], [' ', ' ', '8', '2048', '4'], [' ', ' ', '80', '64', '4'], [' ', ' ', '16', '128', '4'], [' ', ' ', '4', '80', '4'], [' ', ' ', '50', '80', '4'], [' ', ' ', '100', '32', '4'], [' ', ' ', '96', '32', '4'], [' ', ' ', '8', '100', '4'], [' ', ' ', '128', '20', '4'], [' ', ' ', '20', '80', '4'], [' ', ' ', '32', '64', '4'], [' ', ' ', '8', '80', '4'], [' ', ' ', '4', '100', '4'], [' ', ' ', '96', '50', '4'], [' ', ' ', '64', '80', '4'], [' ', ' ', '32', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '4', '64', '4'], [' ', ' ', '4', '50', '4'], [' ', ' ', '64', '64', '4'], [' ', ' ', '16', '80', '4'], [' ', ' ', '80', '50', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '4'], [' ', ' ', '20', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '4'], [' ', ' ', '16', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], [' ', ' ', '50', '50', '4'], [' ', ' ', '8', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '4'], [' ', ' ', '32', '50', '4'], [' ', ' ', '20', '50', '4'], [' ', ' ', '64', '32', '4'], [' ', ' ', '4', '32', '4'], [' ', ' ', '4', '20', '4'], [' ', ' ', '8', '50', '4'], [' ', ' ', '20', '32', '4'], [' ', ' ', '16', '32', '4'], [' ', ' ', '16', '20', '4']]
prob:  <search.SurrogateProblem object at 0x14a9125d5df0>
0 OK
bestX [array([[0.7953, 0.9197, 0.3926, 0.4273, 0.0744]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3260.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3260
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3260
........................................ [0.001284, 0.001193, 0.00116]
OUTPUT:%f [0.001284, 0.001193, 0.00116] 0.0011765
store_func_eval
problem.constants
None
MLA iteration:  83
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -5.109778e+02           nan     00s00  00001  -5.109778e+02   1.264165e+04     00s00  00002  -6.000636e+02   4.643199e+03     00s00  00003  -6.634699e+02   4.588423e+02     00s01  00004  -6.824796e+02   4.975072e+02 
    00s01  00005  -7.382532e+02   6.638962e+01     00s01  00006  -7.509464e+02   3.111984e+01     00s02  00007  -7.525702e+02   8.186998e+00     00s02  00008  -7.535403e+02   3.530848e+00     00s02  00009  -7.550328e+02   2.168785e+00     00s03  00010  -7.564062e+02   1.205656e+00     00s03  00011  -7.567049e+02   3.238534e-01     00s03  00012  -7.568075e+02   1.633524e+00     00s04  00013  -7.569534e+02   1.789280e+00     00s04  00014  -7.535147e+02   1.021115e+02     00s04  00015  -7.575516e+02   3.097868e+00 
    00s04  00016  -7.579237e+02   1.408408e+00     00s05  00017  -7.479554e+02   1.489910e+02     00s05  00018  -7.579522e+02   1.034143e+00     00s06  00019  -7.580346e+02   9.856237e-01     00s06  00020  -7.580992e+02   1.877472e-01     00s06  00021  -7.581363e+02   9.902037e-02     00s06  00022  -7.583269e+02   5.962540e-01     00s07  00023  -7.585066e+02   8.058337e-01     00s07  00024  -7.587147e+02   1.652090e-01     00s07  00025  -7.588059e+02   1.678539e-02     00s08  00026  -7.588278e+02   2.223490e-01     00s08  00027  -7.588531e+02   5.302751e-02 
    00s08  00028  -7.588596e+02   1.919711e-02     00s09  00029  -7.588642e+02   8.693246e-04     00s09  00030  -7.588649e+02   3.664153e-04     00s09  00031  -7.588652e+02   1.302514e-03     00s09  00032  -7.588657e+02   8.512768e-04 
    00s10  00033  -7.588681e+02   5.030132e-03     00s10  00034  -7.588715e+02   1.315945e-02     00s10  00035  -7.588766e+02   1.266689e-02     00s11  00036  -7.588899e+02   4.227082e-03     00s11  00037  -7.589389e+02   8.962690e-03     00s11  00038  -7.589423e+02   5.152292e-02     00s12  00039  -7.589776e+02   4.837232e-03     00s12  00040  -7.589136e+02   1.476816e+00     00s12  00041  -7.589916e+02   1.123148e-01     00s12  00042  -7.590095e+02   2.970832e-02     00s13  00043  -7.590256e+02   3.553329e-03     00s13  00044  -7.590331e+02   5.535273e-03     00s13  00045  -7.590406e+02   6.573041e-03     00s14  00046  -7.590455e+02   2.002710e-02 
    00s14  00047  -7.590504e+02   9.331078e-04     00s14  00048  -7.590518e+02   4.116063e-04     00s15  00049  -7.590530e+02   7.042320e-04     00s15  00050  -7.590535e+02   8.840453e-03     00s15  00051  -7.590553e+02   8.357397e-04 
    00s15  00052  -7.590560e+02   4.211903e-05     00s16  00053  -7.590564e+02   3.085524e-04     00s16  00054  -7.590564e+02   4.835347e-03     00s16  00055  -7.590566e+02   7.947041e-04     00s17  00056  -7.590569e+02   1.770091e-05     00s17  00057  -7.590570e+02   3.218904e-05     00s17  00058  -7.590572e+02   5.979742e-05     00s18  00059  -7.590574e+02   2.657647e-04     00s18  00060  -7.590575e+02   1.198933e-04     00s18  00061  -7.590575e+02   1.501993e-05     00s18  00062  -7.590575e+02   1.664054e-05     00s19  00063  -7.590576e+02   2.072374e-05     00s19  00064  -7.590576e+02   2.192437e-04     00s19  00065  -7.590576e+02   1.045355e-05 
    00s22  00075  -7.590577e+02   3.753329e-06 
Runtime:     00s22
Optimization status: Converged

Optimization restart 1/1, f = -759.0576915390366
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '32', '100', '4'], [' ', ' ', '16', '100', '4'], [' ', ' ', '4', '2048', '4'], [' ', ' ', '20', '100', '4'], [' ', ' ', '4', '128', '4'], [' ', ' ', '8', '128', '4'], [' ', ' ', '50', '64', '4'], [' ', ' ', '8', '2048', '4'], [' ', ' ', '80', '64', '4'], [' ', ' ', '16', '128', '4'], [' ', ' ', '4', '80', '4'], [' ', ' ', '50', '80', '4'], [' ', ' ', '100', '32', '4'], [' ', ' ', '96', '32', '4'], [' ', ' ', '8', '100', '4'], [' ', ' ', '128', '20', '4'], [' ', ' ', '20', '80', '4'], [' ', ' ', '32', '64', '4'], [' ', ' ', '8', '80', '4'], [' ', ' ', '4', '100', '4'], [' ', ' ', '96', '50', '4'], [' ', ' ', '64', '80', '4'], [' ', ' ', '32', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '4', '64', '4'], [' ', ' ', '4', '50', '4'], [' ', ' ', '64', '64', '4'], [' ', ' ', '16', '80', '4'], [' ', ' ', '80', '50', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '4'], [' ', ' ', '20', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '4'], [' ', ' ', '16', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], [' ', ' ', '50', '50', '4'], [' ', ' ', '8', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '4'], [' ', ' ', '32', '50', '4'], [' ', ' ', '20', '50', '4'], [' ', ' ', '64', '32', '4'], [' ', ' ', '4', '32', '4'], [' ', ' ', '4', '20', '4'], [' ', ' ', '8', '50', '4'], [' ', ' ', '20', '32', '4'], [' ', ' ', '16', '32', '4'], [' ', ' ', '16', '20', '4'], [' ', ' ', '32', '32', '4']]
prob:  <search.SurrogateProblem object at 0x14a912dfc160>
0 OK
bestX [array([[0.5929, 0.8414, 0.1506, 0.3759, 0.0141]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8220.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8220
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8220
........................................ [0.001315, 0.00123, 0.001181]
OUTPUT:%f [0.001315, 0.00123, 0.001181] 0.0012055
store_func_eval
problem.constants
None
MLA iteration:  84
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -5.159368e+02           nan     00s00  00001  -5.159368e+02   1.266671e+04     00s00  00002  -6.050823e+02   4.649507e+03     00s00  00003  -6.684337e+02   4.546840e+02     00s01  00004  -6.871379e+02   4.926180e+02     00s01  00005  -7.426909e+02   6.675872e+01     00s01  00006  -7.557931e+02   2.847605e+01     00s02  00007  -7.573358e+02   7.982918e+00 
    00s02  00008  -7.583155e+02   3.590616e+00     00s02  00009  -7.599904e+02   1.779141e+00     00s03  00010  -7.612077e+02   2.196287e+00     00s03  00011  -7.615134e+02   3.248684e-01     00s03  00012  -7.616056e+02   9.532680e-01     00s04  00013  -7.617799e+02   1.628013e+00     00s04  00014  -6.880906e+02   4.253198e+03     00s04  00015  -7.623692e+02   4.392828e+00     00s04  00016  -7.625162e+02   3.006677e+00     00s05  00017  -7.625744e+02   3.638744e+00     00s05  00018  -7.082891e+02   2.227344e+03     00s05  00019  -7.626092e+02   3.167411e+00     00s06  00020  -7.628552e+02   3.418729e-01     00s06  00021  -7.629106e+02   1.832551e-01     00s06  00022  -7.629315e+02   2.101434e-01 
    00s07  00023  -7.630038e+02   3.828205e-01     00s07  00024  -7.632685e+02   7.150565e-01     00s07  00025  -7.634484e+02   3.816070e-01     00s07  00026  -7.635758e+02   4.600864e-02 
    00s08  00027  -7.636315e+02   5.348541e-03     00s08  00028  -7.636610e+02   1.159651e-02     00s08  00029  -7.633054e+02   3.397857e+00     00s09  00030  -7.636660e+02   7.048703e-03     00s09  00031  -7.636772e+02   1.600017e-03     00s09  00032  -7.636823e+02   3.744616e-03     00s10  00033  -7.636824e+02   1.884273e-02     00s10  00034  -7.636838e+02   2.145648e-03 
    00s10  00035  -7.636846e+02   3.648744e-04     00s10  00036  -7.636852e+02   2.406744e-04     00s11  00037  -7.636859e+02   1.426293e-02     00s11  00038  -7.636873e+02   3.872772e-03     00s11  00039  -7.636893e+02   1.392657e-03     00s12  00040  -7.636898e+02   6.584353e-04     00s12  00041  -7.636904e+02   4.611743e-04     00s12  00042  -7.636921e+02   4.672176e-03     00s13  00043  -7.636950e+02   1.660707e-02     00s13  00044  -7.637023e+02   4.846324e-02     00s13  00045  -7.637161e+02   8.695755e-02     00s13  00046  -7.637410e+02   1.370537e-01     00s14  00047  -7.636078e+02   8.575341e-01     00s14  00048  -7.637610e+02   1.651171e-01     00s14  00049  -7.637916e+02   1.902758e-01     00s15  00050  -7.638200e+02   7.970983e-03     00s15  00051  -7.638370e+02   5.904166e-03     00s15  00052  -7.634828e+02   2.251469e+00     00s16  00053  -7.638407e+02   1.338922e-03     00s16  00054  -7.638489e+02   3.041605e-04     00s16  00055  -7.638541e+02   2.308313e-04     00s16  00056  -7.638583e+02   2.046073e-04     00s17  00057  -7.638618e+02   1.877243e-03     00s17  00058  -7.638637e+02   7.550487e-03     00s17  00059  -7.638648e+02   5.730884e-04     00s18  00060  -7.638658e+02   7.928416e-04     00s18  00061  -7.638666e+02   1.003641e-03     00s18  00062  -7.638660e+02   1.268711e-02     00s19  00063  -7.638668e+02   2.903994e-03     00s19  00064  -7.638675e+02   2.177967e-04 
    00s19  00065  -7.638678e+02   4.680741e-05 
    00s25  00083  -7.638685e+02   2.267506e-06 
Runtime:     00s25
Optimization status: Converged

Optimization restart 1/1, f = -763.8684868916419
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '32', '100', '4'], [' ', ' ', '16', '100', '4'], [' ', ' ', '4', '2048', '4'], [' ', ' ', '20', '100', '4'], [' ', ' ', '4', '128', '4'], [' ', ' ', '8', '128', '4'], [' ', ' ', '50', '64', '4'], [' ', ' ', '8', '2048', '4'], [' ', ' ', '80', '64', '4'], [' ', ' ', '16', '128', '4'], [' ', ' ', '4', '80', '4'], [' ', ' ', '50', '80', '4'], [' ', ' ', '100', '32', '4'], [' ', ' ', '96', '32', '4'], [' ', ' ', '8', '100', '4'], [' ', ' ', '128', '20', '4'], [' ', ' ', '20', '80', '4'], [' ', ' ', '32', '64', '4'], [' ', ' ', '8', '80', '4'], [' ', ' ', '4', '100', '4'], [' ', ' ', '96', '50', '4'], [' ', ' ', '64', '80', '4'], [' ', ' ', '32', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '4', '64', '4'], [' ', ' ', '4', '50', '4'], [' ', ' ', '64', '64', '4'], [' ', ' ', '16', '80', '4'], [' ', ' ', '80', '50', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '4'], [' ', ' ', '20', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '4'], [' ', ' ', '16', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], [' ', ' ', '50', '50', '4'], [' ', ' ', '8', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '4'], [' ', ' ', '32', '50', '4'], [' ', ' ', '20', '50', '4'], [' ', ' ', '64', '32', '4'], [' ', ' ', '4', '32', '4'], [' ', ' ', '4', '20', '4'], [' ', ' ', '8', '50', '4'], [' ', ' ', '20', '32', '4'], [' ', ' ', '16', '32', '4'], [' ', ' ', '16', '20', '4'], [' ', ' ', '32', '32', '4'], [' ', ' ', '8', '32', '4']]
prob:  <search.SurrogateProblem object at 0x14a91283c760>
0 OK
bestX [array([[0.7574, 0.6435, 0.4876, 0.385 , 0.0162]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/228.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/228
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/228
........................................ [0.00134, 0.0012, 0.001164]
OUTPUT:%f [0.00134, 0.0012, 0.001164] 0.0011819999999999999
store_func_eval
problem.constants
None
MLA iteration:  85
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -5.206993e+02           nan     00s00  00001  -5.206993e+02   1.274306e+04     00s00  00002  -6.100574e+02   4.665932e+03     00s00  00003  -6.733100e+02   4.512469e+02     00s01  00004  -6.916702e+02   4.877685e+02     00s01  00005  -7.470718e+02   6.871216e+01     00s01  00006  -7.605262e+02   2.967238e+01     00s02  00007  -7.621053e+02   8.309233e+00 
    00s02  00008  -7.631133e+02   3.656730e+00     00s02  00009  -7.647528e+02   1.875494e+00     00s03  00010  -7.660158e+02   2.012617e+00     00s03  00011  -7.663171e+02   2.543198e-01     00s03  00012  -7.664030e+02   8.037658e-01     00s04  00013  -7.665564e+02   1.734573e+00     00s04  00014  -7.649901e+02   7.096429e+01     00s04  00015  -7.670374e+02   5.848959e+00     00s05  00016  -7.669786e+02   6.483978e+00     00s05  00017  -7.672042e+02   6.264296e+00     00s05  00018  -7.591226e+02   1.703132e+02     00s05  00019  -7.672459e+02   5.688905e+00     00s06  00020  -7.677306e+02   2.694048e-01     00s06  00021  -7.677619e+02   1.258660e-01     00s06  00022  -7.677916e+02   1.245838e-01     00s07  00023  -7.680102e+02   5.237818e-01 
    00s07  00024  -7.681665e+02   4.054076e-01     00s07  00025  -7.683493e+02   1.012395e-01     00s08  00026  -7.684309e+02   1.342808e-02     00s08  00027  -7.684733e+02   2.925278e-03     00s08  00028  -7.684543e+02   2.591634e-01     00s08  00029  -7.684785e+02   3.690698e-02 
    00s09  00030  -7.684961e+02   8.427536e-03     00s09  00031  -7.684999e+02   3.628996e-04     00s09  00032  -7.685003e+02   4.586987e-03     00s10  00033  -7.685007e+02   7.918864e-04     00s10  00034  -7.685008e+02   3.828095e-04     00s10  00035  -7.685012e+02   3.823073e-04     00s11  00036  -7.685020e+02   2.192121e-03     00s11  00037  -7.685040e+02   9.610871e-03     00s11  00038  -7.685082e+02   2.560870e-02     00s12  00039  -7.685150e+02   3.983442e-02     00s12  00040  -7.685231e+02   6.509303e-02     00s12  00041  -7.685291e+02   1.037120e-02     00s12  00042  -7.685323e+02   1.939236e-03     00s13  00043  -7.685341e+02   7.055885e-03     00s13  00044  -7.685396e+02   3.480206e-02     00s13  00045  -7.685492e+02   8.024096e-02     00s14  00046  -7.685719e+02   1.208864e-01     00s14  00047  -7.686027e+02   3.399491e-01     00s14  00048  -7.686376e+02   2.430994e-02     00s15  00049  -7.686502e+02   7.688933e-03     00s15  00050  -7.686628e+02   7.711984e-03     00s15  00051  -7.686665e+02   8.668346e-03     00s15  00052  -7.686605e+02   4.108269e-02     00s16  00053  -7.686711e+02   2.366722e-03 
    00s16  00054  -7.686769e+02   2.390828e-04     00s16  00055  -7.686800e+02   4.429914e-04     00s17  00056  -7.686801e+02   1.059244e-02     00s17  00057  -7.686827e+02   8.973222e-04     00s17  00058  -7.686839e+02   2.444958e-04     00s18  00059  -7.686847e+02   5.436867e-04     00s18  00060  -7.686712e+02   2.007014e-01     00s18  00061  -7.686848e+02   2.966611e-04     00s19  00062  -7.686855e+02   6.106561e-05     00s19  00063  -7.686859e+02   4.281811e-04     00s19  00064  -7.686863e+02   2.137862e-05     00s19  00065  -7.686865e+02   2.280489e-05 
    00s24  00081  -7.686870e+02   4.983087e-07 
Runtime:     00s24
Optimization status: Converged

Optimization restart 1/1, f = -768.6869794625466
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '32', '100', '4'], [' ', ' ', '16', '100', '4'], [' ', ' ', '4', '2048', '4'], [' ', ' ', '20', '100', '4'], [' ', ' ', '4', '128', '4'], [' ', ' ', '8', '128', '4'], [' ', ' ', '50', '64', '4'], [' ', ' ', '8', '2048', '4'], [' ', ' ', '80', '64', '4'], [' ', ' ', '16', '128', '4'], [' ', ' ', '4', '80', '4'], [' ', ' ', '50', '80', '4'], [' ', ' ', '100', '32', '4'], [' ', ' ', '96', '32', '4'], [' ', ' ', '8', '100', '4'], [' ', ' ', '128', '20', '4'], [' ', ' ', '20', '80', '4'], [' ', ' ', '32', '64', '4'], [' ', ' ', '8', '80', '4'], [' ', ' ', '4', '100', '4'], [' ', ' ', '96', '50', '4'], [' ', ' ', '64', '80', '4'], [' ', ' ', '32', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '4', '64', '4'], [' ', ' ', '4', '50', '4'], [' ', ' ', '64', '64', '4'], [' ', ' ', '16', '80', '4'], [' ', ' ', '80', '50', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '4'], [' ', ' ', '20', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '4'], [' ', ' ', '16', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], [' ', ' ', '50', '50', '4'], [' ', ' ', '8', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '4'], [' ', ' ', '32', '50', '4'], [' ', ' ', '20', '50', '4'], [' ', ' ', '64', '32', '4'], [' ', ' ', '4', '32', '4'], [' ', ' ', '4', '20', '4'], [' ', ' ', '8', '50', '4'], [' ', ' ', '20', '32', '4'], [' ', ' ', '16', '32', '4'], [' ', ' ', '16', '20', '4'], [' ', ' ', '32', '32', '4'], [' ', ' ', '8', '32', '4'], [' ', ' ', '50', '32', '4']]
prob:  <search.SurrogateProblem object at 0x14a913522490>
0 OK
bestX [array([[0.6877, 0.9559, 0.7229, 0.2773, 0.0111]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/99.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/99
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/99
........................................ [0.001342, 0.001206, 0.00117]
OUTPUT:%f [0.001342, 0.001206, 0.00117] 0.001188
store_func_eval
problem.constants
None
MLA iteration:  86
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -5.248028e+02           nan     00s00  00001  -5.248028e+02   1.291874e+04     00s00  00002  -6.146388e+02   4.698028e+03     00s01  00003  -6.777795e+02   4.521188e+02     00s01  00004  -6.958730e+02   4.846899e+02 
    00s01  00005  -7.514569e+02   7.081111e+01     00s01  00006  -7.652010e+02   3.030826e+01     00s02  00007  -7.668298e+02   8.450107e+00     00s02  00008  -7.678582e+02   3.731803e+00     00s02  00009  -7.695395e+02   1.812616e+00     00s03  00010  -7.707972e+02   2.294062e+00     00s03  00011  -7.711009e+02   2.311975e-01     00s03  00012  -7.711741e+02   7.167667e-01     00s04  00013  -7.713031e+02   1.104469e+00     00s04  00014  -7.715673e+02   5.299042e+00 
    00s04  00015  -7.715759e+02   1.286813e+01     00s05  00016  -7.717434e+02   5.909125e+00     00s05  00017  -7.720764e+02   3.459458e+00     00s05  00018  -7.724317e+02   2.926660e+00     00s05  00019  -7.709267e+02   9.104714e+00     00s06  00020  -7.725696e+02   1.438394e+00     00s06  00021  -7.726363e+02   9.688485e-02 
    00s06  00022  -7.726528e+02   5.821083e-02     00s07  00023  -7.727024e+02   2.204024e-01     00s07  00024  -7.728134e+02   7.140768e-01     00s07  00025  -7.729852e+02   7.460910e-01     00s08  00026  -7.732176e+02   2.463425e-02     00s08  00027  -7.732578e+02   1.054732e-01     00s08  00028  -7.732860e+02   8.884489e-02 
    00s09  00029  -7.733104e+02   3.566715e-03     00s09  00030  -7.733180e+02   4.248942e-03     00s09  00031  -7.733207e+02   7.403803e-03     00s09  00032  -7.733224e+02   1.165279e-02     00s10  00033  -7.733250e+02   2.368414e-03     00s10  00034  -7.733268e+02   1.921812e-03     00s10  00035  -7.733285e+02   2.702588e-03     00s11  00036  -7.733295e+02   3.585985e-04     00s11  00037  -7.733309e+02   3.709458e-03     00s11  00038  -7.733323e+02   4.931395e-03     00s12  00039  -7.733345e+02   1.053389e-02     00s12  00040  -7.733383e+02   6.773363e-03     00s12  00041  -7.733504e+02   8.002567e-03     00s13  00042  -7.733894e+02   2.950727e-02     00s13  00043  -7.734246e+02   4.606819e-02     00s13  00044  -7.734501e+02   3.721659e-03     00s13  00045  -7.734627e+02   7.539769e-03     00s14  00046  -7.733992e+02   2.360378e-01     00s14  00047  -7.734670e+02   7.404960e-03     00s14  00048  -7.734731e+02   2.120806e-03     00s15  00049  -7.734790e+02   1.180546e-02     00s15  00050  -7.734737e+02   1.608237e-01     00s15  00051  -7.734812e+02   4.858907e-03     00s16  00052  -7.734838e+02   2.132130e-03 
    00s16  00053  -7.734869e+02   3.302060e-05     00s16  00054  -7.734883e+02   3.914749e-05     00s17  00055  -7.730991e+02   3.487181e+00     00s17  00056  -7.734884e+02   8.128888e-04     00s17  00057  -7.734896e+02   2.431405e-04     00s17  00058  -7.734905e+02   7.516295e-05     00s18  00059  -7.734910e+02   3.705196e-05     00s18  00060  -7.734914e+02   6.756912e-06     00s18  00061  -7.734906e+02   3.862281e-03     00s19  00062  -7.734915e+02   8.735549e-05     00s19  00063  -7.734917e+02   9.614321e-06     00s19  00064  -7.734918e+02   3.239753e-04     00s22  00072  -7.734922e+02   7.650726e-05 
Runtime:     00s22
Optimization status: Converged

Optimization restart 1/1, f = -773.4921531593101
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '32', '100', '4'], [' ', ' ', '16', '100', '4'], [' ', ' ', '4', '2048', '4'], [' ', ' ', '20', '100', '4'], [' ', ' ', '4', '128', '4'], [' ', ' ', '8', '128', '4'], [' ', ' ', '50', '64', '4'], [' ', ' ', '8', '2048', '4'], [' ', ' ', '80', '64', '4'], [' ', ' ', '16', '128', '4'], [' ', ' ', '4', '80', '4'], [' ', ' ', '50', '80', '4'], [' ', ' ', '100', '32', '4'], [' ', ' ', '96', '32', '4'], [' ', ' ', '8', '100', '4'], [' ', ' ', '128', '20', '4'], [' ', ' ', '20', '80', '4'], [' ', ' ', '32', '64', '4'], [' ', ' ', '8', '80', '4'], [' ', ' ', '4', '100', '4'], [' ', ' ', '96', '50', '4'], [' ', ' ', '64', '80', '4'], [' ', ' ', '32', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '4', '64', '4'], [' ', ' ', '4', '50', '4'], [' ', ' ', '64', '64', '4'], [' ', ' ', '16', '80', '4'], [' ', ' ', '80', '50', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '4'], [' ', ' ', '20', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '4'], [' ', ' ', '16', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], [' ', ' ', '50', '50', '4'], [' ', ' ', '8', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '4'], [' ', ' ', '32', '50', '4'], [' ', ' ', '20', '50', '4'], [' ', ' ', '64', '32', '4'], [' ', ' ', '4', '32', '4'], [' ', ' ', '4', '20', '4'], [' ', ' ', '8', '50', '4'], [' ', ' ', '20', '32', '4'], [' ', ' ', '16', '32', '4'], [' ', ' ', '16', '20', '4'], [' ', ' ', '32', '32', '4'], [' ', ' ', '8', '32', '4'], [' ', ' ', '50', '32', '4'], [' ', ' ', '80', '20', '4']]
prob:  <search.SurrogateProblem object at 0x14a9128ecfd0>
0 OK
bestX [array([[0.7323, 0.6283, 0.0295, 0.1853, 0.0346]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5927.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5927
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5927
........................................ [0.001491, 0.001232, 0.001216]
OUTPUT:%f [0.001491, 0.001232, 0.001216] 0.001224
store_func_eval
problem.constants
None
MLA iteration:  87
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -5.281211e+02           nan     00s00  00001  -5.281211e+02   1.295491e+04     00s00  00002  -6.182935e+02   4.762110e+03     00s01  00003  -6.825462e+02   4.646176e+02 
    00s01  00004  -7.014490e+02   4.990785e+02     00s01  00005  -7.570469e+02   6.463708e+01     00s02  00006  -7.703901e+02   2.037541e+01     00s02  00007  -7.717520e+02   6.738169e+00     00s02  00008  -7.727700e+02   3.583961e+00     00s03  00009  -7.750466e+02   1.455875e+00     00s03  00010  -7.761661e+02   1.133871e+00     00s03  00011  -7.763948e+02   1.666380e+00 
    00s04  00012  -7.767254e+02   2.929866e+00     00s04  00013  -7.767775e+02   2.850322e+00     00s04  00014   3.022356e+02   5.185243e+02     00s05  00015  -7.769230e+02   2.249220e+00     00s05  00016  -7.770659e+02   7.641467e-01     00s05  00017  -7.771973e+02   5.331215e-01     00s06  00018  -7.773234e+02   6.748929e-01     00s06  00019  -7.773726e+02   2.399261e-01     00s06  00020  -7.774308e+02   1.053788e-01     00s06  00021  -7.776221e+02   2.774364e-01     00s07  00022  -7.778151e+02   2.435188e-01     00s07  00023  -7.779741e+02   8.857248e-02     00s07  00024  -7.780497e+02   2.188789e-02 
    00s08  00025  -7.780813e+02   1.987898e-02     00s08  00026  -7.781005e+02   1.234244e-03     00s08  00027  -7.780992e+02   1.322609e-01     00s09  00028  -7.781035e+02   2.970288e-02 
    00s09  00029  -7.781090e+02   4.835879e-04     00s09  00030  -7.781097e+02   3.084621e-04     00s10  00031  -7.781102e+02   3.143968e-04     00s10  00032  -7.781108e+02   6.589172e-04     00s10  00033  -7.781124e+02   5.156368e-04     00s10  00034  -7.780672e+02   4.999041e-01     00s11  00035  -7.781133e+02   7.886933e-03     00s11  00036  -7.781179e+02   5.062476e-03     00s11  00037  -7.781314e+02   6.071209e-03     00s12  00038  -7.781513e+02   3.127758e-02     00s12  00039  -7.781746e+02   6.344487e-03     00s12  00040  -7.782096e+02   1.865297e-02     00s13  00041  -7.781830e+02   1.981930e-01     00s13  00042  -7.782303e+02   6.002974e-02     00s13  00043  -7.781920e+02   3.885394e-01     00s14  00044  -7.782400e+02   3.280782e-02     00s14  00045  -7.782500e+02   1.100163e-02     00s14  00046  -7.782554e+02   1.127590e-03     00s14  00047  -7.782581e+02   2.271382e-03     00s15  00048  -7.782647e+02   5.421085e-03     00s15  00049  -7.782658e+02   6.849195e-02     00s15  00050  -7.782734e+02   2.853952e-03     00s16  00051  -7.782751e+02   6.768604e-04     00s16  00052  -7.782767e+02   1.748667e-03     00s16  00053  -7.782777e+02   5.471918e-04 
    00s17  00054  -7.782779e+02   2.602227e-05     00s17  00055  -7.782780e+02   2.180815e-05     00s17  00056  -7.782780e+02   3.361518e-04     00s18  00057  -7.782780e+02   1.319449e-04     00s18  00058  -7.782781e+02   3.134314e-05     00s18  00059  -7.782781e+02   2.232374e-05     00s19  00060  -7.782781e+02   1.578836e-05     00s19  00061  -7.782782e+02   4.788643e-05     00s19  00062  -7.782783e+02   3.275288e-04     00s19  00063  -7.782784e+02   6.763893e-04 
    00s26  00085  -7.782797e+02   6.644128e-06 
Runtime:     00s26
Optimization status: Converged

Optimization restart 1/1, f = -778.2797042065062
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '32', '100', '4'], [' ', ' ', '16', '100', '4'], [' ', ' ', '4', '2048', '4'], [' ', ' ', '20', '100', '4'], [' ', ' ', '4', '128', '4'], [' ', ' ', '8', '128', '4'], [' ', ' ', '50', '64', '4'], [' ', ' ', '8', '2048', '4'], [' ', ' ', '80', '64', '4'], [' ', ' ', '16', '128', '4'], [' ', ' ', '4', '80', '4'], [' ', ' ', '50', '80', '4'], [' ', ' ', '100', '32', '4'], [' ', ' ', '96', '32', '4'], [' ', ' ', '8', '100', '4'], [' ', ' ', '128', '20', '4'], [' ', ' ', '20', '80', '4'], [' ', ' ', '32', '64', '4'], [' ', ' ', '8', '80', '4'], [' ', ' ', '4', '100', '4'], [' ', ' ', '96', '50', '4'], [' ', ' ', '64', '80', '4'], [' ', ' ', '32', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '4', '64', '4'], [' ', ' ', '4', '50', '4'], [' ', ' ', '64', '64', '4'], [' ', ' ', '16', '80', '4'], [' ', ' ', '80', '50', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '4'], [' ', ' ', '20', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '4'], [' ', ' ', '16', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], [' ', ' ', '50', '50', '4'], [' ', ' ', '8', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '4'], [' ', ' ', '32', '50', '4'], [' ', ' ', '20', '50', '4'], [' ', ' ', '64', '32', '4'], [' ', ' ', '4', '32', '4'], [' ', ' ', '4', '20', '4'], [' ', ' ', '8', '50', '4'], [' ', ' ', '20', '32', '4'], [' ', ' ', '16', '32', '4'], [' ', ' ', '16', '20', '4'], [' ', ' ', '32', '32', '4'], [' ', ' ', '8', '32', '4'], [' ', ' ', '50', '32', '4'], [' ', ' ', '80', '20', '4'], [' ', ' ', '4', '16', '4']]
prob:  <search.SurrogateProblem object at 0x14a9129520a0>
0 OK
bestX [array([[0.6629, 0.6573, 0.2319, 0.5169, 0.038 ]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6662.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6662
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6662
........................................ [0.001379, 0.001276, 0.001228]
OUTPUT:%f [0.001379, 0.001276, 0.001228] 0.001252
store_func_eval
problem.constants
None
MLA iteration:  88
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -5.329792e+02           nan     00s00  00001  -5.329792e+02   1.296285e+04     00s00  00002  -6.231978e+02   4.771060e+03     00s01  00003  -6.875719e+02   4.657193e+02 
    00s01  00004  -7.065156e+02   4.997152e+02     00s01  00005  -7.619900e+02   6.391416e+01     00s01  00006  -7.752963e+02   1.905031e+01     00s02  00007  -7.766238e+02   6.438622e+00     00s02  00008  -7.776460e+02   3.529007e+00     00s02  00009  -7.799556e+02   1.700638e+00     00s03  00010  -7.810383e+02   1.188060e+00     00s03  00011  -7.812860e+02   1.468441e+00     00s03  00012  -7.814473e+02   1.180956e+01     00s04  00013  -7.816010e+02   1.501794e+00     00s04  00014  -7.819239e+02   9.517672e-01     00s04  00015  -7.815399e+02   7.965042e+00 
    00s05  00016  -7.819722e+02   4.771268e-01     00s05  00017  -7.817867e+02   1.776982e+00     00s05  00018  -7.819922e+02   1.106198e-01     00s06  00019  -7.820173e+02   9.996918e-02     00s06  00020  -7.822465e+02   5.241599e-01     00s06  00021  -7.825226e+02   4.920981e-01     00s06  00022  -7.827572e+02   6.768403e-02     00s07  00023  -7.828239e+02   1.107215e-01 
    00s07  00024  -7.828879e+02   3.850014e-02     00s07  00025  -7.829159e+02   6.264247e-03     00s08  00026  -7.829291e+02   9.608793e-04     00s08  00027  -7.829351e+02   4.707866e-04     00s08  00028  -7.829229e+02   1.116369e-01     00s09  00029  -7.829359e+02   4.240783e-03     00s09  00030  -7.829388e+02   1.249171e-03     00s09  00031  -7.829386e+02   3.800268e-02 
    00s10  00032  -7.829395e+02   8.763914e-03     00s10  00033  -7.829409e+02   1.459079e-03 
    00s10  00034  -7.829417e+02   3.434833e-04     00s11  00035  -7.829428e+02   2.213250e-04     00s11  00036  -7.829452e+02   4.611408e-04     00s11  00037  -7.829468e+02   2.240480e-02     00s11  00038  -7.829510e+02   4.344610e-03     00s12  00039  -7.829546e+02   1.011435e-03     00s12  00040  -7.829635e+02   9.307792e-03     00s12  00041  -7.829798e+02   5.298027e-02     00s13  00042  -7.830097e+02   6.943473e-02     00s13  00043  -7.829604e+02   5.276075e-01     00s13  00044  -7.830242e+02   1.063634e-01     00s14  00045  -7.830572e+02   1.077205e-02     00s14  00046  -7.830638e+02   4.102766e-02     00s14  00047  -7.830685e+02   9.880897e-03     00s15  00048  -7.830722e+02   4.697875e-03     00s15  00049  -7.830763e+02   4.276842e-03     00s15  00050  -7.830804e+02   3.998312e-04     00s15  00051  -7.830830e+02   1.380413e-04     00s16  00052  -7.830842e+02   5.580910e-04     00s16  00053  -7.830853e+02   1.816891e-03     00s16  00054  -7.830860e+02   3.184711e-04 
    00s17  00055  -7.830865e+02   2.454223e-05     00s17  00056  -7.830868e+02   8.916833e-05     00s17  00057  -7.830866e+02   6.453738e-03     00s18  00058  -7.830869e+02   4.967673e-04     00s18  00059  -7.830871e+02   2.710679e-05     00s18  00060  -7.830873e+02   1.161847e-05     00s19  00061  -7.830873e+02   1.492634e-05     00s19  00062  -7.830840e+02   1.498506e-02     00s19  00063  -7.830874e+02   3.989901e-05     00s22  00072  -7.830875e+02   1.232951e-05 
Runtime:     00s22
Optimization status: Converged

Optimization restart 1/1, f = -783.0875410680593
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '32', '100', '4'], [' ', ' ', '16', '100', '4'], [' ', ' ', '4', '2048', '4'], [' ', ' ', '20', '100', '4'], [' ', ' ', '4', '128', '4'], [' ', ' ', '8', '128', '4'], [' ', ' ', '50', '64', '4'], [' ', ' ', '8', '2048', '4'], [' ', ' ', '80', '64', '4'], [' ', ' ', '16', '128', '4'], [' ', ' ', '4', '80', '4'], [' ', ' ', '50', '80', '4'], [' ', ' ', '100', '32', '4'], [' ', ' ', '96', '32', '4'], [' ', ' ', '8', '100', '4'], [' ', ' ', '128', '20', '4'], [' ', ' ', '20', '80', '4'], [' ', ' ', '32', '64', '4'], [' ', ' ', '8', '80', '4'], [' ', ' ', '4', '100', '4'], [' ', ' ', '96', '50', '4'], [' ', ' ', '64', '80', '4'], [' ', ' ', '32', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '4', '64', '4'], [' ', ' ', '4', '50', '4'], [' ', ' ', '64', '64', '4'], [' ', ' ', '16', '80', '4'], [' ', ' ', '80', '50', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '4'], [' ', ' ', '20', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '4'], [' ', ' ', '16', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], [' ', ' ', '50', '50', '4'], [' ', ' ', '8', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '4'], [' ', ' ', '32', '50', '4'], [' ', ' ', '20', '50', '4'], [' ', ' ', '64', '32', '4'], [' ', ' ', '4', '32', '4'], [' ', ' ', '4', '20', '4'], [' ', ' ', '8', '50', '4'], [' ', ' ', '20', '32', '4'], [' ', ' ', '16', '32', '4'], [' ', ' ', '16', '20', '4'], [' ', ' ', '32', '32', '4'], [' ', ' ', '8', '32', '4'], [' ', ' ', '50', '32', '4'], [' ', ' ', '80', '20', '4'], [' ', ' ', '4', '16', '4'], [' ', ' ', '16', '50', '4']]
prob:  <search.SurrogateProblem object at 0x14a91286f280>
0 OK
bestX [array([[0.6464, 0.6419, 0.3965, 0.2752, 0.0655]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4707.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4707
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4707
........................................ [0.001309, 0.00123, 0.001189]
OUTPUT:%f [0.001309, 0.00123, 0.001189] 0.0012095
store_func_eval
problem.constants
None
MLA iteration:  89
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -5.375057e+02           nan     00s00  00001  -5.375057e+02   1.306639e+04     00s00  00002  -6.281470e+02   4.805140e+03     00s01  00003  -6.924505e+02   4.609178e+02     00s01  00004  -7.109438e+02   4.933346e+02 
    00s01  00005  -7.660886e+02   6.594826e+01     00s01  00006  -7.798085e+02   1.914605e+01     00s02  00007  -7.811378e+02   6.531731e+00     00s02  00008  -7.821711e+02   3.584751e+00     00s02  00009  -7.845483e+02   1.738026e+00     00s03  00010  -7.857014e+02   1.820246e+00     00s03  00011  -7.860610e+02   2.179853e+00     00s03  00012  -7.840052e+02   7.486106e+01     00s04  00013  -7.865427e+02   3.426911e-01     00s04  00014  -7.553390e+02   1.197622e+03     00s04  00015  -7.865844e+02   1.451388e-01     00s05  00016  -7.866175e+02   1.649055e-01 
    00s05  00017  -7.866533e+02   8.670774e-01     00s05  00018  -7.867288e+02   5.882178e-01     00s06  00019  -7.871702e+02   5.656092e-02     00s06  00020  -7.873375e+02   1.438791e-02     00s06  00021  -7.874488e+02   1.681308e-02     00s07  00022  -7.875060e+02   1.697555e-02     00s07  00023  -7.875453e+02   7.391331e-03     00s07  00024  -7.875510e+02   1.043710e-01 
    00s07  00025  -7.875680e+02   1.230221e-03     00s08  00026  -7.875692e+02   4.668176e-04     00s08  00027  -7.875707e+02   2.677596e-04     00s08  00028  -7.875708e+02   2.441861e-02     00s09  00029  -7.875734e+02   9.706242e-04 
    00s09  00030  -7.875745e+02   7.832949e-04     00s09  00031  -7.875756e+02   1.640026e-03     00s10  00032  -7.875760e+02   2.334071e-03     00s10  00033  -7.875764e+02   5.020326e-04     00s10  00034  -7.875766e+02   5.207163e-04     00s11  00035  -7.875776e+02   6.867802e-04     00s11  00036  -7.875794e+02   7.142080e-03     00s11  00037  -7.875828e+02   5.611955e-03     00s12  00038  -7.875932e+02   1.434913e-02     00s12  00039  -7.876360e+02   3.590011e-02     00s12  00040  -7.876549e+02   9.072138e-02     00s12  00041  -7.876698e+02   2.707492e-01     00s13  00042  -7.876911e+02   4.376376e-03     00s13  00043  -7.876949e+02   1.930765e-03     00s13  00044  -7.877031e+02   1.041384e-02     00s14  00045  -7.877097e+02   1.013094e-03     00s14  00046  -7.877116e+02   3.929048e-03     00s14  00047  -7.877048e+02   3.386425e-02     00s15  00048  -7.877145e+02   4.122562e-03     00s15  00049  -7.877163e+02   1.768228e-03     00s15  00050  -7.877172e+02   9.266213e-04     00s16  00051  -7.877191e+02   6.081414e-04     00s16  00052  -7.877199e+02   6.648102e-04 
    00s16  00053  -7.877204e+02   6.817438e-05     00s17  00054  -7.877209e+02   7.342554e-04     00s17  00055  -7.877212e+02   1.121522e-03     00s17  00056  -7.877215e+02   2.121606e-04     00s17  00057  -7.877218e+02   1.749143e-05     00s18  00058  -7.877219e+02   1.597179e-05     00s18  00059  -7.877220e+02   1.403229e-05     00s18  00060  -7.877220e+02   9.345116e-05 
    00s19  00061  -7.877221e+02   5.803306e-06     00s19  00062  -7.877221e+02   2.585998e-06     00s19  00063  -7.877221e+02   1.315408e-05     00s23  00074  -7.877222e+02   1.052892e-06 
Runtime:     00s23
Optimization status: Converged

Optimization restart 1/1, f = -787.722182303324
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '32', '100', '4'], [' ', ' ', '16', '100', '4'], [' ', ' ', '4', '2048', '4'], [' ', ' ', '20', '100', '4'], [' ', ' ', '4', '128', '4'], [' ', ' ', '8', '128', '4'], [' ', ' ', '50', '64', '4'], [' ', ' ', '8', '2048', '4'], [' ', ' ', '80', '64', '4'], [' ', ' ', '16', '128', '4'], [' ', ' ', '4', '80', '4'], [' ', ' ', '50', '80', '4'], [' ', ' ', '100', '32', '4'], [' ', ' ', '96', '32', '4'], [' ', ' ', '8', '100', '4'], [' ', ' ', '128', '20', '4'], [' ', ' ', '20', '80', '4'], [' ', ' ', '32', '64', '4'], [' ', ' ', '8', '80', '4'], [' ', ' ', '4', '100', '4'], [' ', ' ', '96', '50', '4'], [' ', ' ', '64', '80', '4'], [' ', ' ', '32', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '4', '64', '4'], [' ', ' ', '4', '50', '4'], [' ', ' ', '64', '64', '4'], [' ', ' ', '16', '80', '4'], [' ', ' ', '80', '50', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '4'], [' ', ' ', '20', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '4'], [' ', ' ', '16', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], [' ', ' ', '50', '50', '4'], [' ', ' ', '8', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '4'], [' ', ' ', '32', '50', '4'], [' ', ' ', '20', '50', '4'], [' ', ' ', '64', '32', '4'], [' ', ' ', '4', '32', '4'], [' ', ' ', '4', '20', '4'], [' ', ' ', '8', '50', '4'], [' ', ' ', '20', '32', '4'], [' ', ' ', '16', '32', '4'], [' ', ' ', '16', '20', '4'], [' ', ' ', '32', '32', '4'], [' ', ' ', '8', '32', '4'], [' ', ' ', '50', '32', '4'], [' ', ' ', '80', '20', '4'], [' ', ' ', '4', '16', '4'], [' ', ' ', '16', '50', '4'], [' ', ' ', '32', '20', '4']]
prob:  <search.SurrogateProblem object at 0x14a9126e5df0>
0 OK
bestX [array([[0.7837, 0.9639, 0.6097, 0.511 , 0.0285]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6912.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6912
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6912
........................................ [0.001349, 0.001306, 0.001259]
OUTPUT:%f [0.001349, 0.001306, 0.001259] 0.0012825
store_func_eval
problem.constants
None
MLA iteration:  90
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -5.424906e+02           nan     00s00  00001  -5.424906e+02   1.309919e+04     00s00  00002  -6.332177e+02   4.811885e+03     00s01  00003  -6.974160e+02   4.569842e+02     00s01  00004  -7.156099e+02   4.886667e+02 
    00s01  00005  -7.705821e+02   6.778018e+01     00s01  00006  -7.845501e+02   2.066011e+01     00s02  00007  -7.859114e+02   6.887569e+00     00s02  00008  -7.869359e+02   3.638224e+00     00s02  00009  -7.892495e+02   1.410584e+00     00s03  00010  -7.904484e+02   2.010958e+00     00s03  00011  -7.908057e+02   3.051220e+00     00s03  00012  -7.169356e+01   8.326436e+03     00s04  00013  -7.908955e+02   3.250649e+00     00s04  00014  -7.912053e+02   2.067458e+00     00s04  00015  -7.913229e+02   4.235361e-01 
    00s05  00016  -7.914576e+02   2.269339e-01     00s05  00017  -7.915597e+02   2.859195e-01     00s05  00018  -7.916165e+02   2.795178e-01     00s06  00019  -7.918021e+02   3.106092e-01     00s06  00020  -7.921057e+02   1.801074e-01     00s06  00021  -7.922474e+02   7.632653e-02 
    00s07  00022  -7.922953e+02   3.038336e-02     00s07  00023  -7.923381e+02   4.775075e-03     00s07  00024  -7.923577e+02   2.857707e-03     00s08  00025  -7.923767e+02   3.368960e-03     00s08  00026  -7.923825e+02   4.727786e-02 
    00s08  00027  -7.923867e+02   1.080218e-03     00s08  00028  -7.923880e+02   3.009233e-04     00s09  00029  -7.923938e+02   7.358616e-04     00s09  00030  -7.923915e+02   2.615653e-02     00s09  00031  -7.923950e+02   2.614461e-03     00s10  00032  -7.923980e+02   1.268052e-03     00s10  00033  -7.924004e+02   2.463644e-03     00s10  00034  -7.924035e+02   2.889267e-03     00s11  00035  -7.924096e+02   1.451697e-02     00s11  00036  -7.924167e+02   5.724566e-03     00s11  00037  -7.924319e+02   1.021622e-03     00s12  00038  -7.924486e+02   6.122715e-01     00s12  00039  -7.925066e+02   1.406220e-01     00s12  00040  -7.924991e+02   9.986185e-02     00s13  00041  -7.925142e+02   1.227037e-02     00s13  00042  -7.925177e+02   1.891471e-03     00s13  00043  -7.925195e+02   1.890809e-03     00s14  00044  -7.922441e+02   1.730849e+00     00s14  00045  -7.925203e+02   1.261797e-03 
    00s14  00046  -7.925228e+02   6.567787e-04     00s14  00047  -7.925194e+02   3.448691e-02     00s15  00048  -7.925238e+02   3.655006e-03     00s15  00049  -7.925266e+02   4.854497e-04     00s15  00050  -7.925284e+02   8.490177e-05     00s16  00051  -7.925295e+02   7.555683e-05     00s16  00052  -7.925297e+02   7.836935e-04 
    00s16  00053  -7.925308e+02   7.661257e-06     00s17  00054  -7.925310e+02   1.062022e-04     00s17  00055  -7.925289e+02   3.676599e-02     00s17  00056  -7.925311e+02   3.061340e-04     00s18  00057  -7.925313e+02   1.590407e-05     00s18  00058  -7.925315e+02   1.686685e-06     00s18  00059  -7.925316e+02   4.734027e-05     00s19  00060  -7.925316e+02   3.796942e-04     00s19  00061  -7.925317e+02   1.099593e-05     00s19  00062  -7.925318e+02   1.257305e-06     00s19  00063  -7.925318e+02   8.098066e-06 
    00s23  00074  -7.925319e+02   1.541549e-07 
Runtime:     00s23
Optimization status: Converged

Optimization restart 1/1, f = -792.5318560795903
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '32', '100', '4'], [' ', ' ', '16', '100', '4'], [' ', ' ', '4', '2048', '4'], [' ', ' ', '20', '100', '4'], [' ', ' ', '4', '128', '4'], [' ', ' ', '8', '128', '4'], [' ', ' ', '50', '64', '4'], [' ', ' ', '8', '2048', '4'], [' ', ' ', '80', '64', '4'], [' ', ' ', '16', '128', '4'], [' ', ' ', '4', '80', '4'], [' ', ' ', '50', '80', '4'], [' ', ' ', '100', '32', '4'], [' ', ' ', '96', '32', '4'], [' ', ' ', '8', '100', '4'], [' ', ' ', '128', '20', '4'], [' ', ' ', '20', '80', '4'], [' ', ' ', '32', '64', '4'], [' ', ' ', '8', '80', '4'], [' ', ' ', '4', '100', '4'], [' ', ' ', '96', '50', '4'], [' ', ' ', '64', '80', '4'], [' ', ' ', '32', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '4', '64', '4'], [' ', ' ', '4', '50', '4'], [' ', ' ', '64', '64', '4'], [' ', ' ', '16', '80', '4'], [' ', ' ', '80', '50', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '4'], [' ', ' ', '20', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '4'], [' ', ' ', '16', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], [' ', ' ', '50', '50', '4'], [' ', ' ', '8', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '4'], [' ', ' ', '32', '50', '4'], [' ', ' ', '20', '50', '4'], [' ', ' ', '64', '32', '4'], [' ', ' ', '4', '32', '4'], [' ', ' ', '4', '20', '4'], [' ', ' ', '8', '50', '4'], [' ', ' ', '20', '32', '4'], [' ', ' ', '16', '32', '4'], [' ', ' ', '16', '20', '4'], [' ', ' ', '32', '32', '4'], [' ', ' ', '8', '32', '4'], [' ', ' ', '50', '32', '4'], [' ', ' ', '80', '20', '4'], [' ', ' ', '4', '16', '4'], [' ', ' ', '16', '50', '4'], [' ', ' ', '32', '20', '4'], [' ', ' ', '64', '50', '4']]
prob:  <search.SurrogateProblem object at 0x14a9135d10a0>
0 OK
bestX [array([[0.5641, 0.6719, 0.1425, 0.2932, 0.0593]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2604.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2604
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2604
........................................ [0.001392, 0.001248, 0.00121]
OUTPUT:%f [0.001392, 0.001248, 0.00121] 0.001229
store_func_eval
problem.constants
None
MLA iteration:  91
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -5.473419e+02           nan     00s00  00001  -5.473419e+02   1.316966e+04     00s00  00002  -6.382226e+02   4.821856e+03     00s01  00003  -7.022957e+02   4.549083e+02     00s01  00004  -7.202134e+02   4.830347e+02     00s01  00005  -7.748273e+02   6.769319e+01 
    00s02  00006  -7.891709e+02   1.756032e+01     00s02  00007  -7.905074e+02   6.294321e+00     00s02  00008  -7.916430e+02   3.615931e+00     00s02  00009  -7.941846e+02   2.497949e+00     00s03  00010  -7.953300e+02   2.680703e+00     00s03  00011  -7.957399e+02   2.433838e+00     00s03  00012  -7.943581e+02   5.354567e+01     00s04  00013  -7.958912e+02   1.087532e+00     00s04  00014  -7.959002e+02   4.357015e-01     00s04  00015  -7.960746e+02   9.348521e-02     00s05  00016  -7.961510e+02   1.552102e-01 
    00s05  00017  -7.962691e+02   2.585749e-01     00s05  00018  -7.966314e+02   1.107959e-01     00s06  00019  -7.968253e+02   2.748714e-02     00s06  00020  -7.969205e+02   1.487425e-02     00s06  00021  -7.969710e+02   4.022070e-02     00s07  00022  -7.969267e+02   1.590109e+00     00s07  00023  -7.969843e+02   1.085358e-01     00s07  00024  -7.970109e+02   1.490896e-02     00s08  00025  -7.970266e+02   4.062302e-03 
    00s08  00026  -7.970330e+02   2.418599e-03     00s08  00027  -7.970356e+02   1.170058e-02     00s09  00028  -7.970394e+02   8.304676e-05     00s09  00029  -7.970402e+02   1.018447e-04 
    00s09  00030  -7.970408e+02   3.482911e-04     00s10  00031  -7.970407e+02   2.417681e-03     00s10  00032  -7.970411e+02   2.590720e-04     00s10  00033  -7.970413e+02   8.874521e-05     00s10  00034  -7.970416e+02   3.479123e-05     00s11  00035  -7.970419e+02   2.160665e-04     00s11  00036  -7.970418e+02   8.569239e-03     00s11  00037  -7.970421e+02   1.528251e-03     00s12  00038  -7.970427e+02   3.155846e-04     00s12  00039  -7.970440e+02   1.729618e-03     00s12  00040  -7.970474e+02   1.190583e-02     00s13  00041  -7.970531e+02   8.324420e-02     00s13  00042  -7.970533e+02   3.509381e-02     00s13  00043  -7.969362e+02   1.928641e-01     00s14  00044  -7.970565e+02   4.463664e-02     00s14  00045  -7.969538e+02   3.399536e-01     00s14  00046  -7.970576e+02   3.690924e-02     00s15  00047  -7.970602e+02   7.614631e-03     00s15  00048  -7.970613e+02   1.764863e-03     00s15  00049  -7.970622e+02   3.342410e-03     00s16  00050  -7.970627e+02   5.264674e-03     00s16  00051  -7.970658e+02   1.775196e-02     00s16  00052  -7.970733e+02   4.382192e-02     00s17  00053  -7.970869e+02   8.799087e-02     00s17  00054  -7.971041e+02   5.532281e-02     00s17  00055  -7.971284e+02   2.755934e-02     00s17  00056  -7.971416e+02   7.571163e-03     00s18  00057  -7.971472e+02   1.847452e-03     00s18  00058  -7.971515e+02   1.845493e-03     00s18  00059  -7.971401e+02   6.860929e-02     00s19  00060  -7.971529e+02   8.746581e-03     00s19  00061  -7.971562e+02   9.239584e-03     00s19  00062  -7.971586e+02   1.190109e-03 
    00s27  00086  -7.971640e+02   2.005173e-06 
Runtime:     00s27
Optimization status: Converged

Optimization restart 1/1, f = -797.163999902793
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '32', '100', '4'], [' ', ' ', '16', '100', '4'], [' ', ' ', '4', '2048', '4'], [' ', ' ', '20', '100', '4'], [' ', ' ', '4', '128', '4'], [' ', ' ', '8', '128', '4'], [' ', ' ', '50', '64', '4'], [' ', ' ', '8', '2048', '4'], [' ', ' ', '80', '64', '4'], [' ', ' ', '16', '128', '4'], [' ', ' ', '4', '80', '4'], [' ', ' ', '50', '80', '4'], [' ', ' ', '100', '32', '4'], [' ', ' ', '96', '32', '4'], [' ', ' ', '8', '100', '4'], [' ', ' ', '128', '20', '4'], [' ', ' ', '20', '80', '4'], [' ', ' ', '32', '64', '4'], [' ', ' ', '8', '80', '4'], [' ', ' ', '4', '100', '4'], [' ', ' ', '96', '50', '4'], [' ', ' ', '64', '80', '4'], [' ', ' ', '32', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '4', '64', '4'], [' ', ' ', '4', '50', '4'], [' ', ' ', '64', '64', '4'], [' ', ' ', '16', '80', '4'], [' ', ' ', '80', '50', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '4'], [' ', ' ', '20', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '4'], [' ', ' ', '16', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], [' ', ' ', '50', '50', '4'], [' ', ' ', '8', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '4'], [' ', ' ', '32', '50', '4'], [' ', ' ', '20', '50', '4'], [' ', ' ', '64', '32', '4'], [' ', ' ', '4', '32', '4'], [' ', ' ', '4', '20', '4'], [' ', ' ', '8', '50', '4'], [' ', ' ', '20', '32', '4'], [' ', ' ', '16', '32', '4'], [' ', ' ', '16', '20', '4'], [' ', ' ', '32', '32', '4'], [' ', ' ', '8', '32', '4'], [' ', ' ', '50', '32', '4'], [' ', ' ', '80', '20', '4'], [' ', ' ', '4', '16', '4'], [' ', ' ', '16', '50', '4'], [' ', ' ', '32', '20', '4'], [' ', ' ', '64', '50', '4'], [' ', ' ', '8', '20', '4']]
prob:  <search.SurrogateProblem object at 0x14a91293fb20>
0 OK
bestX [array([[0.854 , 0.6365, 0.7176, 0.3787, 0.0262]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1673.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1673
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1673
........................................ [0.001337, 0.001203, 0.001168]
OUTPUT:%f [0.001337, 0.001203, 0.001168] 0.0011855
store_func_eval
problem.constants
None
MLA iteration:  92
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -5.520760e+02           nan 
    00s00  00001  -5.520760e+02   1.320339e+04     00s00  00002  -6.430620e+02   4.830429e+03     00s01  00003  -7.070481e+02   4.554646e+02     00s01  00004  -7.249234e+02   4.840760e+02     00s01  00005  -7.795340e+02   6.806137e+01     00s02  00006  -7.940693e+02   1.667256e+01 
    00s02  00007  -7.953839e+02   6.099991e+00     00s02  00008  -7.965469e+02   3.551163e+00     00s03  00009  -7.990721e+02   2.732421e+00     00s03  00010  -8.001926e+02   2.880756e+00     00s03  00011  -8.003951e+02   3.537818e+00     00s04  00012  -8.004699e+02   3.036533e+00     00s04  00013  -7.168926e+02   3.327829e+03     00s04  00014  -8.005483e+02   2.713924e+00     00s05  00015  -8.007419e+02   1.793936e+00     00s05  00016  -8.008531e+02   2.108008e-01 
    00s05  00017  -8.009008e+02   7.795918e-02     00s06  00018  -8.009867e+02   3.150152e-01     00s06  00019  -8.010968e+02   5.363610e-01     00s06  00020  -8.014375e+02   2.796265e-01     00s07  00021  -8.016300e+02   3.284834e-02     00s07  00022  -8.017284e+02   1.296266e-02     00s07  00023  -8.017821e+02   5.571253e-02     00s08  00024  -8.018141e+02   5.129354e-03     00s08  00025  -8.018274e+02   8.514263e-03     00s08  00026  -8.018007e+02   1.798049e-01     00s09  00027  -8.018296e+02   6.166985e-03     00s09  00028  -8.018365e+02   5.241900e-04     00s09  00029  -8.018399e+02   2.722851e-03 
    00s10  00030  -8.018415e+02   4.227794e-03     00s10  00031  -8.018423e+02   5.338030e-04     00s11  00032  -8.018426e+02   8.816963e-05     00s11  00033  -8.018427e+02   7.953625e-05     00s11  00034  -8.018442e+02   9.229050e-04     00s12  00035  -8.018463e+02   2.065637e-04     00s12  00036  -8.018469e+02   2.020208e-04     00s12  00037  -8.018506e+02   3.890120e-03     00s13  00038  -8.018585e+02   1.955817e-02     00s13  00039  -8.018801e+02   6.610196e-02     00s13  00040  -8.018966e+02   9.582118e-02     00s14  00041  -8.006479e+02   4.293569e+00     00s14  00042  -8.018991e+02   1.011254e-01     00s14  00043  -8.019286e+02   1.245942e-02     00s15  00044  -8.019415e+02   1.462046e-02     00s15  00045  -8.019493e+02   5.859224e-03     00s15  00046  -8.019568e+02   3.271122e-03     00s16  00047  -8.019602e+02   2.360303e-03     00s16  00048  -8.019637e+02   4.406695e-03 
    00s16  00049  -8.019665e+02   6.588248e-04     00s17  00050  -8.019679e+02   9.835716e-04     00s17  00051  -8.019693e+02   9.538747e-05     00s17  00052  -8.019702e+02   9.709075e-05     00s18  00053  -8.019705e+02   6.126333e-03     00s18  00054  -8.019711e+02   4.491454e-04     00s18  00055  -8.019714e+02   7.918322e-05     00s19  00056  -8.019716e+02   1.860888e-04 
    00s19  00057  -8.019717e+02   7.840741e-05     00s19  00058  -8.019718e+02   1.919561e-04 
    00s24  00071  -8.019721e+02   1.271273e-07 
Runtime:     00s24
Optimization status: Converged

Optimization restart 1/1, f = -801.972062089757
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '32', '100', '4'], [' ', ' ', '16', '100', '4'], [' ', ' ', '4', '2048', '4'], [' ', ' ', '20', '100', '4'], [' ', ' ', '4', '128', '4'], [' ', ' ', '8', '128', '4'], [' ', ' ', '50', '64', '4'], [' ', ' ', '8', '2048', '4'], [' ', ' ', '80', '64', '4'], [' ', ' ', '16', '128', '4'], [' ', ' ', '4', '80', '4'], [' ', ' ', '50', '80', '4'], [' ', ' ', '100', '32', '4'], [' ', ' ', '96', '32', '4'], [' ', ' ', '8', '100', '4'], [' ', ' ', '128', '20', '4'], [' ', ' ', '20', '80', '4'], [' ', ' ', '32', '64', '4'], [' ', ' ', '8', '80', '4'], [' ', ' ', '4', '100', '4'], [' ', ' ', '96', '50', '4'], [' ', ' ', '64', '80', '4'], [' ', ' ', '32', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '4', '64', '4'], [' ', ' ', '4', '50', '4'], [' ', ' ', '64', '64', '4'], [' ', ' ', '16', '80', '4'], [' ', ' ', '80', '50', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '4'], [' ', ' ', '20', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '4'], [' ', ' ', '16', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], [' ', ' ', '50', '50', '4'], [' ', ' ', '8', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '4'], [' ', ' ', '32', '50', '4'], [' ', ' ', '20', '50', '4'], [' ', ' ', '64', '32', '4'], [' ', ' ', '4', '32', '4'], [' ', ' ', '4', '20', '4'], [' ', ' ', '8', '50', '4'], [' ', ' ', '20', '32', '4'], [' ', ' ', '16', '32', '4'], [' ', ' ', '16', '20', '4'], [' ', ' ', '32', '32', '4'], [' ', ' ', '8', '32', '4'], [' ', ' ', '50', '32', '4'], [' ', ' ', '80', '20', '4'], [' ', ' ', '4', '16', '4'], [' ', ' ', '16', '50', '4'], [' ', ' ', '32', '20', '4'], [' ', ' ', '64', '50', '4'], [' ', ' ', '8', '20', '4'], [' ', ' ', '80', '32', '4']]
prob:  <search.SurrogateProblem object at 0x14a91286d460>
0 OK
bestX [array([[0.8495, 0.793 , 0.4774, 0.3454, 0.0187]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5889.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5889
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5889
........................................ [0.001327, 0.001233, 0.001174]
OUTPUT:%f [0.001327, 0.001233, 0.001174] 0.0012035
store_func_eval
problem.constants
None
MLA iteration:  93
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -5.568154e+02           nan     00s00  00001  -5.568154e+02   1.329589e+04     00s00  00002  -6.480345e+02   4.848742e+03     00s01  00003  -7.119315e+02   4.516159e+02     00s01  00004  -7.294406e+02   4.780179e+02     00s01  00005  -7.839299e+02   7.059515e+01     00s02  00006  -7.987525e+02   1.858342e+01 
    00s02  00007  -8.001158e+02   6.548685e+00     00s02  00008  -8.012417e+02   3.630709e+00     00s02  00009  -8.037168e+02   2.104579e+00     00s03  00010  -8.048897e+02   2.813232e+00     00s03  00011  -8.054101e+02   2.148241e+00     00s03  00012  -5.406199e+02   2.892140e+02     00s04  00013  -8.054398e+02   1.963315e+00     00s04  00014  -8.055552e+02   9.940879e-01     00s04  00015  -8.056688e+02   3.604637e-01     00s05  00016  -8.057101e+02   1.007150e-01     00s05  00017  -8.057580e+02   1.809496e-01     00s05  00018  -8.058558e+02   5.573684e-01     00s06  00019  -8.060688e+02   9.404006e-01 
    00s06  00020  -8.063580e+02   2.887829e-01     00s06  00021  -8.065139e+02   4.980466e-03     00s07  00022  -8.065640e+02   4.210249e-02     00s07  00023  -8.065896e+02   8.242291e-02     00s07  00024  -8.066060e+02   5.440983e-02 
    00s08  00025  -8.066233e+02   6.741189e-02     00s08  00026  -8.066324e+02   1.369473e-02     00s08  00027  -8.066357e+02   1.972216e-04     00s09  00028  -8.066367e+02   7.206387e-04 
    00s09  00029  -8.066374e+02   1.839771e-04     00s09  00030  -8.066377e+02   1.686460e-04     00s10  00031  -8.066385e+02   8.091412e-04     00s10  00032  -8.066396e+02   6.469843e-04     00s10  00033  -8.066411e+02   4.338345e-03     00s11  00034  -8.066423e+02   1.160138e-03     00s11  00035  -8.066437e+02   2.809002e-04     00s11  00036  -8.066450e+02   4.110738e-04     00s12  00037  -8.066305e+02   1.449372e-01     00s12  00038  -8.066454e+02   1.981009e-03     00s12  00039  -8.066475e+02   1.012007e-03     00s13  00040  -8.066538e+02   1.140281e-02     00s13  00041  -8.066777e+02   8.302877e-02     00s13  00042  -8.067145e+02   4.085291e-02     00s14  00043  -8.065120e+02   3.509894e-01     00s14  00044  -8.067219e+02   9.806402e-02     00s14  00045  -8.067443e+02   2.791527e-03     00s14  00046  -8.067494e+02   6.050349e-03     00s15  00047  -8.067560e+02   4.210014e-03     00s15  00048  -8.067596e+02   5.375132e-03     00s15  00049  -8.067623e+02   9.328822e-04     00s16  00050  -8.067650e+02   6.146538e-04     00s16  00051  -8.067664e+02   1.501964e-03     00s16  00052  -8.067573e+02   8.862008e-02     00s17  00053  -8.067667e+02   7.920164e-04     00s17  00054  -8.067680e+02   1.798751e-04 
    00s17  00055  -8.067689e+02   4.927550e-06     00s18  00056  -8.067693e+02   2.725990e-05     00s18  00057  -8.067658e+02   2.517230e-02     00s18  00058  -8.067693e+02   8.521074e-05     00s19  00059  -8.067695e+02   3.779903e-05     00s19  00060  -8.067698e+02   8.659324e-06     00s19  00061  -8.067700e+02   5.787801e-04     00s21  00067  -8.067702e+02   1.674596e-05 
Runtime:     00s21
Optimization status: Converged

Optimization restart 1/1, f = -806.770209085564
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '32', '100', '4'], [' ', ' ', '16', '100', '4'], [' ', ' ', '4', '2048', '4'], [' ', ' ', '20', '100', '4'], [' ', ' ', '4', '128', '4'], [' ', ' ', '8', '128', '4'], [' ', ' ', '50', '64', '4'], [' ', ' ', '8', '2048', '4'], [' ', ' ', '80', '64', '4'], [' ', ' ', '16', '128', '4'], [' ', ' ', '4', '80', '4'], [' ', ' ', '50', '80', '4'], [' ', ' ', '100', '32', '4'], [' ', ' ', '96', '32', '4'], [' ', ' ', '8', '100', '4'], [' ', ' ', '128', '20', '4'], [' ', ' ', '20', '80', '4'], [' ', ' ', '32', '64', '4'], [' ', ' ', '8', '80', '4'], [' ', ' ', '4', '100', '4'], [' ', ' ', '96', '50', '4'], [' ', ' ', '64', '80', '4'], [' ', ' ', '32', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '4', '64', '4'], [' ', ' ', '4', '50', '4'], [' ', ' ', '64', '64', '4'], [' ', ' ', '16', '80', '4'], [' ', ' ', '80', '50', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '4'], [' ', ' ', '20', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '4'], [' ', ' ', '16', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], [' ', ' ', '50', '50', '4'], [' ', ' ', '8', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '4'], [' ', ' ', '32', '50', '4'], [' ', ' ', '20', '50', '4'], [' ', ' ', '64', '32', '4'], [' ', ' ', '4', '32', '4'], [' ', ' ', '4', '20', '4'], [' ', ' ', '8', '50', '4'], [' ', ' ', '20', '32', '4'], [' ', ' ', '16', '32', '4'], [' ', ' ', '16', '20', '4'], [' ', ' ', '32', '32', '4'], [' ', ' ', '8', '32', '4'], [' ', ' ', '50', '32', '4'], [' ', ' ', '80', '20', '4'], [' ', ' ', '4', '16', '4'], [' ', ' ', '16', '50', '4'], [' ', ' ', '32', '20', '4'], [' ', ' ', '64', '50', '4'], [' ', ' ', '8', '20', '4'], [' ', ' ', '80', '32', '4'], [' ', ' ', '50', '20', '4']]
prob:  <search.SurrogateProblem object at 0x14a91802f6a0>
0 OK
bestX [array([[0.9953, 0.9706, 0.4876, 0.2247, 0.0453]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2035.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2035
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2035
........................................ [0.001341, 0.001251, 0.001196]
OUTPUT:%f [0.001341, 0.001251, 0.001196] 0.0012235
store_func_eval
problem.constants
None
MLA iteration:  94
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -5.604406e+02           nan     00s00  00001  -5.604406e+02   1.345272e+04     00s00  00002  -6.521699e+02   4.892726e+03     00s01  00003  -7.154630e+02   4.285433e+02     00s01  00004  -7.315568e+02   4.562221e+02     00s01  00005  -7.862132e+02   9.512539e+01 
    00s02  00006  -7.994459e+02   1.083320e+02     00s02  00007  -8.039175e+02   1.322091e+01     00s02  00008  -8.054701e+02   4.426374e+00     00s03  00009  -8.067033e+02   3.339420e+00     00s03  00010  -8.084125e+02   1.291828e+00     00s03  00011  -8.051215e+02   2.980480e+01     00s04  00012  -8.088910e+02   2.902682e-01     00s04  00013  -8.089949e+02   3.974333e-01     00s04  00014  -8.091342e+02   4.230290e-01     00s05  00015  -8.094405e+02   7.772928e-01     00s05  00016  -8.098516e+02   4.021288e-01     00s05  00017  -8.106387e+02   2.765753e+00 
    00s06  00018  -6.626457e+02   1.201296e+04     00s06  00019  -8.108781e+02   1.343355e+00     00s06  00020  -8.112030e+02   8.828401e-01     00s07  00021  -8.062487e+02   3.242996e+01 
    00s07  00022  -8.113145e+02   5.314918e-02     00s07  00023  -8.113191e+02   1.471028e-02     00s07  00024  -8.113219e+02   4.946748e-03     00s08  00025  -8.113282e+02   2.864808e-02     00s08  00026  -8.113411e+02   1.014343e-01     00s08  00027  -8.113634e+02   1.459706e-01     00s09  00028  -8.113860e+02   5.574622e-02 
    00s09  00029  -8.114068e+02   8.739964e-03     00s09  00030  -8.114125e+02   4.657375e-03     00s10  00031  -8.114164e+02   1.070854e-02     00s10  00032  -8.114206e+02   1.360844e-02     00s10  00033  -8.114257e+02   6.135231e-03     00s11  00034  -8.114275e+02   2.964445e-03 
    00s11  00035  -8.114281e+02   4.179677e-04     00s11  00036  -8.114285e+02   1.149885e-04     00s12  00037  -8.114298e+02   2.200602e-03     00s12  00038  -8.114304e+02   2.672784e-03     00s12  00039  -8.114238e+02   6.760966e-02     00s13  00040  -8.114305e+02   1.127252e-03     00s13  00041  -8.114308e+02   1.785901e-04     00s13  00042  -8.114309e+02   8.371474e-05 
    00s14  00043  -8.114310e+02   6.787623e-05     00s14  00044  -8.114326e+02   5.436519e-04     00s14  00045  -8.114358e+02   2.194426e-03     00s15  00046  -8.114364e+02   5.961208e-02     00s15  00047  -8.114394e+02   1.563943e-02     00s15  00048  -8.114482e+02   1.195331e-02     00s16  00049  -8.114787e+02   1.998893e-02     00s16  00050  -8.114945e+02   3.739107e-02     00s16  00051  -8.115337e+02   3.088944e-02     00s17  00052  -8.115465e+02   1.708039e-02     00s17  00053  -8.115265e+02   4.017852e-01     00s17  00054  -8.115490e+02   3.453815e-03     00s18  00055  -8.115533e+02   5.261771e-03     00s18  00056  -8.115566e+02   4.437392e-04     00s18  00057  -8.115594e+02   8.126483e-04     00s19  00058  -8.115628e+02   6.953959e-04     00s19  00059  -8.115645e+02   2.370387e-03     00s19  00060  -8.115662e+02   1.095724e-04 
    00s28  00088  -8.115692e+02   8.188133e-07 
Runtime:     00s28
Optimization status: Converged

Optimization restart 1/1, f = -811.5691980818249
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '32', '100', '4'], [' ', ' ', '16', '100', '4'], [' ', ' ', '4', '2048', '4'], [' ', ' ', '20', '100', '4'], [' ', ' ', '4', '128', '4'], [' ', ' ', '8', '128', '4'], [' ', ' ', '50', '64', '4'], [' ', ' ', '8', '2048', '4'], [' ', ' ', '80', '64', '4'], [' ', ' ', '16', '128', '4'], [' ', ' ', '4', '80', '4'], [' ', ' ', '50', '80', '4'], [' ', ' ', '100', '32', '4'], [' ', ' ', '96', '32', '4'], [' ', ' ', '8', '100', '4'], [' ', ' ', '128', '20', '4'], [' ', ' ', '20', '80', '4'], [' ', ' ', '32', '64', '4'], [' ', ' ', '8', '80', '4'], [' ', ' ', '4', '100', '4'], [' ', ' ', '96', '50', '4'], [' ', ' ', '64', '80', '4'], [' ', ' ', '32', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '4', '64', '4'], [' ', ' ', '4', '50', '4'], [' ', ' ', '64', '64', '4'], [' ', ' ', '16', '80', '4'], [' ', ' ', '80', '50', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '4'], [' ', ' ', '20', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '4'], [' ', ' ', '16', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], [' ', ' ', '50', '50', '4'], [' ', ' ', '8', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '4'], [' ', ' ', '32', '50', '4'], [' ', ' ', '20', '50', '4'], [' ', ' ', '64', '32', '4'], [' ', ' ', '4', '32', '4'], [' ', ' ', '4', '20', '4'], [' ', ' ', '8', '50', '4'], [' ', ' ', '20', '32', '4'], [' ', ' ', '16', '32', '4'], [' ', ' ', '16', '20', '4'], [' ', ' ', '32', '32', '4'], [' ', ' ', '8', '32', '4'], [' ', ' ', '50', '32', '4'], [' ', ' ', '80', '20', '4'], [' ', ' ', '4', '16', '4'], [' ', ' ', '16', '50', '4'], [' ', ' ', '32', '20', '4'], [' ', ' ', '64', '50', '4'], [' ', ' ', '8', '20', '4'], [' ', ' ', '80', '32', '4'], [' ', ' ', '50', '20', '4'], [' ', ' ', '50', '16', '4']]
prob:  <search.SurrogateProblem object at 0x14a912e583d0>
0 OK
bestX [array([[0.973 , 0.5268, 0.5188, 0.1392, 0.0539]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1232.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1232
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1232
........................................ [0.015161, 0.015091, 0.015015]
OUTPUT:%f [0.015161, 0.015091, 0.015015] 0.015053
store_func_eval
problem.constants
None
MLA iteration:  95
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -5.638092e+02           nan     00s00  00001  -5.638092e+02   1.362686e+04     00s00  00002  -6.560362e+02   4.929471e+03     00s01  00003  -7.185873e+02   3.916802e+02 
    00s01  00004  -7.323218e+02   3.869450e+02     00s01  00005  -7.804695e+02   1.277341e+02     00s02  00006  -7.822341e+02   7.044195e+02     00s02  00007  -7.972674e+02   3.261144e+01     00s02  00008  -7.992919e+02   6.816402e+01     00s03  00009  -8.018107e+02   5.460955e+00     00s03  00010  -8.029043e+02   5.231548e+00     00s03  00011  -8.050475e+02   1.288188e+00     00s04  00012  -8.057280e+02   8.679848e+00     00s04  00013  -8.065430e+02   6.640884e-01 
    00s04  00014  -8.068622e+02   1.220098e-01     00s05  00015  -8.069278e+02   2.021395e-01     00s05  00016  -8.069747e+02   1.286092e-01     00s05  00017  -8.071934e+02   6.219850e-02 
    00s06  00018  -8.073646e+02   6.160570e-02     00s06  00019  -8.075635e+02   6.455012e-02     00s06  00020  -8.076196e+02   8.599426e-01     00s07  00021  -8.077478e+02   3.921326e-02     00s07  00022  -8.077804e+02   1.448696e-02     00s07  00023  -8.078090e+02   2.561203e-02     00s08  00024  -8.078473e+02   2.392433e-02     00s08  00025  -8.079018e+02   2.022941e-02     00s08  00026  -8.079703e+02   5.630642e-02     00s08  00027  -8.080508e+02   4.963994e-02     00s09  00028  -8.080980e+02   6.669652e-02     00s09  00029  -8.081110e+02   1.989230e-02     00s09  00030  -8.081259e+02   2.760488e-03 
    00s10  00031  -8.081410e+02   2.422522e-03     00s10  00032  -8.081481e+02   1.376863e-03     00s10  00033  -8.080725e+02   4.621094e-01     00s11  00034  -8.081486e+02   2.184262e-03     00s11  00035  -8.081536e+02   1.102337e-03     00s11  00036  -8.081564e+02   8.244382e-04     00s12  00037  -8.081591e+02   2.108616e-03     00s12  00038  -8.081615e+02   6.862292e-04 
    00s12  00039  -8.081647e+02   3.237773e-05     00s13  00040  -8.081656e+02   6.793958e-04     00s13  00041  -8.081624e+02   2.402803e-02     00s13  00042  -8.081658e+02   1.762639e-04     00s14  00043  -8.081660e+02   3.257625e-05 
    00s14  00044  -8.081662e+02   4.188919e-06     00s14  00045  -8.081663e+02   2.479193e-06     00s15  00046  -8.081663e+02   1.277593e-04     00s15  00047  -8.081663e+02   9.252456e-06     00s15  00048  -8.081663e+02   3.568757e-06     00s16  00049  -8.081663e+02   2.345735e-08     00s16  00050  -8.081663e+02   2.345735e-08 
Runtime:     00s16
Optimization status: Converged

Optimization restart 1/1, f = -808.1662979083937
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '32', '100', '4'], [' ', ' ', '16', '100', '4'], [' ', ' ', '4', '2048', '4'], [' ', ' ', '20', '100', '4'], [' ', ' ', '4', '128', '4'], [' ', ' ', '8', '128', '4'], [' ', ' ', '50', '64', '4'], [' ', ' ', '8', '2048', '4'], [' ', ' ', '80', '64', '4'], [' ', ' ', '16', '128', '4'], [' ', ' ', '4', '80', '4'], [' ', ' ', '50', '80', '4'], [' ', ' ', '100', '32', '4'], [' ', ' ', '96', '32', '4'], [' ', ' ', '8', '100', '4'], [' ', ' ', '128', '20', '4'], [' ', ' ', '20', '80', '4'], [' ', ' ', '32', '64', '4'], [' ', ' ', '8', '80', '4'], [' ', ' ', '4', '100', '4'], [' ', ' ', '96', '50', '4'], [' ', ' ', '64', '80', '4'], [' ', ' ', '32', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '4', '64', '4'], [' ', ' ', '4', '50', '4'], [' ', ' ', '64', '64', '4'], [' ', ' ', '16', '80', '4'], [' ', ' ', '80', '50', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '4'], [' ', ' ', '20', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '4'], [' ', ' ', '16', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], [' ', ' ', '50', '50', '4'], [' ', ' ', '8', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '4'], [' ', ' ', '32', '50', '4'], [' ', ' ', '20', '50', '4'], [' ', ' ', '64', '32', '4'], [' ', ' ', '4', '32', '4'], [' ', ' ', '4', '20', '4'], [' ', ' ', '8', '50', '4'], [' ', ' ', '20', '32', '4'], [' ', ' ', '16', '32', '4'], [' ', ' ', '16', '20', '4'], [' ', ' ', '32', '32', '4'], [' ', ' ', '8', '32', '4'], [' ', ' ', '50', '32', '4'], [' ', ' ', '80', '20', '4'], [' ', ' ', '4', '16', '4'], [' ', ' ', '16', '50', '4'], [' ', ' ', '32', '20', '4'], [' ', ' ', '64', '50', '4'], [' ', ' ', '8', '20', '4'], [' ', ' ', '80', '32', '4'], [' ', ' ', '50', '20', '4'], [' ', ' ', '50', '16', '4'], [' ', ' ', '50', '8', '4']]
prob:  <search.SurrogateProblem object at 0x14a912a54160>
0 OK
bestX [array([[0.9693, 0.4824, 0.9419, 0.8042, 0.0483]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4675.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4675
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4675
........................................ [0.003181, 0.003014, 0.003009]
OUTPUT:%f [0.003181, 0.003014, 0.003009] 0.0030115000000000003
store_func_eval
problem.constants
None
MLA iteration:  96
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -5.674898e+02           nan     00s00  00001  -5.674898e+02   1.361674e+04     00s00  00002  -6.598033e+02   4.977278e+03     00s01  00003  -7.235845e+02   4.055315e+02     00s01  00004  -7.381133e+02   4.027254e+02     00s01  00005  -7.871278e+02   1.024253e+02 
    00s02  00006  -8.018130e+02   1.056369e+02     00s02  00007  -8.064393e+02   1.009096e+01     00s02  00008  -8.076851e+02   3.629062e+00     00s03  00009  -8.085901e+02   2.346123e+00     00s03  00010  -8.097123e+02   1.446257e+00     00s03  00011  -6.327106e+02   6.380488e+04     00s04  00012  -8.102863e+02   3.231489e+00     00s04  00013  -8.105758e+02   4.602885e-01     00s04  00014  -8.101964e+02   4.513046e+00     00s05  00015  -8.107477e+02   7.179543e-01     00s05  00016  -8.108891e+02   2.292497e-01     00s05  00017  -8.110137e+02   5.717347e-01 
    00s06  00018  -8.111770e+02   8.673658e-01     00s06  00019  -8.115960e+02   2.446665e-01     00s06  00020  -8.121333e+02   1.843431e-01     00s07  00021  -8.125952e+02   3.830194e-01     00s07  00022  -8.128834e+02   4.073266e-01     00s07  00023  -8.131305e+02   1.043743e-01     00s08  00024  -8.132296e+02   2.060219e-02     00s08  00025  -8.132860e+02   1.062711e-02     00s08  00026  -8.133196e+02   7.173807e-03     00s09  00027  -8.133427e+02   4.991959e-03     00s09  00028  -8.127911e+02   7.658973e+00 
    00s09  00029  -8.133568e+02   6.727188e-02     00s09  00030  -8.133820e+02   4.092505e-02     00s10  00031  -8.134027e+02   1.314732e-02     00s10  00032  -8.134058e+02   6.081282e-04     00s10  00033  -8.134063e+02   4.737286e-04 
    00s11  00034  -8.134071e+02   1.169631e-03     00s11  00035  -8.134086e+02   1.806408e-03     00s11  00036  -8.134166e+02   6.897565e-03     00s12  00037  -8.134315e+02   2.171650e-02     00s12  00038  -8.134658e+02   4.251516e-02     00s12  00039  -8.135105e+02   5.506718e-02     00s13  00040  -7.513655e+02   5.972412e+03     00s13  00041  -8.125645e+02   1.466720e+01     00s13  00042  -8.135236e+02   6.454604e-02     00s14  00043  -8.135589e+02   2.803135e-02 
    00s14  00044  -8.135921e+02   2.452115e-04     00s14  00045  -8.136048e+02   1.385392e-03     00s15  00046  -8.135771e+02   7.678039e-02     00s15  00047  -8.136084e+02   2.189219e-03     00s15  00048  -8.136203e+02   5.764573e-04     00s16  00049  -8.136273e+02   4.934082e-05 
    00s16  00050  -8.136321e+02   3.575114e-05     00s16  00051  -8.136129e+02   4.926062e-02     00s17  00052  -8.136325e+02   4.659939e-04     00s17  00053  -8.136355e+02   2.974356e-05     00s17  00054  -8.136376e+02   3.177664e-06     00s18  00055  -8.136376e+02   1.389298e-02     00s18  00056  -8.136381e+02   3.249358e-03     00s18  00057  -8.136394e+02   2.200231e-04     00s19  00058  -8.136401e+02   6.619461e-05     00s19  00059  -8.136407e+02   7.227739e-05     00s19  00060  -8.135546e+02   2.372229e-01 
    00s26  00082  -8.136418e+02   7.363551e-07 
Runtime:     00s26
Optimization status: Converged

Optimization restart 1/1, f = -813.6418219874002
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '32', '100', '4'], [' ', ' ', '16', '100', '4'], [' ', ' ', '4', '2048', '4'], [' ', ' ', '20', '100', '4'], [' ', ' ', '4', '128', '4'], [' ', ' ', '8', '128', '4'], [' ', ' ', '50', '64', '4'], [' ', ' ', '8', '2048', '4'], [' ', ' ', '80', '64', '4'], [' ', ' ', '16', '128', '4'], [' ', ' ', '4', '80', '4'], [' ', ' ', '50', '80', '4'], [' ', ' ', '100', '32', '4'], [' ', ' ', '96', '32', '4'], [' ', ' ', '8', '100', '4'], [' ', ' ', '128', '20', '4'], [' ', ' ', '20', '80', '4'], [' ', ' ', '32', '64', '4'], [' ', ' ', '8', '80', '4'], [' ', ' ', '4', '100', '4'], [' ', ' ', '96', '50', '4'], [' ', ' ', '64', '80', '4'], [' ', ' ', '32', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '4', '64', '4'], [' ', ' ', '4', '50', '4'], [' ', ' ', '64', '64', '4'], [' ', ' ', '16', '80', '4'], [' ', ' ', '80', '50', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '4'], [' ', ' ', '20', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '4'], [' ', ' ', '16', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], [' ', ' ', '50', '50', '4'], [' ', ' ', '8', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '4'], [' ', ' ', '32', '50', '4'], [' ', ' ', '20', '50', '4'], [' ', ' ', '64', '32', '4'], [' ', ' ', '4', '32', '4'], [' ', ' ', '4', '20', '4'], [' ', ' ', '8', '50', '4'], [' ', ' ', '20', '32', '4'], [' ', ' ', '16', '32', '4'], [' ', ' ', '16', '20', '4'], [' ', ' ', '32', '32', '4'], [' ', ' ', '8', '32', '4'], [' ', ' ', '50', '32', '4'], [' ', ' ', '80', '20', '4'], [' ', ' ', '4', '16', '4'], [' ', ' ', '16', '50', '4'], [' ', ' ', '32', '20', '4'], [' ', ' ', '64', '50', '4'], [' ', ' ', '8', '20', '4'], [' ', ' ', '80', '32', '4'], [' ', ' ', '50', '20', '4'], [' ', ' ', '50', '16', '4'], [' ', ' ', '50', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '100', '4']]
prob:  <search.SurrogateProblem object at 0x14a912a3e040>
0 OK
bestX [array([[0.5287, 0.3141, 0.4431, 0.9953, 0.018 ]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7183.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7183
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7183
........................................ [0.002965, 0.002768, 0.002746]
OUTPUT:%f [0.002965, 0.002768, 0.002746] 0.002757
store_func_eval
problem.constants
None
MLA iteration:  97
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -5.714133e+02           nan     00s00  00001  -5.714133e+02   1.377713e+04     00s00  00002  -6.641487e+02   5.013823e+03     00s01  00003  -7.280882e+02   4.073672e+02     00s01  00004  -7.425188e+02   4.004944e+02 
    00s01  00005  -7.916252e+02   1.052807e+02     00s02  00006  -8.057783e+02   1.231616e+02     00s02  00007  -8.110691e+02   1.068471e+01     00s02  00008  -8.123784e+02   3.789507e+00     00s03  00009  -8.132965e+02   2.419901e+00     00s03  00010  -8.143493e+02   1.694604e+00     00s03  00011  -7.327727e+02   1.833858e+04     00s04  00012  -8.151002e+02   3.153806e+00     00s04  00013  -8.154541e+02   2.592803e-01 
    00s04  00014  -8.156193e+02   1.222288e-01     00s05  00015  -8.157736e+02   2.834967e-01     00s05  00016  -8.160168e+02   5.452249e-01     00s05  00017  -6.013603e+02   1.230360e+04     00s06  00018  -8.166610e+02   3.993305e-01     00s06  00019  -8.168397e+02   2.445667e-01     00s06  00020  -8.167866e+02   2.676622e-01     00s07  00021  -8.168637e+02   7.764037e-02     00s07  00022  -8.168914e+02   4.626029e-02     00s07  00023  -8.170377e+02   6.131809e-02     00s08  00024  -8.170322e+02   5.777335e-01     00s08  00025  -8.170574e+02   7.567171e-02 
    00s08  00026  -8.170717e+02   2.125379e-02     00s09  00027  -8.170796e+02   6.512439e-03     00s09  00028  -8.170876e+02   5.160899e-03     00s09  00029  -8.171221e+02   1.101990e-02     00s10  00030  -8.172058e+02   2.941970e-02     00s10  00031  -8.173977e+02   1.174859e-01     00s10  00032  -8.174188e+02   2.197716e-01     00s11  00033  -8.174778e+02   5.193877e-03     00s11  00034  -8.174842e+02   6.088068e-03     00s11  00035  -8.174939e+02   1.685375e-02     00s12  00036  -8.174931e+02   2.375013e-02     00s12  00037  -8.174976e+02   9.164084e-04 
    00s12  00038  -8.175047e+02   3.488376e-03     00s13  00039  -8.175176e+02   2.431991e-03     00s13  00040  -8.175030e+02   1.472381e-01     00s13  00041  -8.175241e+02   1.646385e-02     00s14  00042  -8.175456e+02   1.864374e-03     00s14  00043  -8.175625e+02   1.608468e-03     00s14  00044  -8.175669e+02   7.252845e-03 
    00s15  00045  -8.175700e+02   2.641983e-04     00s15  00046  -8.175706e+02   1.479735e-05     00s15  00047  -8.175708e+02   1.219634e-04     00s16  00048  -8.175709e+02   2.551065e-04 
    00s16  00049  -8.175710e+02   2.741817e-05     00s16  00050  -8.175710e+02   1.027167e-05     00s17  00051  -8.175710e+02   4.671738e-08     00s17  00052  -8.175710e+02   4.390914e-09     00s17  00053  -8.175710e+02   4.390914e-09 
Runtime:     00s17
Optimization status: Converged

Optimization restart 1/1, f = -817.5709696189015
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '32', '100', '4'], [' ', ' ', '16', '100', '4'], [' ', ' ', '4', '2048', '4'], [' ', ' ', '20', '100', '4'], [' ', ' ', '4', '128', '4'], [' ', ' ', '8', '128', '4'], [' ', ' ', '50', '64', '4'], [' ', ' ', '8', '2048', '4'], [' ', ' ', '80', '64', '4'], [' ', ' ', '16', '128', '4'], [' ', ' ', '4', '80', '4'], [' ', ' ', '50', '80', '4'], [' ', ' ', '100', '32', '4'], [' ', ' ', '96', '32', '4'], [' ', ' ', '8', '100', '4'], [' ', ' ', '128', '20', '4'], [' ', ' ', '20', '80', '4'], [' ', ' ', '32', '64', '4'], [' ', ' ', '8', '80', '4'], [' ', ' ', '4', '100', '4'], [' ', ' ', '96', '50', '4'], [' ', ' ', '64', '80', '4'], [' ', ' ', '32', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '4', '64', '4'], [' ', ' ', '4', '50', '4'], [' ', ' ', '64', '64', '4'], [' ', ' ', '16', '80', '4'], [' ', ' ', '80', '50', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '4'], [' ', ' ', '20', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '4'], [' ', ' ', '16', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], [' ', ' ', '50', '50', '4'], [' ', ' ', '8', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '4'], [' ', ' ', '32', '50', '4'], [' ', ' ', '20', '50', '4'], [' ', ' ', '64', '32', '4'], [' ', ' ', '4', '32', '4'], [' ', ' ', '4', '20', '4'], [' ', ' ', '8', '50', '4'], [' ', ' ', '20', '32', '4'], [' ', ' ', '16', '32', '4'], [' ', ' ', '16', '20', '4'], [' ', ' ', '32', '32', '4'], [' ', ' ', '8', '32', '4'], [' ', ' ', '50', '32', '4'], [' ', ' ', '80', '20', '4'], [' ', ' ', '4', '16', '4'], [' ', ' ', '16', '50', '4'], [' ', ' ', '32', '20', '4'], [' ', ' ', '64', '50', '4'], [' ', ' ', '8', '20', '4'], [' ', ' ', '80', '32', '4'], [' ', ' ', '50', '20', '4'], [' ', ' ', '50', '16', '4'], [' ', ' ', '50', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '4']]
prob:  <search.SurrogateProblem object at 0x14a91288bd60>
0 OK
bestX [array([[0.7182, 0.292 , 0.2463, 0.7206, 0.0249]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4754.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4754
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4754
........................................ [0.003029, 0.002903, 0.002886]
OUTPUT:%f [0.003029, 0.002903, 0.002886] 0.0028945000000000004
store_func_eval
problem.constants
None
MLA iteration:  98
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -5.753526e+02           nan     00s00  00001  -5.753526e+02   1.385697e+04     00s00  00002  -6.686366e+02   5.108160e+03     00s01  00003  -7.337087e+02   3.983308e+02 
    00s01  00004  -7.478353e+02   3.967301e+02     00s01  00005  -7.961524e+02   1.082313e+02     00s02  00006  -8.093634e+02   1.561663e+02     00s02  00007  -8.156754e+02   1.134337e+01     00s02  00008  -8.170955e+02   3.973963e+00     00s03  00009  -8.180442e+02   2.445109e+00     00s03  00010  -8.189948e+02   1.931460e+00     00s03  00011  -5.367660e+02   1.342516e+05     00s04  00012  -8.197403e+02   3.087555e+00     00s04  00013  -8.200170e+02   4.096340e-01 
    00s04  00014  -8.190995e+02   7.830194e+00     00s05  00015  -8.201994e+02   6.414523e-01     00s05  00016  -8.203304e+02   2.259700e-01     00s05  00017  -8.204489e+02   5.327314e-01     00s06  00018  -8.205824e+02   7.725012e-01     00s06  00019  -8.208830e+02   1.563789e-01     00s06  00020  -8.210709e+02   3.285988e-02     00s07  00021  -8.212201e+02   1.622896e-01     00s07  00022  -8.214229e+02   4.271755e-01     00s07  00023  -8.218687e+02   8.803586e-01     00s08  00024  -8.220935e+02   1.105780e-01     00s08  00025  -8.221521e+02   3.218854e-02 
    00s08  00026  -8.221951e+02   3.045755e-02     00s09  00027  -8.222731e+02   2.649080e-02     00s09  00028  -8.224478e+02   1.805087e-01     00s09  00029  -8.227614e+02   5.551780e-02     00s10  00030  -8.228428e+02   8.855772e-02     00s10  00031  -8.228642e+02   1.771767e-02     00s10  00032  -8.228669e+02   2.654900e-04 
    00s11  00033  -8.228672e+02   5.405406e-04     00s11  00034  -8.228681e+02   2.388894e-03     00s11  00035  -8.228692e+02   2.091476e-03     00s12  00036  -8.228540e+02   1.114654e-01     00s12  00037  -8.228696e+02   5.985178e-03     00s12  00038  -8.228708e+02   1.426523e-03     00s13  00039  -8.228721e+02   1.349752e-03     00s13  00040  -8.228737e+02   8.571231e-03     00s13  00041  -8.228765e+02   2.490121e-02     00s14  00042  -8.228831e+02   5.837860e-02     00s14  00043  -8.228964e+02   9.988994e-02     00s14  00044  -8.229187e+02   1.042979e-01     00s15  00045  -8.227970e+02   5.853702e-01     00s15  00046  -8.229260e+02   1.664256e-01     00s15  00047  -8.229550e+02   1.209900e-01     00s16  00048  -8.227694e+02   1.463090e+00     00s16  00049  -8.229866e+02   1.504754e-03     00s16  00050  -8.230006e+02   1.962757e-04     00s17  00051  -8.229568e+02   2.851950e-01     00s17  00052  -8.230018e+02   4.561803e-03     00s17  00053  -8.230065e+02   3.411975e-03     00s18  00054  -8.230124e+02   3.570461e-04 
    00s18  00055  -8.230175e+02   7.573190e-06     00s18  00056  -8.230202e+02   5.455451e-03     00s19  00057  -8.230225e+02   3.492310e-04     00s19  00058  -8.230237e+02   9.879248e-05     00s19  00059  -8.230246e+02   1.428558e-04     00s25  00077  -8.230265e+02   6.343385e-06 
Runtime:     00s25
Optimization status: Converged

Optimization restart 1/1, f = -823.0265281372629
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '32', '100', '4'], [' ', ' ', '16', '100', '4'], [' ', ' ', '4', '2048', '4'], [' ', ' ', '20', '100', '4'], [' ', ' ', '4', '128', '4'], [' ', ' ', '8', '128', '4'], [' ', ' ', '50', '64', '4'], [' ', ' ', '8', '2048', '4'], [' ', ' ', '80', '64', '4'], [' ', ' ', '16', '128', '4'], [' ', ' ', '4', '80', '4'], [' ', ' ', '50', '80', '4'], [' ', ' ', '100', '32', '4'], [' ', ' ', '96', '32', '4'], [' ', ' ', '8', '100', '4'], [' ', ' ', '128', '20', '4'], [' ', ' ', '20', '80', '4'], [' ', ' ', '32', '64', '4'], [' ', ' ', '8', '80', '4'], [' ', ' ', '4', '100', '4'], [' ', ' ', '96', '50', '4'], [' ', ' ', '64', '80', '4'], [' ', ' ', '32', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '4', '64', '4'], [' ', ' ', '4', '50', '4'], [' ', ' ', '64', '64', '4'], [' ', ' ', '16', '80', '4'], [' ', ' ', '80', '50', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '4'], [' ', ' ', '20', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '4'], [' ', ' ', '16', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], [' ', ' ', '50', '50', '4'], [' ', ' ', '8', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '4'], [' ', ' ', '32', '50', '4'], [' ', ' ', '20', '50', '4'], [' ', ' ', '64', '32', '4'], [' ', ' ', '4', '32', '4'], [' ', ' ', '4', '20', '4'], [' ', ' ', '8', '50', '4'], [' ', ' ', '20', '32', '4'], [' ', ' ', '16', '32', '4'], [' ', ' ', '16', '20', '4'], [' ', ' ', '32', '32', '4'], [' ', ' ', '8', '32', '4'], [' ', ' ', '50', '32', '4'], [' ', ' ', '80', '20', '4'], [' ', ' ', '4', '16', '4'], [' ', ' ', '16', '50', '4'], [' ', ' ', '32', '20', '4'], [' ', ' ', '64', '50', '4'], [' ', ' ', '8', '20', '4'], [' ', ' ', '80', '32', '4'], [' ', ' ', '50', '20', '4'], [' ', ' ', '50', '16', '4'], [' ', ' ', '50', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '80', '4']]
prob:  <search.SurrogateProblem object at 0x14a912e05f70>
0 OK
bestX [array([[0.8824, 0.3797, 0.247 , 0.9888, 0.009 ]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5620.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5620
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5620
........................................ [0.003033, 0.002951, 0.00291]
OUTPUT:%f [0.003033, 0.002951, 0.00291] 0.0029305
store_func_eval
problem.constants
None
MLA iteration:  99
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -5.796254e+02           nan     00s00  00001  -5.796254e+02   1.399690e+04     00s00  00002  -6.733105e+02   5.146760e+03     00s01  00003  -7.383531e+02   3.881522e+02     00s01  00004  -7.518473e+02   3.851174e+02     00s01  00005  -7.995925e+02   1.213945e+02     00s02  00006  -8.072570e+02   3.889005e+02     00s02  00007  -8.175661e+02   2.495898e+01     00s02  00008  -8.185955e+02   5.754242e+01 
    00s03  00009  -8.207946e+02   5.322272e+00     00s03  00010  -8.216576e+02   4.413209e+00     00s03  00011  -8.242184e+02   2.628957e+00     00s04  00012  -8.250292e+02   5.095315e+00     00s04  00013  -8.249000e+02   7.258947e+00     00s04  00014  -8.255275e+02   8.489844e-01     00s05  00015  -8.255905e+02   1.247551e-01     00s05  00016  -8.256198e+02   1.221410e-01     00s05  00017  -8.257387e+02   1.631582e-01     00s06  00018  -8.259298e+02   1.876163e-01     00s06  00019  -8.261687e+02   2.682381e-01 
    00s06  00020  -8.262861e+02   2.590325e-02     00s07  00021  -8.263441e+02   3.095019e-02     00s07  00022  -8.263811e+02   1.435111e-02     00s07  00023  -8.264255e+02   8.338569e-03     00s08  00024  -8.264913e+02   1.970803e-02     00s08  00025  -8.265629e+02   1.616915e-01     00s08  00026  -8.265940e+02   5.533226e-01     00s09  00027  -8.266559e+02   9.930359e-03     00s09  00028  -8.266643e+02   1.084997e-02     00s09  00029  -8.266723e+02   1.048953e-02     00s10  00030  -8.266849e+02   6.186188e-03     00s10  00031  -8.267278e+02   5.567652e-02     00s10  00032  -8.267583e+02   1.141029e-01     00s11  00033  -8.267820e+02   2.101674e-02 
    00s11  00034  -8.267905e+02   4.299054e-03     00s11  00035  -8.268001e+02   4.444930e-03     00s12  00036  -8.268050e+02   1.928712e-03     00s12  00037  -8.268063e+02   6.410869e-03     00s12  00038  -8.267972e+02   9.171779e-02     00s13  00039  -8.268072e+02   2.324659e-03     00s13  00040  -8.268079e+02   6.546548e-05 
    00s13  00041  -8.268079e+02   9.854107e-06     00s14  00042  -8.268079e+02   1.531190e-06     00s14  00043  -8.268079e+02   2.156265e-07     00s14  00044  -8.268079e+02   2.156265e-07 
Runtime:     00s14
Optimization status: Converged

Optimization restart 1/1, f = -826.8079413993169
SEARCH!
self.IOrig:  [240, 260]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '32', '100', '4'], [' ', ' ', '16', '100', '4'], [' ', ' ', '4', '2048', '4'], [' ', ' ', '20', '100', '4'], [' ', ' ', '4', '128', '4'], [' ', ' ', '8', '128', '4'], [' ', ' ', '50', '64', '4'], [' ', ' ', '8', '2048', '4'], [' ', ' ', '80', '64', '4'], [' ', ' ', '16', '128', '4'], [' ', ' ', '4', '80', '4'], [' ', ' ', '50', '80', '4'], [' ', ' ', '100', '32', '4'], [' ', ' ', '96', '32', '4'], [' ', ' ', '8', '100', '4'], [' ', ' ', '128', '20', '4'], [' ', ' ', '20', '80', '4'], [' ', ' ', '32', '64', '4'], [' ', ' ', '8', '80', '4'], [' ', ' ', '4', '100', '4'], [' ', ' ', '96', '50', '4'], [' ', ' ', '64', '80', '4'], [' ', ' ', '32', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '4', '64', '4'], [' ', ' ', '4', '50', '4'], [' ', ' ', '64', '64', '4'], [' ', ' ', '16', '80', '4'], [' ', ' ', '80', '50', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '4'], [' ', ' ', '20', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '4'], [' ', ' ', '16', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], [' ', ' ', '50', '50', '4'], [' ', ' ', '8', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '4'], [' ', ' ', '32', '50', '4'], [' ', ' ', '20', '50', '4'], [' ', ' ', '64', '32', '4'], [' ', ' ', '4', '32', '4'], [' ', ' ', '4', '20', '4'], [' ', ' ', '8', '50', '4'], [' ', ' ', '20', '32', '4'], [' ', ' ', '16', '32', '4'], [' ', ' ', '16', '20', '4'], [' ', ' ', '32', '32', '4'], [' ', ' ', '8', '32', '4'], [' ', ' ', '50', '32', '4'], [' ', ' ', '80', '20', '4'], [' ', ' ', '4', '16', '4'], [' ', ' ', '16', '50', '4'], [' ', ' ', '32', '20', '4'], [' ', ' ', '64', '50', '4'], [' ', ' ', '8', '20', '4'], [' ', ' ', '80', '32', '4'], [' ', ' ', '50', '20', '4'], [' ', ' ', '50', '16', '4'], [' ', ' ', '50', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4']]
prob:  <search.SurrogateProblem object at 0x14a912d92640>
0 OK
bestX [array([[0.9865, 0.4538, 0.2109, 0.7275, 0.0108]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7337.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DMEDIUM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7337
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7337
........................................ [0.003115, 0.00292, 0.002893]
OUTPUT:%f [0.003115, 0.00292, 0.002893] 0.0029065000000000002
store_func_eval
problem.constants
None
stats:  {'time_total': 1677.040062836, 'time_sample_init': 0.019286085, 'time_fun': 1482.0442685869996, 'time_search': 176.045905676, 'time_model': 18.91572352, 'func_eval_time': [749.21623352], 'search_time': [1.723385807, 1.740658271, 1.744224624, 1.735637176, 1.738919341, 1.733672166, 1.723961446, 1.74689092, 1.726881548, 1.74474411, 1.74016812, 1.886403227, 1.747920952, 1.729635286, 1.742502385, 1.736292296, 1.733800745, 1.733337342, 1.758181959, 1.732431698, 1.752669035, 1.722772383, 1.72419004, 1.7493547, 1.739569786, 1.745579427, 1.810231156, 1.724684041, 1.753451968, 1.751767794, 1.737150872, 1.752035988, 1.735114413, 1.761129861, 1.731299353, 1.750945332, 1.750084248, 1.746579218, 1.751921237, 1.752842385, 1.743865427, 1.7509813, 1.745432127, 1.758911602, 1.751449522, 1.755180702, 1.754130834, 1.736553508, 1.759353773, 1.841628862, 1.750187892, 1.744675296, 1.747068229, 1.766525845, 1.765517394, 1.756600641, 1.764840973, 1.743820078, 1.750464165, 1.77606622, 1.758480234, 1.746984488, 1.7560037, 1.768570406, 1.755760439, 1.768247386, 1.75354742, 1.785649128, 1.750693597, 1.752215808, 1.844847233, 1.743926168, 1.754273149, 1.750863524, 1.765274622, 1.755658546, 1.768188306, 1.760271204, 1.757615175, 1.811109692, 1.758456289, 1.765307458, 1.763524178, 1.768049603, 1.757189421, 1.763161836, 1.7650679, 1.865071308, 1.76066414, 1.767151502, 1.766283783, 1.938525952, 1.767490167, 1.759870593, 1.771237969, 1.74345216, 1.766176086, 1.771477597, 1.78185524, 1.931435223], 'modeling_time': [0.135028508, 0.14772561, 0.125442945, 0.127345866, 0.123140597, 0.125440221, 0.147027467, 0.130341747, 0.145612604, 0.164525103, 0.140173992, 0.134422557, 0.129290971, 0.247061192, 0.227430925, 0.235681733, 0.182853024, 0.217519339, 0.217777335, 0.226046163, 0.262687965, 0.237160641, 0.221935461, 0.239917103, 0.137119777, 0.145616498, 0.14558025, 0.172770723, 0.154202897, 0.143823719, 0.154762054, 0.155033041, 0.156154498, 0.158593875, 0.141279997, 0.15099309, 0.154150236, 0.147555248, 0.145895744, 0.162250972, 0.159727573, 0.155770105, 0.167807058, 0.172733308, 0.158965664, 0.150722818, 0.16000317, 0.189798411, 0.176321451, 0.127481989, 0.229658821, 0.14227854, 0.134742148, 0.186716404, 0.129311219, 0.155510074, 0.169553035, 0.232102867, 0.223579535, 0.156067764, 0.136494348, 0.160491149, 0.152104289, 0.148098839, 0.152703815, 0.16079622, 0.155400561, 0.172361738, 0.161491639, 0.154301944, 0.159050305, 0.151503576, 0.159624757, 0.158143264, 0.161649552, 0.153090049, 0.26920864, 0.254398881, 0.25274844, 0.332586791, 0.23327489, 0.249472133, 0.252258558, 0.256781958, 0.280659538, 0.27767979, 0.251879245, 0.306125888, 0.254999306, 0.262520262, 0.264116366, 0.304948348, 0.273465302, 0.248109023, 0.31738417, 0.19661116, 0.301567498, 0.210690229, 0.289216813, 0.181490604], 'modeling_iteration': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}
tid: 0
    t:240.000000 
    Ps  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], [' ', ' ', '128', '2048', '4'], [' ', ' ', '32', '2048', '4'], [' ', ' ', '100', '80', '4'], [' ', ' ', '80', '128', '4'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '80', '4'], [' ', ' ', '80', '2048', '4'], [' ', ' ', '128', '80', '4'], [' ', ' ', '128', '100', '4'], [' ', ' ', '50', '128', '4'], [' ', ' ', '50', '2048', '4'], [' ', ' ', '128', '32', '4'], [' ', ' ', '96', '128', '4'], [' ', ' ', '100', '100', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '100', '2048', '4'], [' ', ' ', '128', '128', '4'], [' ', ' ', '128', '50', '4'], [' ', ' ', '128', '64', '4'], [' ', ' ', '100', '64', '4'], [' ', ' ', '64', '128', '4'], [' ', ' ', '96', '100', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '100', '50', '4'], [' ', ' ', '80', '100', '4'], [' ', ' ', '96', '64', '4'], [' ', ' ', '20', '2048', '4'], [' ', ' ', '32', '128', '4'], [' ', ' ', '64', '100', '4'], [' ', ' ', '80', '80', '4'], [' ', ' ', '50', '100', '4'], [' ', ' ', '20', '128', '4'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '32', '100', '4'], [' ', ' ', '16', '100', '4'], [' ', ' ', '4', '2048', '4'], [' ', ' ', '20', '100', '4'], [' ', ' ', '4', '128', '4'], [' ', ' ', '8', '128', '4'], [' ', ' ', '50', '64', '4'], [' ', ' ', '8', '2048', '4'], [' ', ' ', '80', '64', '4'], [' ', ' ', '16', '128', '4'], [' ', ' ', '4', '80', '4'], [' ', ' ', '50', '80', '4'], [' ', ' ', '100', '32', '4'], [' ', ' ', '96', '32', '4'], [' ', ' ', '8', '100', '4'], [' ', ' ', '128', '20', '4'], [' ', ' ', '20', '80', '4'], [' ', ' ', '32', '64', '4'], [' ', ' ', '8', '80', '4'], [' ', ' ', '4', '100', '4'], [' ', ' ', '96', '50', '4'], [' ', ' ', '64', '80', '4'], [' ', ' ', '32', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '4', '64', '4'], [' ', ' ', '4', '50', '4'], [' ', ' ', '64', '64', '4'], [' ', ' ', '16', '80', '4'], [' ', ' ', '80', '50', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '4'], [' ', ' ', '20', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '4'], [' ', ' ', '16', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], [' ', ' ', '50', '50', '4'], [' ', ' ', '8', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '4'], [' ', ' ', '32', '50', '4'], [' ', ' ', '20', '50', '4'], [' ', ' ', '64', '32', '4'], [' ', ' ', '4', '32', '4'], [' ', ' ', '4', '20', '4'], [' ', ' ', '8', '50', '4'], [' ', ' ', '20', '32', '4'], [' ', ' ', '16', '32', '4'], [' ', ' ', '16', '20', '4'], [' ', ' ', '32', '32', '4'], [' ', ' ', '8', '32', '4'], [' ', ' ', '50', '32', '4'], [' ', ' ', '80', '20', '4'], [' ', ' ', '4', '16', '4'], [' ', ' ', '16', '50', '4'], [' ', ' ', '32', '20', '4'], [' ', ' ', '64', '50', '4'], [' ', ' ', '8', '20', '4'], [' ', ' ', '80', '32', '4'], [' ', ' ', '50', '20', '4'], [' ', ' ', '50', '16', '4'], [' ', ' ', '50', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '4']]
    Os  [[0.0275305], [0.027833999999999998], [0.025779499999999997], [0.022622999999999997], [0.025444], [0.014999499999999999], [0.023072500000000003], [0.008314499999999999], [0.020721], [0.001606], [0.0200205], [0.0276845], [0.001571], [0.016517], [0.00896], [0.0165895], [0.016464], [0.025015500000000003], [0.0318635], [0.022565], [0.024121499999999997], [0.0250295], [0.008842], [0.0229435], [0.0014275], [0.0116265], [0.022454000000000002], [0.0136445], [0.011380000000000001], [0.0031505], [0.020726], [0.0221695], [0.012484499999999999], [0.025648999999999998], [0.027459], [0.023669], [0.021892000000000002], [0.008241499999999999], [0.018491], [0.023443], [0.0043805], [0.0301615], [0.027614], [0.013815500000000001], [0.004003], [0.0024275], [0.002339], [0.0243675], [0.0044884999999999994], [0.016101999999999998], [0.003902], [0.0200245], [0.018112499999999997], [0.016534], [0.0075105], [0.025955], [0.0223295], [0.022331], [0.02561], [0.02682], [0.027252], [0.0235275], [0.020220000000000002], [0.0040085], [0.024729], [0.024423], [0.0129505], [0.0248845], [0.018172], [0.0014345], [0.020708999999999998], [0.0229055], [0.016934], [0.0038740000000000003], [0.024114], [0.023960000000000002], [0.047592999999999996], [0.023309999999999997], [0.0242925], [0.025229], [0.012732], [0.049228], [0.0280995], [0.00479], [0.008556000000000001], [0.005], [0.0297175], [0.022483000000000003], [0.024501000000000002], [0.0014305], [0.025643], [0.0259285], [0.002359], [0.025578499999999997], [0.0087845], [0.0276945], [0.026608], [0.016365499999999998], [0.022919500000000002], [0.0117635], [0.001169], [0.0011875], [0.0012105000000000002], [0.001202], [0.0011945], [0.001229], [0.001188], [0.0012230000000000001], [0.00124], [0.001202], [0.001207], [0.0012055], [0.0011935000000000001], [0.0012014999999999999], [0.0011795], [0.0011825], [0.0011884999999999999], [0.001273], [0.0012079999999999999], [0.001215], [0.0011925], [0.001203], [0.0011745], [0.0012634999999999999], [0.001226], [0.0012285], [0.001179], [0.001197], [0.0011970000000000001], [0.0012339999999999999], [0.0012095], [0.001205], [0.0011625], [0.0011935000000000001], [0.0011895], [0.0011755], [0.001206], [0.0011979999999999998], [0.0012025], [0.0012139999999999998], [0.0011735], [0.0012085], [0.001179], [0.0011795], [0.001214], [0.001204], [0.001212], [0.001215], [0.0012305], [0.0011849999999999999], [0.001195], [0.001216], [0.0011735], [0.0012585], [0.001211], [0.001205], [0.0029825], [0.00119], [0.001312], [0.0012109999999999998], [0.0011935000000000001], [0.001264], [0.0031075], [0.0012055], [0.003084], [0.003104], [0.0011775000000000002], [0.0028085000000000002], [0.00279], [0.0012685], [0.0012475], [0.003105], [0.0028455], [0.0012315], [0.0012415], [0.001177], [0.0011975], [0.001768], [0.0012575], [0.001201], [0.001183], [0.00122], [0.0011765], [0.0012055], [0.0011819999999999999], [0.001188], [0.001224], [0.001252], [0.0012095], [0.0012825], [0.001229], [0.0011855], [0.0012035], [0.0012235], [0.015053], [0.0030115000000000003], [0.002757], [0.0028945000000000004], [0.0029305], [0.0029065000000000002]]
    Popt  [' ', ' ', '16', '2048', '4'] Oopt  0.0011625 nth  132
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
mkdir: cannot create directory ‘./TLA_experiments/SLA-GPTune-m-200/’: No such file or directory
mv: cannot move 'gptune.db/covariance.json' to './TLA_experiments/SLA-GPTune-m-200/covariance.json': No such file or directory
time...now 1651106058.0429237
machine: swing processor: intel num_nodes: 1 num_cores: 128


------Validating the options
  
  total core counts provided to GPTune: 128
   ---> distributed_memory_parallelism: False
   ---> shared_memory_parallelism: False
   ---> objective_evaluation_parallelism: False
  
  total core counts for modeling: 2
   ---> model_processes: 1
   ---> model_threads: 1
   ---> model_restart_processes: 1
   ---> model_restart_threads: 1
  
  total core counts for search: 1
   ---> search_processes: 1
   ---> search_threads: 1
   ---> search_multitask_processes: 1
   ---> search_multitask_threads: 1
  
  total core counts for objective function evaluation: 2
   ---> core counts in a single application run: 1
   ---> objective_multisample_processes: 1
   ---> objective_multisample_threads: 1
problem size is l [[1200, 1400]]
[[1200, 1400]]
GPTune History Database Init
[HistoryDB] use filelock for synchronization
[HistoryDB] Create a JSON file at ./gptune.db/covariance.json



------Starting MLA with HistoryDB with 1 tasks and 200 samples each 
[HistoryDB] Found a history database file
no history data has been loaded
NS1:  100
tmpP:  [array([[4.4191e-01, 6.7181e-01, 6.3181e-01, 5.1745e-01, 7.4735e-01],
       [3.3967e-01, 3.8192e-01, 8.9433e-01, 2.8768e-01, 9.7690e-01],
       [8.0643e-01, 4.5082e-01, 4.6049e-01, 1.8648e-01, 9.0311e-01],
       [7.2744e-01, 7.2953e-01, 4.2731e-01, 7.9902e-01, 5.8563e-01],
       [2.2781e-01, 2.3009e-01, 7.8210e-01, 4.4273e-01, 8.0910e-01],
       [6.1010e-03, 2.8931e-01, 5.9360e-01, 5.7641e-02, 1.9710e-01],
       [2.8729e-01, 5.9990e-01, 4.4074e-01, 6.5533e-01, 5.3963e-01],
       [4.1726e-01, 3.1118e-01, 5.6643e-01, 6.1987e-01, 1.3450e-01],
       [1.0261e-01, 9.5247e-01, 1.3840e-01, 8.9845e-01, 4.2521e-01],
       [7.0275e-01, 7.7063e-01, 3.8052e-01, 4.7077e-01, 2.8043e-01],
       [7.3156e-01, 2.9925e-01, 4.8456e-01, 1.9136e-01, 4.9178e-01],
       [6.0124e-01, 8.1851e-01, 1.0019e-01, 3.5449e-01, 9.2662e-01],
       [5.9128e-01, 6.0431e-01, 4.3691e-01, 4.5813e-01, 3.3154e-01],
       [2.1994e-01, 6.3298e-01, 8.4473e-01, 6.0837e-01, 2.2002e-01],
       [7.4499e-01, 8.9517e-01, 7.9258e-01, 5.8627e-01, 1.0160e-01],
       [6.3743e-01, 2.1595e-01, 1.1406e-01, 3.3986e-01, 4.1690e-01],
       [8.5298e-01, 4.8283e-01, 5.5202e-01, 6.8467e-01, 4.4090e-01],
       [2.4513e-01, 6.8701e-01, 5.8955e-01, 5.2364e-01, 6.3595e-01],
       [2.8294e-02, 6.1479e-01, 5.7461e-01, 2.4607e-01, 9.8374e-01],
       [9.7955e-01, 9.7135e-01, 9.6834e-01, 8.7192e-01, 5.7570e-01],
       [7.7966e-01, 1.9291e-01, 4.5526e-02, 2.9362e-01, 7.2737e-01],
       [4.0513e-01, 4.4770e-01, 3.6748e-01, 9.9122e-01, 8.1319e-01],
       [6.4226e-01, 7.4928e-01, 1.9789e-01, 7.5456e-01, 1.7124e-01],
       [5.7515e-01, 1.5375e-01, 2.7575e-01, 7.0673e-01, 6.5364e-01],
       [5.5265e-01, 9.6966e-01, 9.5840e-01, 7.2140e-01, 3.2633e-01],
       [9.3845e-01, 6.4712e-03, 3.5213e-01, 4.9032e-01, 2.1241e-01],
       [6.5286e-01, 5.7769e-01, 8.2157e-01, 2.5538e-01, 5.4918e-01],
       [3.4567e-01, 8.4626e-01, 3.1713e-01, 8.4269e-01, 1.5199e-01],
       [6.2653e-01, 7.1715e-01, 7.4388e-01, 4.8193e-01, 2.5256e-01],
       [9.0634e-01, 3.9210e-01, 3.9184e-02, 4.6602e-01, 8.2704e-02],
       [5.1015e-01, 7.0798e-01, 8.5468e-01, 9.1293e-01, 5.2719e-01],
       [5.8752e-01, 2.5775e-01, 8.6219e-01, 4.0233e-01, 5.9061e-01],
       [9.2479e-01, 1.9342e-02, 7.3667e-01, 6.7126e-01, 2.3602e-01],
       [7.8329e-01, 8.3342e-01, 9.2254e-01, 1.6592e-01, 8.2172e-01],
       [8.4828e-01, 5.4807e-01, 2.8162e-02, 7.1796e-01, 9.9833e-01],
       [1.1815e-01, 5.3188e-02, 6.9652e-01, 9.4049e-01, 6.4981e-01],
       [1.6737e-01, 3.0487e-01, 5.0861e-01, 1.2636e-01, 4.7304e-01],
       [1.7352e-01, 3.4497e-01, 8.0421e-01, 7.7061e-01, 1.4191e-01],
       [9.6293e-01, 7.3352e-01, 1.6856e-01, 1.4531e-02, 3.0626e-01],
       [7.6296e-01, 7.6977e-01, 9.8076e-02, 9.3956e-01, 6.9569e-01],
       [2.9596e-01, 3.8311e-02, 9.8946e-01, 4.5345e-02, 3.0794e-02],
       [1.4621e-01, 4.0857e-01, 1.4437e-01, 8.8710e-02, 9.5760e-01],
       [6.6131e-01, 1.7836e-01, 1.0802e-02, 1.4221e-01, 9.1851e-01],
       [2.5397e-01, 4.7822e-01, 9.9822e-01, 1.5660e-01, 2.4083e-01],
       [7.1601e-02, 9.6514e-02, 6.1945e-01, 2.7875e-01, 9.0632e-05],
       [3.2912e-01, 6.9576e-01, 3.9642e-01, 6.3175e-01, 2.4578e-02],
       [1.9753e-01, 8.0450e-01, 7.5634e-01, 8.2425e-01, 5.9348e-02],
       [7.9305e-01, 7.5809e-01, 2.2748e-01, 2.1494e-02, 7.5733e-01],
       [3.9449e-01, 7.9419e-01, 4.1389e-01, 1.1797e-01, 1.0689e-02],
       [6.8477e-01, 1.0014e-01, 8.7658e-01, 2.0174e-01, 4.5439e-01],
       [9.7676e-02, 2.2123e-01, 6.7909e-01, 5.9309e-01, 7.6345e-02],
       [4.5500e-01, 5.8944e-01, 1.5394e-01, 7.3006e-01, 3.7529e-01],
       [4.9391e-01, 1.8382e-01, 7.6879e-01, 3.7697e-01, 3.8489e-01],
       [3.5698e-01, 8.2924e-01, 8.3273e-01, 9.6784e-01, 2.6622e-01],
       [3.8431e-01, 5.1820e-01, 2.3179e-01, 1.7226e-01, 3.5663e-01],
       [9.4356e-01, 6.4948e-01, 6.7902e-02, 7.4572e-01, 8.7574e-01],
       [4.7231e-01, 1.1966e-01, 2.7002e-03, 5.7342e-01, 5.1770e-01],
       [8.9571e-01, 8.5884e-01, 2.6677e-01, 3.3642e-03, 5.5351e-01],
       [6.1732e-01, 3.6764e-01, 7.0082e-01, 3.1949e-02, 8.3074e-01],
       [2.0022e-01, 4.6818e-01, 6.0255e-01, 3.4030e-01, 8.5468e-01],
       [3.6764e-01, 9.3087e-01, 2.8418e-01, 2.2815e-01, 6.6293e-01],
       [4.8964e-01, 4.9511e-01, 2.1528e-01, 5.4768e-01, 6.2239e-01],
       [8.8038e-01, 9.9692e-01, 8.8947e-01, 5.3401e-01, 5.0220e-01],
       [4.2168e-01, 4.3423e-01, 3.0756e-01, 2.6085e-01, 9.0440e-02],
       [9.5946e-01, 5.5064e-01, 8.2670e-02, 7.8810e-01, 7.8681e-01],
       [5.2867e-01, 9.2836e-01, 6.6594e-01, 6.4073e-01, 7.9171e-01],
       [3.6836e-02, 8.6936e-01, 3.3525e-01, 3.9103e-01, 1.6822e-01],
       [1.3699e-01, 4.8906e-02, 7.1306e-01, 9.7778e-01, 7.7255e-01],
       [2.3349e-01, 3.2078e-01, 2.4645e-01, 4.1745e-01, 3.6656e-01],
       [9.9505e-01, 5.6784e-01, 4.7969e-01, 5.5210e-01, 3.1061e-01],
       [4.0817e-02, 6.5770e-01, 2.9066e-01, 9.1359e-02, 3.9565e-01],
       [4.6783e-01, 3.3593e-01, 4.0755e-01, 9.5134e-01, 6.1747e-01],
       [7.5228e-01, 7.8745e-01, 4.9597e-01, 3.8568e-01, 4.0956e-01],
       [8.2578e-01, 2.6299e-01, 5.4490e-01, 8.6001e-01, 6.5672e-02],
       [9.1865e-01, 7.0050e-02, 6.5658e-01, 7.4987e-02, 7.6683e-01],
       [2.6385e-01, 8.7587e-01, 9.7632e-01, 6.6319e-01, 4.8848e-01],
       [8.3778e-01, 9.0392e-01, 3.7347e-01, 2.1925e-01, 9.6405e-01],
       [3.0785e-01, 4.2942e-01, 8.1299e-01, 9.0226e-01, 6.0292e-01],
       [6.2687e-02, 2.4144e-01, 2.5206e-01, 8.0597e-01, 7.1433e-01],
       [3.1040e-01, 9.4332e-01, 2.0204e-01, 1.3277e-01, 4.6592e-01],
       [1.5503e-02, 1.2166e-01, 6.2445e-01, 7.6698e-01, 1.8901e-01],
       [4.3901e-01, 6.2604e-02, 7.2376e-01, 9.8509e-01, 8.6705e-01],
       [6.7480e-01, 2.0677e-01, 5.2006e-01, 8.3481e-01, 9.3562e-01],
       [1.5570e-01, 1.3027e-01, 1.8153e-01, 9.2765e-01, 2.9421e-01],
       [3.7654e-01, 2.7291e-01, 7.7257e-01, 3.2061e-01, 1.2328e-01],
       [5.0204e-01, 2.3014e-02, 4.5453e-01, 3.0053e-01, 2.7454e-01],
       [1.8314e-01, 1.4857e-01, 6.8789e-01, 6.3233e-02, 9.4817e-01],
       [5.6689e-01, 6.6706e-01, 9.1427e-01, 8.1520e-01, 5.6140e-01],
       [5.6373e-02, 4.1281e-01, 9.3442e-01, 1.0773e-01, 6.7450e-01],
       [9.8727e-01, 5.0984e-01, 5.2992e-02, 8.5203e-01, 3.4095e-01],
       [6.9215e-01, 1.6727e-01, 3.4200e-01, 5.0954e-01, 8.4014e-01],
       [5.4358e-01, 5.2218e-01, 7.1853e-02, 4.2379e-01, 8.9450e-01],
       [8.1593e-02, 6.2153e-01, 9.0776e-01, 6.9879e-01, 4.5345e-02],
       [8.6880e-01, 3.7203e-01, 3.2443e-01, 8.8641e-01, 8.8167e-01],
       [7.1758e-01, 8.5098e-02, 5.3531e-01, 6.2477e-01, 1.1101e-01],
       [2.7184e-01, 9.8707e-01, 9.4588e-01, 4.3058e-01, 7.3108e-01],
       [1.2124e-01, 9.1251e-01, 1.2113e-01, 5.6053e-01, 6.8363e-01],
       [8.7492e-01, 5.3817e-01, 5.1792e-01, 2.3657e-01, 4.3182e-01],
       [8.1668e-01, 3.5458e-01, 6.4473e-01, 3.1663e-01, 7.0384e-01],
       [5.3288e-01, 8.8259e-01, 1.7937e-01, 3.6826e-01, 2.0836e-01]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4313.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4313
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4313
........................................ [4.156901, 3.96459, 3.809686]
OUTPUT:%f [4.156901, 3.96459, 3.809686] 3.887138
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2192.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2192
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2192
........................................ [3.790943, 3.781503, 3.743255]
OUTPUT:%f [3.790943, 3.781503, 3.743255] 3.762379
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9852.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9852
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9852
........................................ [3.49933, 3.493065, 3.656922]
OUTPUT:%f [3.49933, 3.493065, 3.656922] 3.5749934999999997
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5489.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5489
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5489
........................................ [3.040885, 3.003387, 3.026982]
OUTPUT:%f [3.040885, 3.003387, 3.026982] 3.0151845
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4174.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4174
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4174
........................................ [3.467802, 3.466212, 3.454731]
OUTPUT:%f [3.467802, 3.466212, 3.454731] 3.4604715
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5733.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5733
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5733
........................................ [2.188291, 2.16507, 2.180569]
OUTPUT:%f [2.188291, 2.16507, 2.180569] 2.1728195
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5541.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5541
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5541
........................................ [3.506768, 3.523652, 3.196902]
OUTPUT:%f [3.506768, 3.523652, 3.196902] 3.360277
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2088.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2088
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2088
........................................ [0.530386, 0.517883, 0.517905]
OUTPUT:%f [0.530386, 0.517883, 0.517905] 0.517894
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/639.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/639
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/639
........................................ [2.816585, 2.610757, 2.531913]
OUTPUT:%f [2.816585, 2.610757, 2.531913] 2.571335
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8269.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8269
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8269
........................................ [0.209446, 0.206088, 0.206144]
OUTPUT:%f [0.209446, 0.206088, 0.206144] 0.206116
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6800.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6800
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6800
........................................ [2.920175, 2.93401, 2.928622]
OUTPUT:%f [2.920175, 2.93401, 2.928622] 2.931316
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1069.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1069
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1069
........................................ [3.741393, 3.731492, 3.733474]
OUTPUT:%f [3.741393, 3.731492, 3.733474] 3.732483
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8852.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8852
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8852
........................................ [0.209262, 0.205701, 0.205568]
OUTPUT:%f [0.209262, 0.205701, 0.205568] 0.2056345
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9396.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9396
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9396
........................................ [2.2728, 2.269244, 1.976848]
OUTPUT:%f [2.2728, 2.269244, 1.976848] 2.123046
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6207.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6207
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6207
........................................ [0.163161, 0.160018, 0.159925]
OUTPUT:%f [0.163161, 0.160018, 0.159925] 0.1599715
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1493.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1493
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1493
........................................ [2.275774, 2.26842, 2.218399]
OUTPUT:%f [2.275774, 2.26842, 2.218399] 2.2434095
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1061.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1061
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1061
........................................ [2.281287, 2.355291, 2.358875]
OUTPUT:%f [2.281287, 2.355291, 2.358875] 2.357083
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6323.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6323
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6323
........................................ [3.369769, 3.579643, 3.627682]
OUTPUT:%f [3.369769, 3.579643, 3.627682] 3.6036625
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9015.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9015
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9015
........................................ [4.267002, 4.537123, 4.260387]
OUTPUT:%f [4.267002, 4.537123, 4.260387] 4.3987549999999995
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/512.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/512
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/512
........................................ [3.01768, 3.019595, 3.00761]
OUTPUT:%f [3.01768, 3.019595, 3.00761] 3.0136025
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1216.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1216
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1216
........................................ [3.436378, 3.340428, 3.491866]
OUTPUT:%f [3.436378, 3.340428, 3.491866] 3.416147
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5300.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5300
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5300
........................................ [3.35683, 3.351351, 3.438022]
OUTPUT:%f [3.35683, 3.351351, 3.438022] 3.3946865
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1958.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1958
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1958
........................................ [0.165496, 0.161882, 0.161718]
OUTPUT:%f [0.165496, 0.161882, 0.161718] 0.1618
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3580.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3580
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3580
........................................ [3.141922, 3.314476, 3.147519]
OUTPUT:%f [3.141922, 3.314476, 3.147519] 3.2309975
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7491.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7491
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7491
........................................ [0.183085, 0.179623, 0.179588]
OUTPUT:%f [0.183085, 0.179623, 0.179588] 0.1796055
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5549.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5549
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5549
........................................ [1.561468, 1.658475, 1.708674]
OUTPUT:%f [1.561468, 1.658475, 1.708674] 1.6835745
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/229.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/229
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/229
........................................ [3.018126, 3.181275, 2.99639]
OUTPUT:%f [3.018126, 3.181275, 2.99639] 3.0888324999999996
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1791.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1791
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1791
........................................ [0.386502, 0.408191, 0.408541]
OUTPUT:%f [0.386502, 0.408191, 0.408541] 0.408366
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5338.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5338
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5338
........................................ [1.571773, 1.53544, 1.537759]
OUTPUT:%f [1.571773, 1.53544, 1.537759] 1.5365995
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6950.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6950
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6950
........................................ [0.439888, 0.434469, 0.434707]
OUTPUT:%f [0.439888, 0.434469, 0.434707] 0.434588
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2385.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2385
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2385
........................................ [2.791748, 2.797926, 2.895569]
OUTPUT:%f [2.791748, 2.797926, 2.895569] 2.8467475
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6722.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6722
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6722
........................................ [2.990996, 2.986154, 2.984726]
OUTPUT:%f [2.990996, 2.986154, 2.984726] 2.98544
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6451.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6451
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6451
........................................ [1.881469, 1.625178, 1.576602]
OUTPUT:%f [1.881469, 1.625178, 1.576602] 1.6008900000000001
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7713.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7713
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7713
........................................ [3.486369, 3.483045, 3.469607]
OUTPUT:%f [3.486369, 3.483045, 3.469607] 3.4763260000000002
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5040.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5040
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5040
........................................ [3.753818, 3.745619, 3.954401]
OUTPUT:%f [3.753818, 3.745619, 3.954401] 3.85001
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8881.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8881
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8881
........................................ [3.199403, 3.262909, 3.29287]
OUTPUT:%f [3.199403, 3.262909, 3.29287] 3.2778895
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2336.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2336
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2336
........................................ [3.150321, 3.155033, 3.141604]
OUTPUT:%f [3.150321, 3.155033, 3.141604] 3.1483185000000002
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3654.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3654
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3654
........................................ [0.541439, 0.53927, 0.537222]
OUTPUT:%f [0.541439, 0.53927, 0.537222] 0.538246
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6997.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6997
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6997
........................................ [2.416435, 2.385478, 2.468541]
OUTPUT:%f [2.416435, 2.385478, 2.468541] 2.4270095
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6759.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6759
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6759
........................................ [3.38575, 3.213353, 3.212451]
OUTPUT:%f [3.38575, 3.213353, 3.212451] 3.212902
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4499.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4499
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4499
........................................ [0.62507, 0.628783, 0.62836]
OUTPUT:%f [0.62507, 0.628783, 0.62836] 0.6285715000000001
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4235.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4235
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4235
........................................ [4.306381, 4.291146, 4.470853]
OUTPUT:%f [4.306381, 4.291146, 4.470853] 4.3809995
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3253.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3253
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3253
........................................ [3.781131, 3.783975, 3.785096]
OUTPUT:%f [3.781131, 3.783975, 3.785096] 3.7845354999999996
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6823.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6823
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6823
........................................ [1.94356, 1.940098, 2.016645]
OUTPUT:%f [1.94356, 1.940098, 2.016645] 1.9783715000000002
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9179.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9179
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9179
........................................ [0.546028, 0.544413, 0.542355]
OUTPUT:%f [0.546028, 0.544413, 0.542355] 0.5433840000000001
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/821.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/821
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/821
........................................ [0.315945, 0.31377, 0.312836]
OUTPUT:%f [0.315945, 0.31377, 0.312836] 0.313303
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1073.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1073
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1073
........................................ [0.296976, 0.295117, 0.294281]
OUTPUT:%f [0.296976, 0.295117, 0.294281] 0.29469900000000004
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9267.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9267
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9267
........................................ [3.443212, 3.430029, 3.533546]
OUTPUT:%f [3.443212, 3.430029, 3.533546] 3.4817875000000003
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5798.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5798
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5798
........................................ [0.614582, 0.619646, 0.620911]
OUTPUT:%f [0.614582, 0.619646, 0.620911] 0.6202785
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9027.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9027
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9027
........................................ [2.299042, 2.377181, 2.37707]
OUTPUT:%f [2.299042, 2.377181, 2.37707] 2.3771255
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4419.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4419
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4419
........................................ [0.523549, 0.517592, 0.517438]
OUTPUT:%f [0.523549, 0.517592, 0.517438] 0.517515
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6980.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6980
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6980
........................................ [2.607095, 2.555109, 2.592385]
OUTPUT:%f [2.607095, 2.555109, 2.592385] 2.573747
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2810.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2810
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2810
........................................ [2.509659, 2.519888, 2.506004]
OUTPUT:%f [2.509659, 2.519888, 2.506004] 2.512946
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6193.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6193
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6193
........................................ [1.899191, 2.007433, 2.146092]
OUTPUT:%f [1.899191, 2.007433, 2.146092] 2.0767625
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5900.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5900
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5900
........................................ [1.045499, 1.041222, 1.041268]
OUTPUT:%f [1.045499, 1.041222, 1.041268] 1.041245
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1142.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1142
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1142
........................................ [3.556121, 3.547235, 3.555884]
OUTPUT:%f [3.556121, 3.547235, 3.555884] 3.5515594999999998
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3674.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3674
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3674
........................................ [3.107326, 3.133293, 3.135497]
OUTPUT:%f [3.107326, 3.133293, 3.135497] 3.134395
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3840.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3840
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3840
........................................ [3.024008, 3.021964, 2.997995]
OUTPUT:%f [3.024008, 3.021964, 2.997995] 3.0099795
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9646.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9646
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9646
........................................ [3.535624, 3.690887, 3.535339]
OUTPUT:%f [3.535624, 3.690887, 3.535339] 3.6131130000000002
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5332.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5332
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5332
........................................ [3.646866, 3.626112, 3.563742]
OUTPUT:%f [3.646866, 3.626112, 3.563742] 3.594927
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7953.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7953
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7953
........................................ [3.721749, 3.708298, 3.874839]
OUTPUT:%f [3.721749, 3.708298, 3.874839] 3.7915685000000003
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/882.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/882
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/882
........................................ [3.237862, 3.208945, 3.237027]
OUTPUT:%f [3.237862, 3.208945, 3.237027] 3.2229859999999997
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4035.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4035
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4035
........................................ [2.920763, 2.78861, 2.821012]
OUTPUT:%f [2.920763, 2.78861, 2.821012] 2.804811
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3791.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3791
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3791
........................................ [0.53874, 0.534248, 0.534947]
OUTPUT:%f [0.53874, 0.534248, 0.534947] 0.5345975
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7072.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7072
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7072
........................................ [3.447351, 3.454138, 3.416429]
OUTPUT:%f [3.447351, 3.454138, 3.416429] 3.4352834999999997
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4330.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4330
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4330
........................................ [3.385017, 3.372374, 3.434829]
OUTPUT:%f [3.385017, 3.372374, 3.434829] 3.4036015
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5414.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5414
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5414
........................................ [0.43111, 0.436525, 0.437221]
OUTPUT:%f [0.43111, 0.436525, 0.437221] 0.436873
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/685.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/685
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/685
........................................ [3.347892, 3.429045, 3.429003]
OUTPUT:%f [3.347892, 3.429045, 3.429003] 3.429024
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3508.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3508
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3508
........................................ [2.496718, 2.483162, 2.660456]
OUTPUT:%f [2.496718, 2.483162, 2.660456] 2.571809
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4228.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4228
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4228
........................................ [0.187682, 0.183798, 0.183632]
OUTPUT:%f [0.187682, 0.183798, 0.183632] 0.183715
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7776.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7776
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7776
........................................ [2.792433, 3.095845, 3.09502]
OUTPUT:%f [2.792433, 3.095845, 3.09502] 3.0954325000000003
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/719.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/719
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/719
........................................ [3.326068, 3.046797, 3.176322]
OUTPUT:%f [3.326068, 3.046797, 3.176322] 3.1115595000000003
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6587.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6587
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6587
........................................ [2.195592, 2.195676, 2.225656]
OUTPUT:%f [2.195592, 2.195676, 2.225656] 2.210666
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5116.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5116
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5116
........................................ [0.399776, 0.396286, 0.397287]
OUTPUT:%f [0.399776, 0.396286, 0.397287] 0.39678650000000004
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1421.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1421
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1421
........................................ [3.611088, 3.392935, 3.435756]
OUTPUT:%f [3.611088, 3.392935, 3.435756] 3.4143455
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2860.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2860
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2860
........................................ [3.283796, 3.191247, 3.281177]
OUTPUT:%f [3.283796, 3.191247, 3.281177] 3.236212
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8121.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8121
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8121
........................................ [3.723868, 3.883193, 3.713393]
OUTPUT:%f [3.723868, 3.883193, 3.713393] 3.798293
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3687.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3687
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3687
........................................ [3.170288, 3.071538, 3.185901]
OUTPUT:%f [3.170288, 3.071538, 3.185901] 3.1287195
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5085.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5085
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5085
........................................ [3.278244, 3.283205, 3.443498]
OUTPUT:%f [3.278244, 3.283205, 3.443498] 3.3633515000000003
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1628.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1628
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1628
........................................ [3.432101, 3.713927, 3.710383]
OUTPUT:%f [3.432101, 3.713927, 3.710383] 3.712155
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/818.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/818
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/818
........................................ [1.827176, 1.832253, 1.832901]
OUTPUT:%f [1.827176, 1.832253, 1.832901] 1.832577
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6791.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6791
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6791
........................................ [3.482226, 3.538291, 3.5653]
OUTPUT:%f [3.482226, 3.538291, 3.5653] 3.5517955
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7464.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7464
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7464
........................................ [3.717593, 3.706841, 3.705436]
OUTPUT:%f [3.717593, 3.706841, 3.705436] 3.7061385
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2662.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2662
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2662
........................................ [0.640231, 0.637524, 0.636849]
OUTPUT:%f [0.640231, 0.637524, 0.636849] 0.6371865
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3312.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3312
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3312
........................................ [0.527401, 0.523423, 0.523901]
OUTPUT:%f [0.527401, 0.523423, 0.523901] 0.523662
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4005.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4005
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4005
........................................ [0.63113, 0.621099, 0.623062]
OUTPUT:%f [0.63113, 0.621099, 0.623062] 0.6220805
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6426.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6426
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6426
........................................ [4.053024, 4.208215, 4.03781]
OUTPUT:%f [4.053024, 4.208215, 4.03781] 4.1230125
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4817.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4817
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4817
........................................ [3.014824, 3.046872, 3.031989]
OUTPUT:%f [3.014824, 3.046872, 3.031989] 3.0394305
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3985.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3985
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3985
........................................ [3.513996, 3.719726, 3.387339]
OUTPUT:%f [3.513996, 3.719726, 3.387339] 3.5535325
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3148.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3148
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3148
........................................ [0.203937, 0.198249, 0.196977]
OUTPUT:%f [0.203937, 0.198249, 0.196977] 0.197613
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5492.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5492
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5492
........................................ [3.500032, 3.49666, 3.492274]
OUTPUT:%f [3.500032, 3.49666, 3.492274] 3.494467
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9656.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9656
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9656
........................................ [3.567859, 3.549226, 3.555308]
OUTPUT:%f [3.567859, 3.549226, 3.555308] 3.552267
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4233.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4233
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4233
........................................ [0.300303, 0.300584, 0.299185]
OUTPUT:%f [0.300303, 0.300584, 0.299185] 0.2998845
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3383.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3383
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3383
........................................ [3.654295, 3.483355, 3.483921]
OUTPUT:%f [3.654295, 3.483355, 3.483921] 3.483638
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3030.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3030
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3030
........................................ [0.458886, 0.451662, 0.452458]
OUTPUT:%f [0.458886, 0.451662, 0.452458] 0.45206
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6333.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6333
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6333
........................................ [3.812538, 3.913496, 3.9211]
OUTPUT:%f [3.812538, 3.913496, 3.9211] 3.9172979999999997
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7659.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7659
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7659
........................................ [3.836166, 3.830996, 3.630099]
OUTPUT:%f [3.836166, 3.830996, 3.630099] 3.7305475
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4635.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4635
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4635
........................................ [2.277994, 2.24311, 2.212655]
OUTPUT:%f [2.277994, 2.24311, 2.212655] 2.2278824999999998
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8234.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8234
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8234
........................................ [3.174798, 3.334009, 3.169608]
OUTPUT:%f [3.174798, 3.334009, 3.169608] 3.2518085
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/55.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/55
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/55
........................................ [1.758305, 1.613137, 1.571291]
OUTPUT:%f [1.758305, 1.613137, 1.571291] 1.592214
store_func_eval
problem.constants
None
NSmin:  100
NS:  200
MLA iteration:  0
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   6.215629e+04           nan     00s00  00001   6.215629e+04   1.607134e+10     00s00  00002   6.094167e+03   2.319429e+08     00s00  00003   4.325521e+03   1.184759e+08 
    00s00  00004   1.824483e+03   2.090914e+07     00s00  00005   9.861296e+02   5.711087e+06 
    00s01  00006   5.222350e+02   1.318235e+06     00s01  00007   3.130718e+02   3.190238e+05     00s01  00008   2.141775e+02   7.269408e+04     00s01  00009   1.711026e+02   1.560781e+04 
    00s01  00010   1.536567e+02   2.953752e+03     00s01  00011   1.471832e+02   5.288158e+02     00s02  00012   1.443774e+02   2.044732e+02     00s02  00013   1.420681e+02   2.283963e+02 
    00s02  00014   1.390005e+02   2.375584e+02     00s02  00015   1.355632e+02   3.752501e+01     00s02  00016   1.347384e+02   1.682766e+01     00s02  00017   1.345588e+02   4.261265e+00     00s03  00018   1.344938e+02   5.209902e-01     00s03  00019   1.344786e+02   1.826511e-01     00s03  00020   1.344719e+02   4.108228e-02 
    00s03  00021   1.344699e+02   4.399634e-02     00s03  00022   1.344680e+02   3.652592e-02     00s03  00023   1.344656e+02   3.767880e-02     00s04  00024   1.344705e+02   1.095627e+00     00s04  00025   1.344649e+02   4.857050e-02 
    00s04  00026   1.344639e+02   2.600829e-03     00s04  00027   1.344638e+02   2.900988e-04     00s04  00028   1.344638e+02   1.308193e-03 
    00s05  00029   1.344638e+02   1.108806e-04     00s05  00030   1.344638e+02   2.437562e-06     00s05  00031   1.344638e+02   1.143099e-07 
    00s05  00032   1.344638e+02   1.143099e-07 
Runtime:     00s05
Optimization status: Converged

Optimization restart 1/1, f = 134.46375531545291
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16']]
prob:  <search.SurrogateProblem object at 0x14b8d8be89d0>
0 OK
bestX [array([[0.1919, 0.5466, 0.5197, 0.6752, 0.0488]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1397.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1397
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1397
........................................ [0.304289, 0.303239, 0.301253]
OUTPUT:%f [0.304289, 0.303239, 0.301253] 0.302246
store_func_eval
problem.constants
None
MLA iteration:  1
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   6.290199e+04           nan     00s00  00001   6.290199e+04   1.632395e+10     00s00  00002   6.195771e+03   2.396538e+08     00s00  00003   4.382727e+03   1.217167e+08 
    00s00  00004   1.847232e+03   2.150495e+07     00s00  00005   9.964167e+02   5.864424e+06     00s01  00006   5.265955e+02   1.353057e+06 
    00s01  00007   3.148909e+02   3.272423e+05     00s01  00008   2.148918e+02   7.454405e+04 
    00s01  00009   1.713677e+02   1.599444e+04     00s01  00010   1.537695e+02   3.019843e+03     00s01  00011   1.472730e+02   5.366605e+02     00s02  00012   1.444851e+02   2.066649e+02     00s02  00013   1.421978e+02   2.346834e+02     00s02  00014   1.391479e+02   2.525336e+02     00s02  00015   1.356390e+02   4.405194e+01 
    00s02  00016   1.347700e+02   1.885209e+01     00s02  00017   1.345687e+02   4.299202e+00     00s03  00018   1.345033e+02   7.133921e-01     00s03  00019   1.344826e+02   2.657937e-01     00s03  00020   1.344740e+02   1.042481e-01     00s03  00021   1.344704e+02   1.197356e-01     00s03  00022   1.344652e+02   1.029423e-01 
    00s03  00023   1.344612e+02   4.996675e-02     00s04  00024   1.344623e+02   3.515961e-01     00s04  00025   1.344608e+02   1.486088e-02     00s04  00026   1.344604e+02   8.501664e-04     00s04  00027   1.344604e+02   1.792278e-05     00s04  00028   1.344604e+02   1.198801e-05     00s04  00029   1.344604e+02   1.198801e-05 
Runtime:     00s04
Optimization status: Converged

Optimization restart 1/1, f = 134.4603822292771
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4']]
prob:  <search.SurrogateProblem object at 0x14b8d8ac1f40>
0 OK
bestX [array([[0.233 , 0.8477, 0.7628, 0.7899, 0.053 ]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3935.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3935
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3935
........................................ [0.299675, 0.299358, 0.298806]
OUTPUT:%f [0.299675, 0.299358, 0.298806] 0.299082
store_func_eval
problem.constants
None
MLA iteration:  2
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   6.415498e+04           nan     00s00  00001   6.415498e+04   1.675562e+10     00s00  00002   6.388789e+03   2.528624e+08 
    00s00  00003   4.501049e+03   1.273750e+08     00s00  00004   1.903439e+03   2.262790e+07 
    00s00  00005   1.027593e+03   6.184962e+06     00s01  00006   5.430691e+02   1.436338e+06     00s01  00007   3.232240e+02   3.496318e+05     00s01  00008   2.185728e+02   7.995169e+04 
    00s01  00009   1.728968e+02   1.707372e+04     00s01  00010   1.547385e+02   3.168733e+03     00s01  00011   1.483775e+02   5.384309e+02     00s02  00012   1.458611e+02   1.876684e+02     00s02  00013   1.438529e+02   2.067531e+02 
    00s02  00014   1.410749e+02   2.263631e+02     00s02  00015   1.376608e+02   5.726465e+01     00s02  00016   1.363846e+02   3.772787e+01     00s02  00017   1.359421e+02   2.772072e+00     00s03  00018   1.358862e+02   8.338326e-01     00s03  00019   1.358506e+02   4.021115e-01 
    00s03  00020   1.358141e+02   4.593001e-01     00s03  00021   1.357965e+02   4.534911e-01     00s03  00022   1.357843e+02   2.667368e-01     00s03  00023   1.357925e+02   2.808555e+00     00s04  00024   1.357825e+02   4.334452e-02     00s04  00025   1.357813e+02   5.378140e-03     00s04  00026   1.357811e+02   3.647895e-04 
    00s04  00027   1.357811e+02   1.590129e-06     00s04  00028   1.357811e+02   2.815659e-07     00s04  00029   1.357811e+02   2.815659e-07 
Runtime:     00s04
Optimization status: Converged

Optimization restart 1/1, f = 135.78112693502743
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4']]
prob:  <search.SurrogateProblem object at 0x14b8d8b41340>
0 OK
bestX [array([[0.7428, 0.8348, 0.4102, 0.7785, 0.1445]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4502.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4502
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4502
........................................ [0.161731, 0.15893, 0.158837]
OUTPUT:%f [0.161731, 0.15893, 0.158837] 0.1588835
store_func_eval
problem.constants
None
MLA iteration:  3
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   6.577798e+04           nan     00s00  00001   6.577798e+04   1.797213e+10     00s00  00002   6.485654e+03   2.606271e+08     00s00  00003   4.606060e+03   1.331773e+08     00s00  00004   1.946733e+03   2.358395e+07 
    00s00  00005   1.052633e+03   6.469050e+06     00s01  00006   5.556381e+02   1.503275e+06 
    00s01  00007   3.298528e+02   3.665076e+05     00s01  00008   2.220936e+02   8.392727e+04     00s01  00009   1.749298e+02   1.796107e+04     00s01  00010   1.561055e+02   3.339284e+03     00s01  00011   1.495005e+02   5.633653e+02 
    00s02  00012   1.469214e+02   1.912661e+02     00s02  00013   1.449069e+02   2.096718e+02     00s02  00014   1.421112e+02   2.362076e+02     00s02  00015   1.385654e+02   7.494491e+01 
    00s02  00016   1.372793e+02   5.839932e+01     00s02  00017   1.367514e+02   1.292201e+00     00s03  00018   1.367200e+02   9.720276e-01     00s03  00019   1.366466e+02   1.305153e+00     00s03  00020   1.366320e+02   3.509275e+00     00s03  00021   1.366209e+02   5.297824e-01     00s03  00022   1.366142e+02   1.237678e-01     00s03  00023   1.366028e+02   2.879318e-01 
    00s04  00024   1.365993e+02   6.401694e-02     00s04  00025   1.365986e+02   9.840447e-04     00s04  00026   1.365986e+02   2.028721e-04     00s04  00027   1.365986e+02   3.219610e-05     00s04  00028   1.365986e+02   4.699455e-07     00s04  00029   1.365986e+02   4.699455e-07 
Runtime:     00s04
Optimization status: Converged

Optimization restart 1/1, f = 136.59857344790208
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8']]
prob:  <search.SurrogateProblem object at 0x14b8d8b74910>
0 OK
bestX [array([[0.0307, 0.9911, 0.5269, 0.6176, 0.0805]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8793.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8793
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8793
........................................ [0.310461, 0.309262, 0.308825]
OUTPUT:%f [0.310461, 0.309262, 0.308825] 0.3090435
store_func_eval
problem.constants
None
MLA iteration:  4
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   6.676230e+04           nan     00s00  00001   6.676230e+04   1.850405e+10     00s00  00002   6.656427e+03   2.704666e+08     00s00  00003   4.732254e+03   1.384606e+08     00s00  00004   1.999278e+03   2.453355e+07 
    00s00  00005   1.079527e+03   6.730678e+06     00s01  00006   5.680317e+02   1.562783e+06     00s01  00007   3.358151e+02   3.804316e+05     00s01  00008   2.251476e+02   8.691538e+04 
    00s01  00009   1.768068e+02   1.855563e+04     00s01  00010   1.575304e+02   3.444169e+03     00s01  00011   1.507432e+02   5.822803e+02     00s02  00012   1.480625e+02   2.048722e+02     00s02  00013   1.459425e+02   2.368494e+02     00s02  00014   1.430121e+02   2.830018e+02     00s02  00015   1.394115e+02   8.996690e+01     00s02  00016   1.381093e+02   1.721839e+01     00s02  00017   1.378185e+02   2.971163e+00 
    00s03  00018   1.377444e+02   1.168945e+00     00s03  00019   1.376726e+02   6.110687e-01     00s03  00020   1.376290e+02   8.551642e-01     00s03  00021   1.376092e+02   3.611116e-01     00s03  00022   1.375984e+02   2.217326e-01     00s04  00023   1.375896e+02   7.627991e-02     00s04  00024   1.375889e+02   2.823675e-02 
    00s04  00025   1.375887e+02   2.166091e-04     00s04  00026   1.375887e+02   2.863121e-05     00s04  00027   1.375887e+02   7.865016e-06     00s04  00028   1.375887e+02   2.767814e-06 
    00s05  00029   1.375887e+02   2.767814e-06 
Runtime:     00s05
Optimization status: Converged

Optimization restart 1/1, f = 137.58865879281916
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4']]
prob:  <search.SurrogateProblem object at 0x14b8d8374340>
0 OK
bestX [array([[0.0143, 0.5384, 0.9981, 0.1126, 0.016 ]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8311.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8311
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8311
........................................ [0.594567, 0.596045, 0.599584]
OUTPUT:%f [0.594567, 0.596045, 0.599584] 0.5978145
store_func_eval
problem.constants
None
MLA iteration:  5
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   6.708682e+04           nan     00s00  00001   6.708682e+04   1.877644e+10     00s00  00002   6.657586e+03   2.708712e+08     00s00  00003   4.744559e+03   1.392082e+08     00s00  00004   2.005874e+03   2.466172e+07 
    00s00  00005   1.083885e+03   6.772478e+06     00s01  00006   5.703265e+02   1.572180e+06     00s01  00007   3.371646e+02   3.825466e+05     00s01  00008   2.260942e+02   8.730575e+04     00s01  00009   1.776381e+02   1.860844e+04     00s01  00010   1.583553e+02   3.443647e+03 
    00s01  00011   1.515932e+02   5.789873e+02     00s02  00012   1.489410e+02   2.039953e+02     00s02  00013   1.468502e+02   2.381513e+02     00s02  00014   1.439448e+02   2.896226e+02     00s02  00015   1.403400e+02   1.004386e+02     00s02  00016   1.390176e+02   2.500160e+01     00s03  00017   1.386872e+02   2.873270e+00 
    00s03  00018   1.386204e+02   1.112118e+00     00s03  00019   1.385633e+02   5.919596e-01     00s03  00020   1.385289e+02   6.045557e-01     00s03  00021   1.385195e+02   2.008077e-01 
    00s03  00022   1.385136e+02   9.435550e-02     00s04  00023   1.385083e+02   3.126786e-02     00s04  00024   1.385072e+02   9.902196e-03     00s04  00025   1.385075e+02   8.880638e-02 
    00s04  00026   1.385071e+02   1.154922e-04     00s04  00027   1.385071e+02   2.237580e-06     00s04  00028   1.385071e+02   3.506873e-05     00s05  00029   1.385071e+02   3.098579e-06     00s05  00030   1.385071e+02   3.098579e-06 
Runtime:     00s05
Optimization status: Converged

Optimization restart 1/1, f = 138.50711781591755
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4']]
prob:  <search.SurrogateProblem object at 0x14b8c3fa4190>
0 OK
bestX [array([[0.3091, 0.552 , 0.8926, 0.2686, 0.0825]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3916.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3916
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3916
........................................ [0.370348, 0.384412, 0.382543]
OUTPUT:%f [0.370348, 0.384412, 0.382543] 0.3834775
store_func_eval
problem.constants
None
MLA iteration:  6
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   6.730118e+04           nan     00s00  00001   6.730118e+04   1.894966e+10     00s00  00002   6.673379e+03   2.719809e+08     00s00  00003   4.761179e+03   1.400337e+08     00s00  00004   2.013980e+03   2.479657e+07 
    00s00  00005   1.089659e+03   6.814305e+06     00s01  00006   5.744388e+02   1.583323e+06     00s01  00007   3.403394e+02   3.860066e+05     00s01  00008   2.286150e+02   8.837934e+04     00s01  00009   1.797415e+02   1.892464e+04     00s01  00010   1.602437e+02   3.521880e+03     00s01  00011   1.534115e+02   5.920994e+02     00s02  00012   1.507568e+02   2.010068e+02     00s02  00013   1.486878e+02   2.302392e+02     00s02  00014   1.457690e+02   2.908984e+02     00s02  00015   1.418271e+02   1.573068e+02     00s02  00016   1.414024e+02   2.917811e+02 
    00s03  00017   1.395389e+02   7.486382e+00     00s03  00018   1.394422e+02   4.085725e-01     00s03  00019   1.394271e+02   5.050145e-02     00s03  00020   1.394252e+02   3.397346e-02 
    00s03  00021   1.394229e+02   3.437263e-02     00s03  00022   1.394188e+02   1.644900e-01     00s04  00023   1.379794e+02   7.766172e+01     00s04  00024   1.993300e+02   4.545645e+03     00s04  00025   1.379454e+02   1.054545e+02     00s04  00026   1.379436e+02   1.143891e+02     00s04  00027   1.875438e+03   2.682236e+06     00s04  00028   1.996548e+02   4.556372e+03     00s05  00029   1.379432e+02   1.180105e+02     00s05  00030   1.378549e+02   1.173312e+02     00s05  00031   1.375362e+02   1.174647e+02     00s05  00032   1.364327e+02   1.150099e+02     00s05  00033   1.360460e+02   5.373405e+01     00s05  00034   1.354937e+02   6.910864e+00     00s06  00035   1.353344e+02   4.117979e+00     00s06  00036   1.353147e+02   5.682963e+00     00s06  00037   1.352652e+02   2.021598e+00     00s06  00038   1.352339e+02   5.664041e-01     00s06  00039   1.352072e+02   7.430257e-02     00s07  00040   1.352066e+02   1.665397e-02 
    00s07  00041   1.352065e+02   1.623144e-03     00s07  00042   1.352065e+02   1.197864e-06     00s07  00043   1.352065e+02   1.496793e-07     00s07  00044   1.352065e+02   1.496793e-07 
Runtime:     00s07
Optimization status: Converged

Optimization restart 1/1, f = 135.2064599551422
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4']]
prob:  <search.SurrogateProblem object at 0x14b8d83c3430>
0 OK
bestX [array([[0.3878, 0.1284, 0.1085, 0.1726, 0.2494]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9274.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9274
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9274
........................................ [2.036172, 1.980665, 2.020404]
OUTPUT:%f [2.036172, 1.980665, 2.020404] 2.0005345
store_func_eval
problem.constants
None
MLA iteration:  7
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   6.923544e+04           nan     00s00  00001   6.923544e+04   1.968652e+10     00s00  00002   6.818022e+03   2.897499e+08     00s00  00003   4.823282e+03   1.467979e+08     00s00  00004   2.046619e+03   2.610100e+07 
    00s00  00005   1.108364e+03   7.161483e+06     00s01  00006   5.860286e+02   1.669126e+06     00s01  00007   3.474906e+02   4.081724e+05 
    00s01  00008   2.329882e+02   9.390966e+04     00s01  00009   1.824787e+02   2.023632e+04     00s01  00010   1.621344e+02   3.794311e+03     00s01  00011   1.549662e+02   6.340468e+02     00s02  00012   1.522364e+02   2.019411e+02     00s02  00013   1.501978e+02   2.224919e+02     00s02  00014   1.473748e+02   2.719879e+02 
    00s02  00015   1.437420e+02   9.570846e+01     00s02  00016   1.423035e+02   3.101445e+01     00s03  00017   1.418895e+02   5.353217e+00     00s03  00018   1.417864e+02   1.913103e+00     00s03  00019   1.417224e+02   4.915872e-01     00s03  00020   1.416975e+02   8.368282e-01 
    00s03  00021   1.416677e+02   1.544350e+00     00s03  00022   1.416329e+02   2.473093e+00     00s04  00023   1.416132e+02   7.506944e-01     00s04  00024   1.415903e+02   1.401806e-01     00s04  00025   1.415893e+02   1.997176e-01     00s04  00026   1.415883e+02   2.366201e-03     00s04  00027   1.415883e+02   7.744819e-05     00s04  00028   1.415883e+02   1.442703e-05     00s05  00029   1.415882e+02   4.048422e-07 
    00s05  00030   1.415882e+02   4.048422e-07 
Runtime:     00s05
Optimization status: Converged

Optimization restart 1/1, f = 141.58824999960916
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16']]
prob:  <search.SurrogateProblem object at 0x14b8d8aed4f0>
0 OK
bestX [array([[0.4803, 0.6871, 0.3104, 0.8377, 0.0221]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6603.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6603
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6603
........................................ [0.298125, 0.296206, 0.296634]
OUTPUT:%f [0.298125, 0.296206, 0.296634] 0.29642
store_func_eval
problem.constants
None
MLA iteration:  8
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   6.933889e+04           nan     00s00  00001   6.933889e+04   1.965034e+10     00s00  00002   6.837588e+03   2.918368e+08     00s00  00003   4.826978e+03   1.473196e+08     00s00  00004   2.047711e+03   2.621594e+07     00s00  00005   1.107833e+03   7.185514e+06     00s01  00006   5.853563e+02   1.673959e+06     00s01  00007   3.469411e+02   4.090283e+05 
    00s01  00008   2.326430e+02   9.402460e+04     00s01  00009   1.822995e+02   2.023201e+04     00s01  00010   1.620753e+02   3.783117e+03     00s01  00011   1.549863e+02   6.292003e+02     00s02  00012   1.523072e+02   2.004119e+02     00s02  00013   1.503084e+02   2.216280e+02     00s02  00014   1.475259e+02   2.704366e+02     00s03  00015   1.439534e+02   8.651935e+01     00s03  00016   1.424877e+02   1.515511e+01     00s03  00017   1.421416e+02   5.860332e+00     00s03  00018   1.420241e+02   1.301183e+00     00s03  00019   1.419804e+02   3.454944e-01     00s03  00020   1.419629e+02   9.278517e-01 
    00s04  00021   1.419392e+02   2.108881e+00     00s04  00022   1.419097e+02   2.354817e+00     00s04  00023   1.419122e+02   2.217209e+00     00s04  00024   1.418861e+02   1.375235e+00 
    00s04  00025   1.418764e+02   4.297907e-02     00s04  00026   1.418756e+02   8.916298e-03     00s05  00027   1.418755e+02   4.178201e-03     00s05  00028   1.418755e+02   9.331277e-04     00s05  00029   1.418755e+02   7.780275e-07 
    00s05  00030   1.418755e+02   1.120622e-07     00s05  00031   1.418755e+02   1.120622e-07 
Runtime:     00s05
Optimization status: Converged

Optimization restart 1/1, f = 141.8754595773009
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4']]
prob:  <search.SurrogateProblem object at 0x14b8c3fefeb0>
0 OK
bestX [array([[0.3511, 0.7045, 0.1926, 0.8489, 0.0869]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2840.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2840
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2840
........................................ [0.297349, 0.298458, 0.297792]
OUTPUT:%f [0.297349, 0.298458, 0.297792] 0.298125
store_func_eval
problem.constants
None
MLA iteration:  9
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   7.473302e+04           nan     00s00  00001   7.473302e+04   2.242301e+10     00s00  00002   7.327717e+03   3.412089e+08     00s00  00003   5.130348e+03   1.698563e+08     00s00  00004   2.173584e+03   3.032776e+07 
    00s00  00005   1.170931e+03   8.291666e+06     00s01  00006   6.156575e+02   1.935230e+06 
    00s01  00007   3.618378e+02   4.742603e+05     00s01  00008   2.397259e+02   1.097250e+05     00s01  00009   1.855207e+02   2.386589e+04     00s01  00010   1.635050e+02   4.534969e+03     00s02  00011   1.557426e+02   7.518818e+02     00s02  00012   1.529178e+02   2.106235e+02     00s02  00013   1.509735e+02   2.183227e+02     00s02  00014   1.482903e+02   2.921693e+02 
    00s02  00015   1.445737e+02   1.757625e+02     00s02  00016   1.419552e+02   1.834898e+01     00s03  00017   1.416712e+02   1.504148e+01     00s03  00018   1.415369e+02   2.254294e+00 
    00s03  00019   1.414970e+02   1.292721e+00     00s03  00020   1.414560e+02   5.563428e-01     00s03  00021   1.414353e+02   5.765447e-01     00s03  00022   1.414253e+02   3.131850e-01     00s04  00023   1.414127e+02   5.261936e-01     00s04  00024   1.414147e+02   4.271351e+00     00s04  00025   1.414056e+02   6.930889e-01 
    00s04  00026   1.414003e+02   9.780088e-02     00s04  00027   1.413993e+02   1.889957e-03     00s05  00028   1.413993e+02   3.963204e-05     00s05  00029   1.413993e+02   2.564472e-06     00s05  00030   1.413993e+02   1.902009e-07     00s05  00031   1.413993e+02   1.902009e-07 
Runtime:     00s05
Optimization status: Converged

Optimization restart 1/1, f = 141.39932739284848
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4']]
prob:  <search.SurrogateProblem object at 0x14b8c3ffaa30>
0 OK
bestX [array([[0.2575, 0.553 , 0.2032, 0.9964, 0.0029]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/454.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/454
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/454
........................................ [0.314256, 0.328462, 0.328203]
OUTPUT:%f [0.314256, 0.328462, 0.328203] 0.3283325
store_func_eval
problem.constants
None
MLA iteration:  10
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   8.017062e+04           nan     00s00  00001   8.017062e+04   2.493600e+10     00s00  00002   7.967290e+03   4.081412e+08     00s00  00003   5.477750e+03   1.972318e+08     00s00  00004   2.310525e+03   3.529030e+07 
    00s00  00005   1.235383e+03   9.567949e+06     00s01  00006   6.464486e+02   2.232663e+06     00s01  00007   3.773473e+02   5.483473e+05 
    00s01  00008   2.474852e+02   1.278976e+05     00s01  00009   1.892389e+02   2.816681e+04 
    00s01  00010   1.652515e+02   5.437851e+03 
    00s02  00011   1.567296e+02   9.008585e+02     00s02  00012   1.537422e+02   2.242911e+02     00s02  00013   1.518589e+02   2.114871e+02     00s02  00014   1.493064e+02   2.916032e+02     00s02  00015   1.455624e+02   2.147133e+02     00s02  00016   1.413264e+02   2.665362e+02     00s03  00017   1.411121e+02   3.426933e+02 
    00s03  00018   1.398227e+02   1.024951e+01     00s03  00019   1.396880e+02   3.648228e-01     00s03  00020   1.396777e+02   3.027042e-01     00s03  00021   1.396440e+02   3.662431e-01     00s04  00022   1.396420e+02   1.112185e-01 
    00s04  00023   1.396409e+02   5.971266e-03     00s04  00024   1.396408e+02   1.344729e-03     00s04  00025   1.396407e+02   1.233146e-03     00s04  00026   1.396407e+02   6.167839e-04     00s04  00027   1.396407e+02   1.244599e-06     00s05  00028   1.396407e+02   1.377324e-07 
    00s05  00029   1.396407e+02   1.377324e-07 
Runtime:     00s05
Optimization status: Converged

Optimization restart 1/1, f = 139.64071527624137
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4']]
prob:  <search.SurrogateProblem object at 0x14b8c3ed2550>
0 OK
bestX [array([[0.4214, 0.7057, 0.0446, 0.9847, 0.0199]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2174.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2174
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2174
........................................ [0.32218, 0.337207, 0.337158]
OUTPUT:%f [0.32218, 0.337207, 0.337158] 0.3371825
store_func_eval
problem.constants
None
MLA iteration:  11
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   8.028887e+04           nan     00s00  00001   8.028887e+04   2.499804e+10 
    00s00  00002   7.976705e+03   4.092293e+08     00s00  00003   5.483673e+03   1.977077e+08     00s00  00004   2.313339e+03   3.538072e+07     00s00  00005   1.236903e+03   9.592871e+06     00s01  00006   6.471985e+02   2.238919e+06     00s01  00007   3.776787e+02   5.499074e+05     00s01  00008   2.476192e+02   1.281948e+05     00s01  00009   1.893352e+02   2.818017e+04     00s01  00010   1.653933e+02   5.416940e+03 
    00s02  00011   1.569276e+02   8.923601e+02     00s02  00012   1.539662e+02   2.267595e+02     00s02  00013   1.520713e+02   2.228937e+02     00s02  00014   1.494402e+02   3.228077e+02     00s02  00015   1.455133e+02   2.744824e+02     00s02  00016   1.410391e+02   1.734528e+02     00s03  00017   1.431584e+02   9.205800e+02 
    00s03  00018   1.401661e+02   6.058655e+00     00s03  00019   1.400363e+02   1.451838e-01     00s03  00020   1.400317e+02   1.392945e-01     00s03  00021   1.400299e+02   2.649575e-02     00s04  00022   1.400285e+02   1.022882e-02 
    00s04  00023   1.400278e+02   8.006496e-03     00s04  00024   1.400317e+02   4.556691e-01     00s04  00025   1.400276e+02   1.161883e-02 
    00s04  00026   1.400273e+02   9.237527e-04     00s04  00027   1.400272e+02   2.338239e-04     00s05  00028   1.400272e+02   1.921796e-05     00s05  00029   1.400272e+02   4.822779e-08     00s05  00030   1.400272e+02   4.822779e-08 
Runtime:     00s05
Optimization status: Converged

Optimization restart 1/1, f = 140.02724540427477
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4']]
prob:  <search.SurrogateProblem object at 0x14b8c3f28250>
0 OK
bestX [array([[0.2654, 0.1764, 0.0452, 0.9612, 0.1425]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3698.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3698
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3698
........................................ [0.511412, 0.512872, 0.511533]
OUTPUT:%f [0.511412, 0.512872, 0.511533] 0.5122025
store_func_eval
problem.constants
None
MLA iteration:  12
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   8.152026e+04           nan     00s00  00001   8.152026e+04   2.546462e+10     00s00  00002   8.088862e+03   4.255069e+08     00s00  00003   5.523332e+03   2.032285e+08     00s00  00004   2.330200e+03   3.642348e+07     00s00  00005   1.245370e+03   9.853983e+06     00s01  00006   6.530231e+02   2.303871e+06     00s01  00007   3.817306e+02   5.674822e+05     00s01  00008   2.502350e+02   1.328329e+05 
    00s01  00009   1.909211e+02   2.930154e+04     00s01  00010   1.664118e+02   5.646128e+03     00s02  00011   1.577185e+02   9.269128e+02     00s02  00012   1.547057e+02   2.295825e+02     00s02  00013   1.528245e+02   2.229493e+02     00s02  00014   1.502241e+02   3.275238e+02 
    00s02  00015   1.463053e+02   2.931357e+02     00s02  00016   1.417188e+02   1.655532e+02     00s03  00017   1.430878e+02   6.721156e+02     00s03  00018   1.408192e+02   5.118467e+00     00s03  00019   1.406856e+02   3.027135e-01     00s03  00020   1.406773e+02   4.045187e-01     00s03  00021   1.406750e+02   9.189212e-02 
    00s04  00022   1.406727e+02   3.444519e-02     00s04  00023   1.406719e+02   2.362289e-02 
    00s04  00024   1.406712e+02   8.630177e-03     00s04  00025   1.406711e+02   2.016560e-02     00s04  00026   1.406709e+02   3.086696e-05     00s04  00027   1.406709e+02   5.356325e-07     00s05  00028   1.406709e+02   5.061239e-08     00s05  00029   1.406709e+02   5.061239e-08 
Runtime:     00s05
Optimization status: Converged

Optimization restart 1/1, f = 140.6709018264063
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8']]
prob:  <search.SurrogateProblem object at 0x14b8c3fa40a0>
0 OK
bestX [array([[0.0635, 0.3245, 0.1795, 0.9583, 0.1317]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/928.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/928
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/928
........................................ [0.495704, 0.493936, 0.493867]
OUTPUT:%f [0.495704, 0.493936, 0.493867] 0.4939015
store_func_eval
problem.constants
None
MLA iteration:  13
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   8.226168e+04           nan     00s00  00001   8.226168e+04   2.590285e+10     00s00  00002   8.153120e+03   4.328052e+08     00s00  00003   5.566115e+03   2.066489e+08     00s00  00004   2.347862e+03   3.705970e+07     00s00  00005   1.253751e+03   1.002408e+07     00s01  00006   6.565444e+02   2.342776e+06 
    00s01  00007   3.831908e+02   5.767246e+05     00s01  00008   2.508172e+02   1.348729e+05 
    00s01  00009   1.911867e+02   2.969823e+04     00s01  00010   1.666027e+02   5.703501e+03     00s02  00011   1.579094e+02   9.332171e+02     00s02  00012   1.548930e+02   2.362448e+02     00s02  00013   1.529790e+02   2.387347e+02 
    00s02  00014   1.502872e+02   3.649007e+02     00s02  00015   1.462863e+02   3.466502e+02     00s02  00016   1.418156e+02   1.984167e+01     00s03  00017   1.411677e+02   3.257976e+00 
    00s03  00018   1.411546e+02   6.443615e+00     00s03  00019   1.410970e+02   1.981457e-01     00s03  00020   1.410952e+02   6.781749e-02     00s03  00021   1.410910e+02   2.102204e-01     00s04  00022   1.410892e+02   1.272355e-01     00s04  00023   1.410877e+02   6.766824e-03 
    00s04  00024   1.410877e+02   3.376859e-04     00s04  00025   1.410877e+02   2.136903e-05     00s04  00026   1.410877e+02   7.326919e-07     00s04  00027   1.410877e+02   7.326919e-07 
Runtime:     00s04
Optimization status: Converged

Optimization restart 1/1, f = 141.08765529200159
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8']]
prob:  <search.SurrogateProblem object at 0x14b8c3f32e20>
0 OK
bestX [array([[0.437 , 0.2474, 0.0054, 0.9695, 0.0449]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/243.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/243
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/243
........................................ [0.5186, 0.517478, 0.517856]
OUTPUT:%f [0.5186, 0.517478, 0.517856] 0.517667
store_func_eval
problem.constants
None
MLA iteration:  14
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   9.291668e+04           nan     00s00  00001   9.291668e+04   3.175655e+10     00s00  00002   8.990278e+03   5.512902e+08     00s00  00003   6.028791e+03   2.540960e+08     00s00  00004   2.566674e+03   4.630882e+07     00s00  00005   1.367862e+03   1.250100e+07 
    00s01  00006   7.142190e+02   2.939867e+06     00s01  00007   4.123272e+02   7.267497e+05     00s01  00008   2.650605e+02   1.714175e+05     00s01  00009   1.978091e+02   3.830455e+04     00s01  00010   1.694683e+02   7.536840e+03 
    00s02  00011   1.591735e+02   1.249140e+03     00s02  00012   1.556652e+02   2.735998e+02 
    00s02  00013   1.537024e+02   2.417682e+02     00s02  00014   1.511430e+02   3.778810e+02     00s02  00015   1.473063e+02   4.061324e+02 
    00s02  00016   1.426895e+02   3.695630e+01     00s03  00017   1.417317e+02   4.515921e+00     00s03  00018   1.415921e+02   1.373469e+00     00s03  00019   1.415836e+02   3.149969e+00     00s03  00020   1.415732e+02   2.079454e-01     00s03  00021   1.415699e+02   7.499182e-02     00s04  00022   1.415635e+02   3.266953e-01 
    00s04  00023   1.415610e+02   1.349948e-01     00s04  00024   1.415599e+02   7.551407e-03     00s04  00025   1.415598e+02   3.196747e-04     00s04  00026   1.415598e+02   2.217798e-04 
    00s05  00027   1.415598e+02   1.023944e-05     00s05  00028   1.415598e+02   1.378605e-06 
    00s05  00029   1.415598e+02   1.378605e-06 
Runtime:     00s05
Optimization status: Converged

Optimization restart 1/1, f = 141.5598196793897
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4']]
prob:  <search.SurrogateProblem object at 0x14b8c3e76ca0>
0 OK
bestX [array([[0.5437, 0.7301, 0.9512, 0.3209, 0.0697]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5586.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5586
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5586
........................................ [0.158126, 0.154245, 0.154953]
OUTPUT:%f [0.158126, 0.154245, 0.154953] 0.154599
store_func_eval
problem.constants
None
MLA iteration:  15
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   9.292950e+04           nan     00s00  00001   9.292950e+04   3.178763e+10     00s00  00002   8.990429e+03   5.510427e+08 
    00s00  00003   6.031646e+03   2.541813e+08     00s00  00004   2.568137e+03   4.632832e+07     00s00  00005   1.368918e+03   1.251244e+07     00s01  00006   7.147861e+02   2.943690e+06     00s01  00007   4.126053e+02   7.277850e+05     00s01  00008   2.652198e+02   1.715652e+05     00s01  00009   1.980022e+02   3.828287e+04     00s01  00010   1.697753e+02   7.513553e+03     00s02  00011   1.596079e+02   1.237252e+03     00s02  00012   1.562140e+02   2.622149e+02 
    00s02  00013   1.543717e+02   2.216540e+02     00s02  00014   1.519863e+02   3.404934e+02     00s02  00015   1.483413e+02   3.612206e+02     00s03  00016   1.434844e+02   1.004967e+02     00s03  00017   1.423901e+02   2.281746e+01     00s03  00018   1.422213e+02   8.522792e-01 
    00s03  00019   1.422094e+02   1.955151e-01     00s03  00020   1.422032e+02   1.518861e-01     00s03  00021   1.421991e+02   1.561143e-01     00s04  00022   1.421936e+02   6.263259e-02     00s04  00023   1.421938e+02   2.055282e-01 
    00s04  00024   1.421930e+02   2.523534e-02     00s04  00025   1.421927e+02   1.428951e-03     00s04  00026   1.421927e+02   4.619689e-05     00s05  00027   1.421927e+02   7.781150e-06     00s05  00028   1.421927e+02   1.495778e-06     00s05  00029   1.421927e+02   1.495778e-06 
Runtime:     00s05
Optimization status: Converged

Optimization restart 1/1, f = 142.19266843248954
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4']]
prob:  <search.SurrogateProblem object at 0x14b8c3f06ee0>
0 OK
bestX [array([[0.2087, 0.235 , 0.0742, 0.9632, 0.1916]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2344.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2344
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2344
........................................ [1.817352, 2.000196, 1.809544]
OUTPUT:%f [1.817352, 2.000196, 1.809544] 1.9048699999999998
store_func_eval
problem.constants
None
MLA iteration:  16
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   1.073997e+05           nan     00s00  00001   1.073997e+05   4.091577e+10     00s00  00002   1.092625e+04   7.724208e+08     00s00  00003   7.265548e+03   3.486805e+08     00s00  00004   3.133899e+03   6.451936e+07     00s00  00005   1.677383e+03   1.746212e+07     00s01  00006   8.790857e+02   4.144808e+06     00s01  00007   5.052860e+02   1.034739e+06     00s01  00008   3.200188e+02   2.482779e+05     00s01  00009   2.330568e+02   5.719381e+04     00s01  00010   1.945598e+02   1.188954e+04 
    00s02  00011   1.793512e+02   2.134314e+03 
    00s02  00012   1.736518e+02   4.469908e+02     00s02  00013   1.705515e+02   3.265942e+02     00s02  00014   1.670044e+02   4.832572e+02     00s02  00015   1.619179e+02   5.624896e+02     00s03  00016   1.553419e+02   1.139839e+02     00s03  00017   1.535730e+02   5.937778e+01     00s03  00018   1.531290e+02   1.526527e+01     00s03  00019   1.529943e+02   8.397504e-01     00s03  00020   1.529759e+02   1.823316e-01     00s03  00021   1.529723e+02   2.570130e-01 
    00s04  00022   1.529708e+02   6.172345e-02     00s04  00023   1.529699e+02   4.898105e-02     00s04  00024   1.529682e+02   7.045870e-02     00s04  00025   1.529663e+02   3.571734e-02     00s04  00026   1.529660e+02   1.071698e-03     00s05  00027   1.529660e+02   1.201744e-05     00s05  00028   1.529660e+02   1.351888e-06     00s05  00029   1.529660e+02   1.351888e-06 
Runtime:     00s05
Optimization status: Converged

Optimization restart 1/1, f = 152.966022782518
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16']]
prob:  <search.SurrogateProblem object at 0x14b8c3fcf220>
0 OK
bestX [array([[0.3186, 0.2177, 0.1333, 0.8588, 0.1432]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2028.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2028
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2028
........................................ [0.50795, 0.503818, 0.502344]
OUTPUT:%f [0.50795, 0.503818, 0.502344] 0.503081
store_func_eval
problem.constants
None
MLA iteration:  17
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   1.100329e+05           nan     00s00  00001   1.100329e+05   4.298292e+10     00s00  00002   1.111027e+04   8.035879e+08     00s00  00003   7.396269e+03   3.632530e+08     00s00  00004   3.192638e+03   6.730785e+07     00s00  00005   1.707620e+03   1.822687e+07 
    00s01  00006   8.928342e+02   4.324543e+06     00s01  00007   5.114901e+02   1.078719e+06     00s01  00008   3.227480e+02   2.587210e+05     00s01  00009   2.342476e+02   5.961770e+04     00s01  00010   1.950478e+02   1.240290e+04     00s02  00011   1.794971e+02   2.233269e+03     00s02  00012   1.735902e+02   4.787348e+02 
    00s02  00013   1.703070e+02   3.658193e+02     00s02  00014   1.665629e+02   5.476857e+02     00s02  00015   1.614568e+02   6.099242e+02     00s03  00016   1.551947e+02   8.653266e+01     00s03  00017   1.532905e+02   1.741757e+01     00s03  00018   1.529685e+02   4.577842e+00     00s03  00019   1.529139e+02   2.859849e+00     00s03  00020   1.528952e+02   7.680930e-02     00s04  00021   1.528947e+02   4.392270e-02 
    00s04  00022   1.528933e+02   3.273801e-02     00s04  00023   1.528918e+02   4.463343e-02     00s04  00024   1.528912e+02   7.486053e-02     00s04  00025   1.528908e+02   3.453888e-03     00s04  00026   1.528908e+02   4.470130e-04     00s05  00027   1.528908e+02   7.977246e-06 
    00s05  00028   1.528908e+02   7.556124e-07     00s05  00029   1.528908e+02   7.556124e-07 
Runtime:     00s05
Optimization status: Converged

Optimization restart 1/1, f = 152.8907903749192
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8']]
prob:  <search.SurrogateProblem object at 0x14b8c3fa3d30>
0 OK
bestX [array([[0.4226, 0.3407, 0.1031, 0.9371, 0.035 ]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8825.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8825
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8825
........................................ [0.505361, 0.50521, 0.505768]
OUTPUT:%f [0.505361, 0.50521, 0.505768] 0.5054890000000001
store_func_eval
problem.constants
None
MLA iteration:  18
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   1.110100e+05           nan     00s00  00001   1.110100e+05   4.304081e+10     00s00  00002   1.143636e+04   8.388001e+08     00s00  00003   7.559444e+03   3.746082e+08     00s00  00004   3.262035e+03   6.962513e+07     00s01  00005   1.739181e+03   1.880608e+07     00s01  00006   9.062717e+02   4.458688e+06     00s01  00007   5.167223e+02   1.109278e+06     00s01  00008   3.244331e+02   2.651059e+05 
    00s01  00009   2.345059e+02   6.076310e+04     00s01  00010   1.947450e+02   1.251998e+04     00s02  00011   1.789842e+02   2.220104e+03     00s02  00012   1.729957e+02   4.902914e+02 
    00s02  00013   1.696447e+02   3.974471e+02     00s02  00014   1.658266e+02   5.675371e+02     00s02  00015   1.606478e+02   5.567661e+02     00s03  00016   1.548264e+02   7.244547e+01     00s03  00017   1.531007e+02   1.252510e+01     00s03  00018   1.527210e+02   2.407395e+00     00s03  00019   1.527243e+02   5.290190e+00 
    00s03  00020   1.526838e+02   3.065741e-01     00s04  00021   1.526799e+02   2.247281e-02     00s04  00022   1.526797e+02   4.429412e-03 
    00s04  00023   1.526797e+02   1.821917e-03     00s04  00024   1.526797e+02   1.547300e-03     00s04  00025   1.526797e+02   3.281078e-03     00s05  00026   1.526796e+02   1.571890e-03 
    00s05  00027   1.526796e+02   1.933992e-04     00s05  00028   1.526796e+02   1.537524e-05     00s05  00029   1.526796e+02   7.824054e-07     00s05  00030   1.526796e+02   7.824054e-07 
Runtime:     00s05
Optimization status: Converged

Optimization restart 1/1, f = 152.6796067607218
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4']]
prob:  <search.SurrogateProblem object at 0x14b8c3d85c40>
0 OK
bestX [array([[0.3604, 0.3125, 0.2438, 0.8802, 0.1416]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8538.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8538
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8538
........................................ [0.497087, 0.494092, 0.522623]
OUTPUT:%f [0.497087, 0.494092, 0.522623] 0.5083575
store_func_eval
problem.constants
None
MLA iteration:  19
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   1.123259e+05           nan     00s00  00001   1.123259e+05   4.292510e+10     00s00  00002   1.172181e+04   8.842774e+08     00s00  00003   7.634304e+03   3.845545e+08 
    00s00  00004   3.303060e+03   7.195767e+07     00s01  00005   1.757160e+03   1.935861e+07     00s01  00006   9.155218e+02   4.597638e+06     00s01  00007   5.209134e+02   1.144058e+06 
    00s01  00008   3.260120e+02   2.736505e+05     00s01  00009   2.347205e+02   6.271401e+04     00s01  00010   1.942825e+02   1.288765e+04     00s02  00011   1.782201e+02   2.261576e+03     00s02  00012   1.721555e+02   5.011467e+02     00s02  00013   1.688325e+02   4.155502e+02     00s02  00014   1.650570e+02   5.739273e+02     00s02  00015   1.597639e+02   5.249579e+02 
    00s03  00016   1.538972e+02   4.658899e+01     00s03  00017   1.524967e+02   2.075158e+01     00s03  00018   1.521325e+02   2.185852e+00 
    00s03  00019   1.521134e+02   1.525525e+00     00s03  00020   1.521030e+02   6.450877e-02     00s04  00021   1.521025e+02   4.673020e-02 
    00s04  00022   1.521006e+02   5.677652e-02     00s04  00023   1.520987e+02   4.819596e-02     00s04  00024   1.520981e+02   1.689694e-02     00s04  00025   1.520980e+02   6.131619e-03 
    00s05  00026   1.520980e+02   4.963591e-05     00s05  00027   1.520980e+02   4.036973e-06     00s05  00028   1.520980e+02   4.036973e-06 
Runtime:     00s05
Optimization status: Converged

Optimization restart 1/1, f = 152.09796817242034
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8']]
prob:  <search.SurrogateProblem object at 0x14b8d834ec40>
0 OK
bestX [array([[0.2858, 0.4529, 0.1768, 0.5487, 0.0174]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7296.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7296
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7296
........................................ [0.52574, 0.521693, 0.525751]
OUTPUT:%f [0.52574, 0.521693, 0.525751] 0.523722
store_func_eval
problem.constants
None
MLA iteration:  20
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   1.161086e+05           nan     00s00  00001   1.161086e+05   4.560624e+10     00s00  00002   1.208968e+04   9.487356e+08     00s00  00003   7.838842e+03   4.095202e+08     00s00  00004   3.391399e+03   7.674495e+07 
    00s01  00005   1.801889e+03   2.062771e+07     00s01  00006   9.375067e+02   4.902499e+06     00s01  00007   5.318925e+02   1.220258e+06     00s01  00008   3.315193e+02   2.921516e+05     00s01  00009   2.376219e+02   6.715092e+04     00s01  00010   1.959637e+02   1.390647e+04 
    00s02  00011   1.793508e+02   2.467110e+03     00s02  00012   1.730724e+02   5.318352e+02     00s02  00013   1.696924e+02   4.241826e+02     00s02  00014   1.659132e+02   6.005121e+02     00s02  00015   1.605841e+02   5.982719e+02     00s03  00016   1.541145e+02   6.549760e+01 
    00s03  00017   1.523364e+02   2.612715e+01     00s03  00018   1.519718e+02   3.976224e+00     00s03  00019   1.519212e+02   1.521740e+00     00s03  00020   1.519118e+02   3.667522e-02 
    00s04  00021   1.519115e+02   5.959286e-03     00s04  00022   1.519114e+02   4.650051e-03     00s04  00023   1.519112e+02   4.799588e-03     00s04  00024   1.519110e+02   5.693804e-03     00s04  00025   1.519109e+02   1.462234e-03     00s05  00026   1.519109e+02   1.695509e-05 
    00s05  00027   1.519109e+02   1.938690e-06     00s05  00028   1.519109e+02   1.938690e-06 
Runtime:     00s05
Optimization status: Converged

Optimization restart 1/1, f = 151.91089797807894
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4']]
prob:  <search.SurrogateProblem object at 0x14b8d83b5e20>
0 OK
bestX [array([[0.0333, 0.0316, 0.2122, 0.9827, 0.025 ]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7900.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7900
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7900
........................................ [0.501485, 0.498655, 0.563856]
OUTPUT:%f [0.501485, 0.498655, 0.563856] 0.5312555
store_func_eval
problem.constants
None
MLA iteration:  21
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   1.371140e+05           nan     00s00  00001   1.371140e+05   6.050982e+10     00s00  00002   1.568582e+04   1.501442e+09 
    00s00  00003   9.795238e+03   6.180574e+08     00s00  00004   4.118781e+03   1.128783e+08     00s01  00005   2.159262e+03   2.978553e+07     00s01  00006   1.121854e+03   7.091749e+06     00s01  00007   6.340139e+02   1.787152e+06     00s01  00008   3.880937e+02   4.343021e+05     00s01  00009   2.701212e+02   1.014687e+05     00s02  00010   2.168512e+02   2.179094e+04 
    00s02  00011   1.952429e+02   4.111518e+03     00s02  00012   1.872592e+02   7.421323e+02     00s02  00013   1.837192e+02   3.086694e+02     00s02  00014   1.805970e+02   3.769091e+02 
    00s02  00015   1.761771e+02   4.577501e+02     00s03  00016   1.695216e+02   2.820198e+02     00s03  00017   1.636288e+02   1.915175e+02     00s03  00018   1.699366e+02   4.429827e+03     00s03  00019   1.628248e+02   1.446629e+01 
    00s03  00020   1.617575e+02   3.958511e+01     00s04  00021   1.581288e+02   1.069294e+03     00s04  00022   1.597120e+02   1.482296e+02     00s04  00023   1.575711e+02   6.372726e+02     00s04  00024   1.597952e+02   1.383052e+03     00s04  00025   1.572178e+02   8.577452e+02     00s05  00026   1.531369e+02   4.282194e+01     00s05  00027   1.528264e+02   3.440376e+01     00s05  00028   1.471141e+02   2.336672e+02     00s05  00029   3.927697e+02   1.233055e+05     00s05  00030   1.366256e+02   2.427409e+03     00s06  00031   1.321380e+02   1.540754e+03     00s06  00032   2.911395e+05   8.584210e+10     00s06  00033   1.913185e+02   1.726269e+04     00s06  00034   1.284657e+02   2.285802e+03     00s06  00035   1.098960e+02   1.837232e+02     00s07  00036   1.056447e+02   5.783705e+02     00s07  00037   1.012334e+02   4.065741e+01     00s07  00038   1.005282e+02   1.519672e+01 
    00s07  00039   9.993635e+01   8.476360e+00     00s07  00040   9.931338e+01   1.034890e+01     00s08  00041   9.731586e+01   1.033759e+01     00s08  00042   3.182517e+02   1.224843e+03     00s08  00043   9.674424e+01   2.432695e+01     00s08  00044   9.619616e+01   5.331084e+01     00s08  00045   1.301589e+02   6.165735e+03     00s09  00046   9.329262e+01   9.689754e+02     00s09  00047   3.237359e+02   1.413758e+03     00s09  00048   9.286760e+01   1.106275e+03     00s09  00049   9.719522e+01   1.980631e+03     00s09  00050   9.086282e+01   1.098739e+03     00s10  00051   8.962209e+01   5.297498e+01     00s10  00052   8.940582e+01   3.110065e+00     00s10  00053   8.931649e+01   7.956695e-01     00s10  00054   8.926993e+01   3.866103e-01     00s10  00055   8.919407e+01   2.478517e-01     00s11  00056   8.900062e+01   1.238009e+00     00s11  00057   8.899309e+01   5.181817e+00     00s11  00058   8.897672e+01   7.089197e-01     00s11  00059   8.897011e+01   4.749900e-01 
    00s11  00060   8.895002e+01   4.791202e-02     00s12  00061   8.894892e+01   9.149411e-04     00s12  00062   8.894890e+01   2.202780e-02     00s12  00063   8.894888e+01   2.314330e-03     00s12  00064   8.894887e+01   8.578419e-05     00s12  00065   8.894887e+01   9.772956e-05 
    00s13  00066   8.894887e+01   2.577186e-04     00s13  00067   8.894886e+01   5.255534e-04     00s13  00068   8.894884e+01   8.056989e-04     00s13  00069   8.894878e+01   1.085063e-02     00s13  00070   8.894869e+01   1.028926e-02     00s13  00071   8.895064e+01   1.165264e+00     00s14  00072   8.894861e+01   8.718301e-03     00s14  00073   8.894846e+01   1.069265e-02     00s14  00074   8.894804e+01   8.255493e-02     00s14  00075   8.894735e+01   1.306916e-01     00s14  00076   8.894557e+01   8.742147e-02     00s15  00077   8.894827e+01   1.919604e+00     00s15  00078   8.894465e+01   8.668751e-02     00s15  00079   8.894156e+01   2.473473e-02     00s15  00080   8.893759e+01   1.417574e-02     00s15  00081   8.893496e+01   1.885289e-02     00s16  00082   8.893565e+01   2.254948e-01     00s16  00083   8.893470e+01   7.188644e-03     00s16  00084   8.893433e+01   5.334121e-03     00s16  00085   8.893471e+01   2.970735e-01     00s16  00086   8.893428e+01   3.775165e-02     00s17  00087   8.893403e+01   1.041860e-03     00s17  00088   8.893394e+01   4.099254e-04     00s17  00089   8.893384e+01   7.512757e-04     00s17  00090   8.893383e+01   6.013605e-03     00s17  00091   8.893379e+01   5.389389e-03     00s18  00092   8.893377e+01   2.231064e-04 
    00s18  00093   8.893376e+01   3.463649e-05     00s18  00094   8.893375e+01   1.315899e-04     00s18  00095   8.893375e+01   2.689967e-04     00s18  00096   8.893410e+01   3.163907e-02     00s18  00097   8.893374e+01   1.649443e-05     00s19  00098   8.893374e+01   4.356517e-05     00s19  00099   8.893374e+01   1.634417e-05     00s19  00100   8.893374e+01   4.403380e-06     00s19  00101   8.893374e+01   2.176174e-05     00s19  00102   8.893374e+01   1.389338e-05     00s20  00105   8.893374e+01   5.433807e-05 
Runtime:     00s20
Optimization status: Converged

Optimization restart 1/1, f = 88.93374057087033
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4']]
prob:  <search.SurrogateProblem object at 0x14b8d8412130>
0 OK
bestX [array([[0.5415, 0.3808, 0.9091, 0.7023, 0.3076]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2075.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2075
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2075
........................................ [0.626091, 0.624224, 0.618067]
OUTPUT:%f [0.626091, 0.624224, 0.618067] 0.6211455
store_func_eval
problem.constants
None
MLA iteration:  22
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   1.455342e+05           nan     00s00  00001   1.455342e+05   6.453142e+10     00s00  00002   1.716079e+04   1.787515e+09     00s00  00003   1.037447e+04   6.961032e+08 
    00s00  00004   4.379194e+03   1.285235e+08     00s01  00005   2.286226e+03   3.356616e+07     00s01  00006   1.191596e+03   8.031307e+06     00s01  00007   6.726062e+02   2.029153e+06 
    00s01  00008   4.089646e+02   4.942802e+05     00s01  00009   2.813838e+02   1.155725e+05     00s02  00010   2.233749e+02   2.486910e+04     00s02  00011   1.996626e+02   4.718754e+03     00s02  00012   1.908171e+02   8.506639e+02     00s02  00013   1.869177e+02   3.359843e+02 
    00s02  00014   1.836325e+02   3.916724e+02     00s03  00015   1.792256e+02   4.420896e+02     00s03  00016   1.734593e+02   1.546153e+02     00s03  00017   1.699105e+02   4.827938e+01     00s03  00018   1.674216e+02   5.127758e+01 
    00s03  00019   1.655152e+02   9.443952e+01     00s03  00020   1.639497e+02   3.228578e+01     00s04  00021   1.731659e+02   2.052374e+03     00s04  00022   1.632980e+02   9.768115e+01     00s04  00023   1.621113e+02   7.217594e+01     00s04  00024   1.578847e+02   4.436661e+02     00s04  00025   2.121820e+02   4.441028e+03     00s05  00026   1.575991e+02   1.007122e+03     00s05  00027   1.551630e+02   1.244083e+02     00s05  00028   1.558492e+02   3.045290e+02     00s05  00029   1.547340e+02   1.001764e+02     00s05  00030   1.533004e+02   4.587478e+01     00s06  00031   1.526912e+02   3.269651e+01     00s06  00032   1.515832e+02   5.747378e+01     00s06  00033   1.474662e+02   7.864275e+01     00s06  00034   1.464956e+02   7.514215e+01     00s06  00035   1.460815e+02   4.820590e+01     00s07  00036   1.458588e+02   2.199799e+01 
    00s07  00037   1.454006e+02   3.413522e+00     00s07  00038   1.452476e+02   7.417324e+00     00s07  00039   1.454336e+02   1.986690e+02     00s07  00040   1.452062e+02   6.335532e+00     00s08  00041   1.451431e+02   1.730000e-02     00s08  00042   1.451338e+02   3.661144e-02     00s08  00043   1.451373e+02   9.678074e-01     00s08  00044   1.451337e+02   5.237780e-02 
    00s08  00045   1.451329e+02   1.031133e-03     00s09  00046   1.451328e+02   2.655701e-05     00s09  00047   1.451328e+02   1.786536e-05     00s09  00048   1.451328e+02   1.025961e-04     00s09  00049   1.451328e+02   3.878386e-04     00s09  00050   1.451328e+02   1.370094e-03     00s10  00051   1.451328e+02   3.837750e-03     00s10  00052   1.451328e+02   8.606458e-03     00s10  00053   1.451327e+02   2.112865e-02     00s10  00054   1.451327e+02   3.570451e-02     00s10  00055   1.451326e+02   6.652181e-03     00s11  00056   1.451326e+02   2.724770e-03     00s11  00057   1.451326e+02   1.142839e-04     00s11  00058   1.451326e+02   2.637386e-06 
    00s11  00059   1.451326e+02   2.637386e-06 
Runtime:     00s11
Optimization status: Converged

Optimization restart 1/1, f = 145.13258329212937
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20']]
prob:  <search.SurrogateProblem object at 0x14b8c3d0e5b0>
0 OK
bestX [array([[0.2525, 0.3413, 0.0255, 0.9917, 0.4317]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2906.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2906
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2906
........................................ [2.566171, 2.470353, 2.518337]
OUTPUT:%f [2.566171, 2.470353, 2.518337] 2.494345
store_func_eval
problem.constants
None
MLA iteration:  23
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   1.773913e+05           nan     00s00  00001   1.773913e+05   7.695582e+10 
    00s00  00002   2.627028e+04   3.493232e+09     00s00  00003   1.385943e+04   1.122025e+09     00s00  00004   5.643450e+03   2.050930e+08 
    00s01  00005   2.827810e+03   5.141171e+07     00s01  00006   1.429627e+03   1.212073e+07     00s01  00007   7.810272e+02   3.001916e+06     00s01  00008   4.616792e+02   7.305376e+05     00s01  00009   3.078643e+02   1.727255e+05     00s02  00010   2.363552e+02   3.714383e+04     00s02  00011   2.064780e+02   6.442043e+03     00s02  00012   1.964582e+02   9.390325e+02     00s02  00013   1.931176e+02   4.174684e+02 
    00s02  00014   1.899899e+02   4.669268e+02     00s03  00015   1.852480e+02   4.804963e+02     00s03  00016   1.798721e+02   1.692998e+02     00s03  00017   1.774573e+02   2.225828e+01     00s03  00018   1.769490e+02   8.134492e+00     00s03  00019   1.767836e+02   2.272215e-01     00s03  00020   1.767768e+02   1.184129e-01     00s04  00021   1.767681e+02   1.011003e+00     00s04  00022   1.767293e+02   5.984511e+00     00s04  00023   1.760012e+02   1.666467e+02     00s04  00024   1.995012e+02   4.117702e+03     00s04  00025   1.756693e+02   2.924917e+02     00s05  00026   1.755167e+02   4.763586e+02     00s05  00027   2.120521e+02   4.611136e+03     00s05  00028   1.755133e+02   4.956370e+02     00s05  00029   1.747930e+02   4.329010e+02     00s05  00030   1.732944e+02   1.311253e+02     00s06  00031   1.718802e+02   6.581809e+01 
    00s06  00032   1.715483e+02   1.257112e+01     00s06  00033   1.712328e+02   3.308226e+00 
    00s06  00034   1.709925e+02   6.717854e+00     00s06  00035   1.707711e+02   1.394805e+00     00s07  00036   1.706681e+02   1.960579e+00     00s07  00037   1.706660e+02   1.046036e+00     00s07  00038   1.706557e+02   2.465093e-02 
    00s07  00039   1.706554e+02   8.169967e-03     00s07  00040   1.706551e+02   1.998867e-02     00s08  00041   1.706548e+02   1.936799e-02     00s08  00042   1.706549e+02   7.618573e-02     00s08  00043   1.706547e+02   2.353124e-02     00s08  00044   1.706546e+02   2.001402e-03     00s08  00045   1.706546e+02   1.182928e-05     00s09  00046   1.706546e+02   7.225553e-07     00s09  00047   1.706546e+02   7.225553e-07 
Runtime:     00s09
Optimization status: Converged

Optimization restart 1/1, f = 170.6546228501686
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32']]
prob:  <search.SurrogateProblem object at 0x14b8c3f763a0>
0 OK
bestX [array([[0.0699, 0.796 , 0.059 , 0.0501, 0.0038]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4501.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4501
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4501
........................................ [1.035538, 1.046984, 1.058753]
OUTPUT:%f [1.035538, 1.046984, 1.058753] 1.0528685
store_func_eval
problem.constants
None
MLA iteration:  24
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   1.775152e+05           nan     00s00  00001   1.775152e+05   7.695653e+10     00s00  00002   2.631866e+04   3.505498e+09     00s00  00003   1.386236e+04   1.123583e+09     00s00  00004   5.641963e+03   2.052346e+08     00s01  00005   2.827315e+03   5.144145e+07     00s01  00006   1.429891e+03   1.212999e+07 
    00s01  00007   7.815447e+02   3.004275e+06     00s01  00008   4.623731e+02   7.309386e+05     00s01  00009   3.087564e+02   1.727674e+05 
    00s02  00010   2.374283e+02   3.717975e+04     00s02  00011   2.076134e+02   6.501802e+03     00s02  00012   1.974858e+02   9.508104e+02     00s02  00013   1.941111e+02   4.213859e+02 
    00s02  00014   1.910507e+02   4.739988e+02     00s03  00015   1.863292e+02   4.856100e+02     00s03  00016   1.810231e+02   1.676228e+02     00s03  00017   1.787534e+02   2.429630e+01 
    00s03  00018   1.783123e+02   8.971561e+00     00s03  00019   1.781686e+02   1.861943e-01     00s04  00020   1.781606e+02   6.165757e-02     00s04  00021   1.781553e+02   1.753298e-01     00s04  00022   1.781165e+02   3.264589e+00     00s04  00023   1.772619e+02   1.694967e+02     00s04  00024   1.983084e+02   3.689806e+03     00s05  00025   1.768329e+02   3.506578e+02     00s05  00026   1.767223e+02   5.187114e+02     00s05  00027   2.838103e+02   1.359701e+02     00s05  00028   1.767214e+02   5.392550e+02     00s05  00029   1.765102e+02   5.102736e+02     00s06  00030   1.757455e+02   4.036604e+02     00s06  00031   1.740758e+02   8.584744e+01     00s06  00032   1.729123e+02   1.190218e+02     00s06  00033   1.723836e+02   2.351285e+01     00s06  00034   1.721339e+02   2.116971e+00     00s07  00035   1.721060e+02   6.643949e-01     00s07  00036   1.720974e+02   2.352162e-01     00s07  00037   1.720852e+02   2.100648e-01     00s07  00038   1.720804e+02   1.123277e-01 
    00s07  00039   1.720760e+02   1.497027e-02     00s08  00040   1.720760e+02   1.899008e-02     00s08  00041   1.720759e+02   1.582593e-03     00s08  00042   1.720759e+02   9.203282e-05     00s08  00043   1.720759e+02   8.492784e-07     00s08  00044   1.720759e+02   2.829629e-07     00s08  00045   1.720759e+02   2.829629e-07 
Runtime:     00s08
Optimization status: Converged

Optimization restart 1/1, f = 172.07586222886127
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4']]
prob:  <search.SurrogateProblem object at 0x14b8c3cab970>
0 OK
bestX [array([[0.3553, 0.9255, 0.8205, 0.1398, 0.0249]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2452.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2452
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2452
........................................ [0.587781, 0.599055, 0.594529]
OUTPUT:%f [0.587781, 0.599055, 0.594529] 0.596792
store_func_eval
problem.constants
None
MLA iteration:  25
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   1.775761e+05           nan     00s00  00001   1.775761e+05   7.703989e+10     00s00  00002   2.632012e+04   3.505664e+09     00s00  00003   1.386942e+04   1.124542e+09     00s00  00004   5.643531e+03   2.053365e+08     00s01  00005   2.828019e+03   5.146684e+07 
    00s01  00006   1.430183e+03   1.213124e+07     00s01  00007   7.820179e+02   3.003456e+06     00s01  00008   4.631500e+02   7.305896e+05 
    00s01  00009   3.097668e+02   1.726771e+05     00s02  00010   2.385861e+02   3.718432e+04     00s02  00011   2.088191e+02   6.536127e+03     00s02  00012   1.986334e+02   9.582205e+02     00s02  00013   1.952360e+02   4.199278e+02     00s02  00014   1.922271e+02   4.729300e+02 
    00s03  00015   1.875486e+02   4.843404e+02     00s03  00016   1.822417e+02   1.724281e+02     00s03  00017   1.798855e+02   2.361629e+01     00s03  00018   1.793969e+02   1.192694e+01     00s03  00019   1.791203e+02   4.405683e+00 
    00s04  00020   1.786122e+02   4.346681e+01     00s04  00021   1.813881e+02   1.560838e+03     00s04  00022   1.777217e+02   2.773119e+02     00s04  00023   1.775702e+02   5.147347e+02     00s04  00024   1.783750e+02   1.063589e+03     00s05  00025   1.773661e+02   6.599075e+02     00s05  00026   1.742050e+02   2.528462e+01     00s05  00027   1.736917e+02   1.211031e+02     00s05  00028   1.731155e+02   4.081589e+01     00s05  00029   1.728853e+02   1.718200e+00 
    00s06  00030   1.728450e+02   6.373999e-01     00s06  00031   1.728333e+02   1.726506e-01     00s06  00032   1.728251e+02   2.678254e-02     00s06  00033   1.728245e+02   1.142640e-02     00s06  00034   1.728242e+02   3.790244e-03 
    00s07  00035   1.728241e+02   1.074863e-03     00s07  00036   1.728241e+02   1.669627e-04     00s07  00037   1.728241e+02   3.147849e-04     00s07  00038   1.728241e+02   1.180074e-05     00s07  00039   1.728241e+02   1.282085e-06     00s08  00040   1.728241e+02   1.565154e-05     00s08  00041   1.728241e+02   1.316738e-06 
    00s08  00042   1.728241e+02   1.316738e-06 
Runtime:     00s08
Optimization status: Converged

Optimization restart 1/1, f = 172.8240500388357
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4']]
prob:  <search.SurrogateProblem object at 0x14b8c3e36700>
0 OK
bestX [array([[0.3635, 0.7941, 0.5246, 0.0262, 0.004 ]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/310.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/310
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/310
........................................ [0.839835, 0.854961, 0.838681]
OUTPUT:%f [0.839835, 0.854961, 0.838681] 0.846821
store_func_eval
problem.constants
None
MLA iteration:  26
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   1.802737e+05           nan     00s00  00001   1.802737e+05   7.949521e+10     00s00  00002   2.644612e+04   3.585061e+09     00s00  00003   1.394462e+04   1.147817e+09 
    00s00  00004   5.706180e+03   2.111172e+08     00s01  00005   2.863935e+03   5.301234e+07     00s01  00006   1.449573e+03   1.252830e+07 
    00s01  00007   7.915575e+02   3.105824e+06     00s01  00008   4.673095e+02   7.557464e+05     00s01  00009   3.112937e+02   1.786078e+05     00s02  00010   2.388715e+02   3.840770e+04     00s02  00011   2.086217e+02   6.665533e+03     00s02  00012   1.984613e+02   9.715636e+02     00s02  00013   1.950858e+02   4.247393e+02 
    00s02  00014   1.919952e+02   4.762209e+02     00s03  00015   1.872997e+02   5.015851e+02     00s03  00016   1.819918e+02   1.782959e+02     00s03  00017   1.796743e+02   3.085617e+01     00s03  00018   1.791440e+02   1.388020e+01     00s03  00019   1.788161e+02   4.888811e+00 
    00s04  00020   1.783239e+02   4.558738e+01     00s04  00021   1.813939e+02   1.655699e+03     00s04  00022   1.775898e+02   2.576802e+02     00s04  00023   1.774463e+02   5.350843e+02     00s04  00024   1.769402e+02   7.679109e+02     00s05  00025   1.820694e+02   5.465954e+03     00s05  00026   1.741625e+02   1.402052e+01     00s05  00027   1.736838e+02   8.894495e+01     00s05  00028   1.729973e+02   6.744163e+01 
    00s05  00029   1.726454e+02   4.063114e+00     00s06  00030   1.725319e+02   1.600146e+00     00s06  00031   1.724907e+02   3.721023e-01     00s06  00032   1.724767e+02   9.987501e-02     00s06  00033   1.724744e+02   2.698839e-02     00s06  00034   1.724730e+02   1.454171e-02 
    00s07  00035   1.724726e+02   4.177589e-03     00s07  00036   1.724724e+02   1.353846e-04     00s07  00037   1.724724e+02   8.696040e-04     00s07  00038   1.724724e+02   6.485643e-05     00s07  00039   1.724724e+02   2.149123e-05     00s08  00040   1.724724e+02   1.532493e-06     00s08  00041   1.724724e+02   1.532493e-06 
Runtime:     00s08
Optimization status: Converged

Optimization restart 1/1, f = 172.4724410904783
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4']]
prob:  <search.SurrogateProblem object at 0x14b8d83ad0d0>
0 OK
bestX [array([[0.0209, 0.9095, 0.9322, 0.0193, 0.0262]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4464.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4464
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4464
........................................ [0.844589, 0.850363, 0.852286]
OUTPUT:%f [0.844589, 0.850363, 0.852286] 0.8513245
store_func_eval
problem.constants
None
MLA iteration:  27
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   1.803707e+05           nan     00s00  00001   1.803707e+05   7.934503e+10     00s00  00002   2.656784e+04   3.608559e+09     00s00  00003   1.396431e+04   1.151813e+09     00s00  00004   5.697591e+03   2.109626e+08 
    00s01  00005   2.859141e+03   5.294014e+07     00s01  00006   1.447737e+03   1.250749e+07     00s01  00007   7.913227e+02   3.101214e+06     00s01  00008   4.677656e+02   7.547014e+05     00s01  00009   3.120186e+02   1.782967e+05     00s02  00010   2.397052e+02   3.827605e+04     00s02  00011   2.095376e+02   6.594275e+03     00s02  00012   1.995014e+02   9.518954e+02 
    00s02  00013   1.962036e+02   4.171108e+02     00s02  00014   1.931578e+02   4.678193e+02     00s03  00015   1.885358e+02   4.934499e+02     00s03  00016   1.833330e+02   1.716294e+02     00s03  00017   1.810877e+02   2.564858e+01 
    00s03  00018   1.806099e+02   1.090764e+01     00s03  00019   1.804033e+02   1.028461e+00     00s04  00020   1.803438e+02   2.595201e+00     00s04  00021   1.865579e+02   1.999520e+03     00s04  00022   1.797493e+02   6.743093e+01     00s04  00023   1.790200e+02   2.606637e+02     00s04  00024   1.787686e+02   6.068716e+02     00s05  00025   1.787484e+02   4.862885e+02     00s05  00026   3.098477e+02   1.206608e+01     00s05  00027   1.787421e+02   6.113660e+02     00s05  00028   1.783867e+02   5.113393e+02     00s05  00029   1.755830e+02   1.259847e+02 
    00s06  00030   1.752075e+02   9.681163e+00     00s06  00031   1.746993e+02   1.157073e+01     00s06  00032   1.740995e+02   2.313164e+01     00s06  00033   1.740629e+02   4.800877e+01     00s06  00034   1.739299e+02   2.382473e+01     00s07  00035   1.738380e+02   2.044379e+00     00s07  00036   1.738134e+02   6.297819e-01     00s07  00037   1.738032e+02   1.106075e+00     00s07  00038   1.737957e+02   1.340260e-01 
    00s07  00039   1.737944e+02   2.831223e-02     00s08  00040   1.737938e+02   7.568865e-02     00s08  00041   1.737929e+02   1.545429e-01     00s08  00042   1.737919e+02   8.534573e-02     00s08  00043   1.737918e+02   1.236675e-02     00s08  00044   1.737916e+02   9.772789e-04     00s09  00045   1.737916e+02   2.351562e-04     00s09  00046   1.737916e+02   1.077110e-05 
    00s09  00047   1.737916e+02   5.244996e-06     00s09  00048   1.737916e+02   5.244996e-06 
Runtime:     00s09
Optimization status: Converged

Optimization restart 1/1, f = 173.79161115194864
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4']]
prob:  <search.SurrogateProblem object at 0x14b8c3e7fc70>
0 OK
bestX [array([[0.2198, 0.9223, 0.2632, 0.091 , 0.0148]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8492.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8492
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8492
........................................ [0.628902, 0.644715, 0.636494]
OUTPUT:%f [0.628902, 0.644715, 0.636494] 0.6406045
store_func_eval
problem.constants
None
MLA iteration:  28
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   1.803681e+05           nan     00s00  00001   1.803681e+05   7.933386e+10     00s00  00002   2.656740e+04   3.605074e+09 
    00s00  00003   1.397827e+04   1.151941e+09     00s00  00004   5.710879e+03   2.114928e+08 
    00s01  00005   2.866139e+03   5.311341e+07     00s01  00006   1.451006e+03   1.255326e+07     00s01  00007   7.929800e+02   3.112113e+06     00s01  00008   4.689669e+02   7.574324e+05     00s01  00009   3.131807e+02   1.790917e+05     00s02  00010   2.409359e+02   3.855213e+04     00s02  00011   2.108012e+02   6.705211e+03     00s02  00012   2.006980e+02   9.667282e+02     00s02  00013   1.974002e+02   4.062550e+02     00s03  00014   1.944703e+02   4.522253e+02     00s03  00015   1.899725e+02   4.815225e+02     00s03  00016   1.848646e+02   1.764801e+02     00s03  00017   1.824320e+02   2.481303e+01     00s03  00018   1.818017e+02   9.358089e+00 
    00s04  00019   1.815703e+02   2.275600e+00     00s04  00020   1.814490e+02   6.771098e+00     00s04  00021   1.807813e+02   1.239898e+02     00s04  00022   1.997714e+02   3.401699e+03     00s05  00023   1.805521e+02   2.241345e+02     00s05  00024   1.803872e+02   5.525424e+02     00s05  00025   1.794987e+02   6.654927e+02     00s05  00026   5.965733e+02   1.774899e+06     00s05  00027   1.763031e+02   4.785685e+01     00s06  00028   1.757186e+02   3.405607e+01     00s06  00029   1.752298e+02   8.024136e+01     00s06  00030   1.750733e+02   1.796082e+01     00s06  00031   1.749881e+02   1.236735e+00     00s06  00032   1.749724e+02   6.700752e-01     00s07  00033   1.749491e+02   6.315567e-01     00s07  00034   1.749353e+02   3.982688e-01     00s07  00035   1.749300e+02   3.923488e-02 
    00s07  00036   1.749284e+02   8.946618e-02     00s08  00037   1.749275e+02   3.740871e-02     00s08  00038   1.749273e+02   2.246413e-03     00s08  00039   1.749273e+02   2.388406e-05     00s08  00040   1.749273e+02   2.177266e-06     00s08  00041   1.749273e+02   2.177266e-06 
Runtime:     00s08
Optimization status: Converged

Optimization restart 1/1, f = 174.92728646530463
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4']]
prob:  <search.SurrogateProblem object at 0x14b8d8afb820>
0 OK
bestX [array([[0.0028, 0.5252, 0.2061, 0.0569, 0.0011]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5951.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5951
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5951
........................................ [0.859267, 0.898348, 0.864579]
OUTPUT:%f [0.859267, 0.898348, 0.864579] 0.8814635
store_func_eval
problem.constants
None
MLA iteration:  29
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   1.803965e+05           nan     00s00  00001   1.803965e+05   7.934000e+10     00s00  00002   2.658615e+04   3.605083e+09     00s00  00003   1.399634e+04   1.152711e+09     00s00  00004   5.719197e+03   2.117629e+08     00s01  00005   2.868607e+03   5.315615e+07     00s01  00006   1.451274e+03   1.255063e+07     00s01  00007   7.930752e+02   3.108230e+06 
    00s01  00008   4.694667e+02   7.559331e+05     00s01  00009   3.141105e+02   1.786752e+05     00s02  00010   2.422193e+02   3.855171e+04     00s02  00011   2.122008e+02   6.841643e+03     00s02  00012   2.018248e+02   1.009306e+03     00s02  00013   1.983629e+02   4.215931e+02 
    00s02  00014   1.954889e+02   4.757832e+02     00s03  00015   1.909614e+02   5.043884e+02     00s03  00016   1.858036e+02   1.907990e+02     00s03  00017   1.835582e+02   4.073729e+01     00s03  00018   1.830049e+02   1.103894e+01 
    00s03  00019   1.828351e+02   1.188729e+00     00s04  00020   1.827999e+02   7.611760e-01     00s04  00021   1.827457e+02   3.167233e+00     00s04  00022   1.823089e+02   7.038832e+01     00s04  00023   1.901353e+02   2.289042e+03     00s04  00024   1.819419e+02   1.863395e+02     00s05  00025   1.817431e+02   3.059117e+02     00s05  00026   1.831413e+02   1.278573e+03     00s06  00027   1.816535e+02   4.376523e+02     00s06  00028   3.288813e+02   5.379932e+00     00s06  00029   1.819220e+02   8.281582e+02     00s06  00030   1.816397e+02   4.978466e+02     00s06  00031   1.814195e+02   4.950152e+02     00s07  00032   1.806199e+02   4.984242e+02     00s07  00033   1.799747e+02   1.736643e+02     00s07  00034   1.767766e+02   3.279497e+01     00s07  00035   1.770940e+02   1.876867e+02     00s07  00036   1.764659e+02   6.290598e+01     00s08  00037   1.760819e+02   1.099584e+01     00s08  00038   1.760224e+02   2.378744e+00     00s08  00039   1.759979e+02   1.424231e+00     00s08  00040   1.759213e+02   3.926913e+00     00s08  00041   1.759051e+02   1.174085e+00 
    00s09  00042   1.758994e+02   5.632767e-02     00s09  00043   1.758990e+02   4.214943e-02     00s09  00044   1.758979e+02   2.939894e-02     00s09  00045   1.758972e+02   2.412284e-02     00s09  00046   1.758967e+02   1.117724e-02     00s10  00047   1.758971e+02   3.389296e-02     00s10  00048   1.758967e+02   7.894446e-04 
    00s10  00049   1.758967e+02   3.291681e-05     00s10  00050   1.758967e+02   1.119735e-05     00s10  00051   1.758967e+02   2.747370e-06     00s11  00052   1.758967e+02   2.747370e-06 
Runtime:     00s11
Optimization status: Converged

Optimization restart 1/1, f = 175.89666198275467
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4']]
prob:  <search.SurrogateProblem object at 0x14b8c3c88cd0>
0 OK
bestX [array([[0.478 , 0.9852, 0.2371, 0.6363, 0.0393]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7930.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7930
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7930
........................................ [0.321926, 0.32244, 0.314568]
OUTPUT:%f [0.321926, 0.32244, 0.314568] 0.318504
store_func_eval
problem.constants
None
MLA iteration:  30
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   1.824941e+05           nan     00s00  00001   1.824941e+05   8.080817e+10     00s00  00002   2.664620e+04   3.670447e+09     00s00  00003   1.398019e+04   1.160563e+09     00s00  00004   5.770462e+03   2.162796e+08     00s01  00005   2.896657e+03   5.430741e+07     00s01  00006   1.466675e+03   1.284965e+07     00s01  00007   8.007654e+02   3.180792e+06     00s01  00008   4.735624e+02   7.733876e+05     00s01  00009   3.166458e+02   1.829005e+05     00s02  00010   2.441839e+02   3.963700e+04     00s02  00011   2.139545e+02   7.222406e+03     00s02  00012   2.032048e+02   1.106488e+03     00s02  00013   1.994877e+02   4.309217e+02 
    00s02  00014   1.967111e+02   4.866181e+02     00s03  00015   1.923209e+02   5.166483e+02     00s03  00016   1.871297e+02   2.093488e+02     00s03  00017   1.848629e+02   4.777302e+01     00s03  00018   1.843113e+02   1.263729e+01     00s03  00019   1.841514e+02   2.167774e+00 
    00s04  00020   1.841150e+02   2.098025e-01     00s04  00021   1.841084e+02   2.670806e-01     00s04  00022   1.840382e+02   7.029027e+00     00s04  00023   1.829916e+02   3.470966e+02     00s05  00024   2.296720e+02   4.082698e+03     00s05  00025   1.829107e+02   4.283928e+02     00s05  00026   1.828762e+02   5.299267e+02     00s05  00027   2.920682e+02   1.675665e+02     00s05  00028   1.828723e+02   5.586282e+02     00s06  00029   1.825488e+02   5.481662e+02     00s06  00030   1.813579e+02   5.222961e+02     00s06  00031   1.826923e+02   3.181663e+02     00s06  00032   1.784947e+02   2.510445e+02     00s06  00033   1.775932e+02   3.945418e+02     00s07  00034   1.768824e+02   1.775696e+01     00s07  00035   1.766933e+02   1.997647e+00     00s07  00036   1.766196e+02   1.701423e+00     00s07  00037   1.767578e+02   1.253555e+01     00s07  00038   1.766019e+02   1.288002e+00     00s08  00039   1.765807e+02   2.403389e-01 
    00s08  00040   1.765779e+02   1.301473e-02     00s08  00041   1.765777e+02   2.680101e-03     00s08  00042   1.765776e+02   4.043383e-03     00s08  00043   1.765774e+02   5.487832e-03     00s09  00044   1.765774e+02   7.763031e-05 
    00s09  00045   1.765774e+02   7.726546e-07     00s09  00046   1.765774e+02   9.310238e-06     00s09  00047   1.765774e+02   6.880391e-07     00s09  00048   1.765774e+02   6.880391e-07 
Runtime:     00s09
Optimization status: Converged

Optimization restart 1/1, f = 176.57740658073908
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4']]
prob:  <search.SurrogateProblem object at 0x14b8d8383eb0>
0 OK
bestX [array([[0.1354, 0.5264, 0.273 , 0.0871, 0.0877]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4954.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4954
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4954
........................................ [0.877547, 0.904177, 0.882562]
OUTPUT:%f [0.877547, 0.904177, 0.882562] 0.8933694999999999
store_func_eval
problem.constants
None
MLA iteration:  31
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   1.825182e+05           nan     00s00  00001   1.825182e+05   8.112986e+10 
    00s00  00002   2.678786e+04   3.679159e+09     00s00  00003   1.411162e+04   1.173226e+09     00s00  00004   5.809681e+03   2.178394e+08     00s01  00005   2.917855e+03   5.484418e+07 
    00s01  00006   1.475064e+03   1.297772e+07     00s01  00007   8.035214e+02   3.207884e+06     00s01  00008   4.744570e+02   7.771245e+05     00s01  00009   3.175980e+02   1.832685e+05     00s02  00010   2.455967e+02   3.980636e+04 
    00s02  00011   2.155722e+02   7.392165e+03     00s02  00012   2.045580e+02   1.217123e+03 
    00s02  00013   2.003599e+02   4.950780e+02     00s03  00014   1.974012e+02   5.846148e+02     00s03  00015   1.931113e+02   6.079243e+02     00s03  00016   1.874973e+02   2.593856e+02     00s03  00017   1.848381e+02   2.576624e+01     00s03  00018   1.842696e+02   1.464053e+01     00s04  00019   1.840700e+02   2.771338e+00 
    00s04  00020   1.840017e+02   2.061340e+00     00s04  00021   1.838763e+02   1.868096e+01     00s04  00022   1.829380e+02   5.242479e+02     00s04  00023   2.051088e+02   3.733271e+03     00s05  00024   1.827861e+02   7.800228e+02     00s05  00025   3.200374e+02   7.480233e+00     00s05  00026   1.827661e+02   1.032354e+03     00s05  00027   1.823605e+02   9.239272e+02     00s05  00028   1.810881e+02   5.282561e+02     00s06  00029   1.757723e+02   2.120428e+02     00s06  00030   1.621921e+02   8.042907e+02     00s06  00031   1.633998e+02   1.132861e+03     00s06  00032   1.609855e+02   2.679585e+02     00s06  00033   1.565318e+02   1.606462e+02     00s07  00034   1.525612e+02   3.597307e+02     00s07  00035   2.340588e+02   2.623255e+04     00s07  00036   1.443925e+02   7.431076e+02     00s07  00037   1.413208e+02   1.092181e+03     00s07  00038   1.409813e+02   8.879240e+02     00s08  00039   1.404325e+02   9.537108e+02     00s08  00040   5.150404e+02   2.937703e+05     00s08  00041   1.417781e+02   1.346542e+03     00s08  00042   1.399953e+02   1.003556e+03     00s08  00043   1.283670e+02   1.641367e+03     00s09  00044   1.224096e+02   2.123662e+03     00s09  00045   1.137492e+02   1.115475e+03 
    00s09  00046   9.909515e+01   5.344783e+02     00s09  00047   3.753062e+02   2.959728e+06     00s10  00048   9.042253e+01   2.321298e+02     00s10  00049   8.924321e+01   1.681319e+01     00s10  00050   8.888074e+01   4.922948e+00 
    00s10  00051   8.875676e+01   1.229648e+01     00s10  00052   8.868027e+01   1.390661e+00     00s11  00053   8.862933e+01   3.434291e-01     00s11  00054   8.860649e+01   1.820137e-01     00s11  00055   8.859856e+01   7.121629e-02     00s11  00056   8.859888e+01   1.524806e-01     00s11  00057   8.859692e+01   1.806963e-02 
    00s12  00058   8.859667e+01   7.677896e-03     00s12  00059   8.859650e+01   1.017469e-03     00s12  00060   8.859648e+01   8.261605e-05     00s12  00061   8.859648e+01   1.023195e-05     00s12  00062   8.859648e+01   5.765636e-06     00s13  00063   8.859648e+01   5.765636e-06 
Runtime:     00s13
Optimization status: Converged

Optimization restart 1/1, f = 88.59647933033501
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4']]
prob:  <search.SurrogateProblem object at 0x14b8c3fd1490>
0 OK
bestX [array([[0.6551, 0.7328, 0.135 , 0.9978, 0.3486]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7085.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7085
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7085
........................................ [0.180904, 0.177946, 0.177154]
OUTPUT:%f [0.180904, 0.177946, 0.177154] 0.17754999999999999
store_func_eval
problem.constants
None
MLA iteration:  32
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   1.868916e+05           nan     00s00  00001   1.868916e+05   8.437914e+10     00s00  00002   2.743191e+04   3.879052e+09     00s00  00003   1.433956e+04   1.216682e+09     00s00  00004   5.948861e+03   2.280193e+08     00s01  00005   2.993234e+03   5.737741e+07 
    00s01  00006   1.518130e+03   1.359643e+07     00s01  00007   8.297144e+02   3.359884e+06     00s01  00008   4.922413e+02   8.156601e+05     00s01  00009   3.310416e+02   1.943103e+05     00s02  00010   2.564799e+02   4.355503e+04     00s02  00011   2.247184e+02   8.656512e+03 
    00s02  00012   2.126683e+02   1.499036e+03     00s02  00013   2.079531e+02   4.366099e+02     00s03  00014   2.046337e+02   4.866983e+02     00s03  00015   1.999699e+02   8.102685e+02     00s03  00016   1.929810e+02   1.303583e+03     00s03  00017   1.851565e+02   6.091328e+02     00s03  00018   1.815806e+02   2.436396e+02     00s04  00019   1.805372e+02   3.734091e+01     00s04  00020   1.803801e+02   1.606102e+01 
    00s04  00021   1.801309e+02   1.322484e+01     00s04  00022   1.798127e+02   2.335663e+01     00s04  00023   1.791168e+02   3.185118e+01     00s05  00024   1.787099e+02   2.092239e+01     00s05  00025   1.785552e+02   1.570754e+01 
    00s05  00026   1.784399e+02   2.509725e+00     00s05  00027   1.780545e+02   2.561549e+02     00s05  00028   1.781603e+02   2.151542e+01     00s06  00029   1.779614e+02   1.276328e+02     00s06  00030   1.780340e+02   3.662254e+02     00s06  00031   1.778958e+02   2.011200e+02     00s06  00032   1.773357e+02   9.756458e+01     00s06  00033   1.767054e+02   9.349690e+00     00s07  00034   1.765771e+02   6.621716e+00     00s07  00035   1.764342e+02   2.564856e+00     00s07  00036   1.764028e+02   2.500166e-01     00s07  00037   1.763876e+02   3.983163e-01     00s08  00038   1.763757e+02   1.400677e+00     00s08  00039   1.763693e+02   1.122544e-01 
    00s08  00040   1.763685e+02   3.130470e-02     00s08  00041   1.763683e+02   1.968782e-04     00s08  00042   1.763683e+02   2.290782e-06     00s09  00043   1.763683e+02   3.077870e-07 
    00s09  00044   1.763683e+02   3.077870e-07 
Runtime:     00s09
Optimization status: Converged

Optimization restart 1/1, f = 176.36825430360892
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20']]
prob:  <search.SurrogateProblem object at 0x14b8d8b067c0>
0 OK
bestX [array([[0.2506, 0.7763, 0.01  , 0.997 , 0.3219]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7629.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7629
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7629
........................................ [0.9267, 0.922809, 0.922695]
OUTPUT:%f [0.9267, 0.922809, 0.922695] 0.922752
store_func_eval
problem.constants
None
MLA iteration:  33
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   1.887565e+05           nan     00s00  00001   1.887565e+05   8.789661e+10     00s00  00002   2.732544e+04   3.880921e+09 
    00s00  00003   1.451335e+04   1.248278e+09     00s00  00004   6.014431e+03   2.331964e+08 
    00s01  00005   3.030456e+03   5.887245e+07     00s01  00006   1.535128e+03   1.393561e+07     00s01  00007   8.380582e+02   3.442820e+06     00s01  00008   4.964109e+02   8.350266e+05     00s01  00009   3.333750e+02   1.988865e+05     00s02  00010   2.579626e+02   4.463640e+04     00s02  00011   2.257850e+02   8.900601e+03     00s02  00012   2.135439e+02   1.542592e+03 
    00s02  00013   2.087685e+02   4.419310e+02     00s03  00014   2.054386e+02   4.945310e+02     00s03  00015   2.007323e+02   8.603172e+02     00s03  00016   1.940257e+02   1.386181e+03     00s03  00017   1.863844e+02   6.041999e+02     00s03  00018   1.820267e+02   4.893815e+01     00s04  00019   1.814335e+02   4.105106e+01     00s04  00020   1.811796e+02   1.173657e+01 
    00s04  00021   1.809341e+02   1.199510e+01     00s04  00022   1.805219e+02   1.998484e+01     00s04  00023   1.800058e+02   1.355545e+01     00s05  00024   1.797726e+02   1.735350e+01     00s05  00025   1.796961e+02   3.000715e+00 
    00s05  00026   1.796637e+02   7.123265e-01     00s05  00027   1.795499e+02   8.624770e+00     00s05  00028   1.809080e+02   7.489570e+02     00s06  00029   1.793853e+02   3.857716e+01     00s06  00030   1.793451e+02   8.817214e+01     00s06  00031   1.793047e+02   1.627368e+02     00s06  00032   1.790360e+02   1.132782e+02     00s06  00033   1.787459e+02   7.241587e+00     00s07  00034   1.787017e+02   4.899700e+00     00s07  00035   1.785696e+02   1.349742e+00     00s07  00036   1.785558e+02   1.675953e-02     00s07  00037   1.785555e+02   1.071966e-03     00s08  00038   1.785555e+02   6.687880e-04 
    00s08  00039   1.785555e+02   3.133568e-04     00s08  00040   1.785555e+02   1.181944e-05 
    00s08  00041   1.785555e+02   2.778417e-07     00s08  00042   1.785555e+02   2.778417e-07 
Runtime:     00s08
Optimization status: Converged

Optimization restart 1/1, f = 178.5554570413393
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20']]
prob:  <search.SurrogateProblem object at 0x14b8d8ad0d00>
0 OK
bestX [array([[0.273 , 0.7755, 0.0069, 0.8768, 0.1926]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2232.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2232
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2232
........................................ [2.566671, 1.94851, 2.28851]
OUTPUT:%f [2.566671, 1.94851, 2.28851] 2.11851
store_func_eval
problem.constants
None
MLA iteration:  34
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   1.912946e+05           nan     00s00  00001   1.912946e+05   8.996586e+10     00s00  00002   2.819324e+04   4.029778e+09     00s00  00003   1.501245e+04   1.303724e+09     00s00  00004   6.214306e+03   2.427936e+08     00s01  00005   3.140451e+03   6.155468e+07     00s01  00006   1.593687e+03   1.461266e+07     00s01  00007   8.708294e+02   3.618935e+06     00s01  00008   5.158369e+02   8.780544e+05 
    00s01  00009   3.465393e+02   2.088810e+05     00s02  00010   2.684667e+02   4.688792e+04     00s02  00011   2.352808e+02   9.453950e+03     00s02  00012   2.226752e+02   1.674159e+03     00s02  00013   2.178436e+02   4.105001e+02     00s03  00014   2.147842e+02   3.273697e+02     00s03  00015   2.111518e+02   3.666054e+02     00s03  00016   2.063226e+02   2.191520e+02     00s03  00017   1.945870e+02   1.102801e+03 
    00s03  00018   1.873493e+02   1.965916e+03     00s04  00019   2.104291e+02   5.457584e+03     00s04  00020   1.823302e+02   3.139634e+03     00s04  00021   1.627550e+02   2.320054e+03     00s04  00022   4.920982e+03   5.973707e+08     00s04  00023   1.461121e+02   8.681271e+03     00s05  00024   1.334868e+02   7.140501e+03     00s05  00025   1.946308e+02   9.295638e+03     00s05  00026   1.243265e+02   2.850085e+02     00s05  00027   1.232795e+02   5.037611e+01 
    00s06  00028   1.224391e+02   5.945285e+02     00s06  00029   1.214974e+02   2.356288e+02     00s06  00030   1.164401e+02   2.013525e+03     00s06  00031   1.152125e+02   2.836233e+02     00s06  00032   1.130945e+02   4.705353e+02     00s07  00033   1.124682e+02   5.857523e+02     00s07  00034   1.105730e+02   5.496794e+02     00s07  00035   1.089801e+02   8.483435e+00     00s07  00036   1.087666e+02   5.471089e+00     00s07  00037   1.083405e+02   2.663458e+01 
    00s08  00038   1.083101e+02   3.868665e+00     00s08  00039   1.082604e+02   1.678860e+00     00s08  00040   1.081781e+02   1.348650e+01     00s08  00041   1.080978e+02   8.564639e+00     00s09  00042   1.080810e+02   9.695811e-02     00s09  00043   1.080796e+02   2.718350e-02     00s09  00044   1.080790e+02   4.441365e-03 
    00s09  00045   1.080788e+02   4.032642e-03     00s09  00046   1.080781e+02   3.163577e-03     00s10  00047   1.080782e+02   3.192112e-03     00s10  00048   1.080781e+02   2.167419e-03     00s10  00049   1.080780e+02   1.531212e-03 
    00s10  00050   1.080780e+02   2.070074e-05     00s10  00051   1.080780e+02   2.121747e-05     00s11  00052   1.080780e+02   8.115502e-05     00s11  00053   1.080780e+02   2.424822e-04     00s11  00054   1.080780e+02   1.764324e-02     00s11  00055   1.080780e+02   1.832405e-03     00s11  00056   1.080780e+02   1.027367e-03     00s12  00057   1.080778e+02   3.655511e-03     00s12  00058   1.080776e+02   1.550353e-02     00s12  00059   1.080770e+02   4.195794e-02     00s12  00060   1.080759e+02   7.730966e-02     00s13  00061   1.080741e+02   5.752296e-02     00s13  00062   1.080769e+02   1.112118e+00     00s13  00063   1.080732e+02   2.117419e-01     00s13  00064   1.080713e+02   4.942623e-02     00s13  00065   1.080704e+02   1.270033e-03     00s14  00066   1.080704e+02   2.391108e-03     00s14  00067   1.080703e+02   4.882376e-03     00s14  00068   1.080702e+02   1.594937e-03     00s14  00069   1.080702e+02   4.858314e-04     00s14  00070   1.080702e+02   1.528491e-04     00s15  00071   1.080702e+02   7.182645e-05     00s15  00072   1.080702e+02   2.068325e-04     00s15  00073   1.080702e+02   1.191153e-04     00s15  00074   1.080702e+02   2.133766e-03     00s15  00075   1.080702e+02   5.092625e-04 
    00s16  00076   1.080702e+02   9.182171e-06     00s16  00077   1.080702e+02   1.675827e-05     00s16  00078   1.080701e+02   8.710524e-06     00s16  00079   1.080701e+02   2.153773e-04     00s17  00080   1.080701e+02   6.019609e-05     00s17  00081   1.080701e+02   6.019609e-05 
Runtime:     00s17
Optimization status: Converged

Optimization restart 1/1, f = 108.07014922311522
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '128', '16']]
prob:  <search.SurrogateProblem object at 0x14b8c3c3c5e0>
0 OK
bestX [array([[0.1758, 0.5243, 0.2905, 0.4967, 0.3026]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3346.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3346
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3346
........................................ [0.931527, 0.926538, 0.927019]
OUTPUT:%f [0.931527, 0.926538, 0.927019] 0.9267785
store_func_eval
problem.constants
None
MLA iteration:  35
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   2.021403e+05           nan     00s00  00001   2.021403e+05   1.068998e+11     00s00  00002   2.852275e+04   4.215871e+09     00s00  00003   1.590152e+04   1.467199e+09 
    00s00  00004   6.549925e+03   2.700365e+08     00s01  00005   3.320946e+03   6.901500e+07     00s01  00006   1.679760e+03   1.633812e+07     00s01  00007   9.149614e+02   4.051662e+06     00s01  00008   5.384535e+02   9.840356e+05     00s02  00009   3.584018e+02   2.349595e+05     00s02  00010   2.748163e+02   5.312883e+04     00s02  00011   2.388980e+02   1.085488e+04 
    00s02  00012   2.250739e+02   1.940720e+03 
    00s02  00013   2.198235e+02   4.426771e+02     00s03  00014   2.166999e+02   3.161262e+02     00s03  00015   2.131772e+02   3.415801e+02     00s03  00016   2.088172e+02   1.543776e+02     00s03  00017   2.031277e+02   1.963285e+02     00s03  00018   2.014335e+02   1.430398e+02 
    00s04  00019   1.996624e+02   8.810812e+01     00s04  00020   1.987531e+02   2.783967e+01     00s04  00021   1.981986e+02   9.947538e+01     00s04  00022   1.974248e+02   2.827740e+02     00s05  00023   1.962752e+02   3.071236e+02     00s05  00024   1.935874e+02   4.996394e+01     00s05  00025   1.924217e+02   9.294795e+01     00s05  00026   1.903851e+02   3.004030e+02     00s05  00027   1.883540e+02   1.007825e+02     00s06  00028   1.882798e+02   2.385882e+02     00s06  00029   1.871099e+02   6.879719e+01     00s06  00030   1.867144e+02   4.949382e+01     00s06  00031   1.860996e+02   4.642575e+01 
    00s06  00032   1.856142e+02   1.992920e+00     00s07  00033   1.855154e+02   8.172071e-01     00s07  00034   1.853699e+02   1.599284e+00     00s07  00035   1.851715e+02   9.380817e+01     00s07  00036   1.850958e+02   8.505491e+00     00s08  00037   1.849090e+02   3.976992e+01     00s08  00038   1.848213e+02   3.438933e+01     00s08  00039   1.846184e+02   1.486745e+02     00s08  00040   1.842573e+02   1.406717e+01     00s08  00041   1.840983e+02   2.123431e+00     00s09  00042   1.840126e+02   1.066908e+00     00s09  00043   1.843516e+02   4.093905e+01     00s09  00044   1.840022e+02   4.103730e-01 
    00s09  00045   1.839970e+02   3.877548e-02     00s09  00046   1.839962e+02   8.255648e-02     00s10  00047   1.839955e+02   4.759727e-03     00s10  00048   1.839953e+02   8.610620e-05     00s10  00049   1.839953e+02   1.822143e-05     00s10  00050   1.839953e+02   1.809639e-07     00s10  00051   1.839953e+02   1.809639e-07 
Runtime:     00s10
Optimization status: Converged

Optimization restart 1/1, f = 183.995348837656
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '128', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '50', '20']]
prob:  <search.SurrogateProblem object at 0x14b8c3c3c550>
0 OK
bestX [array([[0.5441, 0.8298, 0.954 , 0.6001, 0.2264]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5138.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5138
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5138
........................................ [1.569871, 1.537936, 1.534673]
OUTPUT:%f [1.569871, 1.537936, 1.534673] 1.5363045
store_func_eval
problem.constants
None
MLA iteration:  36
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   2.095850e+05           nan     00s00  00001   2.095850e+05   1.232435e+11     00s00  00002   2.893205e+04   4.358476e+09     00s00  00003   1.675459e+04   1.619345e+09     00s00  00004   6.828103e+03   2.919568e+08     00s01  00005   3.474470e+03   7.529349e+07     00s01  00006   1.750697e+03   1.776179e+07 
    00s01  00007   9.505242e+02   4.409394e+06     00s01  00008   5.559415e+02   1.070827e+06 
    00s02  00009   3.671006e+02   2.561392e+05     00s02  00010   2.791124e+02   5.811010e+04     00s02  00011   2.410717e+02   1.193645e+04     00s02  00012   2.263228e+02   2.140039e+03     00s02  00013   2.207346e+02   4.788201e+02     00s03  00014   2.174772e+02   3.397194e+02     00s03  00015   2.137717e+02   4.031907e+02 
    00s03  00016   2.084221e+02   3.935253e+02     00s03  00017   2.060343e+02   6.743202e+02     00s03  00018   2.010678e+02   4.235048e+01 
    00s04  00019   2.006499e+02   2.226876e+01     00s04  00020   1.996877e+02   2.946345e+01     00s04  00021   1.991160e+02   5.954816e+01     00s04  00022   1.996888e+02   9.301777e+02     00s05  00023   1.985230e+02   2.611132e+02     00s05  00024   1.976175e+02   5.425805e+02     00s05  00025   1.956182e+02   1.570581e+02     00s05  00026   1.927436e+02   1.861045e+02     00s05  00027   2.015366e+02   1.610171e+03     00s06  00028   1.908085e+02   2.585328e+02     00s06  00029   1.828020e+02   6.413226e+02     00s06  00030   1.866485e+02   1.297113e+03     00s06  00031   1.818835e+02   5.046409e+02     00s06  00032   1.748270e+02   7.578548e+02     00s07  00033   1.692110e+02   1.047104e+03     00s07  00034   1.548215e+02   1.498750e+03     00s07  00035   1.401813e+02   1.046631e+03     00s07  00036   1.237847e+02   1.737063e+03     00s08  00037   1.569338e+02   8.148470e+04     00s08  00038   1.164532e+02   1.489861e+02     00s08  00039   1.157834e+02   2.162974e+02     00s08  00040   1.132836e+02   2.484777e+01     00s08  00041   1.123385e+02   2.826704e+01     00s09  00042   1.113329e+02   1.455117e+03     00s09  00043   1.108350e+02   3.005396e+02     00s09  00044   1.200610e+02   4.028177e+03     00s09  00045   1.099026e+02   7.307402e+02     00s09  00046   1.083961e+02   6.425415e+01 
    00s10  00047   1.081624e+02   5.922391e+00     00s10  00048   1.080815e+02   2.105377e+00     00s10  00049   1.080278e+02   2.184563e-01     00s10  00050   1.079963e+02   3.716735e-01     00s11  00051   1.079788e+02   6.178569e-02     00s11  00052   1.079771e+02   1.712295e-03     00s11  00053   1.079771e+02   6.738418e-05     00s11  00054   1.079771e+02   2.856396e-05     00s11  00055   1.079771e+02   1.107990e-05 
    00s12  00056   1.079771e+02   2.763206e-05     00s12  00057   1.079771e+02   2.996143e-05     00s12  00058   1.079771e+02   1.198998e-03     00s12  00059   1.079771e+02   1.198998e-03 
Runtime:     00s12
Optimization status: Converged

Optimization restart 1/1, f = 107.97711520573851
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '128', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '50', '20'], [' ', ' ', '128', '64', '16']]
prob:  <search.SurrogateProblem object at 0x14b8c3c3ceb0>
0 OK
bestX [array([[0.5639, 0.4758, 0.3464, 0.7448, 0.3318]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9563.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9563
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9563
........................................ [0.611761, 0.607894, 0.612626]
OUTPUT:%f [0.611761, 0.607894, 0.612626] 0.61026
store_func_eval
problem.constants
None
MLA iteration:  37
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   2.195711e+05           nan     00s00  00001   2.195711e+05   1.374878e+11     00s00  00002   2.992862e+04   4.685694e+09     00s00  00003   1.754058e+04   1.774914e+09 
    00s00  00004   7.133038e+03   3.186044e+08     00s01  00005   3.629019e+03   8.229477e+07     00s01  00006   1.822988e+03   1.937991e+07 
    00s01  00007   9.857593e+02   4.808341e+06     00s01  00008   5.729810e+02   1.166943e+06     00s02  00009   3.754899e+02   2.791598e+05     00s02  00010   2.833679e+02   6.340284e+04     00s02  00011   2.433815e+02   1.305218e+04     00s02  00012   2.277459e+02   2.338410e+03     00s02  00013   2.217726e+02   5.186905e+02 
    00s03  00014   2.183076e+02   3.770666e+02     00s03  00015   2.144228e+02   4.547141e+02     00s03  00016   2.096026e+02   2.829229e+02     00s03  00017   2.073113e+02   1.010638e+02     00s04  00018   2.062646e+02   7.018005e+00     00s04  00019   2.060912e+02   4.640476e+00 
    00s04  00020   2.059575e+02   4.853042e+00     00s04  00021   2.088672e+02   3.978104e+02     00s04  00022   2.056741e+02   7.098636e+00     00s05  00023   2.477464e+02   3.081972e+03     00s05  00024   2.055424e+02   1.172533e+01     00s05  00025   2.054581e+02   2.163507e+01     00s05  00026   2.053401e+02   9.168668e+00     00s05  00027   2.051752e+02   1.980993e+01     00s06  00028   2.049164e+02   3.747836e+01     00s06  00029   2.046911e+02   1.228527e+01     00s06  00030   2.046493e+02   1.173593e+00     00s06  00031   2.046430e+02   1.332002e-01     00s07  00032   2.046416e+02   1.167748e-01     00s07  00033   2.046386e+02   1.442321e-01 
    00s07  00034   2.046370e+02   3.637189e-02     00s07  00035   2.046364e+02   1.372044e-02     00s07  00036   2.046361e+02   5.085346e-03     00s08  00037   2.046361e+02   1.056114e-03     00s08  00038   2.046361e+02   7.344877e-07     00s08  00039   2.046361e+02   3.157052e-07 
    00s08  00040   2.046361e+02   3.157052e-07 
Runtime:     00s08
Optimization status: Converged

Optimization restart 1/1, f = 204.63605499185604
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '128', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '50', '20'], [' ', ' ', '128', '64', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '100', '20']]
prob:  <search.SurrogateProblem object at 0x14b8d8b8cc70>
0 OK
bestX [array([[0.3688, 0.5232, 0.0867, 0.2423, 0.0586]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/471.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/471
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/471
........................................ [0.474671, 0.492965, 0.488537]
OUTPUT:%f [0.474671, 0.492965, 0.488537] 0.490751
store_func_eval
problem.constants
None
MLA iteration:  38
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   2.337415e+05           nan 
    00s00  00001   2.337415e+05   1.513297e+11     00s00  00002   3.186617e+04   5.414553e+09     00s00  00003   1.824953e+04   1.969746e+09     00s00  00004   7.475082e+03   3.582395e+08     00s01  00005   3.793509e+03   9.203353e+07     00s01  00006   1.906310e+03   2.171473e+07     00s01  00007   1.028161e+03   5.383878e+06     00s01  00008   5.947942e+02   1.308299e+06     00s02  00009   3.867111e+02   3.139891e+05 
    00s02  00010   2.890489e+02   7.183259e+04     00s02  00011   2.461946e+02   1.495916e+04     00s02  00012   2.292198e+02   2.700072e+03     00s02  00013   2.227684e+02   5.673563e+02     00s03  00014   2.192180e+02   3.838926e+02     00s03  00015   2.153911e+02   4.759884e+02     00s03  00016   2.105850e+02   3.457504e+02 
    00s03  00017   2.080439e+02   1.360116e+02     00s04  00018   2.066488e+02   1.314920e+01     00s04  00019   2.064060e+02   8.058613e+00     00s04  00020   2.062134e+02   7.988776e+00     00s04  00021   2.057566e+02   1.070237e+01 
    00s04  00022   2.054674e+02   8.358269e+00     00s05  00023   2.061716e+02   1.198758e+02     00s05  00024   2.050097e+02   9.998151e+00     00s05  00025   2.050249e+02   3.550000e+01     00s05  00026   2.048464e+02   1.953216e+00     00s05  00027   2.048327e+02   6.028968e-01     00s06  00028   2.048219e+02   2.054128e-01 
    00s06  00029   2.048197e+02   7.014652e-02     00s06  00030   2.048182e+02   1.717351e-02 
    00s06  00031   2.048176e+02   4.406597e-03     00s07  00032   2.048175e+02   2.613568e-04     00s07  00033   2.048175e+02   1.086526e-06     00s07  00034   2.048175e+02   3.092299e-07     00s07  00035   2.048175e+02   3.092299e-07 
Runtime:     00s07
Optimization status: Converged

Optimization restart 1/1, f = 204.81754122275643
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '128', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '50', '20'], [' ', ' ', '128', '64', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '100', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '16', '4']]
prob:  <search.SurrogateProblem object at 0x14b8c3dc9850>
0 OK
bestX [array([[0.4203, 0.6246, 0.0222, 0.157 , 0.0418]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7134.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7134
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7134
........................................ [0.758018, 0.77258, 0.77955]
OUTPUT:%f [0.758018, 0.77258, 0.77955] 0.776065
store_func_eval
problem.constants
None
MLA iteration:  39
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   2.342060e+05           nan     00s00  00001   2.342060e+05   1.527238e+11     00s00  00002   3.185463e+04   5.411866e+09     00s00  00003   1.830752e+04   1.980747e+09     00s00  00004   7.490245e+03   3.595963e+08     00s01  00005   3.800658e+03   9.242398e+07     00s01  00006   1.908285e+03   2.178967e+07     00s01  00007   1.028616e+03   5.400046e+06     00s01  00008   5.947966e+02   1.311488e+06     00s02  00009   3.866800e+02   3.145555e+05 
    00s02  00010   2.891084e+02   7.187955e+04     00s02  00011   2.463753e+02   1.494177e+04     00s02  00012   2.294953e+02   2.691348e+03     00s02  00013   2.230939e+02   5.668281e+02     00s03  00014   2.195623e+02   3.878784e+02 
    00s03  00015   2.157301e+02   4.871736e+02     00s03  00016   2.108972e+02   3.659300e+02     00s03  00017   2.083508e+02   1.498318e+02     00s04  00018   2.068895e+02   1.524695e+01     00s04  00019   2.066519e+02   8.658555e+00     00s04  00020   2.064753e+02   7.700347e+00     00s04  00021   2.107827e+02   6.806008e+02     00s04  00022   2.060782e+02   9.814834e+00     00s05  00023   2.152199e+02   1.908762e+03 
    00s05  00024   2.059092e+02   1.844805e+01     00s05  00025   2.057767e+02   6.407876e+00     00s05  00026   2.056327e+02   1.801194e+01     00s06  00027   2.054539e+02   3.643888e+01     00s06  00028   2.052462e+02   2.584138e+01     00s06  00029   2.051591e+02   3.216427e+00     00s06  00030   2.051245e+02   3.146491e-01     00s06  00031   2.051223e+02   2.664923e-03     00s07  00032   2.051223e+02   8.161329e-04 
    00s07  00033   2.051223e+02   1.367154e-03     00s07  00034   2.051222e+02   1.468384e-04     00s07  00035   2.051222e+02   2.952370e-05     00s07  00036   2.051222e+02   2.952370e-05 
Runtime:     00s07
Optimization status: Converged

Optimization restart 1/1, f = 205.1222453367785
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '128', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '50', '20'], [' ', ' ', '128', '64', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '100', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '8', '4']]
prob:  <search.SurrogateProblem object at 0x14b8c3d327c0>
0 OK
bestX [array([[0.0092, 0.8169, 0.2318, 0.2801, 0.0474]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2454.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2454
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2454
........................................ [0.362417, 0.371025, 0.372567]
OUTPUT:%f [0.362417, 0.371025, 0.372567] 0.371796
store_func_eval
problem.constants
None
MLA iteration:  40
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   2.438895e+05           nan     00s00  00001   2.438895e+05   1.678601e+11 
    00s00  00002   3.253421e+04   5.712852e+09     00s00  00003   1.891619e+04   2.126934e+09     00s00  00004   7.750853e+03   3.865743e+08     00s01  00005   3.936033e+03   9.960903e+07 
    00s01  00006   1.973398e+03   2.349351e+07     00s01  00007   1.060613e+03   5.826063e+06     00s01  00008   6.100516e+02   1.414867e+06     00s02  00009   3.938301e+02   3.392859e+05     00s02  00010   2.924093e+02   7.756141e+04     00s02  00011   2.479481e+02   1.615813e+04     00s02  00012   2.303884e+02   2.911091e+03     00s02  00013   2.238192e+02   5.905052e+02     00s03  00014   2.203293e+02   3.802711e+02     00s03  00015   2.165874e+02   4.834104e+02     00s03  00016   2.116527e+02   4.090939e+02     00s03  00017   2.080717e+02   7.842087e+01 
    00s04  00018   2.070877e+02   1.043462e+01     00s04  00019   2.068822e+02   8.377806e+00     00s04  00020   2.062284e+02   1.487744e+01     00s04  00021   2.062365e+02   6.841240e+01     00s04  00022   2.060781e+02   1.426046e+01     00s05  00023   2.059650e+02   2.206964e+01     00s05  00024   2.057557e+02   9.824475e+00     00s05  00025   2.054609e+02   1.783929e+00     00s05  00026   2.054264e+02   1.985941e-01 
    00s06  00027   2.054214e+02   1.169909e-01     00s06  00028   2.054175e+02   1.197356e-01     00s06  00029   2.054174e+02   3.606201e-01     00s06  00030   2.054164e+02   6.348636e-02     00s06  00031   2.054158e+02   3.644034e-03     00s07  00032   2.054158e+02   6.115688e-05     00s07  00033   2.054158e+02   5.303833e-07     00s07  00034   2.054158e+02   3.911524e-07     00s07  00035   2.054158e+02   3.911524e-07 
Runtime:     00s07
Optimization status: Converged

Optimization restart 1/1, f = 205.41579479806276
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '128', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '50', '20'], [' ', ' ', '128', '64', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '100', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '20', '4']]
prob:  <search.SurrogateProblem object at 0x14b8d840c580>
0 OK
bestX [array([[0.9319, 0.5192, 1.    , 0.0424, 0.0273]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6492.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6492
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6492
........................................ [2.061275, 2.061566, 2.058003]
OUTPUT:%f [2.061275, 2.061566, 2.058003] 2.0597845
store_func_eval
problem.constants
None
MLA iteration:  41
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   2.470197e+05           nan     00s00  00001   2.470197e+05   1.709328e+11     00s00  00002   3.304815e+04   5.872782e+09     00s00  00003   1.917308e+04   2.177260e+09     00s00  00004   7.862910e+03   3.968053e+08     00s01  00005   3.986287e+03   1.020391e+08 
    00s01  00006   1.996515e+03   2.404280e+07     00s01  00007   1.072088e+03   5.954862e+06     00s01  00008   6.164219e+02   1.445455e+06 
    00s02  00009   3.978755e+02   3.466386e+05     00s02  00010   2.953919e+02   7.927360e+04 
    00s02  00011   2.505041e+02   1.652043e+04 
    00s02  00012   2.328417e+02   2.973425e+03     00s02  00013   2.263006e+02   5.945391e+02     00s03  00014   2.228704e+02   3.726139e+02     00s03  00015   2.191908e+02   4.775776e+02     00s03  00016   2.141978e+02   4.303982e+02     00s03  00017   2.097743e+02   3.247178e+01     00s04  00018   2.093166e+02   1.597803e+01     00s04  00019   2.090996e+02   2.155160e+01     00s04  00020   2.083993e+02   7.175568e+00 
    00s04  00021   2.082618e+02   1.388218e+01     00s04  00022   2.080517e+02   1.205076e+01     00s05  00023   2.077979e+02   7.214266e+00     00s05  00024   2.077075e+02   8.449405e-01     00s05  00025   2.077027e+02   1.961617e-02 
    00s05  00026   2.077020e+02   2.300580e-02     00s06  00027   2.077009e+02   1.229523e-02     00s06  00028   2.077010e+02   4.662514e-02     00s06  00029   2.077008e+02   9.162336e-04 
    00s06  00030   2.077008e+02   6.232476e-06     00s07  00031   2.077008e+02   2.757537e-06     00s07  00032   2.077008e+02   2.757537e-06 
Runtime:     00s07
Optimization status: Converged

Optimization restart 1/1, f = 207.70079308842998
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '128', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '50', '20'], [' ', ' ', '128', '64', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '100', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '20', '4'], [' ', ' ', '128', '4', '4']]
prob:  <search.SurrogateProblem object at 0x14b8d8aea550>
0 OK
bestX [array([[0.2396, 0.6661, 0.1691, 0.0584, 0.014 ]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8378.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8378
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8378
........................................ [0.912082, 0.940934, 0.922757]
OUTPUT:%f [0.912082, 0.940934, 0.922757] 0.9318455000000001
store_func_eval
problem.constants
None
MLA iteration:  42
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   2.568741e+05           nan     00s00  00001   2.568741e+05   1.820618e+11     00s00  00002   3.427344e+04   6.419079e+09 
    00s00  00003   1.961815e+04   2.322334e+09     00s00  00004   8.099319e+03   4.276534e+08     00s01  00005   4.107239e+03   1.099201e+08 
    00s01  00006   2.059741e+03   2.600135e+07     00s01  00007   1.104445e+03   6.455915e+06 
    00s01  00008   6.323923e+02   1.572042e+06     00s02  00009   4.052991e+02   3.779623e+05     00s02  00010   2.986366e+02   8.665504e+04     00s02  00011   2.519505e+02   1.813266e+04     00s02  00012   2.337044e+02   3.273655e+03     00s02  00013   2.271567e+02   6.176499e+02     00s03  00014   2.239863e+02   3.287417e+02     00s03  00015   2.208090e+02   3.863427e+02     00s03  00016   2.167247e+02   2.695813e+02 
    00s03  00017   2.129565e+02   3.616768e+01     00s04  00018   2.108979e+02   4.561189e+01     00s04  00019   2.111523e+02   2.116757e+02     00s04  00020   2.104260e+02   3.553684e+01     00s04  00021   2.098151e+02   1.294106e+01     00s05  00022   2.096127e+02   1.379533e+01     00s05  00023   2.094297e+02   9.084776e+00     00s05  00024   2.092575e+02   1.499263e+00     00s05  00025   2.092121e+02   5.614096e+00 
    00s05  00026   2.091865e+02   2.160156e+00     00s06  00027   2.091639e+02   1.323354e-02     00s06  00028   2.091638e+02   1.040286e-03 
    00s06  00029   2.091638e+02   3.928151e-05     00s06  00030   2.091638e+02   6.104384e-07     00s07  00031   2.091638e+02   6.104384e-07 
Runtime:     00s07
Optimization status: Converged

Optimization restart 1/1, f = 209.16375506411617
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '128', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '50', '20'], [' ', ' ', '128', '64', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '100', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '20', '4'], [' ', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '4', '4']]
prob:  <search.SurrogateProblem object at 0x14b8d8aea250>
0 OK
bestX [array([[0.9252, 0.9191, 0.1312, 0.9317, 0.0278]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7456.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7456
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7456
........................................ [0.168218, 0.165306, 0.164679]
OUTPUT:%f [0.168218, 0.165306, 0.164679] 0.1649925
store_func_eval
problem.constants
None
MLA iteration:  43
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   2.570017e+05           nan     00s00  00001   2.570017e+05   1.827210e+11     00s00  00002   3.425963e+04   6.412478e+09 
    00s00  00003   1.964628e+04   2.328131e+09     00s00  00004   8.102648e+03   4.279776e+08     00s01  00005   4.109804e+03   1.100517e+08     00s01  00006   2.060783e+03   2.602405e+07     00s01  00007   1.105070e+03   6.459969e+06     00s01  00008   6.329206e+02   1.572007e+06 
    00s02  00009   4.059578e+02   3.776694e+05     00s02  00010   2.994621e+02   8.653426e+04     00s02  00011   2.528920e+02   1.809951e+04     00s02  00012   2.347093e+02   3.264127e+03 
    00s03  00013   2.282022e+02   6.134082e+02     00s03  00014   2.250702e+02   3.251412e+02     00s03  00015   2.219432e+02   3.818945e+02     00s03  00016   2.179288e+02   2.656720e+02     00s03  00017   2.143200e+02   3.193358e+01     00s04  00018   2.124306e+02   5.601102e+01     00s04  00019   2.159130e+02   5.625245e+02     00s04  00020   2.119508e+02   2.749740e+01     00s04  00021   2.114559e+02   1.218581e+01     00s05  00022   2.110595e+02   2.160271e+01     00s05  00023   2.109341e+02   7.447779e+00     00s05  00024   2.107461e+02   3.393030e+00     00s05  00025   2.107020e+02   2.349832e+00 
    00s05  00026   2.106434e+02   4.509727e+00     00s06  00027   2.106655e+02   8.441249e+00     00s06  00028   2.106241e+02   1.745619e-01     00s06  00029   2.106185e+02   1.873511e-02     00s06  00030   2.106175e+02   1.345634e-02 
    00s07  00031   2.106170e+02   1.230171e-03     00s07  00032   2.106170e+02   2.205209e-04     00s07  00033   2.106170e+02   2.735941e-03     00s07  00034   2.106170e+02   1.505443e-05     00s07  00035   2.106170e+02   8.494112e-07     00s08  00036   2.106170e+02   8.494112e-07 
Runtime:     00s08
Optimization status: Converged

Optimization restart 1/1, f = 210.61700689961384
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '128', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '50', '20'], [' ', ' ', '128', '64', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '100', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '20', '4'], [' ', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '4', '4'], [' ', ' ', '8', '2048', '4']]
prob:  <search.SurrogateProblem object at 0x14b8d8af1610>
0 OK
bestX [array([[0.3955, 0.2523, 0.0231, 0.1624, 0.0325]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2032.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2032
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2032
........................................ [0.610998, 0.610438, 0.607571]
OUTPUT:%f [0.610998, 0.610438, 0.607571] 0.6090045
store_func_eval
problem.constants
None
MLA iteration:  44
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   2.587395e+05           nan     00s00  00001   2.587395e+05   1.842926e+11 
    00s00  00002   3.489195e+04   6.591467e+09     00s00  00003   1.990783e+04   2.387611e+09     00s00  00004   8.135487e+03   4.345349e+08     00s01  00005   4.116551e+03   1.114535e+08     00s01  00006   2.063460e+03   2.633652e+07     00s01  00007   1.107764e+03   6.546771e+06 
    00s01  00008   6.352320e+02   1.596334e+06     00s02  00009   4.076943e+02   3.841601e+05     00s02  00010   3.007721e+02   8.808827e+04 
    00s02  00011   2.539975e+02   1.843101e+04     00s02  00012   2.357491e+02   3.327493e+03 
    00s03  00013   2.292410e+02   6.227359e+02     00s03  00014   2.261393e+02   3.239817e+02     00s03  00015   2.230584e+02   3.801141e+02     00s03  00016   2.190559e+02   2.768072e+02     00s03  00017   2.139803e+02   1.314411e+02     00s04  00018   2.041721e+02   1.695237e+03     00s04  00019   1.971766e+02   1.804218e+02     00s04  00020   1.954880e+02   7.494709e+01 
    00s04  00021   1.944193e+02   3.704974e+01     00s05  00022   1.930582e+02   4.354806e+01     00s05  00023   1.910547e+02   1.064942e+02     00s05  00024   1.926523e+02   1.879039e+02     00s05  00025   1.890651e+02   1.655854e+02     00s06  00026   1.903567e+02   4.229077e+02     00s06  00027   1.888705e+02   8.794432e+01     00s06  00028   1.873036e+02   1.200133e+02     00s06  00029   1.846034e+02   2.648117e+02     00s06  00030   1.812494e+02   7.090580e+02     00s07  00031   1.898875e+02   5.948852e+03     00s07  00032   1.757834e+02   2.310975e+03     00s07  00033   1.835209e+03   2.467809e+06     00s07  00034   1.864017e+02   6.374953e+03     00s08  00035   1.740532e+02   3.354221e+03     00s08  00036   1.667176e+02   3.632237e+03     00s08  00037   1.465230e+02   2.268409e+03     00s08  00038   1.547748e+02   2.997084e+04     00s09  00039   1.378030e+02   5.616932e+02     00s09  00040   1.271936e+02   1.207537e+03     00s09  00041   6.355959e+03   3.794211e+07     00s09  00042   1.815302e+02   2.553971e+04     00s09  00043   1.229035e+02   2.968435e+02     00s10  00044   1.205146e+02   1.980064e+02     00s10  00045   1.176625e+02   6.485303e+02     00s10  00046   1.168463e+02   4.125641e+01 
    00s10  00047   1.165703e+02   8.185049e+00     00s11  00048   1.163621e+02   2.524694e+00     00s11  00049   1.162954e+02   6.476160e-01 
    00s11  00050   1.162728e+02   3.853425e-02     00s11  00051   1.162713e+02   6.285802e-03     00s11  00052   1.162711e+02   5.398045e-05     00s12  00053   1.162711e+02   3.840948e-05     00s12  00054   1.162711e+02   2.087410e-05     00s12  00055   1.162711e+02   1.174471e-04     00s12  00056   1.162711e+02   3.347986e-04     00s13  00057   1.162711e+02   2.698092e-02     00s13  00058   1.162711e+02   7.331133e-03 
    00s13  00059   1.162710e+02   5.272668e-03     00s13  00060   1.162709e+02   4.939470e-03     00s14  00061   1.162708e+02   1.327306e-02     00s14  00062   1.162704e+02   2.936939e-02     00s14  00063   1.162697e+02   4.826862e-02     00s14  00064   1.162683e+02   1.309430e-01     00s14  00065   1.162667e+02   5.686853e-02     00s15  00066   1.162651e+02   3.322556e-02     00s15  00067   1.162650e+02   4.111097e-02     00s15  00068   1.162647e+02   5.120120e-03     00s15  00069   1.162646e+02   9.337854e-03     00s16  00070   1.162653e+02   7.200958e-01     00s16  00071   1.162645e+02   1.564579e-02     00s16  00072   1.162644e+02   1.628947e-03     00s16  00073   1.162644e+02   1.075639e-04     00s16  00074   1.162644e+02   9.538342e-05 
    00s17  00075   1.162644e+02   1.558597e-04     00s17  00076   1.162643e+02   2.227583e-04     00s17  00077   1.162643e+02   2.228193e-03     00s17  00078   1.162643e+02   2.347329e-04     00s18  00079   1.162643e+02   2.028214e-05 
    00s18  00080   1.162643e+02   4.394880e-06     00s18  00081   1.162643e+02   2.198187e-05     00s18  00082   1.162643e+02   1.196540e-05     00s19  00083   1.162643e+02   3.281211e-04     00s19  00084   1.162643e+02   1.077941e-05     00s19  00085   1.162643e+02   6.723102e-06     00s19  00086   1.162643e+02   6.723102e-06 
Runtime:     00s19
Optimization status: Converged

Optimization restart 1/1, f = 116.26431697734797
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '128', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '50', '20'], [' ', ' ', '128', '64', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '100', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '20', '4'], [' ', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '4', '4'], [' ', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '4']]
prob:  <search.SurrogateProblem object at 0x14b8d8351a60>
0 OK
bestX [array([[0.9681, 0.5005, 0.3466, 0.756 , 0.3631]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7205.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7205
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7205
........................................ [0.186939, 0.183893, 0.183368]
OUTPUT:%f [0.186939, 0.183893, 0.183368] 0.1836305
store_func_eval
problem.constants
None
MLA iteration:  45
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   2.587355e+05           nan     00s00  00001   2.587355e+05   1.843199e+11     00s00  00002   3.507003e+04   6.633458e+09     00s00  00003   1.997183e+04   2.404670e+09     00s00  00004   8.107393e+03   4.337218e+08     00s01  00005   4.098737e+03   1.110487e+08     00s01  00006   2.055616e+03   2.621180e+07     00s01  00007   1.105693e+03   6.521703e+06     00s01  00008   6.352732e+02   1.592151e+06     00s02  00009   4.082633e+02   3.834020e+05     00s02  00010   3.014387e+02   8.789224e+04 
    00s02  00011   2.546936e+02   1.837326e+04     00s02  00012   2.364509e+02   3.313671e+03 
    00s03  00013   2.299221e+02   6.232613e+02     00s03  00014   2.267799e+02   3.309185e+02     00s03  00015   2.236407e+02   3.920046e+02     00s03  00016   2.196036e+02   2.756962e+02 
    00s04  00017   2.166190e+02   1.704321e+01     00s04  00018   2.160883e+02   1.926543e+01     00s04  00019   2.148712e+02   6.851940e+01     00s04  00020   2.151387e+02   2.130095e+02     00s04  00021   2.146405e+02   9.862689e+01     00s05  00022   2.135138e+02   1.000757e+02     00s05  00023   2.130006e+02   2.545532e+01 
    00s05  00024   2.126764e+02   4.849293e+00     00s05  00025   2.125168e+02   4.158858e+00     00s06  00026   2.124752e+02   1.284359e-01     00s06  00027   2.124729e+02   1.756756e-02 
    00s06  00028   2.124724e+02   9.710080e-03     00s06  00029   2.124715e+02   6.739631e-02     00s06  00030   2.124709e+02   7.878578e-02     00s07  00031   2.124702e+02   2.955647e-02     00s07  00032   2.124690e+02   3.369392e-03     00s07  00033   2.124681e+02   7.797983e-03     00s07  00034   2.124538e+02   3.939107e-01     00s08  00035   2.120854e+02   9.488131e+01     00s08  00036   2.299419e+02   3.474396e+03     00s08  00037   2.120433e+02   1.380465e+02     00s08  00038   2.120255e+02   1.971741e+02     00s09  00039   8.610408e+04   7.390765e+09     00s09  00040   4.902756e+02   2.688238e+04     00s09  00041   2.120255e+02   2.033896e+02     00s09  00042   2.120071e+02   2.024118e+02     00s10  00043   2.119336e+02   1.986509e+02     00s10  00044   2.116376e+02   1.858891e+02     00s10  00045   2.104146e+02   1.633940e+02     00s10  00046   2.073925e+02   4.299544e+02     00s10  00047   2.234464e+02   5.983792e+03     00s11  00048   1.945525e+02   2.591040e+03     00s11  00049   1.936814e+02   3.622290e+03     00s11  00050   2.134562e+02   6.084490e+03     00s11  00051   1.906097e+02   4.107581e+03     00s12  00052   1.614963e+02   1.427733e+02     00s12  00053   1.590414e+02   1.473762e+03     00s12  00054   1.591842e+02   6.659283e+02     00s12  00055   1.564622e+02   3.736720e+02     00s13  00056   1.525565e+02   1.016682e+02     00s13  00057   1.533548e+02   1.053840e+03     00s13  00058   1.490506e+02   4.943271e+02     00s13  00059   1.476126e+02   9.024759e+02     00s13  00060   1.425429e+02   7.319249e+02     00s14  00061   1.355011e+02   2.478035e+02     00s14  00062   1.330413e+02   3.841849e+02     00s14  00063   1.278020e+02   1.940982e+01     00s14  00064   1.286431e+02   3.025575e+02     00s15  00065   1.265904e+02   3.553092e+01     00s15  00066   1.260290e+02   2.325097e+03     00s15  00067   1.248681e+02   1.564498e+02     00s15  00068   1.266612e+02   1.536381e+03     00s15  00069   1.237314e+02   2.955032e+02     00s16  00070   1.233346e+02   4.579041e+01     00s16  00071   1.225315e+02   3.559590e+01     00s17  00072   1.222333e+02   2.759630e+02     00s17  00073   1.216476e+02   2.787608e+00     00s17  00074   1.215198e+02   4.737428e-01     00s17  00075   1.214990e+02   2.957752e-01     00s18  00076   1.214983e+02   1.942624e-03 
    00s18  00077   1.214983e+02   5.653382e-04     00s18  00078   1.214983e+02   4.321423e-04     00s18  00079   1.214983e+02   3.060524e-03     00s18  00080   1.214983e+02   1.021493e-03     00s19  00081   1.214983e+02   1.190412e-05     00s19  00082   1.214983e+02   1.073257e-05     00s19  00083   1.214983e+02   1.073257e-05 
Runtime:     00s19
Optimization status: Converged

Optimization restart 1/1, f = 121.4982725042491
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '128', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '50', '20'], [' ', ' ', '128', '64', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '100', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '20', '4'], [' ', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '4', '4'], [' ', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '4'], [' ', ' ', '20', '100', '20']]
prob:  <search.SurrogateProblem object at 0x14b8c3e20970>
0 OK
bestX [array([[0.695 , 0.8008, 0.344 , 0.992 , 0.4396]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/652.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/652
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/652
........................................ [2.226295, 2.218959, 2.224329]
OUTPUT:%f [2.226295, 2.218959, 2.224329] 2.221644
store_func_eval
problem.constants
None
MLA iteration:  46
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   2.659580e+05           nan     00s00  00001   2.659580e+05   1.947494e+11     00s00  00002   3.575186e+04   6.899397e+09 
    00s00  00003   2.048955e+04   2.513250e+09     00s00  00004   8.387077e+03   4.580240e+08     00s01  00005   4.247481e+03   1.175272e+08     00s01  00006   2.130958e+03   2.779947e+07     00s01  00007   1.144027e+03   6.915271e+06     00s01  00008   6.552356e+02   1.686495e+06 
    00s02  00009   4.195522e+02   4.059658e+05     00s02  00010   3.086077e+02   9.327246e+04     00s02  00011   2.598765e+02   1.962525e+04 
    00s02  00012   2.407117e+02   3.578218e+03 
    00s03  00013   2.338121e+02   6.670220e+02     00s03  00014   2.305455e+02   3.314936e+02     00s03  00015   2.273812e+02   3.814474e+02     00s03  00016   2.233500e+02   2.712144e+02     00s04  00017   2.197196e+02   6.523521e+01     00s04  00018   2.156438e+02   4.439806e+02     00s04  00019   2.057636e+02   1.996134e+03     00s04  00020   3.206280e+02   2.751902e+03     00s05  00021   1.973018e+02   2.566300e+03     00s05  00022   1.946372e+02   2.405008e+03     00s05  00023   1.899129e+02   1.840313e+03     00s05  00024   1.668605e+02   4.654152e+03     00s05  00025   1.587063e+02   5.304821e+02     00s06  00026   1.458246e+02   4.683515e+02     00s06  00027   1.569717e+02   5.337651e+03     00s06  00028   1.358438e+02   1.928168e+03     00s06  00029   1.317589e+02   1.623122e+03     00s07  00030   1.324472e+02   7.831392e+03     00s07  00031   1.277878e+02   1.634075e+02     00s07  00032   1.261788e+02   1.396750e+02 
    00s07  00033   1.255336e+02   8.411459e+01     00s08  00034   1.243424e+02   1.205073e+02     00s08  00035   1.230549e+02   1.237717e+02     00s08  00036   1.226360e+02   3.369590e+01     00s08  00037   1.224371e+02   3.492234e+00     00s08  00038   1.223999e+02   4.287761e+00     00s09  00039   1.223470e+02   2.243743e+00 
    00s09  00040   1.223265e+02   1.364379e+00     00s09  00041   1.223232e+02   1.301725e-02     00s09  00042   1.223230e+02   4.316253e-03     00s10  00043   1.223230e+02   8.759934e-04     00s10  00044   1.223230e+02   3.396032e-04     00s10  00045   1.223230e+02   2.914136e-05 
    00s10  00046   1.223230e+02   1.237801e-05     00s11  00047   1.223230e+02   3.740916e-05     00s11  00048   1.223230e+02   1.536615e-04     00s11  00049   1.223230e+02   5.115277e-04     00s11  00050   1.223230e+02   1.628458e-03     00s11  00051   1.223230e+02   4.455039e-03     00s12  00052   1.223229e+02   1.302708e-02     00s12  00053   1.223228e+02   2.881170e-02     00s12  00054   1.223225e+02   1.360116e-01     00s12  00055   1.223219e+02   1.854887e-01     00s13  00056   1.223258e+02   5.268651e+00     00s13  00057   1.223216e+02   6.791350e-01     00s13  00058   1.223205e+02   4.299604e-01     00s13  00059   1.223189e+02   8.953407e-02     00s14  00060   1.223180e+02   1.362389e-02     00s14  00061   1.223176e+02   1.500414e-02     00s14  00062   1.223171e+02   1.139713e-02     00s14  00063   1.223168e+02   1.664264e-03     00s14  00064   1.223168e+02   4.132478e-03     00s15  00065   1.223168e+02   1.048552e-03     00s15  00066   1.223167e+02   2.131502e-04     00s15  00067   1.223167e+02   1.882288e-04     00s15  00068   1.223168e+02   9.571550e-02     00s16  00069   1.223167e+02   1.397127e-03     00s16  00070   1.223167e+02   1.669285e-04     00s16  00071   1.223167e+02   1.484971e-05     00s16  00072   1.223166e+02   1.156257e-05     00s17  00073   1.223167e+02   3.953054e-04 
    00s17  00074   1.223166e+02   9.183616e-06     00s17  00075   1.223166e+02   2.922722e-06     00s17  00076   1.223166e+02   8.928656e-06     00s17  00077   1.223166e+02   1.693376e-04     00s18  00078   1.223166e+02   2.069089e-05     00s18  00079   1.223166e+02   7.210006e-06     00s18  00080   1.223166e+02   1.360024e-06     00s18  00081   1.223166e+02   3.658406e-06     00s19  00082   1.223166e+02   3.658406e-06 
Runtime:     00s19
Optimization status: Converged

Optimization restart 1/1, f = 122.31664336036091
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '128', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '50', '20'], [' ', ' ', '128', '64', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '100', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '20', '4'], [' ', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '4', '4'], [' ', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '4'], [' ', ' ', '20', '100', '20'], [' ', ' ', '20', '2048', '32']]
prob:  <search.SurrogateProblem object at 0x14b8c3f1ffd0>
0 OK
bestX [array([[0.5749, 0.9627, 0.7969, 0.9547, 0.4005]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/714.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/714
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/714
........................................ [2.197968, 2.193448, 2.223813]
OUTPUT:%f [2.197968, 2.193448, 2.223813] 2.2086305
store_func_eval
problem.constants
None
MLA iteration:  47
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   2.659669e+05           nan     00s00  00001   2.659669e+05   1.947046e+11     00s00  00002   3.577940e+04   6.898868e+09 
    00s00  00003   2.051389e+04   2.514503e+09     00s00  00004   8.397134e+03   4.581859e+08     00s01  00005   4.253352e+03   1.175646e+08 
    00s01  00006   2.135104e+03   2.781778e+07     00s01  00007   1.147293e+03   6.925030e+06     00s01  00008   6.578985e+02   1.690858e+06 
    00s02  00009   4.218123e+02   4.077039e+05     00s02  00010   3.106112e+02   9.391359e+04     00s02  00011   2.617122e+02   1.984531e+04     00s02  00012   2.424196e+02   3.652364e+03     00s03  00013   2.353843e+02   7.034024e+02     00s03  00014   2.319115e+02   3.773339e+02     00s03  00015   2.282968e+02   5.010321e+02     00s03  00016   2.229909e+02   6.438594e+02     00s04  00017   2.151617e+02   7.078881e+02     00s04  00018   2.045081e+02   1.002327e+02     00s04  00019   1.999296e+02   5.147267e+02 
    00s04  00020   2.099682e+02   5.218174e+03     00s04  00021   1.903775e+02   2.947573e+03     00s05  00022   1.885533e+02   4.040432e+03     00s05  00023   1.625441e+02   1.586037e+03     00s05  00024   4.109926e+02   1.277162e+05     00s05  00025   1.400238e+02   9.607471e+02     00s06  00026   2.802197e+02   3.940288e+04     00s06  00027   1.317013e+02   1.021777e+03 
    00s06  00028   1.271490e+02   1.345811e+02     00s06  00029   1.249399e+02   1.109570e+02     00s07  00030   1.248194e+02   2.483567e+02     00s07  00031   1.242028e+02   3.356148e+01     00s07  00032   1.237895e+02   1.318839e+01     00s07  00033   1.234240e+02   1.243953e+01     00s08  00034   1.233825e+02   6.864467e-01     00s08  00035   1.233788e+02   5.707369e-01 
    00s08  00036   1.233768e+02   1.875430e-02     00s08  00037   1.233766e+02   1.469569e-02     00s08  00038   1.233758e+02   6.060900e-03     00s09  00039   1.233757e+02   6.930678e-03 
    00s09  00040   1.233756e+02   3.455054e-03     00s09  00041   1.233756e+02   1.074648e-04     00s09  00042   1.233756e+02   4.364035e-05     00s10  00043   1.233756e+02   9.530630e-05     00s10  00044   1.233756e+02   3.745663e-04     00s10  00045   1.233756e+02   3.557085e-05 
    00s10  00046   1.233756e+02   2.632037e-05     00s11  00047   1.233756e+02   2.632037e-05 
Runtime:     00s11
Optimization status: Converged

Optimization restart 1/1, f = 123.37560410380009
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '128', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '50', '20'], [' ', ' ', '128', '64', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '100', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '20', '4'], [' ', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '4', '4'], [' ', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '4'], [' ', ' ', '20', '100', '20'], [' ', ' ', '20', '2048', '32'], [' ', ' ', '96', '2048', '32']]
prob:  <search.SurrogateProblem object at 0x14b8c3de61c0>
0 OK
bestX [array([[0.7919, 0.7045, 0.3993, 0.8597, 0.3444]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6017.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6017
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6017
........................................ [0.182609, 0.181671, 0.180531]
OUTPUT:%f [0.182609, 0.181671, 0.180531] 0.181101
store_func_eval
problem.constants
None
MLA iteration:  48
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   2.957096e+05           nan     00s00  00001   2.957096e+05   2.433688e+11     00s00  00002   3.780285e+04   8.092940e+09     00s00  00003   2.189797e+04   2.964572e+09     00s00  00004   9.126649e+03   5.528391e+08     00s01  00005   4.635152e+03   1.423281e+08 
    00s01  00006   2.327370e+03   3.382666e+07     00s01  00007   1.244673e+03   8.446335e+06     00s01  00008   7.058963e+02   2.070379e+06     00s02  00009   4.445697e+02   5.016019e+05     00s02  00010   3.206555e+02   1.164340e+05     00s02  00011   2.655774e+02   2.494399e+04     00s02  00012   2.434702e+02   4.680438e+03     00s03  00013   2.352915e+02   8.942706e+02 
    00s03  00014   2.313165e+02   4.738607e+02     00s03  00015   2.272453e+02   7.091259e+02     00s03  00016   2.215371e+02   1.069519e+03     00s04  00017   2.137772e+02   1.047806e+03     00s04  00018   2.015843e+02   2.467117e+02     00s04  00019   1.883082e+02   9.255452e+02     00s04  00020   2.448913e+02   6.421088e+03     00s05  00021   1.848261e+02   8.140088e+02     00s05  00022   1.898820e+02   5.192408e+03     00s05  00023   1.766375e+02   2.317888e+03     00s05  00024   1.684254e+02   2.679863e+03     00s05  00025   1.585178e+02   4.003123e+03     00s06  00026   1.498486e+02   2.652718e+02     00s06  00027   2.320047e+02   3.717066e+03     00s06  00028   1.473873e+02   9.294524e+02     00s06  00029   1.434045e+02   6.250828e+02     00s07  00030   1.391730e+02   1.807263e+02     00s07  00031   1.361641e+02   1.484679e+02     00s07  00032   1.301684e+02   1.524152e+02     00s07  00033   2.070911e+02   1.173295e+04     00s08  00034   1.285442e+02   1.017581e+02     00s08  00035   1.270440e+02   1.197055e+02     00s08  00036   1.259590e+02   1.089457e+02 
    00s08  00037   1.258564e+02   6.898508e+01     00s09  00038   1.256975e+02   1.081005e+01     00s09  00039   1.255992e+02   1.805199e+00     00s09  00040   1.255552e+02   1.671901e+00     00s09  00041   1.255578e+02   1.001851e+00 
    00s09  00042   1.255509e+02   5.190369e-01 
    00s10  00043   1.255470e+02   2.474874e-02     00s10  00044   1.255467e+02   5.385026e-03     00s10  00045   1.255465e+02   7.401888e-03     00s10  00046   1.255464e+02   9.550031e-05     00s11  00047   1.255464e+02   2.999907e-05 
    00s11  00048   1.255464e+02   1.564409e-05     00s11  00049   1.255464e+02   2.590365e-04     00s11  00050   1.255464e+02   8.337314e-04     00s12  00051   1.255464e+02   2.593335e-03     00s12  00052   1.255463e+02   1.104786e-02     00s12  00053   1.255462e+02   1.761278e-02     00s12  00054   1.255472e+02   1.317412e+00     00s12  00055   1.255461e+02   1.222051e-01     00s13  00056   1.255457e+02   1.073346e-01     00s13  00057   1.255442e+02   1.217323e-01     00s13  00058   1.255479e+02   1.057561e+00     00s13  00059   1.255438e+02   7.860933e-02     00s14  00060   1.255422e+02   4.772355e-02     00s14  00061   1.255397e+02   6.449202e-03     00s14  00062   1.255392e+02   1.433616e-04     00s14  00063   1.255391e+02   4.517870e-04     00s15  00064   1.255390e+02   6.906958e-04     00s15  00065   1.255390e+02   3.147174e-03     00s15  00066   1.255389e+02   1.186375e-04     00s15  00067   1.255389e+02   1.936895e-04     00s16  00068   1.255389e+02   4.456431e-03     00s16  00069   1.255389e+02   6.299089e-04     00s16  00070   1.255389e+02   7.294240e-05     00s16  00071   1.255389e+02   3.006827e-05     00s16  00072   1.255389e+02   1.101431e-04     00s17  00073   1.255389e+02   1.819964e-04 
    00s17  00074   1.255389e+02   9.308180e-06     00s17  00075   1.255389e+02   1.403194e-06     00s17  00076   1.255389e+02   1.403194e-06 
Runtime:     00s17
Optimization status: Converged

Optimization restart 1/1, f = 125.53886896394833
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '128', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '50', '20'], [' ', ' ', '128', '64', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '100', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '20', '4'], [' ', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '4', '4'], [' ', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '4'], [' ', ' ', '20', '100', '20'], [' ', ' ', '20', '2048', '32'], [' ', ' ', '96', '2048', '32'], [' ', ' ', '32', '128', '20']]
prob:  <search.SurrogateProblem object at 0x14b8c3fe63d0>
0 OK
bestX [array([[0.7915, 0.1139, 0.0475, 0.9533, 0.2075]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5372.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5372
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5372
........................................ [1.515823, 1.511675, 1.511417]
OUTPUT:%f [1.515823, 1.511675, 1.511417] 1.511546
store_func_eval
problem.constants
None
MLA iteration:  49
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   3.045535e+05           nan     00s00  00001   3.045535e+05   2.589254e+11     00s00  00002   3.856815e+04   8.533833e+09     00s00  00003   2.232036e+04   3.115115e+09     00s01  00004   9.333630e+03   5.820030e+08     00s01  00005   4.751927e+03   1.500504e+08 
    00s01  00006   2.390350e+03   3.570646e+07     00s01  00007   1.278450e+03   8.913810e+06     00s01  00008   7.238097e+02   2.181845e+06     00s02  00009   4.544309e+02   5.276923e+05     00s02  00010   3.265562e+02   1.223782e+05     00s02  00011   2.696224e+02   2.621660e+04     00s02  00012   2.467878e+02   4.896199e+03     00s03  00013   2.385359e+02   8.750696e+02     00s03  00014   2.349179e+02   3.571838e+02 
    00s03  00015   2.317423e+02   3.978020e+02     00s03  00016   2.276326e+02   3.430849e+02 
    00s04  00017   2.234836e+02   2.362364e+01     00s04  00018   2.223074e+02   2.506022e+01     00s04  00019   2.219391e+02   7.598712e+01     00s04  00020   2.213642e+02   1.439353e+01     00s05  00021   2.206603e+02   1.973940e+01     00s05  00022   2.394115e+02   4.057250e+03     00s05  00023   2.187968e+02   2.114156e+02     00s05  00024   2.178191e+02   5.666084e+02     00s05  00025   3.277898e+02   2.276947e+02     00s06  00026   2.174902e+02   8.340239e+02     00s06  00027   2.163244e+02   9.932520e+02     00s06  00028   2.118306e+02   2.253547e+03     00s06  00029   2.050398e+02   6.119763e+02     00s07  00030   2.027352e+02   7.427134e+02     00s07  00031   2.012738e+02   5.363783e+01     00s07  00032   2.008041e+02   3.301847e+01     00s07  00033   2.001740e+02   3.931456e+01     00s08  00034   1.981973e+02   1.319313e+02     00s08  00035   2.576906e+02   6.345630e+03     00s08  00036   1.946339e+02   6.542307e+02     00s08  00037   1.940773e+02   4.599183e+02     00s09  00038   1.908340e+02   1.264262e+02     00s09  00039   1.894496e+02   5.055490e+02     00s09  00040   1.873855e+02   2.595149e+02     00s09  00041   1.845308e+02   2.789070e+02     00s10  00042   1.949599e+02   5.414057e+03     00s10  00043   1.802250e+02   1.295300e+03     00s10  00044   1.795590e+02   2.329115e+03     00s10  00045   1.764199e+02   4.395879e+03     00s11  00046   1.581824e+02   1.289199e+03     00s11  00047   1.461893e+02   1.326469e+03 
    00s11  00048   1.348100e+02   3.783476e+02     00s11  00049   1.323100e+02   4.475418e+01     00s11  00050   1.309912e+02   3.203842e+01     00s12  00051   1.304219e+02   2.784383e+01     00s12  00052   1.302054e+02   4.985605e+00     00s12  00053   1.301098e+02   4.763468e+00 
    00s12  00054   1.300206e+02   3.618352e+00     00s13  00055   1.298625e+02   3.107649e+01     00s13  00056   1.322673e+02   3.338753e+02     00s13  00057   1.297325e+02   6.667935e+01     00s13  00058   1.297074e+02   8.102987e+01     00s14  00059   1.398464e+02   3.407353e+03     00s14  00060   1.296885e+02   8.114322e+01     00s14  00061   1.293785e+02   1.793399e+01     00s14  00062   1.292014e+02   9.075914e-01     00s15  00063   1.291759e+02   4.255158e-01     00s15  00064   1.291357e+02   6.140188e-01     00s15  00065   1.291181e+02   8.908241e-02 
    00s15  00066   1.291155e+02   7.788305e-03     00s16  00067   1.291156e+02   1.007739e-01     00s16  00068   1.291154e+02   2.530007e-02     00s16  00069   1.291154e+02   6.902881e-03     00s16  00070   1.291153e+02   2.786898e-05     00s16  00071   1.291153e+02   1.680658e-05 
    00s17  00072   1.291153e+02   1.680658e-05 
Runtime:     00s17
Optimization status: Converged

Optimization restart 1/1, f = 129.11533477189323
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '128', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '50', '20'], [' ', ' ', '128', '64', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '100', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '20', '4'], [' ', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '4', '4'], [' ', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '4'], [' ', ' ', '20', '100', '20'], [' ', ' ', '20', '2048', '32'], [' ', ' ', '96', '2048', '32'], [' ', ' ', '32', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16']]
prob:  <search.SurrogateProblem object at 0x14b8c3c6c130>
0 OK
bestX [array([[0.7101, 0.8821, 0.8762, 0.8816, 0.0378]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9450.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9450
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9450
........................................ [0.153812, 0.151005, 0.151066]
OUTPUT:%f [0.153812, 0.151005, 0.151066] 0.1510355
store_func_eval
problem.constants
None
MLA iteration:  50
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   3.045884e+05           nan     00s00  00001   3.045884e+05   2.595827e+11     00s00  00002   3.886980e+04   8.576665e+09 
    00s00  00003   2.253206e+04   3.153659e+09     00s01  00004   9.350902e+03   5.837805e+08     00s01  00005   4.753370e+03   1.504668e+08     00s01  00006   2.386318e+03   3.574633e+07     00s01  00007   1.275064e+03   8.917620e+06 
    00s01  00008   7.218725e+02   2.181249e+06     00s02  00009   4.537613e+02   5.274592e+05     00s02  00010   3.266519e+02   1.223302e+05 
    00s02  00011   2.701067e+02   2.621351e+04     00s02  00012   2.474440e+02   4.898747e+03     00s03  00013   2.392642e+02   8.763081e+02     00s03  00014   2.356808e+02   3.588766e+02     00s03  00015   2.325132e+02   4.060905e+02     00s03  00016   2.283143e+02   3.785187e+02     00s04  00017   2.231022e+02   8.340594e+01     00s04  00018   2.219439e+02   1.404296e+02     00s04  00019   2.207809e+02   4.275997e+01 
    00s04  00020   2.197906e+02   6.042585e+01     00s05  00021   2.133947e+02   8.803454e+02     00s05  00022   2.369523e+02   4.373490e+03     00s05  00023   2.131202e+02   1.212931e+03     00s05  00024   2.345885e+02   4.370133e+03     00s06  00025   2.128730e+02   1.549340e+03     00s06  00026   2.096242e+02   1.335285e+03     00s06  00027   2.027299e+02   6.535595e+03     00s06  00028   1.913645e+02   4.460535e+02     00s07  00029   1.842028e+02   8.061002e+02     00s07  00030   4.862363e+02   1.017776e+05     00s07  00031   1.724278e+02   3.173653e+03     00s07  00032   1.629125e+02   2.422734e+03     00s08  00033   1.495492e+02   2.097200e+03     00s08  00034   1.420160e+02   1.400637e+03     00s08  00035   1.441980e+02   1.084232e+04     00s08  00036   1.350865e+02   2.865033e+02     00s09  00037   1.319352e+02   7.594375e+01     00s09  00038   1.315358e+02   2.205076e+02     00s09  00039   1.314366e+02   6.669984e+01     00s09  00040   1.309360e+02   3.313195e+01     00s10  00041   1.307320e+02   1.092871e+01     00s10  00042   1.303780e+02   3.936955e+01     00s10  00043   1.300425e+02   3.234143e+02     00s10  00044   1.298141e+02   1.158459e+02     00s10  00045   1.294158e+02   9.138672e+01     00s11  00046   1.289338e+02   1.510557e+01 
    00s11  00047   1.288680e+02   1.564128e-01     00s11  00048   1.288636e+02   1.460045e-01     00s11  00049   1.288621e+02   6.608163e-02     00s12  00050   1.288606e+02   2.378397e-02 
    00s12  00051   1.288601e+02   1.040727e-02     00s12  00052   1.288601e+02   2.155434e-04     00s12  00053   1.288601e+02   1.339332e-04     00s13  00054   1.288601e+02   1.976049e-05     00s13  00055   1.288601e+02   1.721755e-05 
    00s13  00056   1.288601e+02   1.550974e-04     00s13  00057   1.288601e+02   5.173122e-04     00s14  00058   1.288601e+02   1.619188e-03     00s14  00059   1.288601e+02   4.431701e-03     00s14  00060   1.288600e+02   1.128062e-02     00s14  00061   1.288599e+02   2.542322e-02     00s15  00062   1.288597e+02   5.089920e-02     00s15  00063   1.288592e+02   9.231408e-02     00s15  00064   1.288582e+02   1.722638e-01     00s15  00065   1.288595e+02   1.291140e+00     00s15  00066   1.288578e+02   1.669654e-01     00s16  00067   1.288562e+02   1.008460e-01     00s16  00068   1.288543e+02   2.060843e-02     00s16  00069   1.288534e+02   4.033924e-03     00s16  00070   1.288530e+02   1.508262e-03     00s17  00071   1.288529e+02   5.912711e-03     00s17  00072   1.288529e+02   9.355645e-03     00s17  00073   1.288529e+02   6.178925e-04     00s17  00074   1.288528e+02   3.249062e-04     00s18  00075   1.288528e+02   1.022599e-03     00s18  00076   1.288528e+02   2.069554e-04     00s18  00077   1.288528e+02   1.548925e-02     00s18  00078   1.288528e+02   1.571491e-03 
    00s19  00079   1.288528e+02   3.859167e-05     00s19  00080   1.288527e+02   4.650533e-05     00s19  00081   1.288527e+02   2.153847e-05     00s19  00082   1.288527e+02   2.146311e-05     00s21  00088   1.288527e+02   6.183652e-06 
Runtime:     00s21
Optimization status: Converged

Optimization restart 1/1, f = 128.8527383816188
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '128', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '50', '20'], [' ', ' ', '128', '64', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '100', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '20', '4'], [' ', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '4', '4'], [' ', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '4'], [' ', ' ', '20', '100', '20'], [' ', ' ', '20', '2048', '32'], [' ', ' ', '96', '2048', '32'], [' ', ' ', '32', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], [' ', ' ', '100', '128', '4']]
prob:  <search.SurrogateProblem object at 0x14b8c3fa3730>
0 OK
bestX [array([[0.8486, 0.7824, 0.8163, 0.9903, 0.047 ]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2978.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2978
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2978
........................................ [0.15948, 0.156436, 0.157014]
OUTPUT:%f [0.15948, 0.156436, 0.157014] 0.156725
store_func_eval
problem.constants
None
MLA iteration:  51
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   3.162123e+05           nan     00s00  00001   3.162123e+05   2.818582e+11     00s00  00002   3.968071e+04   9.094923e+09     00s00  00003   2.308668e+04   3.361784e+09     00s01  00004   9.591299e+03   6.226807e+08 
    00s01  00005   4.880106e+03   1.607189e+08     00s01  00006   2.450209e+03   3.819132e+07 
    00s01  00007   1.308748e+03   9.533330e+06     00s02  00008   7.396429e+02   2.333713e+06 
    00s02  00009   4.631835e+02   5.652370e+05     00s02  00010   3.316294e+02   1.315041e+05     00s02  00011   2.727688e+02   2.832590e+04 
    00s02  00012   2.489956e+02   5.325343e+03     00s03  00013   2.403734e+02   9.445848e+02     00s03  00014   2.366590e+02   3.675391e+02     00s03  00015   2.335009e+02   4.039024e+02 
    00s03  00016   2.294359e+02   3.596402e+02     00s04  00017   2.253430e+02   1.801409e+01     00s04  00018   2.244462e+02   1.872237e+01 
    00s04  00019   2.236370e+02   1.135728e+01     00s04  00020   2.247205e+02   2.843956e+02     00s05  00021   2.232945e+02   1.312311e+01     00s05  00022   2.229169e+02   2.478029e+01     00s05  00023   2.227020e+02   5.196513e+01     00s05  00024   2.224195e+02   1.175913e+01     00s06  00025   2.222177e+02   6.244214e+00     00s06  00026   2.218937e+02   7.472477e+00     00s06  00027   2.216805e+02   1.649765e+01     00s06  00028   2.215383e+02   3.645248e+01     00s07  00029   2.208713e+02   2.094053e+02     00s07  00030   2.340974e+02   4.102094e+03     00s07  00031   2.207083e+02   3.372389e+02     00s07  00032   1.192872e+03   7.906586e+05     00s08  00033   2.470776e+02   6.549785e+03     00s08  00034   2.205077e+02   6.030209e+02     00s08  00035   2.198818e+02   8.887045e+02     00s08  00036   2.175083e+02   1.144662e+03     00s09  00037   2.050436e+02   4.387999e+03     00s09  00038   1.921641e+02   3.326911e+03     00s09  00039   1.610264e+02   7.485127e+02     00s09  00040   2.724790e+02   2.217498e+04     00s09  00041   1.550343e+02   9.675623e+02     00s10  00042   1.748051e+02   4.962432e+03     00s10  00043   1.441297e+02   9.253369e+02     00s10  00044   1.429199e+02   4.721895e+02     00s10  00045   1.415572e+02   2.650026e+02     00s11  00046   1.370336e+02   2.692326e+02 
    00s11  00047   3.407854e+02   9.105560e-01     00s11  00048   1.401578e+02   5.542611e+02     00s11  00049   1.335875e+02   4.469251e+02     00s12  00050   1.314301e+02   8.449838e+01     00s12  00051   1.308189e+02   4.068725e+01     00s12  00052   1.303532e+02   1.584477e+01     00s12  00053   1.294083e+02   1.208997e+01     00s13  00054   1.289503e+02   1.337400e+01     00s13  00055   1.284604e+02   9.056235e-01     00s13  00056   1.284308e+02   4.740099e+00     00s13  00057   1.284030e+02   1.023592e-01     00s14  00058   1.284022e+02   7.911156e-03     00s14  00059   1.284024e+02   2.371665e-01     00s14  00060   1.284021e+02   1.315922e-02 
    00s14  00061   1.284021e+02   1.191518e-02     00s15  00062   1.284019e+02   8.064655e-03     00s15  00063   1.284017e+02   1.063612e-02     00s15  00064   1.284015e+02   1.133559e-04     00s15  00065   1.284015e+02   7.726203e-05     00s15  00066   1.284015e+02   1.048128e-04     00s16  00067   1.284015e+02   1.211752e-03     00s16  00068   1.284015e+02   2.080944e-03 
    00s16  00069   1.284012e+02   8.450833e-03     00s16  00070   1.284007e+02   2.308080e-02     00s17  00071   1.283992e+02   6.641500e-02     00s17  00072   1.283991e+02   1.859032e+00     00s17  00073   1.283982e+02   5.196385e-01     00s17  00074   1.283953e+02   1.809096e-01     00s18  00075   1.283909e+02   1.056552e-01     00s18  00076   1.283870e+02   2.235269e-02     00s18  00077   1.283863e+02   7.255647e-02     00s18  00078   1.283860e+02   2.135570e-02     00s19  00079   1.283858e+02   3.049616e-03 
    00s19  00080   1.283857e+02   6.134737e-04     00s19  00081   1.283856e+02   1.993297e-03     00s19  00082   1.283855e+02   1.821329e-03 
    00s23  00099   1.283855e+02   3.581434e-07 
Runtime:     00s23
Optimization status: Converged

Optimization restart 1/1, f = 128.3854671394244
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '128', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '50', '20'], [' ', ' ', '128', '64', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '100', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '20', '4'], [' ', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '4', '4'], [' ', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '4'], [' ', ' ', '20', '100', '20'], [' ', ' ', '20', '2048', '32'], [' ', ' ', '96', '2048', '32'], [' ', ' ', '32', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '2048', '4']]
prob:  <search.SurrogateProblem object at 0x14b8c3c6ce80>
0 OK
bestX [array([[0.5994, 0.8017, 0.9126, 0.1448, 0.2175]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4764.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4764
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4764
........................................ [1.61766, 1.593928, 1.583751]
OUTPUT:%f [1.61766, 1.593928, 1.583751] 1.5888395
store_func_eval
problem.constants
None
MLA iteration:  52
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   3.169766e+05           nan     00s00  00001   3.169766e+05   2.832710e+11     00s00  00002   3.973375e+04   9.122247e+09     00s00  00003   2.313377e+04   3.375426e+09     00s01  00004   9.610893e+03   6.254531e+08 
    00s01  00005   4.887928e+03   1.614400e+08     00s01  00006   2.452046e+03   3.834517e+07 
    00s01  00007   1.308663e+03   9.563626e+06     00s02  00008   7.394099e+02   2.338711e+06     00s02  00009   4.633502e+02   5.659186e+05     00s02  00010   3.321883e+02   1.315801e+05 
    00s02  00011   2.735636e+02   2.833904e+04 
    00s02  00012   2.498891e+02   5.331230e+03     00s03  00013   2.412909e+02   9.481016e+02     00s03  00014   2.375739e+02   3.706057e+02 
    00s03  00015   2.344051e+02   4.070034e+02     00s03  00016   2.303250e+02   3.597653e+02     00s04  00017   2.262721e+02   1.583365e+01     00s04  00018   2.255065e+02   1.403103e+01     00s04  00019   2.251552e+02   4.665414e+00 
    00s04  00020   2.249176e+02   1.738180e+01     00s05  00021   2.247724e+02   9.494465e+01     00s05  00022   2.242154e+02   7.213326e+01     00s05  00023   2.219554e+02   4.560421e+02     00s05  00024   4.067509e+02   4.708974e+03     00s06  00025   2.210296e+02   8.408555e+02     00s06  00026   2.183093e+02   1.578624e+03     00s06  00027   2.115705e+02   1.131865e+03     00s06  00028   2.041603e+02   8.792578e+02     00s07  00029   2.023339e+02   2.127278e+02     00s07  00030   2.014889e+02   3.858641e+01     00s07  00031   2.011069e+02   4.080832e+01     00s07  00032   2.003544e+02   1.714703e+02     00s08  00033   1.997586e+02   7.812059e+02     00s08  00034   1.964636e+02   5.557120e+02 
    00s08  00035   3.427568e+02   3.282115e+00     00s08  00036   1.939904e+02   7.302143e+02     00s09  00037   1.891317e+02   9.716339e+02     00s09  00038   2.314556e+02   1.271463e+03     00s09  00039   1.870960e+02   7.603973e+02     00s09  00040   1.831696e+02   2.513858e+03     00s10  00041   1.760999e+02   2.737813e+03     00s10  00042   1.674810e+02   5.394077e+03     00s10  00043   1.451825e+02   6.138105e+02     00s10  00044   1.385436e+02   4.752812e+02     00s11  00045   1.334487e+02   3.663183e+02     00s11  00046   1.343660e+02   1.825742e+03     00s11  00047   1.319747e+02   7.347389e+01     00s11  00048   1.308165e+02   1.140596e+02     00s12  00049   1.301200e+02   2.010178e+01     00s12  00050   1.297889e+02   6.698271e+00     00s12  00051   1.295650e+02   5.771601e+00     00s12  00052   1.292119e+02   6.573316e+00     00s12  00053   1.290858e+02   1.125972e+00     00s13  00054   1.290385e+02   3.864296e-01 
    00s13  00055   1.290313e+02   1.898152e-02     00s13  00056   1.290303e+02   8.156758e-02     00s13  00057   1.290298e+02   2.219043e-03     00s14  00058   1.290296e+02   2.359895e-03     00s14  00059   1.290296e+02   4.021224e-03     00s14  00060   1.290296e+02   1.188098e-04 
    00s14  00061   1.290296e+02   2.503223e-05     00s15  00062   1.290296e+02   4.890276e-05     00s15  00063   1.290296e+02   1.438319e-04     00s15  00064   1.290296e+02   1.221607e-03     00s15  00065   1.290296e+02   3.875080e-03     00s16  00066   1.290295e+02   1.225478e-02     00s16  00067   1.290293e+02   3.380366e-02     00s16  00068   1.290287e+02   8.896384e-02     00s16  00069   1.290276e+02   1.523727e-01     00s17  00070   1.290326e+02   3.654771e+00     00s17  00071   1.290272e+02   3.953527e-01     00s17  00072   1.290256e+02   1.615452e-01     00s17  00073   1.290232e+02   3.146792e-02     00s18  00074   1.290221e+02   1.097124e-02     00s18  00075   1.290218e+02   1.216132e-02     00s18  00076   1.290215e+02   9.044528e-03     00s18  00077   1.290213e+02   1.848817e-03     00s18  00078   1.290212e+02   1.578846e-04     00s19  00079   1.290212e+02   1.468209e-04     00s19  00080   1.290212e+02   2.079992e-04     00s19  00081   1.290211e+02   1.985791e-04     00s19  00082   1.290224e+02   6.017996e-01     00s21  00089   1.290211e+02   3.339954e-05 
Runtime:     00s21
Optimization status: Converged

Optimization restart 1/1, f = 129.02110927867955
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '128', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '50', '20'], [' ', ' ', '128', '64', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '100', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '20', '4'], [' ', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '4', '4'], [' ', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '4'], [' ', ' ', '20', '100', '20'], [' ', ' ', '20', '2048', '32'], [' ', ' ', '96', '2048', '32'], [' ', ' ', '32', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '128', '8', '16']]
prob:  <search.SurrogateProblem object at 0x14b8c3f80580>
0 OK
bestX [array([[0.6451, 0.645 , 0.1658, 0.9274, 0.431 ]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/144.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/144
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/144
........................................ [2.26335, 2.255231, 2.267514]
OUTPUT:%f [2.26335, 2.255231, 2.267514] 2.2613725000000002
store_func_eval
problem.constants
None
MLA iteration:  53
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   3.678195e+05           nan     00s00  00001   3.678195e+05   3.023868e+11     00s00  00002   5.561733e+04   1.634276e+10     00s00  00003   2.656869e+04   4.453428e+09     00s01  00004   1.116917e+04   8.661827e+08     00s01  00005   5.535701e+03   2.152577e+08     00s01  00006   2.766596e+03   5.150947e+07     00s01  00007   1.456854e+03   1.275551e+07     00s02  00008   8.100069e+02   3.114814e+06 
    00s02  00009   4.959698e+02   7.485690e+05     00s02  00010   3.470758e+02   1.721108e+05     00s02  00011   2.806170e+02   3.657748e+04     00s03  00012   2.534347e+02   6.896590e+03     00s03  00013   2.427643e+02   1.403672e+03 
    00s03  00014   2.370868e+02   9.410381e+02     00s03  00015   2.312923e+02   1.632489e+03     00s04  00016   2.241856e+02   2.429724e+03     00s04  00017   2.121162e+02   2.587981e+03     00s04  00018   1.878330e+02   4.559163e+03     00s04  00019   1.642730e+02   9.115181e+02     00s04  00020   1.654069e+02   1.741040e+04     00s05  00021   1.582909e+02   9.872457e+02     00s05  00022   1.472513e+02   3.508544e+02     00s05  00023   1.715758e+02   5.681268e+03     00s05  00024   1.382539e+02   4.187818e+02     00s06  00025   1.371021e+02   2.370251e+02 
    00s06  00026   1.362864e+02   4.432022e+01     00s06  00027   1.352383e+02   6.798819e+01     00s06  00028   1.341140e+02   1.216364e+02     00s07  00029   1.315225e+02   2.976127e+02     00s07  00030   1.622005e+02   4.781878e+03     00s07  00031   1.294473e+02   1.298024e+02     00s07  00032   1.292708e+02   1.563719e+01     00s08  00033   1.290510e+02   6.848276e+00     00s08  00034   1.288472e+02   1.308894e+01 
    00s08  00035   1.286845e+02   9.077991e+00     00s08  00036   1.284576e+02   5.533401e+00     00s09  00037   1.285580e+02   5.368103e+01     00s09  00038   1.283416e+02   7.771786e+00     00s09  00039   1.282646e+02   1.244949e+00     00s09  00040   1.282533e+02   2.767116e-01     00s10  00041   1.282496e+02   1.907465e-01 
    00s10  00042   1.282492e+02   1.584419e-02 
    00s10  00043   1.282491e+02   2.073080e-04     00s10  00044   1.282491e+02   2.191874e-05     00s11  00045   1.282491e+02   1.771670e-05     00s11  00046   1.282491e+02   9.609817e-05     00s11  00047   1.282491e+02   3.932562e-03     00s11  00048   1.282490e+02   1.861018e-02     00s12  00049   1.282487e+02   6.968452e-02     00s12  00050   1.282480e+02   2.097511e-01     00s12  00051   1.282467e+02   4.550059e-01     00s12  00052   1.282448e+02   4.820659e-01     00s13  00053   1.283899e+02   1.373047e+01     00s13  00054   1.282447e+02   3.880753e-01     00s13  00055   1.282423e+02   1.486595e-01     00s13  00056   1.282415e+02   3.135896e-02     00s14  00057   1.282413e+02   4.528269e-03     00s14  00058   1.282412e+02   8.814316e-04     00s14  00059   1.282412e+02   2.625772e-04     00s14  00060   1.282411e+02   2.647105e-04     00s15  00061   1.282411e+02   4.212696e-04 
    00s15  00062   1.282411e+02   4.211921e-05     00s15  00063   1.282411e+02   1.062481e-04     00s15  00064   1.282411e+02   1.783536e-05     00s16  00065   1.282411e+02   1.016748e-05     00s16  00066   1.282411e+02   4.231918e-03     00s16  00067   1.282411e+02   4.930275e-05     00s16  00068   1.282411e+02   1.929391e-05     00s17  00069   1.282411e+02   1.856044e-05     00s17  00070   1.282411e+02   4.422460e-06     00s17  00071   1.282411e+02   1.960191e-07 
    00s17  00072   1.282411e+02   1.960191e-07 
Runtime:     00s17
Optimization status: Converged

Optimization restart 1/1, f = 128.24107844966483
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '128', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '50', '20'], [' ', ' ', '128', '64', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '100', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '20', '4'], [' ', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '4', '4'], [' ', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '4'], [' ', ' ', '20', '100', '20'], [' ', ' ', '20', '2048', '32'], [' ', ' ', '96', '2048', '32'], [' ', ' ', '32', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '128', '8', '16'], [' ', ' ', '8', '2048', '32']]
prob:  <search.SurrogateProblem object at 0x14b8c3e69f70>
0 OK
bestX [array([[0.654 , 0.7217, 0.0658, 0.9352, 0.4048]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7031.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7031
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7031
........................................ [2.29322, 2.289005, 2.290737]
OUTPUT:%f [2.29322, 2.289005, 2.290737] 2.2898709999999998
store_func_eval
problem.constants
None
MLA iteration:  54
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   3.694883e+05           nan     00s00  00001   3.694883e+05   3.063152e+11     00s00  00002   5.636575e+04   1.649020e+10     00s00  00003   2.715641e+04   4.562563e+09     00s01  00004   1.137305e+04   8.796500e+08     00s01  00005   5.653808e+03   2.192796e+08     00s01  00006   2.830640e+03   5.249076e+07     00s01  00007   1.493948e+03   1.302358e+07     00s02  00008   8.319658e+02   3.185419e+06 
    00s02  00009   5.098110e+02   7.671465e+05     00s02  00010   3.563513e+02   1.766882e+05     00s02  00011   2.870305e+02   3.749034e+04     00s03  00012   2.578219e+02   7.060217e+03     00s03  00013   2.456636e+02   1.618245e+03     00s03  00014   2.389330e+02   1.317782e+03     00s03  00015   2.322201e+02   1.923345e+03     00s04  00016   2.217579e+02   2.447779e+03 
    00s04  00017   2.002953e+02   4.580284e+03     00s04  00018   1.807401e+02   3.428709e+03     00s04  00019   2.188950e+02   1.969301e+05     00s04  00020   1.561310e+02   2.777019e+02     00s05  00021   1.484326e+02   4.494052e+02     00s05  00022   1.594904e+02   6.058786e+03     00s05  00023   1.411092e+02   1.129922e+03     00s05  00024   1.385376e+02   2.891306e+02 
    00s06  00025   1.384739e+02   3.556085e+02     00s06  00026   1.376461e+02   1.304758e+02     00s06  00027   1.371860e+02   3.024515e+01     00s06  00028   1.363208e+02   1.509914e+02     00s07  00029   1.352274e+02   2.670659e+02     00s07  00030   1.335836e+02   2.412611e+02     00s07  00031   1.312458e+02   4.632030e+02     00s07  00032   1.295572e+02   1.919762e+02 
    00s08  00033   1.286554e+02   1.681504e+01     00s08  00034   1.283168e+02   3.734075e+00     00s08  00035   1.282692e+02   5.808878e-01 
    00s08  00036   1.282706e+02   1.600724e+00     00s09  00037   1.282624e+02   1.174046e-01 
    00s09  00038   1.282602e+02   4.331781e-02     00s09  00039   1.282582e+02   2.259856e-02     00s09  00040   1.282583e+02   1.350763e+00     00s10  00041   1.282570e+02   2.971542e-01     00s10  00042   1.282559e+02   5.273360e-03 
    00s10  00043   1.282558e+02   1.030219e-04     00s10  00044   1.282558e+02   7.657260e-05     00s11  00045   1.282558e+02   8.166288e-05     00s11  00046   1.282558e+02   1.162616e-03     00s11  00047   1.282558e+02   3.371908e-02     00s11  00048   1.282557e+02   8.337168e-03     00s12  00049   1.282556e+02   6.687530e-03     00s12  00050   1.282545e+02   2.277081e-02     00s12  00051   1.282526e+02   9.424631e-02     00s12  00052   1.282492e+02   1.686686e-01     00s13  00053   1.282823e+02   1.418332e+01     00s13  00054   1.282486e+02   5.306761e-01     00s13  00055   1.282449e+02   1.732596e-01     00s13  00056   1.282415e+02   1.859710e-01     00s14  00057   1.283028e+02   2.633888e+01     00s14  00058   1.282407e+02   2.231413e-02     00s14  00059   1.282405e+02   8.505997e-03     00s14  00060   1.282402e+02   2.532531e-03     00s15  00061   1.282400e+02   2.330125e-03     00s15  00062   1.282413e+02   2.811826e-01     00s15  00063   1.282400e+02   2.801699e-03     00s15  00064   1.282398e+02   3.473231e-04 
    00s15  00065   1.282398e+02   3.339170e-05     00s16  00066   1.282398e+02   1.039722e-04     00s16  00067   1.282398e+02   5.477022e-05     00s16  00068   1.282398e+02   5.504779e-05     00s16  00069   1.282398e+02   8.175533e-04     00s17  00070   1.282398e+02   6.644746e-04     00s17  00071   1.282398e+02   6.545610e-05     00s17  00072   1.282398e+02   2.250118e-05     00s17  00073   1.282398e+02   3.925426e-05     00s18  00074   1.282398e+02   1.368461e-05     00s18  00075   1.282398e+02   1.521255e-04     00s18  00076   1.282398e+02   1.993729e-05     00s18  00077   1.282398e+02   1.993729e-05 
Runtime:     00s18
Optimization status: Converged

Optimization restart 1/1, f = 128.23979047486583
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '128', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '50', '20'], [' ', ' ', '128', '64', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '100', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '20', '4'], [' ', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '4', '4'], [' ', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '4'], [' ', ' ', '20', '100', '20'], [' ', ' ', '20', '2048', '32'], [' ', ' ', '96', '2048', '32'], [' ', ' ', '32', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '128', '8', '16'], [' ', ' ', '8', '2048', '32'], [' ', ' ', '4', '2048', '32']]
prob:  <search.SurrogateProblem object at 0x14b8c3f77100>
0 OK
bestX [array([[0.5299, 0.6647, 0.9006, 0.5888, 0.2029]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2101.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2101
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2101
........................................ [1.534532, 1.530884, 1.552126]
OUTPUT:%f [1.534532, 1.530884, 1.552126] 1.541505
store_func_eval
problem.constants
None
MLA iteration:  55
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   3.727199e+05           nan     00s00  00001   3.727199e+05   3.134413e+11     00s00  00002   5.639474e+04   1.663613e+10 
    00s00  00003   2.732113e+04   4.630448e+09     00s01  00004   1.147326e+04   8.960185e+08     00s01  00005   5.704668e+03   2.234058e+08     00s01  00006   2.856105e+03   5.349155e+07     00s01  00007   1.507010e+03   1.327205e+07     00s02  00008   8.389978e+02   3.247122e+06 
    00s02  00009   5.139710e+02   7.827968e+05     00s02  00010   3.591397e+02   1.808023e+05     00s02  00011   2.891413e+02   3.858725e+04 
    00s03  00012   2.595916e+02   7.323220e+03     00s03  00013   2.472492e+02   1.654767e+03     00s03  00014   2.404230e+02   1.313120e+03     00s03  00015   2.338152e+02   1.929443e+03     00s04  00016   2.240170e+02   2.414281e+03     00s04  00017   2.002302e+02   4.454334e+03     00s04  00018   1.793998e+02   3.436082e+03     00s04  00019   1.841703e+02   3.457340e+04     00s05  00020   1.595993e+02   3.193502e+02 
    00s05  00021   1.507978e+02   3.612506e+02     00s05  00022   1.938361e+02   7.648737e+03     00s05  00023   1.472896e+02   8.699152e+02     00s06  00024   1.425999e+02   9.699282e+01 
    00s06  00025   1.409933e+02   7.714744e+01     00s06  00026   1.402674e+02   4.605292e+01     00s06  00027   1.392693e+02   1.106133e+02     00s07  00028   1.378160e+02   1.536055e+02     00s07  00029   1.348365e+02   4.210584e+01     00s07  00030   1.337602e+02   5.134344e+02     00s07  00031   1.324736e+02   1.109773e+02     00s08  00032   1.308305e+02   6.256812e+01     00s08  00033   1.322924e+02   6.381699e+01     00s08  00034   1.303523e+02   1.109034e+01     00s08  00035   1.302384e+02   1.161291e+01 
    00s09  00036   1.301828e+02   1.228394e+00     00s09  00037   1.301673e+02   6.983262e-01     00s09  00038   1.301263e+02   3.055742e+00     00s09  00039   1.299878e+02   5.151222e+01     00s10  00040   1.298576e+02   7.668002e+01     00s10  00041   1.296739e+02   4.399442e+02     00s10  00042   1.295137e+02   1.381551e+02     00s10  00043   1.288955e+02   1.336908e+02     00s11  00044   2.568452e+02   3.941931e+03     00s11  00045   1.288909e+02   8.315166e+01     00s11  00046   1.286751e+02   1.074856e+02     00s11  00047   1.285132e+02   3.135787e+00     00s12  00048   1.285078e+02   3.130989e-01     00s12  00049   1.285058e+02   2.076970e-01 
    00s12  00050   1.285048e+02   6.580245e-02     00s12  00051   1.285040e+02   8.040302e-02     00s13  00052   1.285032e+02   1.131668e-02     00s13  00053   1.285031e+02   3.615967e-03     00s13  00054   1.285031e+02   1.005493e-03     00s13  00055   1.285031e+02   2.877456e-04     00s14  00056   1.285030e+02   3.566006e-04     00s14  00057   1.285030e+02   1.545450e-03     00s14  00058   1.285035e+02   4.703174e-01     00s14  00059   1.285030e+02   1.766607e-02     00s15  00060   1.285029e+02   1.064463e-02     00s15  00061   1.285026e+02   1.227008e-02     00s15  00062   1.285017e+02   6.551315e-02     00s15  00063   1.284977e+02   4.599483e-01     00s16  00064   1.284931e+02   7.389103e-01     00s16  00065   1.284869e+02   1.002391e-01     00s16  00066   1.284803e+02   3.460831e-01     00s16  00067   1.284882e+02   4.913032e+00     00s17  00068   1.284788e+02   9.045591e-02     00s17  00069   1.284780e+02   3.907527e-02 
    00s17  00070   1.284769e+02   8.032431e-03     00s17  00071   1.284765e+02   1.352044e-03     00s18  00072   1.284765e+02   2.963475e-02     00s18  00073   1.284764e+02   2.909572e-02     00s18  00074   1.284763e+02   2.727937e-03     00s18  00075   1.284763e+02   2.208045e-03     00s19  00076   1.284762e+02   6.225656e-03     00s19  00077   1.284761e+02   4.867352e-03     00s19  00078   1.284762e+02   2.144491e-02     00s19  00079   1.284761e+02   9.258624e-04 
    00s22  00092   1.284761e+02   1.877796e-05 
Runtime:     00s22
Optimization status: Converged

Optimization restart 1/1, f = 128.4760706387654
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '128', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '50', '20'], [' ', ' ', '128', '64', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '100', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '20', '4'], [' ', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '4', '4'], [' ', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '4'], [' ', ' ', '20', '100', '20'], [' ', ' ', '20', '2048', '32'], [' ', ' ', '96', '2048', '32'], [' ', ' ', '32', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '128', '8', '16'], [' ', ' ', '8', '2048', '32'], [' ', ' ', '4', '2048', '32'], [' ', ' ', '100', '64', '16']]
prob:  <search.SurrogateProblem object at 0x14b8d83fa820>
0 OK
bestX [array([[0.5435, 0.8692, 0.9284, 0.8476, 0.0146]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4970.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4970
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4970
........................................ [0.154819, 0.151261, 0.154722]
OUTPUT:%f [0.154819, 0.151261, 0.154722] 0.1529915
store_func_eval
problem.constants
None
MLA iteration:  56
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   3.775206e+05           nan     00s00  00001   3.775206e+05   3.189095e+11     00s00  00002   5.717065e+04   1.728302e+10     00s00  00003   2.730163e+04   4.685467e+09 
    00s01  00004   1.155543e+04   9.168621e+08     00s01  00005   5.748157e+03   2.283309e+08     00s01  00006   2.882906e+03   5.478977e+07     00s01  00007   1.521834e+03   1.359753e+07     00s02  00008   8.476304e+02   3.330187e+06     00s02  00009   5.193839e+02   8.044182e+05 
    00s02  00010   3.629293e+02   1.867174e+05     00s02  00011   2.920699e+02   4.024390e+04     00s03  00012   2.620686e+02   7.749079e+03     00s03  00013   2.494701e+02   1.723411e+03     00s03  00014   2.424283e+02   1.312278e+03     00s03  00015   2.357852e+02   1.985043e+03     00s04  00016   2.267912e+02   2.468754e+03 
    00s04  00017   2.043644e+02   3.617317e+03     00s04  00018   1.859020e+02   5.643077e+03     00s04  00019   1.619144e+02   5.393129e+02     00s05  00020   1.541968e+02   6.353750e+02     00s05  00021   1.534848e+02   2.636764e+03     00s05  00022   1.444331e+02   1.423372e+02     00s05  00023   1.427130e+02   2.176445e+02     00s06  00024   1.410234e+02   6.919291e+01 
    00s06  00025   1.402120e+02   1.014816e+02     00s06  00026   1.393652e+02   2.588241e+02     00s06  00027   1.371701e+02   4.023861e+02     00s07  00028   1.338065e+02   3.057541e+01     00s07  00029   1.328801e+02   2.275793e+02     00s07  00030   1.318616e+02   8.800622e+01     00s07  00031   1.311305e+02   1.119144e+02     00s08  00032   1.309512e+02   1.618862e+02     00s08  00033   1.312083e+02   4.081687e+02     00s08  00034   1.305777e+02   2.043984e+01     00s08  00035   1.304000e+02   7.951751e+00     00s09  00036   1.303809e+02   2.598128e+00 
    00s09  00037   1.303628e+02   6.008577e-01     00s09  00038   1.303521e+02   9.104737e-02 
    00s09  00039   1.303500e+02   1.471655e-02     00s10  00040   1.303498e+02   2.407315e-04     00s10  00041   1.303498e+02   3.456286e-04 
    00s10  00042   1.303498e+02   9.445660e-04     00s10  00043   1.303498e+02   2.321002e-04     00s11  00044   1.303498e+02   2.730881e-04     00s11  00045   1.303498e+02   9.539179e-04     00s11  00046   1.303497e+02   2.525093e-03     00s11  00047   1.303497e+02   5.005549e-02     00s12  00048   1.303495e+02   2.963483e-02     00s12  00049   1.303488e+02   5.707824e-02     00s12  00050   1.303471e+02   2.877515e-01     00s12  00051   1.303441e+02   7.258481e-01     00s13  00052   1.303399e+02   9.780966e-01     00s13  00053   1.303372e+02   1.151797e-01     00s13  00054   1.303339e+02   3.411788e-01     00s13  00055   1.303322e+02   3.822405e-02     00s14  00056   1.303316e+02   5.257728e-03     00s14  00057   1.303314e+02   9.375064e-03     00s14  00058   1.303312e+02   1.463551e-01     00s14  00059   1.303310e+02   9.065581e-03     00s15  00060   1.303310e+02   1.973462e-03     00s15  00061   1.303309e+02   3.780464e-03     00s15  00062   1.303309e+02   5.784664e-03     00s15  00063   1.303308e+02   4.061087e-03     00s15  00064   1.303308e+02   3.274586e-04     00s16  00065   1.303308e+02   1.027771e-04     00s16  00066   1.303308e+02   2.241790e-04 
    00s16  00067   1.303308e+02   2.125059e-05     00s16  00068   1.303308e+02   5.494090e-05     00s17  00069   1.303308e+02   8.531110e-05     00s17  00070   1.303308e+02   4.361578e-03     00s17  00071   1.303308e+02   1.187820e-03     00s17  00072   1.303308e+02   2.986427e-04     00s18  00073   1.303308e+02   1.498778e-05 
    00s18  00074   1.303308e+02   8.145858e-06     00s18  00075   1.303308e+02   3.845996e-06     00s18  00076   1.303308e+02   3.845996e-06 
Runtime:     00s18
Optimization status: Converged

Optimization restart 1/1, f = 130.33077928395988
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '128', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '50', '20'], [' ', ' ', '128', '64', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '100', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '20', '4'], [' ', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '4', '4'], [' ', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '4'], [' ', ' ', '20', '100', '20'], [' ', ' ', '20', '2048', '32'], [' ', ' ', '96', '2048', '32'], [' ', ' ', '32', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '128', '8', '16'], [' ', ' ', '8', '2048', '32'], [' ', ' ', '4', '2048', '32'], [' ', ' ', '100', '64', '16'], [' ', ' ', '128', '128', '4']]
prob:  <search.SurrogateProblem object at 0x14b8d8aea820>
0 OK
bestX [array([[0.7933, 0.4634, 0.1848, 0.7786, 0.3423]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2438.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2438
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2438
........................................ [0.608562, 0.607096, 0.604463]
OUTPUT:%f [0.608562, 0.607096, 0.604463] 0.6057794999999999
store_func_eval
problem.constants
None
MLA iteration:  57
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   3.796093e+05           nan     00s00  00001   3.796093e+05   3.213221e+11     00s00  00002   5.761239e+04   1.755738e+10     00s00  00003   2.739836e+04   4.733678e+09     00s01  00004   1.159015e+04   9.261273e+08     00s01  00005   5.762964e+03   2.305391e+08     00s01  00006   2.889745e+03   5.534186e+07     00s01  00007   1.524271e+03   1.373841e+07 
    00s02  00008   8.474499e+02   3.364623e+06     00s02  00009   5.175689e+02   8.113378e+05     00s02  00010   3.602337e+02   1.871683e+05     00s02  00011   2.890854e+02   3.977321e+04     00s03  00012   2.591192e+02   7.499245e+03     00s03  00013   2.466594e+02   1.707497e+03 
    00s03  00014   2.397625e+02   1.371030e+03     00s03  00015   2.330545e+02   1.990003e+03     00s04  00016   2.231932e+02   2.462982e+03     00s04  00017   1.990633e+02   4.466320e+03     00s04  00018   1.782821e+02   3.153323e+03     00s04  00019   1.605625e+02   1.040393e+04     00s05  00020   1.672577e+02   3.649014e+03     00s05  00021   1.483786e+02   2.115867e+02 
    00s05  00022   1.475741e+02   1.378845e+02     00s05  00023   1.459612e+02   1.033802e+02     00s06  00024   1.419955e+02   4.769608e+01     00s06  00025   1.409616e+02   2.730966e+01     00s06  00026   1.384386e+02   1.943881e+02     00s06  00027   1.373326e+02   1.227527e+02 
    00s07  00028   1.362962e+02   7.688458e+01     00s07  00029   1.355022e+02   1.215767e+01 
    00s07  00030   1.352809e+02   4.852123e+00     00s07  00031   1.352396e+02   1.885682e+00     00s08  00032   1.352224e+02   1.087958e+00     00s08  00033   1.351957e+02   6.336639e+00     00s08  00034   1.351809e+02   2.177264e-01     00s08  00035   1.351793e+02   7.082034e-02     00s09  00036   1.351783e+02   3.060296e-03     00s09  00037   1.351782e+02   3.335435e-04 
    00s09  00038   1.351782e+02   6.498208e-05     00s09  00039   1.351782e+02   1.150892e-04     00s10  00040   1.351782e+02   6.607880e-04     00s10  00041   1.351781e+02   2.331912e-03     00s10  00042   1.351780e+02   7.832114e-03     00s10  00043   1.351776e+02   2.445581e-02     00s11  00044   1.351767e+02   5.251002e-02     00s11  00045   1.351867e+02   9.269165e+00     00s11  00046   1.351765e+02   2.349568e-01     00s11  00047   1.351750e+02   1.577979e-01     00s12  00048   1.351721e+02   8.497017e-02     00s12  00049   1.351695e+02   5.162591e-02     00s12  00050   1.351665e+02   2.345381e-02     00s12  00051   1.351645e+02   8.460962e-03     00s13  00052   1.351640e+02   9.902627e-03     00s13  00053   1.351638e+02   3.531206e-03     00s13  00054   1.351637e+02   8.379188e-04     00s13  00055   1.351636e+02   4.217537e-04     00s14  00056   1.351635e+02   5.242178e-04     00s14  00057   1.351647e+02   8.595659e-01     00s14  00058   1.351635e+02   1.346407e-03     00s14  00059   1.351635e+02   1.761068e-04     00s15  00060   1.351634e+02   4.465738e-05     00s15  00061   1.351634e+02   5.166152e-05     00s15  00062   1.351634e+02   2.810222e-04     00s15  00063   1.351634e+02   1.018911e-05 
    00s16  00064   1.351634e+02   4.099866e-06     00s16  00065   1.351634e+02   8.466088e-06     00s16  00066   1.351634e+02   5.221523e-05     00s16  00067   1.351634e+02   2.609683e-06     00s17  00068   1.351634e+02   1.539916e-06     00s17  00069   1.351634e+02   1.539916e-06 
Runtime:     00s17
Optimization status: Converged

Optimization restart 1/1, f = 135.16341112891254
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '128', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '50', '20'], [' ', ' ', '128', '64', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '100', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '20', '4'], [' ', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '4', '4'], [' ', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '4'], [' ', ' ', '20', '100', '20'], [' ', ' ', '20', '2048', '32'], [' ', ' ', '96', '2048', '32'], [' ', ' ', '32', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '128', '8', '16'], [' ', ' ', '8', '2048', '32'], [' ', ' ', '4', '2048', '32'], [' ', ' ', '100', '64', '16'], [' ', ' ', '128', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '20']]
prob:  <search.SurrogateProblem object at 0x14b8c3e69d00>
0 OK
bestX [array([[0.5669, 0.524 , 0.0387, 0.7676, 0.3325]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6334.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6334
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6334
........................................ [0.20615, 0.201318, 0.200961]
OUTPUT:%f [0.20615, 0.201318, 0.200961] 0.2011395
store_func_eval
problem.constants
None
MLA iteration:  58
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   5.609076e+05           nan     00s00  00001   5.609076e+05   5.212537e+11     00s00  00002   9.908131e+04   4.949301e+10     00s00  00003   3.237017e+04   7.161440e+09     00s01  00004   1.521456e+04   1.712530e+09     00s01  00005   7.231887e+03   3.950265e+08     00s01  00006   3.623795e+03   9.669313e+07     00s01  00007   1.864745e+03   2.344403e+07 
    00s02  00008   1.015687e+03   5.693076e+06     00s02  00009   6.063527e+02   1.368975e+06     00s02  00010   4.124490e+02   3.242459e+05     00s02  00011   3.228577e+02   7.358517e+04     00s03  00012   2.835697e+02   1.527582e+04 
    00s03  00013   2.674116e+02   2.892841e+03     00s03  00014   2.602590e+02   8.334083e+02 
    00s03  00015   2.552064e+02   7.791354e+02     00s04  00016   2.490872e+02   9.718246e+02     00s04  00017   2.403497e+02   9.237922e+02     00s04  00018   2.223197e+02   2.215275e+03     00s04  00019   2.324037e+02   6.610896e+03     00s05  00020   2.155641e+02   3.435237e+03     00s05  00021   1.972837e+02   1.043500e+03     00s05  00022   1.911344e+02   1.962390e+03     00s05  00023   1.834051e+02   8.815748e+02     00s06  00024   3.543938e+02   1.918604e+01     00s06  00025   1.802261e+02   5.128593e+03     00s06  00026   1.737963e+02   1.882641e+03     00s06  00027   1.641537e+02   3.056451e+03     00s07  00028   1.607724e+02   2.510919e+03     00s07  00029   1.592740e+02   3.022240e+03     00s07  00030   1.544243e+02   1.026774e+03     00s08  00031   1.493667e+02   2.985310e+02     00s08  00032   1.456394e+02   2.174594e+02 
    00s08  00033   1.432219e+02   9.570117e+01     00s08  00034   1.418091e+02   7.563901e+01     00s09  00035   1.407292e+02   8.263699e+01     00s09  00036   1.403145e+02   5.795565e+01     00s09  00037   1.389179e+02   4.846105e+01     00s09  00038   1.416623e+02   4.068893e+02     00s10  00039   1.386703e+02   8.378088e+00 
    00s10  00040   1.381762e+02   9.550415e+00     00s10  00041   1.380465e+02   4.364350e+00     00s10  00042   1.379437e+02   9.767908e-01     00s11  00043   1.379027e+02   7.899937e-01     00s11  00044   1.434475e+02   2.328409e+03     00s11  00045   1.378887e+02   5.121301e+00     00s11  00046   1.378398e+02   3.815599e+00     00s12  00047   1.377974e+02   2.690343e+00     00s12  00048   1.377847e+02   4.372270e-01     00s12  00049   1.377825e+02   4.906543e-01 
    00s12  00050   1.377819e+02   4.802813e-02     00s13  00051   1.377815e+02   1.869800e-03     00s13  00052   1.377815e+02   5.781373e-04     00s13  00053   1.377815e+02   8.291253e-05 
    00s13  00054   1.377815e+02   8.103232e-05     00s14  00055   1.377815e+02   1.549024e-04     00s14  00056   1.377815e+02   9.534390e-04     00s14  00057   1.377815e+02   2.766112e-04     00s14  00058   1.377814e+02   3.074716e-04     00s15  00059   1.377814e+02   4.403932e-03     00s15  00060   1.377810e+02   4.881965e-02     00s15  00061   1.377802e+02   1.763808e-01     00s15  00062   1.377787e+02   2.203924e-01     00s16  00063   1.380246e+02   1.590819e+02     00s16  00064   1.377784e+02   7.399392e-01     00s16  00065   1.377761e+02   5.540470e-01     00s16  00066   1.377720e+02   1.910839e-01     00s17  00067   1.377693e+02   4.971817e-02     00s17  00068   1.377717e+02   8.805996e-01     00s17  00069   1.377689e+02   8.058327e-03     00s17  00070   1.377686e+02   1.151673e-03     00s18  00071   1.377685e+02   4.385349e-04     00s18  00072   1.377684e+02   2.890792e-04     00s18  00073   1.377689e+02   5.883229e-02     00s18  00074   1.377684e+02   1.906914e-03     00s19  00075   1.377683e+02   2.026652e-04     00s19  00076   1.377683e+02   1.011546e-05     00s19  00077   1.377683e+02   1.348999e-02     00s19  00078   1.377683e+02   1.652937e-03 
    00s22  00088   1.377682e+02   3.399326e-07 
Runtime:     00s22
Optimization status: Converged

Optimization restart 1/1, f = 137.7682244567137
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '128', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '50', '20'], [' ', ' ', '128', '64', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '100', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '20', '4'], [' ', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '4', '4'], [' ', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '4'], [' ', ' ', '20', '100', '20'], [' ', ' ', '20', '2048', '32'], [' ', ' ', '96', '2048', '32'], [' ', ' ', '32', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '128', '8', '16'], [' ', ' ', '8', '2048', '32'], [' ', ' ', '4', '2048', '32'], [' ', ' ', '100', '64', '16'], [' ', ' ', '128', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '20'], [' ', ' ', '4', '100', '20']]
prob:  <search.SurrogateProblem object at 0x14b8c3e613a0>
0 OK
bestX [array([[0.5014, 0.9333, 0.1869, 0.9615, 0.3317]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4076.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4076
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4076
........................................ [0.181539, 0.174762, 0.173485]
OUTPUT:%f [0.181539, 0.174762, 0.173485] 0.1741235
store_func_eval
problem.constants
None
MLA iteration:  59
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   6.087940e+05           nan     00s00  00001   6.087940e+05   5.441285e+11     00s00  00002   1.143139e+05   6.573781e+10     00s00  00003   2.832782e+04   5.930762e+09     00s01  00004   1.459344e+04   1.665792e+09     00s01  00005   6.797157e+03   3.652465e+08     00s01  00006   3.472074e+03   9.166923e+07     00s01  00007   1.803185e+03   2.220721e+07     00s02  00008   9.979927e+02   5.477114e+06 
    00s02  00009   6.010874e+02   1.327354e+06     00s02  00010   4.101325e+02   3.133286e+05     00s02  00011   3.215364e+02   7.018640e+04     00s03  00012   2.827239e+02   1.433003e+04     00s03  00013   2.665527e+02   2.709306e+03     00s03  00014   2.590111e+02   9.695268e+02     00s03  00015   2.531769e+02   1.177301e+03     00s04  00016   2.460888e+02   1.613210e+03     00s04  00017   2.369335e+02   1.267245e+03     00s04  00018   2.263043e+02   4.721617e+02     00s04  00019   2.123270e+02   8.882945e+02 
    00s05  00020   3.398946e+02   9.664302e+02     00s05  00021   2.064623e+02   7.610141e+02     00s05  00022   1.975705e+02   4.384642e+02     00s06  00023   1.900679e+02   4.695544e+03     00s06  00024   1.827271e+02   6.941507e+02     00s06  00025   1.829617e+02   1.310249e+03     00s06  00026   1.785853e+02   1.110794e+03     00s07  00027   1.897252e+02   1.972490e+04 
    00s07  00028   1.759384e+02   4.777129e+01     00s07  00029   1.752798e+02   8.139258e+01     00s07  00030   1.666790e+02   1.107945e+03     00s08  00031   3.002472e+02   3.603403e+03     00s08  00032   1.657203e+02   1.524439e+03     00s08  00033   2.025814e+02   5.512943e+03     00s08  00034   1.653341e+02   1.564671e+03     00s09  00035   1.616432e+02   6.110825e+02     00s09  00036   1.547848e+02   3.525687e+03     00s09  00037   1.505836e+02   2.321421e+03     00s09  00038   3.527167e+02   6.556007e+04     00s10  00039   1.454929e+02   1.666705e+03     00s10  00040   1.429044e+02   2.082047e+02     00s10  00041   1.408864e+02   7.564248e+01     00s10  00042   1.401164e+02   1.261339e+01     00s11  00043   1.395819e+02   1.954668e+01     00s11  00044   1.390544e+02   1.647554e+02     00s11  00045   1.387382e+02   2.945098e+01 
    00s11  00046   1.386153e+02   7.355779e+00     00s12  00047   1.385374e+02   1.227256e+00     00s12  00048   1.385257e+02   6.956521e-01     00s12  00049   1.385255e+02   1.144331e+00     00s12  00050   1.385220e+02   1.441773e-01     00s13  00051   1.385200e+02   8.815036e-03     00s13  00052   1.385198e+02   1.997383e-03 
    00s13  00053   1.385198e+02   5.691177e-04     00s13  00054   1.385197e+02   4.930503e-05     00s14  00055   1.385197e+02   4.193526e-05     00s14  00056   1.385197e+02   2.924857e-04     00s14  00057   1.385197e+02   7.907287e-04     00s14  00058   1.385197e+02   3.275822e-03     00s15  00059   1.385197e+02   3.922858e-03     00s15  00060   1.385200e+02   4.115174e-01     00s15  00061   1.385196e+02   3.619368e-02     00s15  00062   1.385195e+02   2.404178e-02     00s16  00063   1.385188e+02   1.694769e-02     00s16  00064   1.385179e+02   4.699747e-02     00s16  00065   1.385166e+02   6.293924e-02     00s16  00066   1.385219e+02   2.510539e+00     00s17  00067   1.385160e+02   2.567360e-01     00s17  00068   1.385147e+02   1.454827e-01     00s17  00069   1.385124e+02   3.518480e-02     00s17  00070   1.385105e+02   3.268111e-02     00s18  00071   1.385093e+02   1.525995e-02     00s18  00072   1.385088e+02   4.673186e-04     00s18  00073   1.385090e+02   1.433303e-01     00s18  00074   1.385087e+02   7.851077e-03     00s19  00075   1.385087e+02   1.605009e-03     00s19  00076   1.385086e+02   9.548159e-04     00s19  00077   1.385085e+02   4.372268e-04 
    00s22  00089   1.385084e+02   1.300307e-05 
Runtime:     00s22
Optimization status: Converged

Optimization restart 1/1, f = 138.50844963835573
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '128', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '50', '20'], [' ', ' ', '128', '64', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '100', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '20', '4'], [' ', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '4', '4'], [' ', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '4'], [' ', ' ', '20', '100', '20'], [' ', ' ', '20', '2048', '32'], [' ', ' ', '96', '2048', '32'], [' ', ' ', '32', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '128', '8', '16'], [' ', ' ', '8', '2048', '32'], [' ', ' ', '4', '2048', '32'], [' ', ' ', '100', '64', '16'], [' ', ' ', '128', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '20'], [' ', ' ', '4', '100', '20'], [' ', ' ', '16', '2048', '20']]
prob:  <search.SurrogateProblem object at 0x14b8c3d2b730>
0 OK
bestX [array([[0.9016, 0.084 , 0.0527, 0.8252, 0.302 ]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4374.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4374
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4374
........................................ [0.604665, 0.602287, 0.601427]
OUTPUT:%f [0.604665, 0.602287, 0.601427] 0.6018570000000001
store_func_eval
problem.constants
None
MLA iteration:  60
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   6.229597e+05           nan     00s00  00001   6.229597e+05   5.460344e+11     00s00  00002   1.220386e+05   7.200091e+10     00s00  00003   2.746550e+04   5.582893e+09     00s01  00004   1.445503e+04   1.629641e+09 
    00s01  00005   6.693010e+03   3.524270e+08     00s01  00006   3.430897e+03   8.897967e+07     00s01  00007   1.780656e+03   2.148231e+07     00s02  00008   9.877810e+02   5.289188e+06     00s02  00009   5.982726e+02   1.279906e+06 
    00s02  00010   4.116136e+02   3.025100e+05     00s02  00011   3.252100e+02   6.783338e+04     00s03  00012   2.876093e+02   1.388174e+04     00s03  00013   2.721275e+02   2.636231e+03 
    00s03  00014   2.649481e+02   8.975876e+02     00s03  00015   2.592859e+02   1.052937e+03     00s04  00016   2.521681e+02   1.518386e+03     00s04  00017   2.426831e+02   1.464710e+03     00s04  00018   2.196003e+02   2.827006e+03     00s05  00019   2.087115e+02   5.758375e+03     00s05  00020   1.892238e+02   3.876644e+03     00s05  00021   1.776618e+02   1.025868e+03     00s05  00022   1.675572e+02   1.185033e+03     00s06  00023   2.793507e+02   2.404783e+03     00s06  00024   1.540475e+02   9.064284e+02     00s06  00025   1.523538e+02   1.758138e+02     00s06  00026   1.518280e+02   1.854160e+02     00s07  00027   1.619808e+02   9.266266e+02     00s07  00028   1.501416e+02   3.721681e+02     00s07  00029   1.474554e+02   2.659807e+02 
    00s07  00030   1.435075e+02   3.870377e+01     00s08  00031   1.427093e+02   3.420377e+01     00s08  00032   1.421328e+02   3.782853e+01     00s08  00033   1.415605e+02   2.453753e+01     00s08  00034   1.413071e+02   3.337321e+01     00s09  00035   1.411974e+02   1.634390e+00     00s09  00036   1.411695e+02   2.937239e-01 
    00s09  00037   1.411620e+02   2.442206e+00     00s10  00038   1.411521e+02   7.246194e-01     00s10  00039   1.411413e+02   8.209838e-01     00s10  00040   1.411114e+02   2.713982e+00     00s10  00041   1.410981e+02   1.229606e+00     00s11  00042   1.410945e+02   2.945131e-02     00s11  00043   1.410944e+02   1.191555e-03 
    00s11  00044   1.410944e+02   1.190848e-03     00s11  00045   1.410943e+02   5.494835e-04     00s12  00046   1.410943e+02   5.833757e-04     00s12  00047   1.410943e+02   1.094051e-03     00s12  00048   1.410943e+02   8.415837e-05 
    00s12  00049   1.410943e+02   3.984708e-05     00s13  00050   1.410943e+02   7.080638e-04     00s13  00051   1.410943e+02   7.080638e-04 
Runtime:     00s13
Optimization status: Converged

Optimization restart 1/1, f = 141.0943332476598
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '128', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '50', '20'], [' ', ' ', '128', '64', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '100', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '20', '4'], [' ', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '4', '4'], [' ', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '4'], [' ', ' ', '20', '100', '20'], [' ', ' ', '20', '2048', '32'], [' ', ' ', '96', '2048', '32'], [' ', ' ', '32', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '128', '8', '16'], [' ', ' ', '8', '2048', '32'], [' ', ' ', '4', '2048', '32'], [' ', ' ', '100', '64', '16'], [' ', ' ', '128', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '20'], [' ', ' ', '4', '100', '20'], [' ', ' ', '16', '2048', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '20']]
prob:  <search.SurrogateProblem object at 0x14b8d840d910>
0 OK
bestX [array([[0.6639, 0.637 , 0.1281, 0.8116, 0.3385]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6236.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6236
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6236
........................................ [0.196154, 0.191845, 0.191886]
OUTPUT:%f [0.196154, 0.191845, 0.191886] 0.1918655
store_func_eval
problem.constants
None
MLA iteration:  61
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   6.609355e+05           nan     00s00  00001   6.609355e+05   5.589236e+11     00s00  00002   1.480033e+05   8.863451e+10     00s00  00003   2.636809e+04   5.409414e+09     00s01  00004   1.348386e+04   1.504131e+09     00s01  00005   6.277264e+03   3.248584e+08     00s01  00006   3.247694e+03   8.196117e+07 
    00s01  00007   1.706361e+03   1.989062e+07     00s02  00008   9.536876e+02   4.886384e+06     00s02  00009   5.807564e+02   1.171619e+06     00s02  00010   4.020557e+02   2.736247e+05     00s02  00011   3.195484e+02   6.069519e+04     00s03  00012   2.834684e+02   1.219018e+04     00s03  00013   2.684606e+02   2.276038e+03 
    00s03  00014   2.613383e+02   9.149710e+02     00s03  00015   2.546517e+02   1.407916e+03     00s04  00016   2.395140e+02   4.929403e+03     00s04  00017   2.307728e+02   5.627482e+03     00s04  00018   2.028349e+02   4.709802e+03     00s04  00019   1.766969e+02   4.662539e+04     00s05  00020   1.619451e+02   1.188551e+03     00s05  00021   1.540167e+02   6.871434e+03     00s05  00022   1.596482e+02   1.009748e+03     00s06  00023   1.486052e+02   4.281549e+02 
    00s07  00024   1.476700e+02   8.817475e+01     00s07  00025   1.473173e+02   4.348098e+01     00s08  00026   1.468177e+02   1.702321e+02     00s08  00027   1.454965e+02   6.261589e+02     00s08  00028   1.432380e+02   1.194710e+03     00s09  00029   1.421234e+02   8.888998e+02     00s09  00030   1.398180e+02   3.051164e+02     00s09  00031   1.391180e+02   1.926706e+01     00s09  00032   1.390932e+02   2.768428e+00 
    00s10  00033   1.390800e+02   1.670560e+00     00s10  00034   1.390359e+02   7.997376e+00     00s10  00035   1.390047e+02   1.120809e+01     00s11  00036   1.389217e+02   1.890287e+01     00s11  00037   1.388778e+02   1.757853e+01     00s11  00038   1.388349e+02   6.385033e+00     00s11  00039   1.388101e+02   5.086815e-01 
    00s12  00040   1.388081e+02   1.677484e-02     00s12  00041   1.388078e+02   2.855184e-03 
    00s12  00042   1.388077e+02   9.710126e-04     00s12  00043   1.388077e+02   3.892018e-04     00s13  00044   1.388077e+02   1.922525e-05     00s13  00045   1.388077e+02   1.620229e-05     00s13  00046   1.388077e+02   2.796911e-05     00s13  00047   1.388077e+02   1.221478e-04     00s14  00048   1.388077e+02   3.987515e-04     00s14  00049   1.388077e+02   1.532660e-03     00s14  00050   1.388076e+02   4.171234e-03     00s14  00051   1.388077e+02   1.821065e-01     00s15  00052   1.388076e+02   2.950288e-02     00s15  00053   1.388074e+02   2.209161e-02     00s15  00054   1.388067e+02   5.391273e-02     00s15  00055   1.388054e+02   1.600378e-01     00s16  00056   1.388037e+02   2.133798e-01     00s16  00057   1.388016e+02   1.751729e-01     00s16  00058   1.388047e+02   7.734943e-01     00s17  00059   1.388011e+02   2.672394e-02     00s17  00060   1.388007e+02   2.617304e-03     00s17  00061   1.388005e+02   9.980140e-04     00s17  00062   1.388005e+02   1.777387e-03     00s18  00063   1.388004e+02   8.113549e-04     00s18  00064   1.388006e+02   1.335282e-01     00s18  00065   1.388004e+02   4.606768e-03     00s18  00066   1.388004e+02   1.580749e-03     00s19  00067   1.388004e+02   1.786485e-04     00s19  00068   1.388004e+02   2.552927e-04     00s19  00069   1.388004e+02   1.990844e-04 
    00s19  00070   1.388004e+02   1.928628e-05 
    00s21  00076   1.388004e+02   1.582100e-06 
Runtime:     00s21
Optimization status: Converged

Optimization restart 1/1, f = 138.80036703416275
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '128', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '50', '20'], [' ', ' ', '128', '64', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '100', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '20', '4'], [' ', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '4', '4'], [' ', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '4'], [' ', ' ', '20', '100', '20'], [' ', ' ', '20', '2048', '32'], [' ', ' ', '96', '2048', '32'], [' ', ' ', '32', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '128', '8', '16'], [' ', ' ', '8', '2048', '32'], [' ', ' ', '4', '2048', '32'], [' ', ' ', '100', '64', '16'], [' ', ' ', '128', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '20'], [' ', ' ', '4', '100', '20'], [' ', ' ', '16', '2048', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '20'], [' ', ' ', '8', '100', '20']]
prob:  <search.SurrogateProblem object at 0x14b8d8b8ceb0>
0 OK
bestX [array([[0.7042, 0.8085, 0.2109, 0.8396, 0.2929]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5105.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5105
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5105
........................................ [0.187011, 0.1836, 0.182912]
OUTPUT:%f [0.187011, 0.1836, 0.182912] 0.183256
store_func_eval
problem.constants
None
MLA iteration:  62
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   6.661545e+05           nan     00s00  00001   6.661545e+05   5.603518e+11     00s00  00002   1.507060e+05   9.092017e+10     00s00  00003   2.606106e+04   5.216065e+09     00s01  00004   1.355438e+04   1.501938e+09 
    00s01  00005   6.236876e+03   3.195221e+08     00s01  00006   3.219610e+03   8.054328e+07     00s01  00007   1.692695e+03   1.949717e+07     00s02  00008   9.519982e+02   4.816235e+06 
    00s02  00009   5.823719e+02   1.162403e+06     00s02  00010   4.023658e+02   2.711604e+05     00s02  00011   3.179766e+02   5.853691e+04 
    00s03  00012   2.816718e+02   1.106818e+04     00s03  00013   2.675348e+02   2.012343e+03     00s03  00014   2.610943e+02   8.433379e+02 
    00s04  00015   2.550354e+02   1.114126e+03     00s04  00016   2.399870e+02   3.372263e+03     00s04  00017   2.734459e+02   5.332928e+03     00s04  00018   2.318120e+02   5.530543e+03     00s05  00019   2.200799e+02   4.797708e+03     00s05  00020   1.777877e+02   3.202533e+04     00s05  00021   1.698332e+02   2.880631e+03     00s05  00022   1.602690e+02   2.126935e+03     00s06  00023   2.321227e+02   2.159558e+05     00s06  00024   1.544524e+02   1.322669e+02     00s06  00025   1.540479e+02   1.754563e+02     00s06  00026   1.532053e+02   5.907485e+01     00s07  00027   1.499379e+02   1.014991e+03 
    00s07  00028   1.487762e+02   7.106476e+02     00s07  00029   1.467743e+02   1.548469e+02     00s07  00030   1.455043e+02   6.424314e+01     00s08  00031   1.445092e+02   1.057188e+02     00s08  00032   1.416647e+02   3.808793e+02     00s08  00033   1.767295e+02   3.985672e+03     00s09  00034   1.402397e+02   3.118791e+02     00s09  00035   1.397680e+02   6.584935e+00     00s09  00036   1.396678e+02   1.064837e+01     00s09  00037   1.396324e+02   2.761809e-01 
    00s10  00038   1.396255e+02   1.785175e-01     00s10  00039   1.396181e+02   2.125940e-01     00s10  00040   1.396210e+02   4.532372e+00     00s10  00041   1.395996e+02   1.161671e+00     00s11  00042   1.396102e+02   1.513780e+00     00s11  00043   1.395919e+02   9.676017e-01     00s11  00044   1.395900e+02   1.083884e-01     00s11  00045   1.395883e+02   9.186750e-03 
    00s12  00046   1.395881e+02   6.376493e-04     00s12  00047   1.395881e+02   3.643694e-05     00s12  00048   1.395881e+02   1.888127e-05     00s12  00049   1.395881e+02   5.571194e-05     00s13  00050   1.395881e+02   5.146085e-04     00s13  00051   1.395881e+02   1.316970e-03     00s13  00052   1.395881e+02   4.727633e-03     00s13  00053   1.395881e+02   1.247685e-02     00s14  00054   1.395880e+02   3.774415e-02     00s14  00055   1.395877e+02   8.975300e-02     00s14  00056   1.395871e+02   2.764225e-01     00s15  00057   1.395859e+02   4.299778e-01     00s15  00058   1.395866e+02   3.815772e+00     00s15  00059   1.395853e+02   1.359772e+00     00s15  00060   1.395834e+02   6.932467e-01     00s16  00061   1.395810e+02   3.630263e-02     00s16  00062   1.395806e+02   1.395239e-03     00s16  00063   1.395805e+02   2.057966e-03     00s16  00064   1.395803e+02   3.006002e-03     00s17  00065   1.395809e+02   9.313716e-02     00s17  00066   1.395803e+02   3.113357e-03     00s17  00067   1.395802e+02   4.270846e-04     00s17  00068   1.395802e+02   1.136865e-04     00s18  00069   1.395802e+02   1.326296e-04     00s18  00070   1.395802e+02   4.532278e-04     00s18  00071   1.395802e+02   2.141698e-02     00s18  00072   1.395802e+02   6.475385e-04     00s19  00073   1.395802e+02   2.071733e-04 
    00s19  00074   1.395802e+02   1.499200e-05     00s19  00075   1.395802e+02   3.875019e-05     00s19  00076   1.395802e+02   8.175359e-05 
    00s21  00081   1.395802e+02   3.924199e-06 
Runtime:     00s21
Optimization status: Converged

Optimization restart 1/1, f = 139.58015324243235
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '128', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '50', '20'], [' ', ' ', '128', '64', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '100', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '20', '4'], [' ', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '4', '4'], [' ', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '4'], [' ', ' ', '20', '100', '20'], [' ', ' ', '20', '2048', '32'], [' ', ' ', '96', '2048', '32'], [' ', ' ', '32', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '128', '8', '16'], [' ', ' ', '8', '2048', '32'], [' ', ' ', '4', '2048', '32'], [' ', ' ', '100', '64', '16'], [' ', ' ', '128', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '20'], [' ', ' ', '4', '100', '20'], [' ', ' ', '16', '2048', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '20'], [' ', ' ', '8', '100', '20'], [' ', ' ', '16', '128', '20']]
prob:  <search.SurrogateProblem object at 0x14b8c3e1f790>
0 OK
bestX [array([[0.947 , 0.7501, 0.6025, 0.9303, 0.413 ]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6876.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6876
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6876
........................................ [2.201003, 2.193577, 2.222374]
OUTPUT:%f [2.201003, 2.193577, 2.222374] 2.2079755
store_func_eval
problem.constants
None
MLA iteration:  63
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   6.700838e+05           nan     00s00  00001   6.700838e+05   5.508865e+11     00s00  00002   1.525194e+05   9.421275e+10 
    00s00  00003   2.373907e+04   4.388765e+09     00s01  00004   1.300289e+04   1.384303e+09     00s01  00005   5.916550e+03   2.864617e+08     00s01  00006   3.081602e+03   7.319865e+07     00s01  00007   1.622759e+03   1.764731e+07     00s02  00008   9.184192e+02   4.366741e+06     00s02  00009   5.663003e+02   1.052419e+06     00s02  00010   3.951435e+02   2.448760e+05     00s02  00011   3.151170e+02   5.238955e+04     00s03  00012   2.809501e+02   9.731205e+03     00s03  00013   2.677197e+02   1.814257e+03     00s03  00014   2.614180e+02   9.107673e+02 
    00s03  00015   2.547964e+02   1.345474e+03     00s04  00016   2.388180e+02   3.915223e+03     00s04  00017   2.308124e+02   5.834134e+03     00s04  00018   2.125398e+02   4.705468e+03     00s05  00019   7.691674e+02   1.118360e+07     00s05  00020   1.847317e+02   1.691816e+03     00s05  00021   1.625757e+02   6.778414e+03     00s05  00022   1.694267e+02   2.429605e+03 
    00s06  00023   1.579242e+02   3.241903e+01     00s06  00024   1.569230e+02   4.482069e+01     00s06  00025   1.561334e+02   7.501893e+01     00s06  00026   1.548693e+02   3.123616e+02     00s07  00027   1.521769e+02   2.078385e+02     00s07  00028   1.476562e+02   1.693510e+02     00s07  00029   1.790583e+02   2.849490e+04     00s07  00030   1.443554e+02   9.581026e+01     00s08  00031   1.445392e+02   4.359460e+02     00s08  00032   1.436514e+02   1.650229e+02     00s08  00033   1.431455e+02   7.500759e+01     00s08  00034   1.427114e+02   3.130200e+00 
    00s09  00035   1.426869e+02   2.120601e-01     00s09  00036   1.426864e+02   2.818255e+00     00s09  00037   1.426818e+02   8.667096e-02     00s10  00038   1.426813e+02   6.139855e-02     00s10  00039   1.426808e+02   1.131209e-01     00s10  00040   1.426787e+02   4.600613e-01     00s10  00041   1.426741e+02   1.024501e+00     00s11  00042   1.426675e+02   1.192040e+00     00s11  00043   1.426643e+02   2.116384e-01     00s11  00044   1.426619e+02   9.959164e-02     00s11  00045   1.426617e+02   6.604815e-03     00s12  00046   1.426617e+02   3.733786e-04 
    00s12  00047   1.426617e+02   4.888633e-05     00s12  00048   1.426617e+02   3.110903e-05     00s12  00049   1.426617e+02   6.651356e-04     00s13  00050   1.426617e+02   3.823778e-04     00s13  00051   1.426617e+02   1.097028e-04     00s13  00052   1.426617e+02   8.750315e-04     00s13  00053   1.426616e+02   5.370380e-03     00s14  00054   1.426615e+02   1.951842e-02     00s14  00055   1.426612e+02   5.787396e-02     00s14  00056   1.426604e+02   1.248466e-01     00s15  00057   1.426593e+02   5.024780e-01     00s15  00058   1.426580e+02   6.691017e-02     00s15  00059   1.426564e+02   6.868337e-02     00s15  00060   1.426553e+02   2.705342e-01     00s16  00061   1.426543e+02   2.546107e-02     00s16  00062   1.426540e+02   1.555871e-02     00s16  00063   1.426535e+02   1.336214e-02     00s16  00064   1.426532e+02   1.278011e-02     00s17  00065   1.426525e+02   9.546913e-03     00s17  00066   1.426522e+02   4.842640e-02     00s17  00067   1.426519e+02   7.447567e-04     00s17  00068   1.426519e+02   2.254677e-04     00s18  00069   1.426519e+02   1.205767e-02     00s18  00070   1.426519e+02   6.763263e-04     00s18  00071   1.426519e+02   1.956990e-04     00s18  00072   1.426518e+02   1.566862e-03     00s19  00073   1.426518e+02   1.586458e-03     00s19  00074   1.426525e+02   1.695639e-01     00s19  00075   1.426518e+02   8.721949e-04 
    00s21  00083   1.426518e+02   1.386452e-06 
Runtime:     00s21
Optimization status: Converged

Optimization restart 1/1, f = 142.65179889507075
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '128', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '50', '20'], [' ', ' ', '128', '64', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '100', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '20', '4'], [' ', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '4', '4'], [' ', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '4'], [' ', ' ', '20', '100', '20'], [' ', ' ', '20', '2048', '32'], [' ', ' ', '96', '2048', '32'], [' ', ' ', '32', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '128', '8', '16'], [' ', ' ', '8', '2048', '32'], [' ', ' ', '4', '2048', '32'], [' ', ' ', '100', '64', '16'], [' ', ' ', '128', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '20'], [' ', ' ', '4', '100', '20'], [' ', ' ', '16', '2048', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '20'], [' ', ' ', '8', '100', '20'], [' ', ' ', '16', '128', '20'], [' ', ' ', '64', '2048', '32']]
prob:  <search.SurrogateProblem object at 0x14b8d83fac10>
0 OK
bestX [array([[0.5797, 0.6544, 0.0524, 0.7813, 0.3825]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2751.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2751
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2751
........................................ [2.288729, 2.238489, 2.291376]
OUTPUT:%f [2.288729, 2.238489, 2.291376] 2.2649325
store_func_eval
problem.constants
None
MLA iteration:  64
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   6.781350e+05           nan     00s00  00001   6.781350e+05   5.779365e+11     00s00  00002   1.522586e+05   9.400585e+10     00s00  00003   2.646651e+04   5.230342e+09     00s01  00004   1.412140e+04   1.566777e+09     00s01  00005   6.496645e+03   3.327309e+08 
    00s01  00006   3.341183e+03   8.425715e+07     00s01  00007   1.725663e+03   2.016678e+07     00s02  00008   9.487484e+02   4.890249e+06     00s02  00009   5.696204e+02   1.151416e+06 
    00s02  00010   3.921417e+02   2.629104e+05     00s02  00011   3.129973e+02   5.640891e+04     00s03  00012   2.803911e+02   1.091700e+04     00s03  00013   2.677840e+02   1.997989e+03 
    00s03  00014   2.619958e+02   7.672386e+02     00s04  00015   2.567966e+02   1.008786e+03     00s04  00016   2.464785e+02   2.432189e+03     00s04  00017   2.873958e+02   4.849938e+03     00s05  00018   2.358643e+02   5.260439e+03     00s05  00019   2.252603e+02   4.858382e+03     00s05  00020   2.094560e+02   1.153550e+05     00s05  00021   1.910153e+02   2.580435e+03     00s06  00022   1.763532e+02   1.549787e+04     00s06  00023   1.833089e+02   4.139400e+03     00s06  00024   1.655870e+02   1.539472e+02     00s06  00025   1.596011e+02   1.311890e+02     00s07  00026   2.022914e+02   6.657296e+03     00s07  00027   1.563774e+02   1.197374e+02     00s07  00028   1.532639e+02   8.451901e+01     00s08  00029   3.524597e+02   1.332941e+04     00s08  00030   1.508889e+02   4.401905e+02     00s08  00031   1.498496e+02   5.370637e+02     00s08  00032   1.469804e+02   1.893973e+02     00s09  00033   1.462288e+02   2.477124e+03     00s09  00034   1.445092e+02   1.282276e+02     00s09  00035   1.443642e+02   9.375143e+02     00s09  00036   1.439716e+02   3.513409e+02     00s10  00037   1.431505e+02   3.806019e+02 
    00s10  00038   1.420614e+02   1.909131e+01     00s10  00039   1.419146e+02   1.499425e+01     00s10  00040   1.418609e+02   1.442502e+01     00s11  00041   1.418025e+02   1.798789e+00     00s11  00042   1.417904e+02   8.468621e-01 
    00s11  00043   1.417868e+02   1.352256e+00     00s11  00044   1.417753e+02   3.621092e+00     00s12  00045   1.417617e+02   2.184744e+00     00s12  00046   1.417567e+02   4.077350e+00     00s12  00047   1.417461e+02   1.398128e-01 
    00s13  00048   1.417453e+02   1.975864e-02     00s13  00049   1.417451e+02   1.298014e-03     00s13  00050   1.417451e+02   1.377030e-04     00s13  00051   1.417451e+02   3.299121e-05     00s14  00052   1.417451e+02   2.889900e-05     00s14  00053   1.417451e+02   1.632063e-04 
    00s14  00054   1.417451e+02   6.589555e-04     00s14  00055   1.417450e+02   2.437632e-03     00s15  00056   1.417450e+02   7.443988e-03     00s15  00057   1.417449e+02   2.046693e-02     00s15  00058   1.417445e+02   4.590420e-02     00s15  00059   1.417438e+02   2.950162e-01     00s16  00060   1.417426e+02   1.553993e-01     00s16  00061   1.417411e+02   2.212400e+00     00s16  00062   1.417381e+02   4.163458e-01     00s16  00063   1.417364e+02   2.783636e-02     00s17  00064   1.417361e+02   2.148185e-02     00s17  00065   1.417355e+02   2.047921e-02     00s17  00066   1.417352e+02   6.698566e-03     00s18  00067   1.417351e+02   3.697798e-03     00s18  00068   1.417348e+02   2.677745e-03     00s18  00069   1.417347e+02   6.140567e-04     00s18  00070   1.417347e+02   2.078192e-03     00s19  00071   1.417347e+02   1.674646e-04 
    00s19  00072   1.417347e+02   4.692094e-05     00s19  00073   1.417347e+02   4.180838e-04     00s19  00074   1.417347e+02   7.779542e-04     00s21  00082   1.417347e+02   5.154077e-05 
Runtime:     00s21
Optimization status: Converged

Optimization restart 1/1, f = 141.7346938092988
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '128', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '50', '20'], [' ', ' ', '128', '64', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '100', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '20', '4'], [' ', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '4', '4'], [' ', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '4'], [' ', ' ', '20', '100', '20'], [' ', ' ', '20', '2048', '32'], [' ', ' ', '96', '2048', '32'], [' ', ' ', '32', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '128', '8', '16'], [' ', ' ', '8', '2048', '32'], [' ', ' ', '4', '2048', '32'], [' ', ' ', '100', '64', '16'], [' ', ' ', '128', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '20'], [' ', ' ', '4', '100', '20'], [' ', ' ', '16', '2048', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '20'], [' ', ' ', '8', '100', '20'], [' ', ' ', '16', '128', '20'], [' ', ' ', '64', '2048', '32'], [' ', ' ', '4', '100', '32']]
prob:  <search.SurrogateProblem object at 0x14b8c3fc1fd0>
0 OK
bestX [array([[0.5204, 0.609 , 0.4608, 0.9199, 0.4518]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/198.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/198
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/198
........................................ [2.224109, 2.217574, 2.225497]
OUTPUT:%f [2.224109, 2.217574, 2.225497] 2.2215355
store_func_eval
problem.constants
None
MLA iteration:  65
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   6.870548e+05           nan 
    00s00  00001   6.870548e+05   5.824429e+11     00s00  00002   1.543512e+05   9.744963e+10     00s00  00003   2.518624e+04   4.801416e+09     00s01  00004   1.380470e+04   1.511257e+09 
    00s01  00005   6.290043e+03   3.152485e+08     00s01  00006   3.238666e+03   8.020472e+07     00s01  00007   1.667717e+03   1.908888e+07     00s02  00008   9.190601e+02   4.622988e+06     00s02  00009   5.564331e+02   1.090983e+06     00s02  00010   3.876196e+02   2.517985e+05     00s03  00011   3.119697e+02   5.495375e+04     00s03  00012   2.803546e+02   1.080001e+04     00s03  00013   2.679913e+02   1.968464e+03     00s03  00014   2.623848e+02   7.287057e+02 
    00s04  00015   2.574898e+02   9.388023e+02     00s04  00016   2.481805e+02   2.152441e+03     00s04  00017   2.785102e+02   5.295131e+03     00s04  00018   2.369517e+02   5.097217e+03     00s05  00019   2.265258e+02   5.001678e+03     00s05  00020   2.913642e+02   5.814591e+05     00s05  00021   1.829678e+02   1.824784e+03     00s06  00022   1.689113e+02   3.463470e+03     00s06  00023   1.668648e+02   2.744381e+03     00s06  00024   1.598116e+02   5.273425e+02 
    00s06  00025   1.587619e+02   8.307045e+01     00s07  00026   1.584038e+02   8.084788e+01     00s07  00027   1.559717e+02   3.556086e+02     00s07  00028   1.547575e+02   5.215274e+02     00s07  00029   1.493977e+02   2.921830e+02     00s08  00030   1.690444e+02   8.165590e+03     00s08  00031   1.433463e+02   3.813259e+01     00s08  00032   1.426004e+02   2.558485e+02     00s08  00033   1.416071e+02   2.661401e+01     00s09  00034   1.414971e+02   6.232920e+00 
    00s09  00035   1.414421e+02   3.235991e+00     00s09  00036   1.413757e+02   2.550967e+00     00s10  00037   1.414694e+02   5.996674e+01     00s10  00038   1.413665e+02   7.881279e+00     00s10  00039   1.413421e+02   4.180928e+00     00s10  00040   1.412745e+02   1.211069e-01     00s11  00041   1.412573e+02   2.280092e-02     00s11  00042   1.412529e+02   8.484840e-03     00s11  00043   1.412526e+02   7.561056e-04     00s11  00044   1.412526e+02   6.576910e-05     00s12  00045   1.412526e+02   8.212056e-05     00s12  00046   1.412526e+02   7.024887e-05 
    00s12  00047   1.412526e+02   2.835482e-04     00s12  00048   1.412526e+02   8.243104e-03     00s13  00049   1.412525e+02   5.368334e-03     00s13  00050   1.412524e+02   2.138258e-02     00s13  00051   1.412521e+02   1.099159e-02     00s13  00052   1.412515e+02   3.271038e-02     00s14  00053   1.412502e+02   1.296598e-01     00s14  00054   1.412483e+02   2.654411e-01     00s14  00055   1.412456e+02   1.911955e-01     00s15  00056   1.412439e+02   7.939634e-02     00s15  00057   1.412430e+02   2.517216e-03     00s15  00058   1.412429e+02   2.119595e-03     00s15  00059   1.412428e+02   5.218537e-03     00s16  00060   1.412429e+02   9.520472e-02     00s16  00061   1.412428e+02   6.173178e-03     00s16  00062   1.412427e+02   1.188966e-03     00s16  00063   1.412427e+02   3.179240e-04     00s17  00064   1.412426e+02   2.025690e-04     00s17  00065   1.412426e+02   1.717683e-04     00s17  00066   1.412426e+02   1.383868e-04     00s17  00067   1.412426e+02   4.600957e-04 
    00s18  00068   1.412426e+02   7.670916e-05     00s18  00069   1.412426e+02   2.394766e-05     00s18  00070   1.412426e+02   4.687461e-05     00s19  00071   1.412426e+02   1.560772e-04     00s19  00072   1.412426e+02   2.654927e-04     00s19  00073   1.412426e+02   9.341258e-03     00s19  00074   1.412426e+02   1.223489e-03     00s20  00078   1.412426e+02   7.196575e-06 
Runtime:     00s20
Optimization status: Converged

Optimization restart 1/1, f = 141.2426054000901
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '128', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '50', '20'], [' ', ' ', '128', '64', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '100', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '20', '4'], [' ', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '4', '4'], [' ', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '4'], [' ', ' ', '20', '100', '20'], [' ', ' ', '20', '2048', '32'], [' ', ' ', '96', '2048', '32'], [' ', ' ', '32', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '128', '8', '16'], [' ', ' ', '8', '2048', '32'], [' ', ' ', '4', '2048', '32'], [' ', ' ', '100', '64', '16'], [' ', ' ', '128', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '20'], [' ', ' ', '4', '100', '20'], [' ', ' ', '16', '2048', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '20'], [' ', ' ', '8', '100', '20'], [' ', ' ', '16', '128', '20'], [' ', ' ', '64', '2048', '32'], [' ', ' ', '4', '100', '32'], [' ', ' ', '50', '2048', '32']]
prob:  <search.SurrogateProblem object at 0x14b8c3d63c10>
0 OK
bestX [array([[0.9808, 0.5456, 0.2625, 0.8417, 0.3659]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4049.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4049
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4049
........................................ [2.222556, 2.172365, 2.197454]
OUTPUT:%f [2.222556, 2.172365, 2.197454] 2.1849095
store_func_eval
problem.constants
None
MLA iteration:  66
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   8.503456e+05           nan     00s00  00001   8.503456e+05   7.438333e+11     00s00  00002   2.311351e+05   1.715887e+11     00s00  00003   1.874127e+04   2.741398e+09     00s01  00004   1.216934e+04   1.170987e+09 
    00s01  00005   5.379979e+03   2.230473e+08     00s01  00006   2.896979e+03   6.004353e+07     00s02  00007   1.538043e+03   1.431294e+07     00s02  00008   8.947565e+02   3.571228e+06     00s02  00009   5.739785e+02   8.650883e+05 
    00s02  00010   4.202527e+02   2.052397e+05 
    00s03  00011   3.487606e+02   4.539974e+04     00s03  00012   3.177990e+02   8.959676e+03     00s03  00013   3.047297e+02   1.859982e+03     00s03  00014   2.974602e+02   1.004969e+03     00s04  00015   2.905126e+02   1.183235e+03     00s04  00016   2.824427e+02   9.561856e+02     00s04  00017   2.746615e+02   1.823550e+02     00s04  00018   2.697386e+02   1.128469e+02     00s05  00019   2.587518e+02   2.040486e+03 
    00s05  00020   2.534783e+02   1.027707e+03     00s05  00021   2.552523e+02   3.975966e+03     00s06  00022   2.510385e+02   9.840729e+01     00s06  00023   2.536938e+02   1.161609e+03     00s06  00024   2.504483e+02   1.288081e+02     00s06  00025   2.494494e+02   1.015707e+02     00s07  00026   2.451934e+02   1.492069e+02     00s07  00027   2.437383e+02   1.250139e+01 
    00s07  00028   2.424537e+02   7.819515e+01     00s07  00029   2.415317e+02   2.661248e+01     00s08  00030   2.408585e+02   3.548696e+01     00s08  00031   2.414394e+02   1.284728e+02     00s08  00032   2.405999e+02   2.897405e+01     00s08  00033   2.401866e+02   7.221218e+00     00s09  00034   2.401561e+02   5.283365e-01     00s09  00035   2.401451e+02   9.235956e-01 
    00s09  00036   2.401012e+02   7.591461e+00     00s10  00037   2.400460e+02   1.119674e+01     00s10  00038   2.399992e+02   1.980503e+00     00s10  00039   2.399927e+02   1.907902e+00     00s10  00040   2.399882e+02   3.168339e-01     00s11  00041   2.399876e+02   1.309078e-03     00s11  00042   2.399876e+02   9.620188e-04     00s11  00043   2.399876e+02   1.482229e-04 
    00s11  00044   2.399876e+02   1.767015e-05     00s12  00045   2.399876e+02   1.767015e-05 
Runtime:     00s12
Optimization status: Converged

Optimization restart 1/1, f = 239.98758374489307
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '128', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '50', '20'], [' ', ' ', '128', '64', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '100', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '20', '4'], [' ', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '4', '4'], [' ', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '4'], [' ', ' ', '20', '100', '20'], [' ', ' ', '20', '2048', '32'], [' ', ' ', '96', '2048', '32'], [' ', ' ', '32', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '128', '8', '16'], [' ', ' ', '8', '2048', '32'], [' ', ' ', '4', '2048', '32'], [' ', ' ', '100', '64', '16'], [' ', ' ', '128', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '20'], [' ', ' ', '4', '100', '20'], [' ', ' ', '16', '2048', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '20'], [' ', ' ', '8', '100', '20'], [' ', ' ', '16', '128', '20'], [' ', ' ', '64', '2048', '32'], [' ', ' ', '4', '100', '32'], [' ', ' ', '50', '2048', '32'], [' ', ' ', '16', '128', '32']]
prob:  <search.SurrogateProblem object at 0x14b8c3e1fa60>
0 OK
bestX [array([[0.2963, 0.1547, 0.0789, 0.6503, 0.3232]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1960.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1960
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1960
........................................ [0.692092, 0.68855, 0.687293]
OUTPUT:%f [0.692092, 0.68855, 0.687293] 0.6879215000000001
store_func_eval
problem.constants
None
MLA iteration:  67
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   8.838663e+05           nan     00s00  00001   8.838663e+05   8.157648e+11     00s01  00002   2.383564e+05   1.837359e+11     00s01  00003   2.069769e+04   3.377456e+09 
    00s02  00004   1.309269e+04   1.375927e+09     00s02  00005   5.811044e+03   2.656555e+08 
    00s02  00006   3.109408e+03   7.091153e+07     00s02  00007   1.646447e+03   1.695816e+07     00s03  00008   9.512906e+02   4.244823e+06     00s03  00009   6.029678e+02   1.036838e+06     00s03  00010   4.338750e+02   2.481925e+05 
    00s04  00011   3.539692e+02   5.522802e+04     00s04  00012   3.189849e+02   1.082116e+04 
    00s04  00013   3.045718e+02   2.106762e+03     00s04  00014   2.972968e+02   9.839592e+02     00s05  00015   2.907680e+02   1.066396e+03     00s05  00016   2.827339e+02   8.392495e+02     00s05  00017   2.739665e+02   1.646214e+02 
    00s06  00018   2.650476e+02   2.389787e+02     00s06  00019   3.221868e+02   3.637966e+03     00s06  00020   2.540717e+02   1.177475e+03     00s06  00021   2.528726e+02   1.199037e+03     00s07  00022   2.489813e+02   1.244630e+02     00s07  00023   2.480998e+02   8.584868e+01     00s07  00024   2.446891e+02   1.340441e+02 
    00s08  00025   2.435890e+02   1.343840e+01     00s08  00026   2.429822e+02   1.687656e+01     00s08  00027   2.424233e+02   1.097951e+01     00s08  00028   2.417491e+02   3.883573e+01     00s09  00029   2.413610e+02   9.277106e+00 
    00s09  00030   2.410451e+02   5.091393e+00     00s09  00031   2.410073e+02   9.173889e-01     00s10  00032   2.409987e+02   2.668834e-01     00s10  00033   2.409919e+02   1.723799e-01     00s10  00034   2.409620e+02   1.452883e+00     00s10  00035   2.409439e+02   2.508006e+00     00s11  00036   2.409345e+02   3.066663e-01 
    00s11  00037   2.409332e+02   3.252591e-02     00s11  00038   2.409330e+02   1.860574e-03     00s11  00039   2.409330e+02   1.173497e-05     00s12  00040   2.409330e+02   5.852540e-06 
    00s12  00041   2.409330e+02   5.852540e-06 
Runtime:     00s12
Optimization status: Converged

Optimization restart 1/1, f = 240.93299973143667
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '128', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '50', '20'], [' ', ' ', '128', '64', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '100', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '20', '4'], [' ', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '4', '4'], [' ', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '4'], [' ', ' ', '20', '100', '20'], [' ', ' ', '20', '2048', '32'], [' ', ' ', '96', '2048', '32'], [' ', ' ', '32', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '128', '8', '16'], [' ', ' ', '8', '2048', '32'], [' ', ' ', '4', '2048', '32'], [' ', ' ', '100', '64', '16'], [' ', ' ', '128', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '20'], [' ', ' ', '4', '100', '20'], [' ', ' ', '16', '2048', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '20'], [' ', ' ', '8', '100', '20'], [' ', ' ', '16', '128', '20'], [' ', ' ', '64', '2048', '32'], [' ', ' ', '4', '100', '32'], [' ', ' ', '50', '2048', '32'], [' ', ' ', '16', '128', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '20']]
prob:  <search.SurrogateProblem object at 0x14b8d8aceb80>
0 OK
bestX [array([[0.1848, 0.3456, 0.1278, 0.8287, 0.4018]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7855.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7855
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7855
........................................ [2.473368, 2.472175, 2.47174]
OUTPUT:%f [2.473368, 2.472175, 2.47174] 2.4719575000000003
store_func_eval
problem.constants
None
MLA iteration:  68
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   8.865180e+05           nan     00s00  00001   8.865180e+05   8.160609e+11     00s00  00002   2.403942e+05   1.844462e+11     00s00  00003   2.072908e+04   3.401839e+09 
    00s01  00004   1.305237e+04   1.375150e+09     00s01  00005   5.792368e+03   2.657619e+08     00s01  00006   3.096520e+03   7.081062e+07 
    00s02  00007   1.640105e+03   1.693259e+07     00s02  00008   9.481448e+02   4.237584e+06     00s02  00009   6.014728e+02   1.035323e+06     00s02  00010   4.330866e+02   2.478164e+05 
    00s03  00011   3.534863e+02   5.507388e+04     00s03  00012   3.186834e+02   1.074930e+04     00s03  00013   3.044267e+02   2.082206e+03     00s03  00014   2.972771e+02   9.704814e+02 
    00s04  00015   2.908171e+02   1.052842e+03     00s04  00016   2.827421e+02   8.406597e+02     00s04  00017   2.732418e+02   1.995820e+02     00s05  00018   2.605523e+02   5.131755e+02     00s05  00019   3.686427e+02   1.116634e+03     00s05  00020   2.551239e+02   2.004366e+03     00s05  00021   2.504512e+02   3.802950e+02     00s06  00022   2.487718e+02   2.617608e+02 
    00s06  00023   2.479745e+02   1.439817e+02     00s06  00024   2.456016e+02   8.823923e+01     00s06  00025   2.441121e+02   5.310685e+01     00s07  00026   2.432523e+02   1.669711e+01     00s07  00027   2.427288e+02   3.464771e+01     00s07  00028   2.422411e+02   2.683637e+01     00s08  00029   2.421315e+02   3.743102e+02     00s08  00030   2.419421e+02   1.404135e+02     00s08  00031   2.415521e+02   9.211195e+00     00s08  00032   2.413903e+02   7.341937e-01 
    00s09  00033   2.413863e+02   4.336603e-02     00s09  00034   2.413857e+02   4.353106e-02     00s09  00035   2.413845e+02   1.570591e-01     00s09  00036   2.413812e+02   4.042769e-01     00s10  00037   2.413775e+02   4.500781e-01     00s10  00038   2.414267e+02   2.167923e+01     00s10  00039   2.413773e+02   2.178079e-01     00s11  00040   2.413757e+02   4.312922e-02 
    00s11  00041   2.413756e+02   2.485170e-03     00s11  00042   2.413755e+02   4.272467e-05     00s11  00043   2.413755e+02   9.077338e-06     00s12  00044   2.413755e+02   9.077338e-06 
Runtime:     00s12
Optimization status: Converged

Optimization restart 1/1, f = 241.37554319017937
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '128', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '50', '20'], [' ', ' ', '128', '64', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '100', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '20', '4'], [' ', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '4', '4'], [' ', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '4'], [' ', ' ', '20', '100', '20'], [' ', ' ', '20', '2048', '32'], [' ', ' ', '96', '2048', '32'], [' ', ' ', '32', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '128', '8', '16'], [' ', ' ', '8', '2048', '32'], [' ', ' ', '4', '2048', '32'], [' ', ' ', '100', '64', '16'], [' ', ' ', '128', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '20'], [' ', ' ', '4', '100', '20'], [' ', ' ', '16', '2048', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '20'], [' ', ' ', '8', '100', '20'], [' ', ' ', '16', '128', '20'], [' ', ' ', '64', '2048', '32'], [' ', ' ', '4', '100', '32'], [' ', ' ', '50', '2048', '32'], [' ', ' ', '16', '128', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '32']]
prob:  <search.SurrogateProblem object at 0x14b8c3db7a60>
0 OK
bestX [array([[0.4989, 0.1801, 0.0315, 0.6374, 0.3821]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4322.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4322
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4322
........................................ [2.539199, 2.565682, 2.535948]
OUTPUT:%f [2.539199, 2.565682, 2.535948] 2.550815
store_func_eval
problem.constants
None
MLA iteration:  69
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   9.806863e+05           nan     00s00  00001   9.806863e+05   9.784810e+11     00s00  00002   2.514183e+05   2.226350e+11     00s00  00003   2.020971e+04   3.256628e+09     00s01  00004   1.342289e+04   1.458084e+09     00s01  00005   5.845296e+03   2.708956e+08     00s01  00006   3.147515e+03   7.336681e+07     00s02  00007   1.658500e+03   1.743343e+07 
    00s02  00008   9.548131e+02   4.360078e+06     00s02  00009   6.017609e+02   1.057748e+06     00s02  00010   4.314618e+02   2.512484e+05     00s03  00011   3.517604e+02   5.533224e+04     00s03  00012   3.175189e+02   1.070615e+04 
    00s04  00013   3.038700e+02   2.045800e+03     00s04  00014   2.971506e+02   8.873911e+02     00s04  00015   2.910038e+02   9.335445e+02     00s04  00016   2.832602e+02   7.505701e+02     00s05  00017   2.738461e+02   1.750863e+02     00s05  00018   2.607602e+02   7.285822e+02 
    00s05  00019   3.932514e+02   1.695142e+02     00s06  00020   2.596327e+02   3.015258e+03     00s06  00021   2.553834e+02   1.683026e+03     00s06  00022   2.509700e+02   9.432702e+02     00s06  00023   2.487358e+02   1.161503e+03     00s07  00024   2.474720e+02   8.872848e+01     00s07  00025   2.469813e+02   5.456680e+01     00s07  00026   2.441207e+02   5.004691e+01 
    00s08  00027   2.435045e+02   2.326567e+01     00s08  00028   2.431341e+02   9.027581e+00     00s08  00029   2.427700e+02   2.800653e+01     00s08  00030   2.425602e+02   7.467083e+00     00s09  00031   2.423649e+02   1.699847e+00 
    00s09  00032   2.423246e+02   1.379889e+00     00s09  00033   2.423203e+02   1.733857e-01 
    00s10  00034   2.423197e+02   9.920234e-04     00s10  00035   2.423197e+02   1.532085e-03     00s10  00036   2.423197e+02   1.056295e-04     00s10  00037   2.423197e+02   1.099271e-04     00s11  00038   2.423197e+02   1.099271e-04 
Runtime:     00s11
Optimization status: Converged

Optimization restart 1/1, f = 242.3196842489902
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '128', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '50', '20'], [' ', ' ', '128', '64', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '100', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '20', '4'], [' ', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '4', '4'], [' ', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '4'], [' ', ' ', '20', '100', '20'], [' ', ' ', '20', '2048', '32'], [' ', ' ', '96', '2048', '32'], [' ', ' ', '32', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '128', '8', '16'], [' ', ' ', '8', '2048', '32'], [' ', ' ', '4', '2048', '32'], [' ', ' ', '100', '64', '16'], [' ', ' ', '128', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '20'], [' ', ' ', '4', '100', '20'], [' ', ' ', '16', '2048', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '20'], [' ', ' ', '8', '100', '20'], [' ', ' ', '16', '128', '20'], [' ', ' ', '64', '2048', '32'], [' ', ' ', '4', '100', '32'], [' ', ' ', '50', '2048', '32'], [' ', ' ', '16', '128', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '32']]
prob:  <search.SurrogateProblem object at 0x14b8d8b8c610>
0 OK
bestX [array([[0.0323, 0.299 , 0.2007, 0.9464, 0.4154]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6042.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6042
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6042
........................................ [2.601537, 2.275163, 2.443428]
OUTPUT:%f [2.601537, 2.275163, 2.443428] 2.3592955
store_func_eval
problem.constants
None
MLA iteration:  70
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   9.841268e+05           nan     00s00  00001   9.841268e+05   9.882290e+11     00s00  00002   2.525652e+05   2.232707e+11 
    00s00  00003   2.087886e+04   3.467609e+09     00s01  00004   1.371584e+04   1.522337e+09     00s01  00005   5.980448e+03   2.845688e+08 
    00s01  00006   3.209530e+03   7.678254e+07     00s02  00007   1.688014e+03   1.824696e+07     00s02  00008   9.693991e+02   4.559130e+06     00s02  00009   6.094882e+02   1.106757e+06     00s02  00010   4.357499e+02   2.633198e+05     00s03  00011   3.542185e+02   5.812548e+04     00s03  00012   3.190779e+02   1.125300e+04     00s03  00013   3.051128e+02   2.127912e+03 
    00s03  00014   2.983600e+02   9.001236e+02     00s04  00015   2.922766e+02   9.415584e+02     00s04  00016   2.845987e+02   7.675068e+02     00s04  00017   2.753573e+02   1.728313e+02     00s05  00018   2.640396e+02   4.882460e+02     00s05  00019   3.769285e+02   8.379320e+02     00s05  00020   2.573166e+02   2.260286e+03     00s05  00021   2.524840e+02   6.073124e+02     00s06  00022   2.508222e+02   9.852569e+02 
    00s06  00023   2.494635e+02   8.290487e+01     00s06  00024   2.487821e+02   5.789773e+01     00s07  00025   2.458414e+02   9.828482e+01     00s07  00026   2.448338e+02   6.637642e+01     00s07  00027   2.443065e+02   3.366114e+02     00s07  00028   2.440462e+02   3.515780e+01     00s08  00029   2.437889e+02   4.941444e+00     00s08  00030   2.435600e+02   2.763575e+01     00s08  00031   2.431854e+02   5.912966e+01     00s09  00032   2.430758e+02   1.673137e+01     00s09  00033   2.430415e+02   2.890698e-01 
    00s09  00034   2.430401e+02   2.217791e-01     00s09  00035   2.430390e+02   3.468536e-01     00s10  00036   2.430336e+02   1.304455e+00     00s10  00037   2.430255e+02   2.405541e+00     00s10  00038   2.430147e+02   2.049309e+00     00s11  00039   2.432820e+02   1.865124e+02     00s11  00040   2.430140e+02   2.061495e+00     00s11  00041   2.430090e+02   3.969506e-01 
    00s11  00042   2.430081e+02   1.113874e-02     00s12  00043   2.430080e+02   5.634422e-04     00s12  00044   2.430080e+02   3.214165e-04     00s12  00045   2.430080e+02   1.311912e-03     00s12  00046   2.430080e+02   2.038027e-04     00s13  00047   2.430080e+02   4.444762e-05     00s13  00048   2.430080e+02   3.790788e-05     00s13  00049   2.430080e+02   1.169954e-04 
    00s14  00050   2.430080e+02   1.001595e-04     00s14  00051   2.430079e+02   3.769325e-04     00s14  00052   2.430079e+02   2.415740e-04     00s14  00053   2.430079e+02   3.276650e-04     00s15  00054   2.430079e+02   8.856659e-04     00s15  00055   2.430079e+02   2.942125e-03     00s15  00056   2.430079e+02   7.111248e-03     00s16  00057   2.430078e+02   3.279886e-02     00s16  00058   2.430077e+02   2.858466e-02     00s16  00059   2.430074e+02   2.452631e-02     00s16  00060   2.430099e+02   8.007735e-01     00s17  00061   2.430073e+02   2.428507e-02     00s17  00062   2.430071e+02   1.365780e-02     00s17  00063   2.430069e+02   2.045127e-01     00s17  00064   2.430065e+02   4.880110e-02     00s18  00065   2.430061e+02   2.655743e-02     00s18  00066   2.430053e+02   8.389175e-02     00s18  00067   2.430045e+02   9.499135e-02     00s19  00068   2.430039e+02   2.143257e-02     00s19  00069   2.430036e+02   8.364385e-03     00s19  00070   2.430035e+02   1.328743e-02     00s19  00071   2.430034e+02   7.643092e-03 
    00s23  00085   2.430033e+02   2.195751e-05 
Runtime:     00s23
Optimization status: Converged

Optimization restart 1/1, f = 243.00333950452463
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '128', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '50', '20'], [' ', ' ', '128', '64', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '100', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '20', '4'], [' ', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '4', '4'], [' ', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '4'], [' ', ' ', '20', '100', '20'], [' ', ' ', '20', '2048', '32'], [' ', ' ', '96', '2048', '32'], [' ', ' ', '32', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '128', '8', '16'], [' ', ' ', '8', '2048', '32'], [' ', ' ', '4', '2048', '32'], [' ', ' ', '100', '64', '16'], [' ', ' ', '128', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '20'], [' ', ' ', '4', '100', '20'], [' ', ' ', '16', '2048', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '20'], [' ', ' ', '8', '100', '20'], [' ', ' ', '16', '128', '20'], [' ', ' ', '64', '2048', '32'], [' ', ' ', '4', '100', '32'], [' ', ' ', '50', '2048', '32'], [' ', ' ', '16', '128', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '32']]
prob:  <search.SurrogateProblem object at 0x14b8c3efc4f0>
0 OK
bestX [array([[0.2957, 0.0592, 0.1727, 0.6839, 0.4267]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9806.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9806
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9806
........................................ [2.483084, 2.482377, 2.481242]
OUTPUT:%f [2.483084, 2.482377, 2.481242] 2.4818095
store_func_eval
problem.constants
None
MLA iteration:  71
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   1.050579e+06           nan     00s00  00001   1.050579e+06   9.829651e+11     00s00  00002   2.878105e+05   2.774992e+11     00s00  00003   1.000295e+04   8.043408e+08     00s01  00004   8.033494e+03   5.163030e+08     00s01  00005   3.360359e+03   8.408801e+07 
    00s01  00006   1.912908e+03   2.417982e+07     00s02  00007   1.054005e+03   5.620889e+06     00s02  00008   6.605853e+02   1.406478e+06     00s02  00009   4.649033e+02   3.329968e+05     00s02  00010   3.744681e+02   7.559637e+04     00s03  00011   3.348817e+02   1.541787e+04     00s03  00012   3.187969e+02   2.973520e+03 
    00s03  00013   3.111063e+02   1.021784e+03     00s04  00014   3.045426e+02   1.066980e+03     00s04  00015   2.963525e+02   1.296515e+03     00s04  00016   2.871882e+02   7.863008e+02     00s04  00017   2.811457e+02   2.731731e+02     00s05  00018   2.769409e+02   1.589596e+02     00s05  00019   2.681818e+02   3.294796e+03     00s05  00020   2.683637e+02   8.448782e+02     00s06  00021   4.835137e+02   3.473194e+00     00s06  00022   3.211246e+02   4.374366e+03     00s06  00023   2.654370e+02   1.742920e+03     00s06  00024   2.629095e+02   2.015956e+03 
    00s07  00025   2.570150e+02   8.811140e+02     00s07  00026   2.552434e+02   2.363064e+02     00s07  00027   2.548265e+02   3.683154e+01     00s08  00028   2.544516e+02   3.897785e+01     00s08  00029   2.532335e+02   1.965162e+02     00s08  00030   2.485031e+02   7.191935e+02     00s08  00031   2.560153e+02   8.752880e+02     00s09  00032   2.471659e+02   7.432229e+02     00s09  00033   2.499945e+02   9.051839e+02     00s09  00034   2.464536e+02   7.760434e+02     00s10  00035   2.449296e+02   3.003585e+02     00s10  00036   2.444150e+02   8.942838e+00     00s10  00037   2.443923e+02   6.656804e-01     00s10  00038   2.443882e+02   5.916446e-01 
    00s11  00039   2.443623e+02   7.295714e-01     00s11  00040   2.443435e+02   6.190436e-01     00s11  00041   2.443186e+02   8.896491e-01     00s12  00042   2.443293e+02   1.269331e+01     00s12  00043   2.443143e+02   8.038373e-01     00s12  00044   2.443103e+02   1.270970e-01     00s12  00045   2.443095e+02   9.219501e-04     00s13  00046   2.443094e+02   2.137342e-04     00s13  00047   2.443094e+02   1.103781e-05 
    00s13  00048   2.443094e+02   1.633797e-05     00s14  00049   2.443094e+02   1.633797e-05 
Runtime:     00s14
Optimization status: Converged

Optimization restart 1/1, f = 244.30944059961251
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '128', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '50', '20'], [' ', ' ', '128', '64', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '100', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '20', '4'], [' ', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '4', '4'], [' ', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '4'], [' ', ' ', '20', '100', '20'], [' ', ' ', '20', '2048', '32'], [' ', ' ', '96', '2048', '32'], [' ', ' ', '32', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '128', '8', '16'], [' ', ' ', '8', '2048', '32'], [' ', ' ', '4', '2048', '32'], [' ', ' ', '100', '64', '16'], [' ', ' ', '128', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '20'], [' ', ' ', '4', '100', '20'], [' ', ' ', '16', '2048', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '20'], [' ', ' ', '8', '100', '20'], [' ', ' ', '16', '128', '20'], [' ', ' ', '64', '2048', '32'], [' ', ' ', '4', '100', '32'], [' ', ' ', '50', '2048', '32'], [' ', ' ', '16', '128', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '80', '32']]
prob:  <search.SurrogateProblem object at 0x14b8c3d99af0>
0 OK
bestX [array([[0.1059, 0.9316, 0.0538, 0.2736, 0.3249]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8819.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8819
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8819
........................................ [1.013395, 1.00647, 1.005521]
OUTPUT:%f [1.013395, 1.00647, 1.005521] 1.0059955
store_func_eval
problem.constants
None
MLA iteration:  72
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   1.074263e+06           nan     00s00  00001   1.074263e+06   1.085406e+12     00s00  00002   2.871986e+05   2.805881e+11     00s00  00003   1.492960e+04   1.777409e+09     00s01  00004   1.108906e+04   9.830611e+08     00s01  00005   4.694979e+03   1.694269e+08 
    00s01  00006   2.594005e+03   4.751893e+07     00s02  00007   1.384952e+03   1.115459e+07     00s02  00008   8.236436e+02   2.792660e+06     00s02  00009   5.432114e+02   6.700447e+05     00s02  00010   4.107774e+02   1.565859e+05     00s03  00011   3.505835e+02   3.366531e+04     00s03  00012   3.253774e+02   6.493919e+03     00s03  00013   3.146622e+02   1.501247e+03 
    00s04  00014   3.078817e+02   1.029926e+03     00s04  00015   3.004951e+02   1.289400e+03     00s04  00016   2.920310e+02   1.037001e+03     00s04  00017   2.848471e+02   1.596306e+02     00s05  00018   2.817804e+02   6.493373e+01     00s05  00019   2.767156e+02   2.297786e+02     00s05  00020   2.952986e+02   5.136684e+03     00s05  00021   2.718223e+02   1.344142e+03     00s06  00022   4.702593e+02   5.057651e+00     00s06  00023   3.041002e+02   4.748169e+03     00s06  00024   2.702103e+02   2.156170e+03     00s07  00025   2.678099e+02   2.661130e+03     00s07  00026   2.613079e+02   2.066535e+03 
    00s07  00027   2.565665e+02   4.160676e+02 
    00s07  00028   2.556002e+02   8.591648e+01     00s08  00029   2.552038e+02   4.395112e+01     00s08  00030   2.518079e+02   3.957501e+02     00s08  00031   2.488620e+02   8.567291e+02     00s09  00032   2.470612e+02   3.505165e+02     00s09  00033   2.467044e+02   5.621967e+01 
    00s09  00034   2.462332e+02   6.484503e+00     00s09  00035   2.461433e+02   1.797019e+00     00s10  00036   2.461011e+02   1.335298e+00     00s10  00037   2.460873e+02   2.443448e-01     00s10  00038   2.460825e+02   1.588229e-01     00s11  00039   2.460773e+02   4.632539e-01     00s11  00040   2.460686e+02   1.012699e+00     00s11  00041   2.460615e+02   3.215366e+00     00s11  00042   2.460542e+02   2.487561e-01 
    00s12  00043   2.460522e+02   5.071135e-02     00s12  00044   2.460519e+02   3.347808e-03     00s12  00045   2.460519e+02   8.396345e-05     00s13  00046   2.460519e+02   8.510004e-06     00s13  00047   2.460519e+02   8.510004e-06 
Runtime:     00s13
Optimization status: Converged

Optimization restart 1/1, f = 246.05191192853684
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '128', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '50', '20'], [' ', ' ', '128', '64', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '100', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '20', '4'], [' ', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '4', '4'], [' ', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '4'], [' ', ' ', '20', '100', '20'], [' ', ' ', '20', '2048', '32'], [' ', ' ', '96', '2048', '32'], [' ', ' ', '32', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '128', '8', '16'], [' ', ' ', '8', '2048', '32'], [' ', ' ', '4', '2048', '32'], [' ', ' ', '100', '64', '16'], [' ', ' ', '128', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '20'], [' ', ' ', '4', '100', '20'], [' ', ' ', '16', '2048', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '20'], [' ', ' ', '8', '100', '20'], [' ', ' ', '16', '128', '20'], [' ', ' ', '64', '2048', '32'], [' ', ' ', '4', '100', '32'], [' ', ' ', '50', '2048', '32'], [' ', ' ', '16', '128', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '20', '20']]
prob:  <search.SurrogateProblem object at 0x14b8d8be8d60>
0 OK
bestX [array([[0.6589, 0.4365, 0.0713, 0.6351, 0.0462]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4190.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4190
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4190
........................................ [0.43753, 0.432287, 0.430807]
OUTPUT:%f [0.43753, 0.432287, 0.430807] 0.431547
store_func_eval
problem.constants
None
MLA iteration:  73
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   1.083752e+06           nan     00s00  00001   1.083752e+06   1.127828e+12     00s00  00002   2.861361e+05   2.812716e+11     00s00  00003   1.721538e+04   2.357221e+09     00s01  00004   1.236525e+04   1.224456e+09     00s01  00005   5.265339e+03   2.157404e+08 
    00s01  00006   2.878410e+03   5.985117e+07     00s02  00007   1.523487e+03   1.409297e+07     00s02  00008   8.919507e+02   3.525292e+06     00s02  00009   5.764589e+02   8.486967e+05     00s02  00010   4.266093e+02   1.998416e+05     00s03  00011   3.577458e+02   4.365738e+04 
    00s03  00012   3.284834e+02   8.528629e+03     00s03  00013   3.162585e+02   1.809463e+03     00s04  00014   3.092370e+02   1.033353e+03     00s04  00015   3.021613e+02   1.264929e+03     00s04  00016   2.939736e+02   1.089189e+03     00s04  00017   2.862968e+02   1.355868e+02     00s05  00018   2.831986e+02   5.823801e+01     00s05  00019   2.772296e+02   2.841797e+02     00s05  00020   4.183937e+02   9.500290e+01     00s06  00021   2.713988e+02   2.026880e+03     00s06  00022   2.870600e+02   4.253568e+03     00s06  00023   2.699357e+02   2.753569e+03     00s06  00024   2.642767e+02   2.134211e+03     00s07  00025   2.695805e+02   1.237509e+04     00s07  00026   2.580872e+02   1.543502e+02 
    00s07  00027   2.575411e+02   9.529676e+01     00s08  00028   2.568098e+02   1.151266e+02     00s08  00029   2.528413e+02   1.244500e+02     00s08  00030   2.508352e+02   1.987130e+01     00s08  00031   2.487553e+02   2.026572e+02     00s09  00032   2.481956e+02   2.691840e+01     00s09  00033   2.476340e+02   1.170485e+01     00s09  00034   2.472535e+02   5.725686e+01     00s10  00035   2.471115e+02   1.619885e+01     00s10  00036   2.469635e+02   2.997907e+00     00s10  00037   2.469433e+02   1.762266e+00     00s10  00038   2.469506e+02   1.404030e+01 
    00s11  00039   2.469369e+02   1.063997e+00     00s11  00040   2.469306e+02   5.988707e-01     00s11  00041   2.469236e+02   6.434948e-01     00s12  00042   2.468815e+02   1.140569e+00     00s12  00043   2.468663e+02   5.243708e-01     00s12  00044   2.468823e+02   9.874188e+00     00s12  00045   2.468650e+02   1.715093e-01     00s13  00046   2.468627e+02   3.617211e-03 
    00s13  00047   2.468626e+02   4.728478e-05     00s13  00048   2.468626e+02   7.677056e-06     00s14  00049   2.468626e+02   6.726726e-06     00s14  00050   2.468626e+02   1.762379e-05     00s14  00051   2.468626e+02   3.273466e-03     00s14  00052   2.468626e+02   3.970272e-04     00s15  00053   2.468626e+02   7.000162e-04     00s15  00054   2.468626e+02   1.486789e-03     00s15  00055   2.468625e+02   9.343950e-03     00s16  00056   2.468624e+02   1.457745e-02     00s16  00057   2.468628e+02   6.294831e-01     00s16  00058   2.468624e+02   8.080523e-02     00s16  00059   2.468621e+02   4.179496e-02     00s17  00060   2.468617e+02   1.371053e-02     00s17  00061   2.468612e+02   2.233101e-02     00s17  00062   2.468608e+02   4.288859e-02     00s18  00063   2.468600e+02   1.005451e-01     00s18  00064   2.468591e+02   1.796334e-02     00s18  00065   2.468585e+02   6.399426e-02     00s18  00066   2.468582e+02   6.597989e-03     00s19  00067   2.468581e+02   4.192740e-03     00s19  00068   2.468580e+02   1.339714e-03     00s19  00069   2.468580e+02   1.131962e-03     00s19  00070   2.468583e+02   2.748417e-01     00s22  00080   2.468579e+02   1.978340e-05 
Runtime:     00s22
Optimization status: Converged

Optimization restart 1/1, f = 246.85794134665156
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '128', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '50', '20'], [' ', ' ', '128', '64', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '100', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '20', '4'], [' ', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '4', '4'], [' ', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '4'], [' ', ' ', '20', '100', '20'], [' ', ' ', '20', '2048', '32'], [' ', ' ', '96', '2048', '32'], [' ', ' ', '32', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '128', '8', '16'], [' ', ' ', '8', '2048', '32'], [' ', ' ', '4', '2048', '32'], [' ', ' ', '100', '64', '16'], [' ', ' ', '128', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '20'], [' ', ' ', '4', '100', '20'], [' ', ' ', '16', '2048', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '20'], [' ', ' ', '8', '100', '20'], [' ', ' ', '16', '128', '20'], [' ', ' ', '64', '2048', '32'], [' ', ' ', '4', '100', '32'], [' ', ' ', '50', '2048', '32'], [' ', ' ', '16', '128', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '20', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '4']]
prob:  <search.SurrogateProblem object at 0x14b8d8ac1ee0>
0 OK
bestX [array([[0.5803, 0.4346, 0.0746, 0.0895, 0.0211]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1555.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1555
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1555
........................................ [0.497739, 0.492188, 0.492063]
OUTPUT:%f [0.497739, 0.492188, 0.492063] 0.4921255
store_func_eval
problem.constants
None
MLA iteration:  74
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   1.108890e+06           nan     00s00  00001   1.108890e+06   1.204577e+12     00s00  00002   2.882905e+05   2.875616e+11     00s00  00003   2.017478e+04   3.214961e+09     00s01  00004   1.394363e+04   1.554465e+09 
    00s01  00005   5.981928e+03   2.808655e+08     00s01  00006   3.233084e+03   7.696553e+07     00s02  00007   1.696042e+03   1.818046e+07     00s02  00008   9.764656e+02   4.539768e+06     00s02  00009   6.173431e+02   1.095574e+06     00s02  00010   4.459954e+02   2.596800e+05     00s03  00011   3.664924e+02   5.764721e+04     00s03  00012   3.321984e+02   1.146027e+04     00s03  00013   3.180462e+02   2.268993e+03     00s04  00014   3.106905e+02   1.030987e+03 
    00s04  00015   3.039652e+02   1.198972e+03     00s04  00016   2.960872e+02   1.133097e+03     00s04  00017   2.879153e+02   1.734790e+02     00s05  00018   2.845125e+02   5.587569e+01     00s05  00019   2.793101e+02   1.614118e+02     00s05  00020   2.866818e+02   5.254810e+03     00s06  00021   2.716719e+02   1.781781e+03 
    00s06  00022   4.045917e+02   5.444876e+02     00s06  00023   2.713223e+02   3.549801e+03     00s07  00024   2.703123e+02   2.603182e+03     00s07  00025   2.651242e+02   2.106819e+03     00s07  00026   2.722734e+02   1.386077e+04     00s07  00027   2.587001e+02   2.123946e+02     00s08  00028   2.579548e+02   1.165948e+02     00s08  00029   2.569973e+02   1.356640e+02     00s08  00030   2.542789e+02   8.213893e+01     00s09  00031   2.523913e+02   7.686962e+01     00s09  00032   2.496797e+02   6.996632e+01     00s09  00033   2.488844e+02   2.483926e+02 
    00s09  00034   2.480661e+02   1.056655e+01     00s10  00035   2.477165e+02   3.121695e+00 
    00s10  00036   2.473626e+02   9.073410e+00     00s10  00037   2.472254e+02   2.752705e+01     00s11  00038   2.471608e+02   6.122505e-01     00s11  00039   2.471382e+02   4.960865e-01     00s11  00040   2.471344e+02   1.077940e+01     00s11  00041   2.471146e+02   2.345422e+00     00s12  00042   2.470860e+02   1.552394e+00     00s12  00043   2.470724e+02   1.563472e-01     00s12  00044   2.470688e+02   2.996510e-03     00s13  00045   2.470687e+02   3.909211e-04     00s13  00046   2.470688e+02   2.798777e-02 
    00s13  00047   2.470687e+02   7.066104e-05     00s13  00048   2.470687e+02   1.198409e-05     00s14  00049   2.470687e+02   8.437892e-06     00s14  00050   2.470687e+02   8.437892e-06 
Runtime:     00s14
Optimization status: Converged

Optimization restart 1/1, f = 247.06870907665032
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '128', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '50', '20'], [' ', ' ', '128', '64', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '100', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '20', '4'], [' ', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '4', '4'], [' ', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '4'], [' ', ' ', '20', '100', '20'], [' ', ' ', '20', '2048', '32'], [' ', ' ', '96', '2048', '32'], [' ', ' ', '32', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '128', '8', '16'], [' ', ' ', '8', '2048', '32'], [' ', ' ', '4', '2048', '32'], [' ', ' ', '100', '64', '16'], [' ', ' ', '128', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '20'], [' ', ' ', '4', '100', '20'], [' ', ' ', '16', '2048', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '20'], [' ', ' ', '8', '100', '20'], [' ', ' ', '16', '128', '20'], [' ', ' ', '64', '2048', '32'], [' ', ' ', '4', '100', '32'], [' ', ' ', '50', '2048', '32'], [' ', ' ', '16', '128', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '20', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '4', '4']]
prob:  <search.SurrogateProblem object at 0x14b8c3ed20a0>
0 OK
bestX [array([[0.7138, 0.1318, 0.0579, 0.8368, 0.0876]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1892.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1892
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1892
........................................ [0.420476, 0.417744, 0.416616]
OUTPUT:%f [0.420476, 0.417744, 0.416616] 0.41718
store_func_eval
problem.constants
None
MLA iteration:  75
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   1.109247e+06           nan     00s00  00001   1.109247e+06   1.205440e+12     00s00  00002   2.884374e+05   2.873929e+11     00s00  00003   2.027848e+04   3.239475e+09 
    00s01  00004   1.400236e+04   1.563546e+09     00s01  00005   6.007950e+03   2.827716e+08     00s01  00006   3.244518e+03   7.743052e+07     00s02  00007   1.700651e+03   1.827536e+07     00s02  00008   9.787183e+02   4.559147e+06     00s02  00009   6.190117e+02   1.100156e+06     00s02  00010   4.475125e+02   2.610298e+05     00s03  00011   3.678868e+02   5.804018e+04 
    00s03  00012   3.334950e+02   1.155414e+04     00s03  00013   3.192991e+02   2.283345e+03     00s04  00014   3.119398e+02   1.031526e+03     00s04  00015   3.052274e+02   1.205624e+03     00s04  00016   2.973615e+02   1.158703e+03 
    00s04  00017   2.890635e+02   1.930525e+02     00s05  00018   2.854888e+02   6.210173e+01     00s05  00019   2.800231e+02   1.724255e+02     00s05  00020   2.884139e+02   5.362228e+03     00s06  00021   2.721023e+02   1.826992e+03     00s06  00022   4.130823e+02   3.589160e+02     00s06  00023   2.722867e+02   3.816135e+03     00s07  00024   2.706746e+02   2.723671e+03     00s07  00025   2.654701e+02   2.080023e+03     00s07  00026   2.735343e+02   1.635899e+04     00s07  00027   2.590086e+02   1.474771e+02     00s08  00028   2.583047e+02   1.105210e+02     00s08  00029   2.570374e+02   1.601646e+02     00s08  00030   2.547014e+02   1.172308e+02     00s09  00031   2.528120e+02   1.543004e+01     00s09  00032   2.509340e+02   3.644564e+02 
    00s09  00033   2.494626e+02   4.897558e+01     00s09  00034   2.488905e+02   3.137510e+01     00s10  00035   2.480029e+02   1.674285e+01     00s10  00036   2.476746e+02   1.328109e+01 
    00s10  00037   2.475993e+02   9.867609e+00     00s11  00038   2.475167e+02   2.315214e+00     00s11  00039   2.474990e+02   3.042409e+00     00s11  00040   2.474906e+02   2.152398e-01     00s11  00041   2.474849e+02   2.857913e-01     00s12  00042   2.474510e+02   2.576851e+00     00s12  00043   2.474395e+02   1.416834e+00     00s12  00044   2.474460e+02   4.431271e+00     00s13  00045   2.474371e+02   5.920998e-01     00s13  00046   2.474360e+02   1.064052e-02 
    00s13  00047   2.474359e+02   1.521800e-04     00s13  00048   2.474359e+02   4.183633e-05     00s14  00049   2.474359e+02   9.549068e-06     00s14  00050   2.474359e+02   9.549068e-06 
Runtime:     00s14
Optimization status: Converged

Optimization restart 1/1, f = 247.43594685500864
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '128', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '50', '20'], [' ', ' ', '128', '64', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '100', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '20', '4'], [' ', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '4', '4'], [' ', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '4'], [' ', ' ', '20', '100', '20'], [' ', ' ', '20', '2048', '32'], [' ', ' ', '96', '2048', '32'], [' ', ' ', '32', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '128', '8', '16'], [' ', ' ', '8', '2048', '32'], [' ', ' ', '4', '2048', '32'], [' ', ' ', '100', '64', '16'], [' ', ' ', '128', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '20'], [' ', ' ', '4', '100', '20'], [' ', ' ', '16', '2048', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '20'], [' ', ' ', '8', '100', '20'], [' ', ' ', '16', '128', '20'], [' ', ' ', '64', '2048', '32'], [' ', ' ', '4', '100', '32'], [' ', ' ', '50', '2048', '32'], [' ', ' ', '16', '128', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '20', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '4']]
prob:  <search.SurrogateProblem object at 0x14b8c3d64520>
0 OK
bestX [array([[0.4438, 0.1962, 0.1516, 0.9716, 0.3847]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6736.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6736
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6736
........................................ [2.62521, 2.369951, 2.445076]
OUTPUT:%f [2.62521, 2.369951, 2.445076] 2.4075135
store_func_eval
problem.constants
None
MLA iteration:  76
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   1.109886e+06           nan     00s00  00001   1.109886e+06   1.210099e+12 
    00s00  00002   2.893836e+05   2.849861e+11     00s00  00003   2.139848e+04   3.629748e+09     00s01  00004   1.445272e+04   1.681657e+09     00s01  00005   6.234482e+03   3.082437e+08     00s01  00006   3.355568e+03   8.394088e+07 
    00s02  00007   1.759733e+03   1.990198e+07     00s02  00008   1.010375e+03   4.979868e+06     00s02  00009   6.360431e+02   1.207915e+06 
    00s02  00010   4.566649e+02   2.878645e+05     00s03  00011   3.731365e+02   6.432699e+04     00s03  00012   3.371204e+02   1.289192e+04     00s03  00013   3.224807e+02   2.503480e+03 
    00s04  00014   3.151660e+02   1.018395e+03     00s04  00015   3.085155e+02   1.194948e+03     00s04  00016   3.004374e+02   1.374730e+03 
    00s05  00017   2.914867e+02   5.352584e+02     00s05  00018   2.860302e+02   1.253089e+02     00s05  00019   2.795374e+02   2.429765e+02     00s05  00020   2.760919e+02   4.971154e+03     00s06  00021   2.698675e+02   1.317361e+03     00s06  00022   5.002300e+02   3.476620e+00     00s06  00023   3.486575e+02   3.978080e+03     00s07  00024   2.661826e+02   2.619718e+03     00s07  00025   2.609710e+02   1.547923e+03     00s07  00026   2.610529e+02   4.422546e+03 
    00s07  00027   2.569029e+02   5.645146e+01     00s08  00028   2.565980e+02   5.967757e+01     00s08  00029   2.555775e+02   9.481640e+01     00s08  00030   2.535190e+02   1.088780e+02     00s09  00031   2.503399e+02   2.029954e+02     00s09  00032   2.488391e+02   5.865851e+01 
    00s09  00033   2.484330e+02   8.372339e+00     00s09  00034   2.482924e+02   1.782048e+01     00s10  00035   2.481965e+02   1.948518e+01     00s10  00036   2.482399e+02   6.298900e+01     00s10  00037   2.480520e+02   5.383105e+00     00s11  00038   2.480229e+02   7.235476e-02 
    00s11  00039   2.480219e+02   4.692628e-02     00s11  00040   2.480216e+02   1.837847e-02     00s12  00041   2.480206e+02   1.078299e-01     00s12  00042   2.480187e+02   3.487815e-01     00s12  00043   2.480168e+02   2.261326e-01     00s12  00044   2.480164e+02   7.715254e-02 
    00s13  00045   2.480161e+02   7.102373e-03     00s13  00046   2.480161e+02   1.904149e-04     00s13  00047   2.480161e+02   9.336024e-06     00s14  00048   2.480161e+02   9.336024e-06 
Runtime:     00s14
Optimization status: Converged

Optimization restart 1/1, f = 248.0160911274137
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '128', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '50', '20'], [' ', ' ', '128', '64', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '100', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '20', '4'], [' ', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '4', '4'], [' ', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '4'], [' ', ' ', '20', '100', '20'], [' ', ' ', '20', '2048', '32'], [' ', ' ', '96', '2048', '32'], [' ', ' ', '32', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '128', '8', '16'], [' ', ' ', '8', '2048', '32'], [' ', ' ', '4', '2048', '32'], [' ', ' ', '100', '64', '16'], [' ', ' ', '128', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '20'], [' ', ' ', '4', '100', '20'], [' ', ' ', '16', '2048', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '20'], [' ', ' ', '8', '100', '20'], [' ', ' ', '16', '128', '20'], [' ', ' ', '64', '2048', '32'], [' ', ' ', '4', '100', '32'], [' ', ' ', '50', '2048', '32'], [' ', ' ', '16', '128', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '20', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '32']]
prob:  <search.SurrogateProblem object at 0x14b8c3d79130>
0 OK
bestX [array([[0.6087, 0.2879, 0.9848, 0.0313, 0.0034]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4145.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4145
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4145
........................................ [0.462277, 0.456944, 0.456896]
OUTPUT:%f [0.462277, 0.456944, 0.456896] 0.45692
store_func_eval
problem.constants
None
MLA iteration:  77
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   1.110849e+06           nan     00s00  00001   1.110849e+06   1.214953e+12     00s00  00002   2.897662e+05   2.849452e+11     00s00  00003   2.174282e+04   3.744197e+09     00s01  00004   1.460885e+04   1.717738e+09     00s01  00005   6.311033e+03   3.159251e+08 
    00s01  00006   3.393509e+03   8.590422e+07     00s02  00007   1.779105e+03   2.038000e+07     00s02  00008   1.020399e+03   5.098913e+06     00s02  00009   6.414255e+02   1.237018e+06     00s03  00010   4.598024e+02   2.948656e+05     00s03  00011   3.752507e+02   6.594470e+04     00s03  00012   3.388356e+02   1.322764e+04     00s03  00013   3.241332e+02   2.544786e+03     00s04  00014   3.169384e+02   9.880552e+02     00s04  00015   3.104918e+02   1.136577e+03 
    00s04  00016   3.024561e+02   1.362773e+03     00s05  00017   2.935050e+02   6.685961e+02     00s05  00018   2.874180e+02   1.024202e+02     00s05  00019   2.809327e+02   2.604588e+02     00s05  00020   3.647974e+02   3.246492e+03     00s06  00021   2.705485e+02   1.364029e+03     00s06  00022   4.781213e+02   6.087379e+00     00s06  00023   3.052608e+02   4.803980e+03     00s07  00024   2.673442e+02   2.236611e+03     00s07  00025   2.645021e+02   2.109544e+03     00s07  00026   2.587170e+02   8.660679e+02     00s08  00027   2.570371e+02   4.941613e+01 
    00s08  00028   2.566704e+02   4.953833e+01     00s08  00029   2.556528e+02   2.104297e+02     00s08  00030   2.541202e+02   4.516365e+02     00s09  00031   2.510763e+02   6.148160e+02     00s09  00032   2.516937e+02   1.403982e+03     00s09  00033   2.502544e+02   7.244824e+02     00s10  00034   2.492504e+02   5.388457e+01 
    00s10  00035   2.491300e+02   1.617363e+00     00s10  00036   2.490962e+02   6.547032e+00     00s10  00037   2.490440e+02   9.911366e+00     00s11  00038   2.489919e+02   2.073984e+00     00s11  00039   2.489776e+02   2.324528e-02 
    00s11  00040   2.489774e+02   9.448389e-04     00s12  00041   2.489774e+02   9.099393e-04     00s12  00042   2.489774e+02   5.504352e-03     00s12  00043   2.489773e+02   9.299161e-03     00s13  00044   2.489773e+02   3.904607e-03     00s13  00045   2.489773e+02   2.965641e-04     00s13  00046   2.489773e+02   7.798198e-06     00s13  00047   2.489773e+02   1.129977e-05     00s14  00048   2.489773e+02   1.129977e-05 
Runtime:     00s14
Optimization status: Converged

Optimization restart 1/1, f = 248.97729985959913
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '128', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '50', '20'], [' ', ' ', '128', '64', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '100', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '20', '4'], [' ', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '4', '4'], [' ', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '4'], [' ', ' ', '20', '100', '20'], [' ', ' ', '20', '2048', '32'], [' ', ' ', '96', '2048', '32'], [' ', ' ', '32', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '128', '8', '16'], [' ', ' ', '8', '2048', '32'], [' ', ' ', '4', '2048', '32'], [' ', ' ', '100', '64', '16'], [' ', ' ', '128', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '20'], [' ', ' ', '4', '100', '20'], [' ', ' ', '16', '2048', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '20'], [' ', ' ', '8', '100', '20'], [' ', ' ', '16', '128', '20'], [' ', ' ', '64', '2048', '32'], [' ', ' ', '4', '100', '32'], [' ', ' ', '50', '2048', '32'], [' ', ' ', '16', '128', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '20', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4']]
prob:  <search.SurrogateProblem object at 0x14b8c3ed4940>
0 OK
bestX [array([[0.9433, 0.3848, 0.954 , 0.2858, 0.0619]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1660.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1660
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1660
........................................ [0.431722, 0.428851, 0.429078]
OUTPUT:%f [0.431722, 0.428851, 0.429078] 0.42896449999999997
store_func_eval
problem.constants
None
MLA iteration:  78
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   1.113451e+06           nan     00s00  00001   1.113451e+06   1.212162e+12     00s00  00002   2.948647e+05   2.887636e+11     00s00  00003   2.119560e+04   3.582334e+09     00s01  00004   1.431253e+04   1.658652e+09 
    00s01  00005   6.178674e+03   3.042130e+08     00s01  00006   3.328456e+03   8.287144e+07     00s02  00007   1.748545e+03   1.966392e+07     00s02  00008   1.006427e+03   4.925278e+06     00s02  00009   6.355919e+02   1.196006e+06 
    00s03  00010   4.579475e+02   2.851481e+05     00s03  00011   3.754851e+02   6.365982e+04     00s03  00012   3.402933e+02   1.272422e+04     00s03  00013   3.263868e+02   2.414299e+03     00s04  00014   3.198825e+02   8.369384e+02 
    00s04  00015   3.144429e+02   7.743964e+02     00s04  00016   3.080911e+02   6.051333e+02     00s05  00017   3.026408e+02   4.669547e+01     00s05  00018   3.005113e+02   1.266196e+02     00s05  00019   2.932658e+02   3.557958e+02     00s05  00020   2.887436e+02   2.341671e+02     00s06  00021   2.801473e+02   1.166831e+03     00s06  00022   3.387021e+02   3.898676e+03     00s06  00023   2.789075e+02   1.985033e+03     00s07  00024   2.766298e+02   1.736068e+03     00s07  00025   2.770012e+02   8.410663e+03     00s07  00026   2.702367e+02   5.398894e+02     00s08  00027   2.676823e+02   4.525166e+02     00s08  00028   2.640469e+02   4.078241e+02     00s08  00029   2.586881e+02   1.533932e+02     00s08  00030   2.533345e+02   8.738416e+02 
    00s09  00031   2.509296e+02   4.535448e+01     00s09  00032   2.504774e+02   2.603358e+01     00s09  00033   2.500871e+02   2.502442e+01     00s10  00034   2.521938e+02   2.356260e+02     00s10  00035   2.500283e+02   1.527408e+01     00s10  00036   2.499293e+02   9.192101e+00     00s11  00037   2.499109e+02   2.981417e-01 
    00s11  00038   2.499104e+02   2.603965e-02     00s11  00039   2.499103e+02   3.026554e-02     00s11  00040   2.499093e+02   7.109632e-02     00s12  00041   2.499066e+02   2.385562e-01     00s12  00042   2.499034e+02   2.670042e-01     00s12  00043   2.500842e+02   3.986797e+01     00s13  00044   2.499030e+02   5.894825e-02     00s13  00045   2.499011e+02   2.612816e-02     00s13  00046   2.499014e+02   1.311499e-01     00s13  00047   2.499009e+02   5.187257e-03     00s14  00048   2.499007e+02   1.761401e-03     00s14  00049   2.499007e+02   1.324122e-03     00s14  00050   2.499007e+02   8.496600e-04     00s15  00051   2.499007e+02   1.325184e-05 
    00s15  00052   2.499007e+02   8.801767e-06     00s15  00053   2.499007e+02   8.801767e-06 
Runtime:     00s15
Optimization status: Converged

Optimization restart 1/1, f = 249.90072919150137
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '128', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '50', '20'], [' ', ' ', '128', '64', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '100', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '20', '4'], [' ', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '4', '4'], [' ', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '4'], [' ', ' ', '20', '100', '20'], [' ', ' ', '20', '2048', '32'], [' ', ' ', '96', '2048', '32'], [' ', ' ', '32', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '128', '8', '16'], [' ', ' ', '8', '2048', '32'], [' ', ' ', '4', '2048', '32'], [' ', ' ', '100', '64', '16'], [' ', ' ', '128', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '20'], [' ', ' ', '4', '100', '20'], [' ', ' ', '16', '2048', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '20'], [' ', ' ', '8', '100', '20'], [' ', ' ', '16', '128', '20'], [' ', ' ', '64', '2048', '32'], [' ', ' ', '4', '100', '32'], [' ', ' ', '50', '2048', '32'], [' ', ' ', '16', '128', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '20', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '20', '4']]
prob:  <search.SurrogateProblem object at 0x14b8c3bf6b80>
0 OK
bestX [array([[0.5423, 0.408 , 0.7874, 0.2145, 0.0898]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9034.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9034
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9034
........................................ [0.432471, 0.428661, 0.42799]
OUTPUT:%f [0.432471, 0.428661, 0.42799] 0.4283255
store_func_eval
problem.constants
None
MLA iteration:  79
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   1.113603e+06           nan 
    00s00  00001   1.113603e+06   1.212457e+12     00s00  00002   2.952630e+05   2.892760e+11     00s00  00003   2.115169e+04   3.566205e+09     00s01  00004   1.429618e+04   1.654067e+09     00s01  00005   6.169844e+03   3.032129e+08     00s01  00006   3.323823e+03   8.262210e+07 
    00s02  00007   1.745752e+03   1.959976e+07     00s02  00008   1.004800e+03   4.907028e+06     00s02  00009   6.348226e+02   1.190528e+06     00s03  00010   4.578318e+02   2.835310e+05     00s03  00011   3.758128e+02   6.321636e+04     00s03  00012   3.408773e+02   1.261310e+04 
    00s03  00013   3.270998e+02   2.390353e+03     00s04  00014   3.206582e+02   8.343296e+02     00s04  00015   3.152537e+02   7.789002e+02     00s04  00016   3.089082e+02   6.159621e+02     00s05  00017   3.028381e+02   1.159783e+02 
    00s05  00018   2.970068e+02   2.625772e+02     00s05  00019   3.251364e+02   2.147332e+03     00s06  00020   2.929952e+02   8.923959e+01     00s06  00021   2.910106e+02   7.085315e+01     00s06  00022   2.789611e+02   2.467893e+03     00s06  00023   3.305481e+02   4.219048e+03     00s07  00024   2.784625e+02   3.133514e+03     00s07  00025   2.723598e+02   2.257110e+03     00s07  00026   2.823949e+02   2.655707e+04     00s08  00027   2.620103e+02   3.091051e+02     00s08  00028   2.588499e+02   5.273969e+02     00s08  00029   2.539635e+02   6.526888e+01     00s09  00030   2.532177e+02   2.773195e+02     00s09  00031   2.519463e+02   1.317190e+02     00s09  00032   2.511233e+02   1.637523e+02 
    00s09  00033   2.503538e+02   7.820809e+01     00s10  00034   2.500559e+02   3.018117e+00     00s10  00035   2.499662e+02   2.589582e+00     00s10  00036   2.499713e+02   5.473309e+00     00s11  00037   2.499536e+02   1.903346e+00 
    00s11  00038   2.499503e+02   3.106327e-01     00s11  00039   2.499475e+02   3.030087e-01     00s12  00040   2.499447e+02   1.072000e+00     00s12  00041   2.499366e+02   3.387386e+00     00s12  00042   2.499275e+02   3.624675e+00     00s12  00043   2.499839e+02   2.961627e+01     00s13  00044   2.499266e+02   2.999505e+00     00s13  00045   2.499208e+02   6.418768e-01     00s13  00046   2.499199e+02   3.259382e-02     00s14  00047   2.499199e+02   1.928347e-04     00s14  00048   2.499199e+02   1.126889e-04     00s14  00049   2.499199e+02   1.774099e-05 
    00s15  00050   2.499199e+02   3.187932e-05     00s15  00051   2.499199e+02   3.187932e-05 
Runtime:     00s15
Optimization status: Converged

Optimization restart 1/1, f = 249.91987281736706
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '128', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '50', '20'], [' ', ' ', '128', '64', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '100', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '20', '4'], [' ', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '4', '4'], [' ', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '4'], [' ', ' ', '20', '100', '20'], [' ', ' ', '20', '2048', '32'], [' ', ' ', '96', '2048', '32'], [' ', ' ', '32', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '128', '8', '16'], [' ', ' ', '8', '2048', '32'], [' ', ' ', '4', '2048', '32'], [' ', ' ', '100', '64', '16'], [' ', ' ', '128', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '20'], [' ', ' ', '4', '100', '20'], [' ', ' ', '16', '2048', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '20'], [' ', ' ', '8', '100', '20'], [' ', ' ', '16', '128', '20'], [' ', ' ', '64', '2048', '32'], [' ', ' ', '4', '100', '32'], [' ', ' ', '50', '2048', '32'], [' ', ' ', '16', '128', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '20', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '20', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '16', '4']]
prob:  <search.SurrogateProblem object at 0x14b8d8b8c640>
0 OK
bestX [array([[0.7648, 0.2916, 0.6196, 0.0534, 0.0706]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8184.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8184
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8184
........................................ [0.441502, 0.436624, 0.439058]
OUTPUT:%f [0.441502, 0.436624, 0.439058] 0.43784100000000004
store_func_eval
problem.constants
None
MLA iteration:  80
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   1.120330e+06           nan     00s00  00001   1.120330e+06   1.224610e+12     00s00  00002   2.965454e+05   2.927642e+11     00s00  00003   2.108532e+04   3.550434e+09 
    00s01  00004   1.428811e+04   1.655101e+09     00s01  00005   6.160068e+03   3.027686e+08     00s01  00006   3.320300e+03   8.257589e+07     00s02  00007   1.744187e+03   1.958578e+07     00s02  00008   1.004445e+03   4.904576e+06     00s02  00009   6.350757e+02   1.189832e+06     00s03  00010   4.584528e+02   2.833089e+05     00s03  00011   3.766596e+02   6.313885e+04     00s03  00012   3.418629e+02   1.258743e+04     00s03  00013   3.281718e+02   2.382745e+03     00s04  00014   3.217900e+02   8.316477e+02 
    00s04  00015   3.164375e+02   7.769410e+02     00s04  00016   3.101410e+02   6.126143e+02     00s05  00017   3.042522e+02   8.668389e+01     00s05  00018   3.010924e+02   9.832134e+01     00s05  00019   3.005036e+02   5.144625e+01     00s06  00020   2.997873e+02   6.120493e+01     00s06  00021   2.976893e+02   1.078190e+03     00s06  00022   3.283214e+02   5.494229e+03     00s06  00023   2.966938e+02   1.948450e+03     00s07  00024   2.956381e+02   4.531301e+03     00s07  00025   2.945424e+02   3.235137e+03     00s07  00026   2.892928e+02   4.233564e+03     00s08  00027   2.711918e+02   4.077343e+03     00s08  00028   2.440403e+02   2.788896e+03     00s08  00029   2.387804e+02   1.017292e+03     00s09  00030   2.353971e+02   2.426960e+02     00s09  00031   2.358239e+02   7.020197e+02 
    00s09  00032   2.336642e+02   5.482400e+01     00s09  00033   2.325993e+02   3.754901e+01     00s10  00034   2.276233e+02   2.955769e+02     00s10  00035   2.231635e+02   8.081420e+02     00s10  00036   2.213848e+02   6.670266e+01     00s11  00037   2.209540e+02   2.253025e+00     00s11  00038   2.209251e+02   2.304614e+00 
    00s11  00039   2.208867e+02   2.566596e+00     00s12  00040   2.208768e+02   1.809483e+00     00s12  00041   2.208598e+02   7.410623e-02     00s12  00042   2.208584e+02   7.240843e-02     00s12  00043   2.208565e+02   1.073782e-01     00s13  00044   2.208544e+02   1.189149e-01     00s13  00045   2.208498e+02   8.916083e-02     00s13  00046   2.208488e+02   1.091841e-02     00s14  00047   2.208488e+02   5.752075e-02     00s14  00048   2.208487e+02   6.090434e-03 
    00s14  00049   2.208487e+02   2.175172e-05     00s15  00050   2.208487e+02   1.180869e-05     00s15  00051   2.208487e+02   1.365643e-05     00s15  00052   2.208487e+02   4.422101e-05     00s15  00053   2.208487e+02   7.186293e-04     00s16  00054   2.208487e+02   4.854900e-04     00s16  00055   2.208485e+02   2.339691e-03     00s16  00056   2.208481e+02   1.911158e-02     00s17  00057   2.208472e+02   5.299647e-02     00s17  00058   2.208458e+02   7.372856e-02     00s17  00059   2.208562e+02   6.850670e+00     00s18  00060   2.208457e+02   2.871552e-02     00s18  00061   2.208443e+02   1.869832e-02     00s18  00062   2.208441e+02   1.061221e-01     00s18  00063   2.208434e+02   3.605904e-04     00s19  00064   2.208433e+02   1.779899e-04     00s19  00065   2.208433e+02   4.058686e-04     00s19  00066   2.208434e+02   1.243631e-02 
    00s22  00076   2.208432e+02   7.540455e-06 
Runtime:     00s22
Optimization status: Converged

Optimization restart 1/1, f = 220.84320465281445
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '128', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '50', '20'], [' ', ' ', '128', '64', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '100', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '20', '4'], [' ', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '4', '4'], [' ', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '4'], [' ', ' ', '20', '100', '20'], [' ', ' ', '20', '2048', '32'], [' ', ' ', '96', '2048', '32'], [' ', ' ', '32', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '128', '8', '16'], [' ', ' ', '8', '2048', '32'], [' ', ' ', '4', '2048', '32'], [' ', ' ', '100', '64', '16'], [' ', ' ', '128', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '20'], [' ', ' ', '4', '100', '20'], [' ', ' ', '16', '2048', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '20'], [' ', ' ', '8', '100', '20'], [' ', ' ', '16', '128', '20'], [' ', ' ', '64', '2048', '32'], [' ', ' ', '4', '100', '32'], [' ', ' ', '50', '2048', '32'], [' ', ' ', '16', '128', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '20', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '20', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '16', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '4']]
prob:  <search.SurrogateProblem object at 0x14b8c3c9bb80>
0 OK
bestX [array([[0.9675, 0.2072, 0.5049, 0.1233, 0.4529]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8063.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8063
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8063
........................................ [2.352546, 2.385904, 2.342776]
OUTPUT:%f [2.352546, 2.385904, 2.342776] 2.3643400000000003
store_func_eval
problem.constants
None
MLA iteration:  81
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   1.141573e+06           nan     00s00  00001   1.141573e+06   1.303969e+12     00s00  00002   2.961673e+05   2.963671e+11 
    00s00  00003   2.481473e+04   4.873290e+09     00s01  00004   1.605674e+04   2.087222e+09     00s01  00005   6.989632e+03   3.927463e+08     00s01  00006   3.725301e+03   1.056453e+08     00s02  00007   1.944113e+03   2.516673e+07     00s02  00008   1.103489e+03   6.296281e+06     00s02  00009   6.838524e+02   1.532820e+06     00s03  00010   4.820649e+02   3.672540e+05     00s03  00011   3.877417e+02   8.297521e+04 
    00s03  00012   3.469899e+02   1.688019e+04     00s04  00013   3.308994e+02   3.142610e+03     00s04  00014   3.238947e+02   9.137632e+02     00s04  00015   3.186452e+02   7.672661e+02     00s04  00016   3.125452e+02   6.869895e+02     00s05  00017   3.066955e+02   7.359780e+01     00s05  00018   3.050320e+02   2.230744e+01 
    00s05  00019   3.037592e+02   6.969220e+01     00s06  00020   3.175182e+02   1.228886e+03     00s06  00021   3.040124e+02   1.063436e+02     00s06  00022   3.026367e+02   5.084576e+01     00s07  00023   3.012761e+02   8.131123e+01     00s07  00024   3.038651e+02   1.087383e+03     00s07  00025   2.995072e+02   2.866877e+02     00s07  00026   3.090992e+02   1.549034e+03     00s08  00027   2.990841e+02   4.174749e+02     00s08  00028   2.970640e+02   4.096011e+02     00s08  00029   2.883470e+02   3.177478e+03     00s09  00030   2.879291e+02   1.327702e+03     00s09  00031   2.849234e+02   2.418358e+03     00s09  00032   3.389723e+02   1.105997e+04     00s10  00033   2.812255e+02   3.313160e+03     00s10  00034   2.582597e+02   2.620795e+03     00s10  00035   4.660909e+02   5.558012e+05     00s10  00036   2.443593e+02   3.956103e+02     00s11  00037   2.426197e+02   1.322708e+03     00s11  00038   2.403997e+02   1.387258e+02     00s11  00039   2.398735e+02   6.582512e+01     00s12  00040   2.384852e+02   2.013505e+02     00s12  00041   2.369035e+02   2.626226e+02     00s12  00042   2.327802e+02   6.960744e+02     00s13  00043   2.310025e+02   2.833816e+02     00s13  00044   2.391651e+02   9.863321e+02     00s13  00045   2.284647e+02   3.063007e+02     00s14  00046   2.257950e+02   5.887170e+02     00s14  00047   2.233902e+02   2.898549e+02     00s14  00048   2.224254e+02   1.370960e+02     00s14  00049   2.226405e+02   5.551797e+02 
    00s15  00050   2.221404e+02   7.347147e+00     00s15  00051   2.220672e+02   4.801788e+00     00s15  00052   2.219480e+02   2.724641e+00     00s16  00053   2.219306e+02   1.200767e+00     00s16  00054   2.219032e+02   3.620954e-01     00s16  00055   2.218622e+02   2.120925e-01     00s17  00056   2.218338e+02   2.543882e-01     00s17  00057   2.218201e+02   2.531689e-01     00s17  00058   2.218138e+02   2.789825e-02     00s17  00059   2.218132e+02   3.497859e-03     00s18  00060   2.218131e+02   8.262683e-04     00s18  00061   2.218131e+02   6.642976e-03 
    00s18  00062   2.218131e+02   1.921954e-02     00s19  00063   2.218131e+02   1.073374e-04     00s19  00064   2.218131e+02   3.666514e-05     00s19  00065   2.218131e+02   2.722247e-05 
    00s28  00094   2.218054e+02   2.396452e-06 
Runtime:     00s28
Optimization status: Converged

Optimization restart 1/1, f = 221.80542634066705
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '128', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '50', '20'], [' ', ' ', '128', '64', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '100', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '20', '4'], [' ', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '4', '4'], [' ', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '4'], [' ', ' ', '20', '100', '20'], [' ', ' ', '20', '2048', '32'], [' ', ' ', '96', '2048', '32'], [' ', ' ', '32', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '128', '8', '16'], [' ', ' ', '8', '2048', '32'], [' ', ' ', '4', '2048', '32'], [' ', ' ', '100', '64', '16'], [' ', ' ', '128', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '20'], [' ', ' ', '4', '100', '20'], [' ', ' ', '16', '2048', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '20'], [' ', ' ', '8', '100', '20'], [' ', ' ', '16', '128', '20'], [' ', ' ', '64', '2048', '32'], [' ', ' ', '4', '100', '32'], [' ', ' ', '50', '2048', '32'], [' ', ' ', '16', '128', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '20', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '20', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '16', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '32']]
prob:  <search.SurrogateProblem object at 0x14b8c3ee3fd0>
0 OK
bestX [array([[0.5087, 0.8507, 0.4807, 0.4884, 0.4171]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7702.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7702
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7702
........................................ [2.203242, 2.166015, 2.1925]
OUTPUT:%f [2.203242, 2.166015, 2.1925] 2.1792575
store_func_eval
problem.constants
None
MLA iteration:  82
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   1.141871e+06           nan     00s00  00001   1.141871e+06   1.306629e+12 
    00s00  00002   2.960932e+05   2.963110e+11     00s01  00003   2.499743e+04   4.943331e+09     00s01  00004   1.613508e+04   2.107962e+09     00s01  00005   7.026296e+03   3.971717e+08     00s02  00006   3.742829e+03   1.067634e+08     00s02  00007   1.953001e+03   2.544075e+07     00s02  00008   1.108161e+03   6.364951e+06     00s03  00009   6.864905e+02   1.549667e+06     00s03  00010   4.837424e+02   3.712993e+05 
    00s03  00011   3.889804e+02   8.392875e+04     00s03  00012   3.480229e+02   1.709224e+04 
    00s04  00013   3.318528e+02   3.177038e+03     00s04  00014   3.248540e+02   9.133231e+02     00s04  00015   3.196574e+02   7.630753e+02 
    00s05  00016   3.136145e+02   6.907537e+02     00s05  00017   3.076899e+02   8.927381e+01     00s05  00018   3.053997e+02   7.206277e+01     00s06  00019   3.038421e+02   1.402009e+02 
    00s06  00020   3.024467e+02   3.766084e+01     00s06  00021   3.014066e+02   1.120459e+02     00s06  00022   3.012834e+02   1.880286e+03     00s07  00023   3.001206e+02   5.548563e+02     00s07  00024   3.062973e+02   4.074678e+03     00s07  00025   2.992427e+02   1.283684e+03     00s08  00026   2.965109e+02   1.758599e+03     00s08  00027   2.909185e+02   4.652395e+03     00s08  00028   2.709630e+02   3.715525e+03     00s09  00029   1.046225e+03   7.872785e+06     00s09  00030   2.501659e+02   4.665401e+02     00s09  00031   2.468176e+02   8.564282e+02     00s10  00032   2.429353e+02   8.721540e+02     00s10  00033   2.408129e+02   1.616872e+02     00s10  00034   2.395423e+02   1.219256e+02     00s10  00035   2.373513e+02   4.136714e+02     00s11  00036   2.355075e+02   1.195824e+02 
    00s11  00037   2.348169e+02   6.407990e+00     00s11  00038   2.346468e+02   1.425531e+00     00s12  00039   2.346064e+02   1.034293e+01     00s12  00040   2.344931e+02   1.176236e+01     00s12  00041   2.337702e+02   5.277451e+01     00s13  00042   2.397712e+02   3.298504e+03     00s13  00043   2.335709e+02   2.520891e+02     00s13  00044   2.326627e+02   5.489311e+02     00s13  00045   2.621615e+02   4.491532e+03     00s14  00046   2.323456e+02   7.143414e+02     00s14  00047   2.286325e+02   1.209195e+02     00s14  00048   2.276983e+02   2.883764e+02     00s15  00049   2.272752e+02   1.457929e+02     00s15  00050   2.268080e+02   6.670573e+01     00s15  00051   2.263926e+02   4.027482e+01     00s16  00052   2.259164e+02   1.710726e+01     00s16  00053   2.259056e+02   7.544671e+01     00s16  00054   2.258423e+02   3.460835e+01     00s17  00055   2.257971e+02   1.835753e-01 
    00s17  00056   2.257953e+02   2.713918e-02     00s17  00057   2.257948e+02   1.824924e-02     00s17  00058   2.257941e+02   2.007784e-02     00s18  00059   2.257918e+02   5.704149e-02     00s18  00060   2.257898e+02   5.888293e-02     00s18  00061   2.257906e+02   1.678642e-01     00s19  00062   2.257892e+02   2.924935e-02 
    00s19  00063   2.257887e+02   3.199414e-03     00s19  00064   2.257886e+02   8.536190e-05 
    00s30  00098   2.257820e+02   1.292859e-04 
Runtime:     00s30
Optimization status: Converged

Optimization restart 1/1, f = 225.7819866095719
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '128', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '50', '20'], [' ', ' ', '128', '64', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '100', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '20', '4'], [' ', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '4', '4'], [' ', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '4'], [' ', ' ', '20', '100', '20'], [' ', ' ', '20', '2048', '32'], [' ', ' ', '96', '2048', '32'], [' ', ' ', '32', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '128', '8', '16'], [' ', ' ', '8', '2048', '32'], [' ', ' ', '4', '2048', '32'], [' ', ' ', '100', '64', '16'], [' ', ' ', '128', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '20'], [' ', ' ', '4', '100', '20'], [' ', ' ', '16', '2048', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '20'], [' ', ' ', '8', '100', '20'], [' ', ' ', '16', '128', '20'], [' ', ' ', '64', '2048', '32'], [' ', ' ', '4', '100', '32'], [' ', ' ', '50', '2048', '32'], [' ', ' ', '16', '128', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '20', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '20', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '16', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '32'], [' ', ' ', '50', '50', '32']]
prob:  <search.SurrogateProblem object at 0x14b8d834c850>
0 OK
bestX [array([[0.9068, 0.4533, 0.567 , 0.2571, 0.364 ]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8944.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8944
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8944
........................................ [2.365738, 2.364964, 2.3824]
OUTPUT:%f [2.365738, 2.364964, 2.3824] 2.373682
store_func_eval
problem.constants
None
MLA iteration:  83
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   1.143475e+06           nan     00s00  00001   1.143475e+06   1.331693e+12     00s00  00002   2.962963e+05   2.962266e+11     00s01  00003   2.672634e+04   5.624883e+09     00s01  00004   1.686511e+04   2.302875e+09     00s01  00005   7.372988e+03   4.393824e+08 
    00s01  00006   3.905269e+03   1.172362e+08     00s02  00007   2.032246e+03   2.796295e+07 
    00s02  00008   1.147080e+03   6.986435e+06     00s02  00009   7.059144e+02   1.702838e+06     00s03  00010   4.934269e+02   4.090422e+05     00s03  00011   3.937411e+02   9.297833e+04 
    00s03  00012   3.503691e+02   1.909394e+04     00s04  00013   3.331852e+02   3.543577e+03     00s04  00014   3.259081e+02   9.573686e+02     00s04  00015   3.207451e+02   7.597110e+02 
    00s05  00016   3.147965e+02   7.144614e+02     00s05  00017   3.087815e+02   1.167103e+02     00s05  00018   3.066539e+02   3.873710e+01 
    00s05  00019   3.046248e+02   8.798265e+01     00s06  00020   3.089476e+02   2.833553e+02     00s06  00021   3.040222e+02   4.200428e+01     00s06  00022   3.036448e+02   1.135055e+01     00s07  00023   3.027524e+02   8.805347e+01     00s07  00024   3.020943e+02   3.008874e+03     00s07  00025   3.015733e+02   4.849879e+02     00s08  00026   3.005010e+02   1.559189e+03     00s08  00027   3.103395e+02   5.750038e+03     00s08  00028   3.001670e+02   2.145951e+03     00s09  00029   2.961137e+02   2.418543e+03     00s09  00030   2.860742e+02   3.990874e+03     00s09  00031   2.668989e+02   1.962048e+03     00s09  00032   2.454117e+02   6.846293e+02     00s10  00033   2.510846e+02   4.612745e+03     00s10  00034   2.422557e+02   8.317047e+02     00s10  00035   2.386415e+02   6.874749e+02     00s11  00036   2.373954e+02   6.768748e+01     00s11  00037   2.369130e+02   8.743199e+01     00s11  00038   2.361967e+02   3.620077e+02     00s12  00039   2.351525e+02   3.811076e+02     00s12  00040   2.333947e+02   8.716882e+01     00s12  00041   2.325412e+02   3.390995e+01     00s13  00042   2.322716e+02   5.037833e+01     00s13  00043   2.314268e+02   4.264118e+01     00s13  00044   2.449267e+02   1.901144e+03     00s13  00045   2.308268e+02   1.200991e+01     00s14  00046   2.310249e+02   1.028617e+02     00s14  00047   2.305045e+02   1.132550e+01 
    00s14  00048   2.303975e+02   1.035403e+00     00s15  00049   2.303036e+02   2.503234e+00     00s15  00050   2.302407e+02   9.891178e-01     00s15  00051   2.302181e+02   7.280065e-02     00s16  00052   2.302154e+02   7.575074e-01     00s16  00053   2.302134e+02   2.308400e-01 
    00s16  00054   2.302131e+02   2.925583e-02     00s17  00055   2.302129e+02   1.830738e-03     00s17  00056   2.302129e+02   2.097251e-03     00s17  00057   2.302129e+02   2.757466e-04     00s17  00058   2.302129e+02   2.762804e-04     00s18  00059   2.302129e+02   5.056721e-05     00s18  00060   2.302129e+02   3.760158e-05 
    00s18  00061   2.302129e+02   3.760158e-05 
Runtime:     00s18
Optimization status: Converged

Optimization restart 1/1, f = 230.2128552597074
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '128', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '50', '20'], [' ', ' ', '128', '64', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '100', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '20', '4'], [' ', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '4', '4'], [' ', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '4'], [' ', ' ', '20', '100', '20'], [' ', ' ', '20', '2048', '32'], [' ', ' ', '96', '2048', '32'], [' ', ' ', '32', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '128', '8', '16'], [' ', ' ', '8', '2048', '32'], [' ', ' ', '4', '2048', '32'], [' ', ' ', '100', '64', '16'], [' ', ' ', '128', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '20'], [' ', ' ', '4', '100', '20'], [' ', ' ', '16', '2048', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '20'], [' ', ' ', '8', '100', '20'], [' ', ' ', '16', '128', '20'], [' ', ' ', '64', '2048', '32'], [' ', ' ', '4', '100', '32'], [' ', ' ', '50', '2048', '32'], [' ', ' ', '16', '128', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '20', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '20', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '16', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '32'], [' ', ' ', '50', '50', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '16', '32']]
prob:  <search.SurrogateProblem object at 0x14b8d83f7a30>
0 OK
bestX [array([[0.7096, 0.7711, 0.9446, 0.5673, 0.1594]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5508.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5508
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5508
........................................ [0.162543, 0.159832, 0.160098]
OUTPUT:%f [0.162543, 0.159832, 0.160098] 0.159965
store_func_eval
problem.constants
None
MLA iteration:  84
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   1.146154e+06           nan     00s00  00001   1.146154e+06   1.329978e+12     00s00  00002   2.998555e+05   2.978951e+11     00s01  00003   2.661475e+04   5.614644e+09     00s01  00004   1.673122e+04   2.282263e+09     00s01  00005   7.327191e+03   4.363036e+08     00s01  00006   3.884854e+03   1.163733e+08     00s02  00007   2.026346e+03   2.779767e+07     00s02  00008   1.146453e+03   6.954706e+06     00s02  00009   7.070921e+02   1.698021e+06     00s03  00010   4.949490e+02   4.084335e+05     00s03  00011   3.952001e+02   9.288993e+04 
    00s03  00012   3.517397e+02   1.905771e+04     00s04  00013   3.345267e+02   3.528785e+03     00s04  00014   3.272500e+02   9.556610e+02     00s04  00015   3.220858e+02   7.638634e+02     00s05  00016   3.161036e+02   7.268599e+02     00s05  00017   3.095783e+02   1.940776e+02     00s05  00018   3.042193e+02   4.524187e+01     00s06  00019   3.027724e+02   1.443602e+02 
    00s06  00020   2.988142e+02   1.630708e+03     00s06  00021   2.934737e+02   2.762795e+03     00s06  00022   3.103570e+02   6.982645e+03     00s07  00023   2.846603e+02   4.972141e+03     00s07  00024   2.618458e+02   3.388405e+03     00s07  00025   2.830346e+02   3.327971e+04     00s08  00026   2.546263e+02   1.599430e+03     00s08  00027   2.442579e+02   6.999611e+02     00s08  00028   2.418933e+02   2.589416e+02 
    00s09  00029   2.410789e+02   1.291469e+02     00s09  00030   2.391544e+02   2.734184e+02     00s09  00031   2.384290e+02   4.992954e+01     00s10  00032   2.379401e+02   5.291787e+01     00s10  00033   2.377265e+02   4.721816e+01     00s10  00034   2.372453e+02   1.654868e+01     00s11  00035   2.368576e+02   9.503867e+00     00s11  00036   2.367125e+02   2.620632e+00 
    00s11  00037   2.365903e+02   3.743549e+00     00s11  00038   2.363480e+02   1.353522e+01     00s12  00039   2.351187e+02   6.732116e+02     00s12  00040   2.341575e+02   4.390488e+02     00s12  00041   2.362050e+02   1.585600e+03     00s13  00042   2.323609e+02   4.556480e+02     00s13  00043   2.343699e+02   3.100352e+03     00s13  00044   2.316634e+02   2.602025e+01     00s14  00045   2.312646e+02   7.487381e+00     00s14  00046   2.312263e+02   1.257654e+01     00s14  00047   2.311938e+02   6.132863e-01     00s15  00048   2.311862e+02   1.624592e-01 
    00s15  00049   2.311842e+02   6.280248e-02     00s15  00050   2.311832e+02   3.589903e-02     00s15  00051   2.311758e+02   4.336493e-01     00s16  00052   2.311665e+02   1.265092e+00     00s16  00053   2.311580e+02   1.030653e+00     00s16  00054   2.311548e+02   1.150410e-01     00s17  00055   2.311536e+02   3.440773e-02     00s17  00056   2.311550e+02   1.183744e+00     00s17  00057   2.311535e+02   4.642388e-04     00s18  00058   2.311535e+02   2.555365e-05 
    00s18  00059   2.311535e+02   2.295250e-05     00s18  00060   2.311535e+02   1.561069e-04     00s19  00061   2.311535e+02   5.042985e-04     00s19  00062   2.311535e+02   2.286277e-03     00s19  00063   2.311533e+02   7.120013e-03     00s26  00085   2.311449e+02   1.060611e-05 
Runtime:     00s26
Optimization status: Converged

Optimization restart 1/1, f = 231.1449206878947
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '128', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '50', '20'], [' ', ' ', '128', '64', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '100', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '20', '4'], [' ', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '4', '4'], [' ', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '4'], [' ', ' ', '20', '100', '20'], [' ', ' ', '20', '2048', '32'], [' ', ' ', '96', '2048', '32'], [' ', ' ', '32', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '128', '8', '16'], [' ', ' ', '8', '2048', '32'], [' ', ' ', '4', '2048', '32'], [' ', ' ', '100', '64', '16'], [' ', ' ', '128', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '20'], [' ', ' ', '4', '100', '20'], [' ', ' ', '16', '2048', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '20'], [' ', ' ', '8', '100', '20'], [' ', ' ', '16', '128', '20'], [' ', ' ', '64', '2048', '32'], [' ', ' ', '4', '100', '32'], [' ', ' ', '50', '2048', '32'], [' ', ' ', '16', '128', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '20', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '20', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '16', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '32'], [' ', ' ', '50', '50', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '16', '32'], [' ', ' ', '128', '64', '8']]
prob:  <search.SurrogateProblem object at 0x14b8c3f00e20>
0 OK
bestX [array([[0.564 , 0.3078, 0.4044, 0.0665, 0.4218]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4646.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4646
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4646
........................................ [2.374809, 2.515375, 2.363785]
OUTPUT:%f [2.374809, 2.515375, 2.363785] 2.4395800000000003
store_func_eval
problem.constants
None
MLA iteration:  85
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   1.150617e+06           nan     00s00  00001   1.150617e+06   1.334386e+12     00s00  00002   3.009713e+05   2.995747e+11     00s01  00003   2.650526e+04   5.563835e+09 
    00s01  00004   1.669958e+04   2.271332e+09     00s01  00005   7.307957e+03   4.336177e+08     00s01  00006   3.875951e+03   1.157583e+08     00s02  00007   2.021309e+03   2.764509e+07     00s02  00008   1.143600e+03   6.914210e+06     00s02  00009   7.056142e+02   1.686440e+06 
    00s03  00010   4.944790e+02   4.051270e+05 
    00s03  00011   3.954158e+02   9.200008e+04     00s03  00012   3.523534e+02   1.884366e+04     00s04  00013   3.353225e+02   3.490495e+03     00s04  00014   3.280952e+02   9.612726e+02     00s04  00015   3.228910e+02   7.918722e+02     00s05  00016   3.166805e+02   8.090347e+02     00s05  00017   3.084737e+02   4.169359e+02     00s05  00018   3.059501e+02   1.570305e+02     00s06  00019   3.007766e+02   4.927351e+02     00s06  00020   2.786898e+02   4.160724e+03 
    00s06  00021   2.707923e+02   1.659446e+03     00s06  00022   2.595386e+02   7.787490e+02     00s07  00023   2.566177e+02   6.238533e+03     00s07  00024   2.756779e+02   8.929074e+03     00s07  00025   2.492410e+02   3.015297e+02     00s08  00026   2.452810e+02   1.729005e+02     00s08  00027   2.412269e+02   1.378018e+02     00s08  00028   2.384548e+02   2.258061e+02     00s09  00029   2.366923e+02   5.620033e+02 
    00s09  00030   2.351039e+02   2.426650e+02     00s09  00031   2.330201e+02   2.685899e+01     00s10  00032   2.327163e+02   2.349177e+01     00s10  00033   2.324936e+02   8.841060e+00     00s10  00034   2.323614e+02   3.615873e+00     00s11  00035   2.322456e+02   3.051161e+00     00s11  00036   2.320507e+02   2.908299e+00     00s11  00037   2.317985e+02   2.194456e+01 
    00s12  00038   2.316956e+02   5.473310e+00     00s12  00039   2.316655e+02   7.592676e-01     00s12  00040   2.316478e+02   8.071707e-02     00s12  00041   2.316441e+02   1.619902e-02     00s13  00042   2.316442e+02   4.202560e-01 
    00s13  00043   2.316434e+02   5.831798e-02     00s13  00044   2.316431e+02   3.389333e-03     00s14  00045   2.316430e+02   9.755244e-04     00s14  00046   2.316430e+02   4.530786e-05     00s14  00047   2.316430e+02   2.129129e-05     00s15  00048   2.316430e+02   2.129129e-05 
Runtime:     00s15
Optimization status: Converged

Optimization restart 1/1, f = 231.6430460999681
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '128', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '50', '20'], [' ', ' ', '128', '64', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '100', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '20', '4'], [' ', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '4', '4'], [' ', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '4'], [' ', ' ', '20', '100', '20'], [' ', ' ', '20', '2048', '32'], [' ', ' ', '96', '2048', '32'], [' ', ' ', '32', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '128', '8', '16'], [' ', ' ', '8', '2048', '32'], [' ', ' ', '4', '2048', '32'], [' ', ' ', '100', '64', '16'], [' ', ' ', '128', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '20'], [' ', ' ', '4', '100', '20'], [' ', ' ', '16', '2048', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '20'], [' ', ' ', '8', '100', '20'], [' ', ' ', '16', '128', '20'], [' ', ' ', '64', '2048', '32'], [' ', ' ', '4', '100', '32'], [' ', ' ', '50', '2048', '32'], [' ', ' ', '16', '128', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '20', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '20', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '16', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '32'], [' ', ' ', '50', '50', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '16', '32'], [' ', ' ', '128', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '4', '32']]
prob:  <search.SurrogateProblem object at 0x14b8d8abffd0>
0 OK
bestX [array([[0.9334, 0.471 , 0.9922, 0.659 , 0.1599]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9701.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9701
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9701
........................................ [0.465, 0.460628, 0.452926]
OUTPUT:%f [0.465, 0.460628, 0.452926] 0.456777
store_func_eval
problem.constants
None
MLA iteration:  86
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   1.177071e+06           nan     00s00  00001   1.177071e+06   1.434342e+12     00s00  00002   3.033034e+05   3.085514e+11     00s01  00003   3.046636e+04   7.255614e+09     00s01  00004   1.842990e+04   2.753603e+09     00s01  00005   8.128088e+03   5.375980e+08 
    00s01  00006   4.271311e+03   1.418583e+08     00s02  00007   2.215992e+03   3.398196e+07     00s02  00008   1.239166e+03   8.482232e+06     00s02  00009   7.524310e+02   2.070346e+06     00s03  00010   5.173276e+02   4.986009e+05 
    00s03  00011   4.065096e+02   1.142764e+05     00s03  00012   3.577577e+02   2.381801e+04     00s04  00013   3.382577e+02   4.427289e+03     00s04  00014   3.302633e+02   1.080851e+03     00s04  00015   3.250369e+02   7.814830e+02     00s05  00016   3.190358e+02   8.330047e+02     00s05  00017   3.112449e+02   4.940427e+02 
    00s05  00018   3.078644e+02   2.095729e+02     00s06  00019   3.020093e+02   4.826908e+02     00s06  00020   2.763528e+02   3.873265e+03     00s06  00021   2.682618e+02   1.163338e+03     00s07  00022   2.583241e+02   4.198139e+02     00s07  00023   2.621520e+02   2.973095e+03     00s07  00024   2.548053e+02   6.087258e+02     00s08  00025   2.505608e+02   8.574601e+03     00s08  00026   2.448464e+02   1.229215e+03     00s08  00027   2.413516e+02   8.540894e+01     00s08  00028   2.403697e+02   5.246356e+01 
    00s09  00029   2.401029e+02   1.591038e+01     00s09  00030   2.399515e+02   9.203923e+00     00s09  00031   2.396488e+02   7.584710e+01     00s10  00032   2.390199e+02   3.991531e+02     00s10  00033   2.512470e+02   5.047365e+03     00s10  00034   2.386620e+02   7.674232e+02     00s11  00035   2.379830e+02   1.192875e+03     00s11  00036   2.364590e+02   8.982797e+02     00s11  00037   2.334841e+02   2.307304e+02     00s12  00038   2.333532e+02   1.031786e+02     00s12  00039   2.328163e+02   2.946918e+00 
    00s12  00040   2.327760e+02   3.038329e+00     00s13  00041   2.327649e+02   6.197124e-01     00s13  00042   2.327498e+02   6.042806e-01     00s13  00043   2.327341e+02   1.081456e+00     00s14  00044   2.327251e+02   3.909381e-01     00s14  00045   2.327225e+02   6.432351e-02     00s14  00046   2.327216e+02   2.356738e-02     00s14  00047   2.327203e+02   6.993867e-02     00s15  00048   2.327177e+02   2.481870e-01     00s15  00049   2.327140e+02   3.313787e-01     00s15  00050   2.327158e+02   3.978059e+00     00s16  00051   2.327129e+02   8.343828e-01     00s16  00052   2.327105e+02   1.301758e-01 
    00s16  00053   2.327101e+02   2.391302e-03     00s17  00054   2.327101e+02   7.823189e-05     00s17  00055   2.327101e+02   1.871191e-05 
    00s17  00056   2.327101e+02   1.953785e-05     00s18  00057   2.327101e+02   1.953785e-05 
Runtime:     00s18
Optimization status: Converged

Optimization restart 1/1, f = 232.71005433330387
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '128', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '50', '20'], [' ', ' ', '128', '64', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '100', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '20', '4'], [' ', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '4', '4'], [' ', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '4'], [' ', ' ', '20', '100', '20'], [' ', ' ', '20', '2048', '32'], [' ', ' ', '96', '2048', '32'], [' ', ' ', '32', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '128', '8', '16'], [' ', ' ', '8', '2048', '32'], [' ', ' ', '4', '2048', '32'], [' ', ' ', '100', '64', '16'], [' ', ' ', '128', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '20'], [' ', ' ', '4', '100', '20'], [' ', ' ', '16', '2048', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '20'], [' ', ' ', '8', '100', '20'], [' ', ' ', '16', '128', '20'], [' ', ' ', '64', '2048', '32'], [' ', ' ', '4', '100', '32'], [' ', ' ', '50', '2048', '32'], [' ', ' ', '16', '128', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '20', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '20', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '16', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '32'], [' ', ' ', '50', '50', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '16', '32'], [' ', ' ', '128', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '4', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '8']]
prob:  <search.SurrogateProblem object at 0x14b8c3be85e0>
0 OK
bestX [array([[0.5547, 0.6816, 0.4001, 0.1312, 0.4257]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8860.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8860
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8860
........................................ [2.275961, 2.255429, 2.244864]
OUTPUT:%f [2.275961, 2.255429, 2.244864] 2.2501465
store_func_eval
problem.constants
None
MLA iteration:  87
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   1.177672e+06           nan     00s00  00001   1.177672e+06   1.441659e+12     00s00  00002   3.035778e+05   3.085459e+11     00s01  00003   3.086823e+04   7.441846e+09     00s01  00004   1.857423e+04   2.797282e+09     00s01  00005   8.202734e+03   5.478214e+08     00s01  00006   4.307293e+03   1.443679e+08 
    00s02  00007   2.235008e+03   3.461557e+07     00s02  00008   1.249198e+03   8.644711e+06     00s02  00009   7.577590e+02   2.111542e+06     00s03  00010   5.202006e+02   5.085727e+05     00s03  00011   4.082240e+02   1.165021e+05     00s03  00012   3.590043e+02   2.426244e+04     00s04  00013   3.393557e+02   4.501875e+03     00s04  00014   3.313403e+02   1.092497e+03 
    00s04  00015   3.261302e+02   7.893488e+02     00s05  00016   3.201197e+02   8.565829e+02     00s05  00017   3.122142e+02   5.357991e+02     00s05  00018   3.089821e+02   2.094873e+02     00s06  00019   3.035195e+02   4.594421e+02     00s06  00020   2.736509e+02   3.397810e+03     00s06  00021   2.731103e+02   1.826139e+03     00s07  00022   2.697748e+02   2.657221e+03     00s07  00023   2.752870e+02   1.037078e+04     00s07  00024   2.639867e+02   1.011162e+03     00s08  00025   2.545210e+02   1.891361e+03     00s08  00026   2.507450e+02   3.716910e+02     00s08  00027   2.480059e+02   1.901485e+02     00s08  00028   2.431002e+02   5.026961e+02     00s09  00029   2.413936e+02   1.871312e+02 
    00s09  00030   2.409216e+02   4.447919e+01     00s09  00031   2.406804e+02   6.371769e+00     00s10  00032   2.405870e+02   6.590389e+00     00s10  00033   2.402810e+02   1.486684e+01     00s10  00034   2.384342e+02   7.631576e+01     00s11  00035   2.550351e+02   4.436828e+03     00s11  00036   2.372811e+02   3.744453e+02     00s11  00037   3.087318e+02   6.472315e+03     00s12  00038   2.369707e+02   4.976101e+02     00s12  00039   2.363184e+02   2.516465e+02     00s12  00040   2.355984e+02   1.234406e+02     00s13  00041   2.340610e+02   8.286964e+00     00s13  00042   2.338951e+02   1.244043e+02 
    00s13  00043   2.336433e+02   7.178290e+00     00s14  00044   2.335684e+02   2.452026e+00     00s14  00045   2.334877e+02   4.637220e+00     00s14  00046   2.334993e+02   5.615468e+00     00s15  00047   2.334738e+02   2.082447e+00     00s15  00048   2.334691e+02   6.626959e-02     00s15  00049   2.334681e+02   2.111067e-01     00s16  00050   2.334646e+02   1.466543e+00     00s16  00051   2.334583e+02   4.200082e+00     00s16  00052   2.334469e+02   7.201609e+00     00s16  00053   2.334360e+02   4.514974e+00     00s17  00054   2.334301e+02   5.716049e-01 
    00s17  00055   2.334293e+02   7.091439e-03     00s17  00056   2.334293e+02   2.668614e-04     00s18  00057   2.334293e+02   2.249658e-05 
    00s18  00058   2.334293e+02   2.600312e-05     00s18  00059   2.334293e+02   2.600312e-05 
Runtime:     00s18
Optimization status: Converged

Optimization restart 1/1, f = 233.42927258579834
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '128', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '50', '20'], [' ', ' ', '128', '64', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '100', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '20', '4'], [' ', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '4', '4'], [' ', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '4'], [' ', ' ', '20', '100', '20'], [' ', ' ', '20', '2048', '32'], [' ', ' ', '96', '2048', '32'], [' ', ' ', '32', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '128', '8', '16'], [' ', ' ', '8', '2048', '32'], [' ', ' ', '4', '2048', '32'], [' ', ' ', '100', '64', '16'], [' ', ' ', '128', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '20'], [' ', ' ', '4', '100', '20'], [' ', ' ', '16', '2048', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '20'], [' ', ' ', '8', '100', '20'], [' ', ' ', '16', '128', '20'], [' ', ' ', '64', '2048', '32'], [' ', ' ', '4', '100', '32'], [' ', ' ', '50', '2048', '32'], [' ', ' ', '16', '128', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '20', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '20', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '16', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '32'], [' ', ' ', '50', '50', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '16', '32'], [' ', ' ', '128', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '4', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '8'], [' ', ' ', '32', '8', '32']]
prob:  <search.SurrogateProblem object at 0x14b8d840deb0>
0 OK
bestX [array([[0.8528, 0.3106, 0.4314, 0.114 , 0.4028]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3596.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3596
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3596
........................................ [2.352334, 2.336432, 2.552177]
OUTPUT:%f [2.352334, 2.336432, 2.552177] 2.4443045
store_func_eval
problem.constants
None
MLA iteration:  88
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   1.179841e+06           nan 
    00s00  00001   1.179841e+06   1.444122e+12     00s00  00002   3.049942e+05   3.105125e+11     00s01  00003   3.073201e+04   7.374272e+09     00s01  00004   1.853946e+04   2.784125e+09     00s01  00005   8.184180e+03   5.446381e+08 
    00s02  00006   4.298797e+03   1.436077e+08     00s02  00007   2.229971e+03   3.441165e+07     00s02  00008   1.246158e+03   8.586381e+06     00s03  00009   7.559697e+02   2.093709e+06     00s03  00010   5.193588e+02   5.031124e+05 
    00s03  00011   4.080637e+02   1.149420e+05 
    00s03  00012   3.592552e+02   2.385882e+04     00s04  00013   3.398127e+02   4.405054e+03     00s04  00014   3.319023e+02   1.066677e+03     00s04  00015   3.267920e+02   7.673668e+02     00s05  00016   3.210454e+02   7.756056e+02     00s05  00017   3.147753e+02   2.365593e+02     00s05  00018   3.109638e+02   1.107652e+02     00s06  00019   3.069552e+02   1.425776e+02     00s06  00020   3.056924e+02   8.421120e+01     00s06  00021   3.050642e+02   3.070409e+01     00s07  00022   3.043912e+02   1.624974e+01 
    00s07  00023   3.039145e+02   1.389861e+01     00s07  00024   3.053803e+02   2.601475e+02     00s08  00025   3.034715e+02   2.691712e+01     00s08  00026   3.025976e+02   5.895649e+01     00s08  00027   3.009630e+02   4.032180e+02     00s09  00028   3.215871e+02   5.534854e+03     00s09  00029   2.992616e+02   9.350125e+02     00s09  00030   2.981142e+02   1.655113e+03     00s10  00031   4.156887e+02   1.100488e+01     00s10  00032   4.097109e+02   3.130967e+02     00s10  00033   2.976597e+02   2.538405e+03     00s11  00034   2.958248e+02   2.019132e+03     00s11  00035   2.886348e+02   4.392939e+02     00s11  00036   2.825195e+02   8.977482e+02     00s12  00037   3.086476e+02   5.291597e+03     00s12  00038   2.788466e+02   2.514392e+03     00s12  00039   2.831300e+02   2.558507e+03     00s13  00040   2.772864e+02   2.976674e+03     00s13  00041   2.727288e+02   3.193545e+02     00s13  00042   2.709821e+02   3.381335e+02     00s14  00043   2.654646e+02   1.299337e+03     00s14  00044   2.627601e+02   7.200037e+02     00s14  00045   2.588982e+02   3.776901e+02     00s14  00046   2.606553e+02   9.548430e+02     00s15  00047   2.583045e+02   1.075311e+02     00s15  00048   2.581490e+02   1.116926e+01 
    00s15  00049   2.579981e+02   4.011903e+00     00s16  00050   2.577209e+02   4.372082e-01     00s16  00051   2.576358e+02   3.337710e+00     00s16  00052   2.576220e+02   5.130087e-01     00s17  00053   2.575979e+02   2.325701e+00     00s17  00054   2.575825e+02   4.312674e+00     00s17  00055   2.575216e+02   9.838018e+00     00s18  00056   2.574262e+02   1.248141e+01     00s18  00057   2.573302e+02   5.889355e+01     00s18  00058   2.572286e+02   7.939429e+00     00s19  00059   2.571694e+02   6.598720e-01     00s19  00060   2.571460e+02   3.405732e+00     00s19  00061   2.571202e+02   9.696296e-01 
    00s30  00094   2.570483e+02   5.732660e-05 
Runtime:     00s30
Optimization status: Converged

Optimization restart 1/1, f = 257.0482721763824
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '128', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '50', '20'], [' ', ' ', '128', '64', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '100', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '20', '4'], [' ', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '4', '4'], [' ', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '4'], [' ', ' ', '20', '100', '20'], [' ', ' ', '20', '2048', '32'], [' ', ' ', '96', '2048', '32'], [' ', ' ', '32', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '128', '8', '16'], [' ', ' ', '8', '2048', '32'], [' ', ' ', '4', '2048', '32'], [' ', ' ', '100', '64', '16'], [' ', ' ', '128', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '20'], [' ', ' ', '4', '100', '20'], [' ', ' ', '16', '2048', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '20'], [' ', ' ', '8', '100', '20'], [' ', ' ', '16', '128', '20'], [' ', ' ', '64', '2048', '32'], [' ', ' ', '4', '100', '32'], [' ', ' ', '50', '2048', '32'], [' ', ' ', '16', '128', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '20', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '20', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '16', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '32'], [' ', ' ', '50', '50', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '16', '32'], [' ', ' ', '128', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '4', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '8'], [' ', ' ', '32', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '8', '32']]
prob:  <search.SurrogateProblem object at 0x14b8d8af6c40>
0 OK
bestX [array([[0.5181, 0.3912, 0.765 , 0.0239, 0.41  ]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2560.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2560
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2560
........................................ [2.38497, 2.378872, 2.339562]
OUTPUT:%f [2.38497, 2.378872, 2.339562] 2.359217
store_func_eval
problem.constants
None
MLA iteration:  89
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   1.180763e+06           nan     00s00  00001   1.180763e+06   1.438110e+12     00s00  00002   3.061634e+05   3.131384e+11 
    00s01  00003   2.972512e+04   6.931444e+09     00s01  00004   1.817506e+04   2.681046e+09     00s01  00005   7.999988e+03   5.204623e+08     00s02  00006   4.213633e+03   1.377763e+08 
    00s02  00007   2.187871e+03   3.298326e+07     00s02  00008   1.225801e+03   8.234963e+06 
    00s03  00009   7.462779e+02   2.007025e+06     00s03  00010   5.150833e+02   4.817567e+05     00s03  00011   4.065678e+02   1.097513e+05     00s03  00012   3.591838e+02   2.266896e+04     00s04  00013   3.404095e+02   4.172033e+03     00s04  00014   3.327531e+02   1.033972e+03     00s04  00015   3.277144e+02   7.671160e+02     00s05  00016   3.219784e+02   7.681269e+02     00s05  00017   3.157275e+02   2.125978e+02 
    00s05  00018   3.117816e+02   9.475277e+01     00s06  00019   3.145595e+02   3.498345e+02     00s06  00020   3.101561e+02   1.255687e+01     00s06  00021   3.099731e+02   7.955332e+00     00s07  00022   3.097500e+02   1.467937e+01     00s07  00023   3.076925e+02   2.648103e+02     00s07  00024   3.086715e+02   5.136503e+03     00s08  00025   3.028993e+02   2.502033e+03     00s08  00026   5.415604e+02   1.840621e+04     00s08  00027   3.028244e+02   3.123005e+03     00s09  00028   3.009932e+02   3.067629e+03     00s09  00029   2.944910e+02   2.694429e+03     00s09  00030   3.326811e+02   1.587268e+04     00s10  00031   2.823026e+02   2.036499e+03     00s10  00032   2.710420e+02   4.785433e+02     00s10  00033   2.598360e+02   1.079008e+03     00s11  00034   2.548176e+02   1.452137e+02     00s11  00035   2.523777e+02   9.529235e+01     00s11  00036   2.478401e+02   9.631398e+01     00s12  00037   2.457269e+02   3.003966e+02     00s12  00038   2.642598e+02   2.841579e+03     00s12  00039   2.436882e+02   3.642917e+02     00s13  00040   2.394517e+02   2.434811e+02     00s13  00041   2.378138e+02   7.528181e+01     00s13  00042   2.376669e+02   1.688333e+02     00s14  00043   2.370617e+02   3.027296e+01     00s14  00044   2.368952e+02   2.345483e+01 
    00s14  00045   2.366877e+02   8.300252e+00     00s14  00046   2.366200e+02   1.901917e+00     00s15  00047   2.365460e+02   3.319292e+00     00s15  00048   2.364736e+02   5.736537e+00     00s15  00049   2.363598e+02   7.042311e+00     00s16  00050   2.362662e+02   5.058971e+01     00s16  00051   2.361677e+02   1.356469e+00     00s16  00052   2.361506e+02   2.755682e-01     00s17  00053   2.361453e+02   2.429716e-01     00s17  00054   2.361509e+02   2.079925e+00     00s17  00055   2.361447e+02   2.236949e-01 
    00s18  00056   2.361436e+02   1.128302e-02     00s18  00057   2.361436e+02   4.221878e-04     00s18  00058   2.361436e+02   2.388116e-05     00s19  00059   2.361436e+02   1.445360e-05 
    00s19  00060   2.361436e+02   1.445360e-05 
Runtime:     00s19
Optimization status: Converged

Optimization restart 1/1, f = 236.1436043693629
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '128', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '50', '20'], [' ', ' ', '128', '64', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '100', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '20', '4'], [' ', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '4', '4'], [' ', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '4'], [' ', ' ', '20', '100', '20'], [' ', ' ', '20', '2048', '32'], [' ', ' ', '96', '2048', '32'], [' ', ' ', '32', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '128', '8', '16'], [' ', ' ', '8', '2048', '32'], [' ', ' ', '4', '2048', '32'], [' ', ' ', '100', '64', '16'], [' ', ' ', '128', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '20'], [' ', ' ', '4', '100', '20'], [' ', ' ', '16', '2048', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '20'], [' ', ' ', '8', '100', '20'], [' ', ' ', '16', '128', '20'], [' ', ' ', '64', '2048', '32'], [' ', ' ', '4', '100', '32'], [' ', ' ', '50', '2048', '32'], [' ', ' ', '16', '128', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '20', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '20', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '16', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '32'], [' ', ' ', '50', '50', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '16', '32'], [' ', ' ', '128', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '4', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '8'], [' ', ' ', '32', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '4', '32']]
prob:  <search.SurrogateProblem object at 0x14b8d8b578e0>
0 OK
bestX [array([[0.7449, 0.078 , 0.9547, 0.9094, 0.1322]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7942.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7942
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7942
........................................ [0.451487, 0.455964, 0.454062]
OUTPUT:%f [0.451487, 0.455964, 0.454062] 0.455013
store_func_eval
problem.constants
None
MLA iteration:  90
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   1.202434e+06           nan     00s00  00001   1.202434e+06   1.468270e+12 
    00s00  00002   3.090613e+05   3.218908e+11     00s01  00003   2.918165e+04   6.694157e+09     00s01  00004   1.806955e+04   2.651377e+09     00s01  00005   7.920779e+03   5.102228e+08     00s02  00006   4.180552e+03   1.355661e+08 
    00s02  00007   2.170639e+03   3.241248e+07     00s02  00008   1.217691e+03   8.095789e+06     00s03  00009   7.425857e+02   1.972186e+06     00s03  00010   5.137194e+02   4.731387e+05 
    00s03  00011   4.064175e+02   1.076290e+05     00s04  00012   3.596758e+02   2.217496e+04 
    00s04  00013   3.412103e+02   4.079354e+03     00s04  00014   3.336554e+02   1.033665e+03     00s05  00015   3.285721e+02   8.044366e+02     00s05  00016   3.224999e+02   8.972391e+02     00s05  00017   3.145436e+02   5.487759e+02     00s05  00018   3.111948e+02   8.755427e+01     00s06  00019   3.100044e+02   1.234102e+02 
    00s06  00020   3.018702e+02   8.180840e+02     00s06  00021   3.008540e+02   1.578817e+03     00s07  00022   2.875185e+02   1.544788e+03     00s07  00023   3.107525e+02   4.635514e+03     00s07  00024   2.861560e+02   2.129964e+03     00s08  00025   2.745249e+02   2.051445e+03     00s08  00026   2.651433e+02   2.420560e+02     00s08  00027   2.592225e+02   2.041905e+02     00s09  00028   2.538712e+02   1.589219e+02     00s09  00029   2.523458e+02   1.838150e+02     00s09  00030   2.518472e+02   4.089095e+01     00s10  00031   2.511954e+02   3.987355e+01     00s10  00032   2.489700e+02   1.062395e+02     00s10  00033   2.730301e+02   3.368681e+03     00s11  00034   2.473862e+02   2.065229e+02     00s11  00035   2.875991e+02   8.557003e+03     00s11  00036   2.463491e+02   2.730752e+02     00s12  00037   2.439278e+02   1.997993e+02     00s12  00038   2.403263e+02   1.077578e+02     00s12  00039   2.395301e+02   4.267635e+02 
    00s13  00040   2.390004e+02   5.916717e+01     00s13  00041   2.388394e+02   7.342202e+01     00s13  00042   2.386609e+02   1.721235e+01     00s14  00043   2.384713e+02   4.821964e+00     00s14  00044   2.382945e+02   1.050209e+01     00s14  00045   2.380976e+02   1.609599e+01     00s15  00046   2.379726e+02   2.195692e+01     00s15  00047   2.377797e+02   7.230918e+00 
    00s15  00048   2.375345e+02   4.907835e+00     00s16  00049   2.372788e+02   5.388630e+00     00s16  00050   2.371127e+02   8.251775e-01     00s16  00051   2.372480e+02   1.066694e+02     00s17  00052   2.371045e+02   1.952428e+00     00s17  00053   2.370717e+02   8.252665e-01     00s17  00054   2.370617e+02   3.625991e-01     00s17  00055   2.370615e+02   2.477264e+00     00s18  00056   2.370592e+02   3.743086e-01 
    00s18  00057   2.370567e+02   2.495694e-02     00s18  00058   2.370564e+02   1.121209e-02     00s19  00059   2.370560e+02   5.336464e-03     00s19  00060   2.370559e+02   1.627032e-03     00s19  00061   2.370559e+02   1.587090e-03     00s20  00064   2.370559e+02   1.361882e-05 
Runtime:     00s20
Optimization status: Converged

Optimization restart 1/1, f = 237.05586804474495
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '128', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '50', '20'], [' ', ' ', '128', '64', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '100', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '20', '4'], [' ', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '4', '4'], [' ', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '4'], [' ', ' ', '20', '100', '20'], [' ', ' ', '20', '2048', '32'], [' ', ' ', '96', '2048', '32'], [' ', ' ', '32', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '128', '8', '16'], [' ', ' ', '8', '2048', '32'], [' ', ' ', '4', '2048', '32'], [' ', ' ', '100', '64', '16'], [' ', ' ', '128', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '20'], [' ', ' ', '4', '100', '20'], [' ', ' ', '16', '2048', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '20'], [' ', ' ', '8', '100', '20'], [' ', ' ', '16', '128', '20'], [' ', ' ', '64', '2048', '32'], [' ', ' ', '4', '100', '32'], [' ', ' ', '50', '2048', '32'], [' ', ' ', '16', '128', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '20', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '20', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '16', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '32'], [' ', ' ', '50', '50', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '16', '32'], [' ', ' ', '128', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '4', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '8'], [' ', ' ', '32', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '4', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '2048', '8']]
prob:  <search.SurrogateProblem object at 0x14b8c3e69190>
0 OK
bestX [array([[0.5015, 0.279 , 0.0732, 0.7621, 0.0685]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/745.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/745
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/745
........................................ [0.427783, 0.42338, 0.514485]
OUTPUT:%f [0.427783, 0.42338, 0.514485] 0.4689325
store_func_eval
problem.constants
None
MLA iteration:  91
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   1.209531e+06           nan     00s00  00001   1.209531e+06   1.457663e+12     00s00  00002   3.146558e+05   3.327518e+11     00s01  00003   2.601508e+04   5.393696e+09     00s01  00004   1.682545e+04   2.309952e+09 
    00s01  00005   7.314608e+03   4.339555e+08     00s02  00006   3.895998e+03   1.167427e+08     00s02  00007   2.029311e+03   2.779812e+07     00s02  00008   1.147957e+03   6.945122e+06 
    00s03  00009   7.082221e+02   1.685549e+06     00s03  00010   4.973204e+02   4.021382e+05     00s03  00011   3.991280e+02   9.051250e+04     00s04  00012   3.568670e+02   1.833452e+04     00s04  00013   3.403420e+02   3.351295e+03     00s04  00014   3.334085e+02   9.358815e+02     00s05  00015   3.284101e+02   7.972262e+02     00s05  00016   3.223724e+02   8.105532e+02     00s05  00017   3.145341e+02   3.620431e+02 
    00s06  00018   3.127449e+02   1.074325e+02     00s06  00019   3.098051e+02   2.700480e+02     00s06  00020   2.890812e+02   1.170717e+03     00s07  00021   3.586736e+02   4.621433e+03     00s07  00022   2.847406e+02   2.160616e+03     00s07  00023   2.776540e+02   2.145447e+03     00s08  00024   2.716840e+02   6.850056e+03     00s08  00025   2.077732e+03   5.852062e+07     00s08  00026   2.517144e+02   4.625265e+02     00s09  00027   2.477056e+02   5.425674e+02     00s09  00028   3.616086e+02   4.841761e+04     00s09  00029   2.466883e+02   5.391957e+02     00s10  00030   2.540182e+02   9.657891e+03     00s10  00031   2.447629e+02   4.731862e+02     00s10  00032   2.427625e+02   2.504280e+02     00s11  00033   2.392459e+02   2.536995e+02 
    00s11  00034   2.381850e+02   7.645829e+01     00s11  00035   2.377277e+02   1.393588e+01     00s12  00036   2.376124e+02   2.094357e+01     00s12  00037   2.373406e+02   1.557826e+01     00s12  00038   2.369562e+02   1.545483e+01     00s13  00039   2.367413e+02   2.018791e+01     00s13  00040   2.365679e+02   4.481629e+01     00s13  00041   2.364332e+02   1.566005e+01     00s14  00042   2.363345e+02   5.005672e+00 
    00s14  00043   2.362699e+02   2.203768e+00     00s14  00044   2.361869e+02   1.879804e+00     00s14  00045   2.361617e+02   4.950411e-01     00s15  00046   2.361596e+02   1.211300e+00     00s15  00047   2.361560e+02   8.324874e-02     00s15  00048   2.361534e+02   1.321925e-01     00s16  00049   2.361509e+02   3.065824e-01     00s16  00050   2.361493e+02   1.247335e-01     00s16  00051   2.361493e+02   1.823385e-01 
    00s17  00052   2.361492e+02   4.412751e-02     00s17  00053   2.361490e+02   2.756353e-03     00s17  00054   2.361490e+02   1.192391e-03     00s18  00055   2.361489e+02   7.522288e-04     00s18  00056   2.361489e+02   1.820131e-04     00s18  00057   2.361489e+02   7.960387e-05     00s19  00058   2.361489e+02   2.373312e-05     00s19  00059   2.361489e+02   2.373312e-05 
Runtime:     00s19
Optimization status: Converged

Optimization restart 1/1, f = 236.14893800560682
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '128', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '50', '20'], [' ', ' ', '128', '64', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '100', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '20', '4'], [' ', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '4', '4'], [' ', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '4'], [' ', ' ', '20', '100', '20'], [' ', ' ', '20', '2048', '32'], [' ', ' ', '96', '2048', '32'], [' ', ' ', '32', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '128', '8', '16'], [' ', ' ', '8', '2048', '32'], [' ', ' ', '4', '2048', '32'], [' ', ' ', '100', '64', '16'], [' ', ' ', '128', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '20'], [' ', ' ', '4', '100', '20'], [' ', ' ', '16', '2048', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '20'], [' ', ' ', '8', '100', '20'], [' ', ' ', '16', '128', '20'], [' ', ' ', '64', '2048', '32'], [' ', ' ', '4', '100', '32'], [' ', ' ', '50', '2048', '32'], [' ', ' ', '16', '128', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '20', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '20', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '16', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '32'], [' ', ' ', '50', '50', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '16', '32'], [' ', ' ', '128', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '4', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '8'], [' ', ' ', '32', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '4', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '2048', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '100', '4']]
prob:  <search.SurrogateProblem object at 0x14b8d8b2b8e0>
0 OK
bestX [array([[0.9951, 0.2482, 0.0476, 0.3615, 0.035 ]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2701.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2701
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2701
........................................ [0.428645, 0.425054, 0.425073]
OUTPUT:%f [0.428645, 0.425054, 0.425073] 0.4250635
store_func_eval
problem.constants
None
MLA iteration:  92
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   1.229325e+06           nan     00s00  00001   1.229325e+06   1.464416e+12 
    00s00  00002   3.289214e+05   3.487589e+11     00s01  00003   2.355843e+04   4.557850e+09     00s01  00004   1.562748e+04   2.038577e+09     00s01  00005   6.793821e+03   3.790534e+08     00s02  00006   3.648545e+03   1.028249e+08     00s02  00007   1.911144e+03   2.445261e+07     00s02  00008   1.091112e+03   6.111804e+06 
    00s03  00009   6.814410e+02   1.480153e+06     00s03  00010   4.853767e+02   3.519923e+05     00s03  00011   3.944153e+02   7.869506e+04     00s04  00012   3.554913e+02   1.574817e+04     00s04  00013   3.402938e+02   2.873460e+03     00s05  00014   3.337175e+02   8.859993e+02     00s05  00015   3.286731e+02   8.341199e+02     00s05  00016   3.224541e+02   8.528880e+02     00s06  00017   3.144434e+02   4.345334e+02 
    00s06  00018   3.100381e+02   6.138701e+02     00s06  00019   3.076637e+02   1.477931e+02     00s07  00020   3.072730e+02   1.141689e+01     00s07  00021   3.071460e+02   1.175601e+01     00s07  00022   3.066862e+02   2.266246e+01     00s08  00023   3.096367e+02   3.321477e+03     00s08  00024   3.046374e+02   2.117632e+02     00s08  00025   3.033771e+02   8.892573e+02     00s09  00026   4.467212e+02   2.481919e+01     00s09  00027   3.043728e+02   3.500573e+03     00s09  00028   3.024272e+02   1.865562e+03     00s10  00029   3.010469e+02   2.689721e+03     00s10  00030   2.947708e+02   1.188804e+03     00s11  00031   2.929123e+02   2.712312e+03 
    00s11  00032   2.908688e+02   1.148582e+01     00s11  00033   2.906048e+02   1.062905e+02     00s12  00034   2.904501e+02   1.024131e+02     00s12  00035   2.900072e+02   3.913592e+01     00s12  00036   3.083170e+02   8.361516e+03     00s13  00037   2.881119e+02   3.188850e+02     00s13  00038   2.875887e+02   8.667463e+02     00s13  00039   2.910143e+02   4.794372e+03     00s14  00040   2.872253e+02   1.423317e+03     00s14  00041   2.852528e+02   1.535244e+03     00s14  00042   3.247776e+02   6.275583e+03     00s15  00043   2.818531e+02   3.214630e+03     00s15  00044   2.690477e+02   9.456740e+02     00s15  00045   2.637197e+02   2.253219e+02     00s16  00046   2.622058e+02   3.437970e+02 
    00s16  00047   2.617912e+02   8.211110e+00     00s16  00048   2.617479e+02   2.500302e+00     00s17  00049   2.617087e+02   1.965204e+00     00s17  00050   2.615808e+02   6.659799e+00     00s18  00051   2.615494e+02   5.466684e-01     00s18  00052   2.615427e+02   9.094822e-01     00s18  00053   2.615131e+02   3.992645e+00     00s19  00054   2.614539e+02   1.084415e+01     00s19  00055   2.613288e+02   1.929053e+01     00s19  00056   2.611257e+02   1.869611e+01 
    00s35  00103   2.605304e+02   7.946036e-05 
Runtime:     00s35
Optimization status: Converged

Optimization restart 1/1, f = 260.5303561951321
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '128', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '50', '20'], [' ', ' ', '128', '64', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '100', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '20', '4'], [' ', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '4', '4'], [' ', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '4'], [' ', ' ', '20', '100', '20'], [' ', ' ', '20', '2048', '32'], [' ', ' ', '96', '2048', '32'], [' ', ' ', '32', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '128', '8', '16'], [' ', ' ', '8', '2048', '32'], [' ', ' ', '4', '2048', '32'], [' ', ' ', '100', '64', '16'], [' ', ' ', '128', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '20'], [' ', ' ', '4', '100', '20'], [' ', ' ', '16', '2048', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '20'], [' ', ' ', '8', '100', '20'], [' ', ' ', '16', '128', '20'], [' ', ' ', '64', '2048', '32'], [' ', ' ', '4', '100', '32'], [' ', ' ', '50', '2048', '32'], [' ', ' ', '16', '128', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '20', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '20', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '16', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '32'], [' ', ' ', '50', '50', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '16', '32'], [' ', ' ', '128', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '4', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '8'], [' ', ' ', '32', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '4', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '2048', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '4']]
prob:  <search.SurrogateProblem object at 0x14b8d8aff520>
0 OK
bestX [array([[0.5172, 0.5696, 0.4483, 0.9708, 0.3263]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6392.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6392
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6392
........................................ [0.175264, 0.171699, 0.172164]
OUTPUT:%f [0.175264, 0.171699, 0.172164] 0.17193150000000001
store_func_eval
problem.constants
None
MLA iteration:  93
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   1.245754e+06           nan     00s00  00001   1.245754e+06   1.559722e+12     00s00  00002   3.276115e+05   3.499800e+11     00s01  00003   2.875711e+04   6.694658e+09     00s01  00004   1.790763e+04   2.667043e+09 
    00s01  00005   7.897599e+03   5.156959e+08     00s02  00006   4.184249e+03   1.374727e+08     00s02  00007   2.178594e+03   3.294613e+07     00s02  00008   1.223987e+03   8.241452e+06     00s03  00009   7.466998e+02   2.008165e+06     00s03  00010   5.165159e+02   4.811891e+05     00s03  00011   4.087028e+02   1.091879e+05 
    00s04  00012   3.618816e+02   2.240502e+04     00s04  00013   3.434916e+02   4.085500e+03 
    00s04  00014   3.360683e+02   1.014470e+03     00s05  00015   3.311936e+02   7.678875e+02     00s05  00016   3.256010e+02   7.764916e+02     00s05  00017   3.195008e+02   2.057190e+02     00s06  00018   3.162061e+02   7.552448e+01     00s06  00019   3.150960e+02   1.337903e+02     00s06  00020   3.139846e+02   1.750046e+01     00s07  00021   3.138159e+02   7.085053e+00     00s07  00022   3.136499e+02   4.847284e+00 
    00s07  00023   3.135164e+02   7.168461e+00     00s08  00024   3.131830e+02   2.449538e+01     00s08  00025   3.156113e+02   1.313361e+03     00s08  00026   3.128250e+02   1.175835e+02     00s09  00027   1.119987e+04   1.213510e+08     00s09  00028   3.616192e+02   1.028193e+04     00s09  00029   3.126778e+02   1.970648e+02     00s10  00030   3.161742e+02   2.013104e+03     00s10  00031   3.123875e+02   3.725475e+02     00s10  00032   3.119370e+02   1.186110e+03     00s11  00033   3.094875e+02   1.328204e+03     00s11  00034   3.006181e+02   2.133383e+03     00s11  00035   4.063462e+02   3.423303e+02     00s12  00036   2.992717e+02   2.934928e+03     00s12  00037   2.964346e+02   3.371664e+03     00s12  00038   2.930847e+02   1.311158e+03     00s13  00039   2.854084e+02   1.321881e+03     00s13  00040   2.772320e+02   8.771413e+02     00s13  00041   2.683185e+02   6.073783e+02     00s14  00042   2.587006e+02   8.224326e+02     00s14  00043   2.536851e+02   4.684499e+02     00s14  00044   2.547456e+02   1.934581e+03     00s15  00045   2.524686e+02   7.110972e+00     00s15  00046   2.523160e+02   1.513766e+00     00s15  00047   2.522518e+02   1.406494e+00     00s16  00048   2.522324e+02   6.778789e-01     00s16  00049   2.522272e+02   1.030648e-01 
    00s16  00050   2.522238e+02   5.644251e-02     00s17  00051   2.522204e+02   8.144199e-02     00s17  00052   2.522152e+02   1.034126e-01     00s17  00053   2.522134e+02   5.475308e-02 
    00s18  00054   2.522129e+02   4.736993e-03     00s18  00055   2.522128e+02   4.664893e-05     00s18  00056   2.522128e+02   5.356103e-05     00s19  00057   2.522128e+02   3.988551e-05     00s19  00058   2.522128e+02   3.988551e-05 
Runtime:     00s19
Optimization status: Converged

Optimization restart 1/1, f = 252.21283522541307
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '128', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '50', '20'], [' ', ' ', '128', '64', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '100', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '20', '4'], [' ', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '4', '4'], [' ', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '4'], [' ', ' ', '20', '100', '20'], [' ', ' ', '20', '2048', '32'], [' ', ' ', '96', '2048', '32'], [' ', ' ', '32', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '128', '8', '16'], [' ', ' ', '8', '2048', '32'], [' ', ' ', '4', '2048', '32'], [' ', ' ', '100', '64', '16'], [' ', ' ', '128', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '20'], [' ', ' ', '4', '100', '20'], [' ', ' ', '16', '2048', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '20'], [' ', ' ', '8', '100', '20'], [' ', ' ', '16', '128', '20'], [' ', ' ', '64', '2048', '32'], [' ', ' ', '4', '100', '32'], [' ', ' ', '50', '2048', '32'], [' ', ' ', '16', '128', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '20', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '20', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '16', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '32'], [' ', ' ', '50', '50', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '16', '32'], [' ', ' ', '128', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '4', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '8'], [' ', ' ', '32', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '4', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '2048', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '4'], [' ', ' ', '32', '2048', '20']]
prob:  <search.SurrogateProblem object at 0x14b8c3c79c10>
0 OK
bestX [array([[0.9173, 0.9343, 0.2584, 0.2602, 0.0961]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6136.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6136
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6136
........................................ [0.198336, 0.195968, 0.196045]
OUTPUT:%f [0.198336, 0.195968, 0.196045] 0.1960065
store_func_eval
problem.constants
None
MLA iteration:  94
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   1.271103e+06           nan     00s00  00001   1.271103e+06   1.552171e+12     00s00  00002   3.443724e+05   3.773625e+11     00s01  00003   2.261429e+04   4.299830e+09     00s01  00004   1.526821e+04   1.982786e+09     00s01  00005   6.642550e+03   3.662917e+08     00s02  00006   3.591591e+03   1.001385e+08     00s02  00007   1.889685e+03   2.386919e+07     00s02  00008   1.084020e+03   5.991133e+06 
    00s03  00009   6.793328e+02   1.453497e+06     00s03  00010   4.851818e+02   3.451795e+05     00s03  00011   3.953002e+02   7.673594e+04     00s04  00012   3.571712e+02   1.523712e+04 
    00s04  00013   3.424583e+02   2.775992e+03     00s04  00014   3.361125e+02   8.680565e+02     00s05  00015   3.311930e+02   8.073690e+02     00s05  00016   3.251100e+02   7.796109e+02     00s05  00017   3.169495e+02   3.109630e+02     00s06  00018   3.161379e+02   7.665714e+01     00s06  00019   3.142401e+02   1.806832e+02     00s06  00020   2.993829e+02   1.050098e+03     00s07  00021   3.418051e+02   4.446673e+03     00s07  00022   2.917773e+02   1.962930e+03     00s07  00023   3.691376e+02   4.763936e+03     00s08  00024   2.911820e+02   2.421273e+03     00s08  00025   2.859218e+02   2.047213e+03 
    00s08  00026   2.709140e+02   9.711306e+02     00s09  00027   2.820790e+02   2.481536e+04     00s09  00028   2.665658e+02   3.093635e+02     00s09  00029   2.594785e+02   3.324628e+02     00s10  00030   2.573045e+02   4.250933e+02     00s10  00031   2.534084e+02   4.434501e+02     00s10  00032   2.489391e+02   1.603215e+02     00s11  00033   3.248593e+02   5.598944e+03 
    00s11  00034   2.485629e+02   6.221297e+01     00s11  00035   2.483322e+02   9.709656e+00     00s12  00036   2.482245e+02   2.547048e+01     00s12  00037   2.480718e+02   5.518216e+01     00s12  00038   2.479155e+02   4.064950e+01     00s13  00039   2.475895e+02   7.646485e+00     00s13  00040   2.473221e+02   2.142758e+01     00s13  00041   2.471131e+02   3.340722e+01 
    00s14  00042   2.467933e+02   8.331370e+00     00s14  00043   2.474391e+02   2.794258e+02     00s14  00044   2.467198e+02   2.102034e+01     00s15  00045   2.465789e+02   5.272260e+00     00s15  00046   2.464262e+02   1.386983e+00     00s15  00047   2.463902e+02   1.640169e+01     00s16  00048   2.463624e+02   1.115616e+00     00s16  00049   2.463394e+02   2.180208e-01     00s16  00050   2.463192e+02   2.841753e-01     00s17  00051   2.463555e+02   1.411241e+00     00s17  00052   2.463132e+02   1.084669e-01     00s17  00053   2.463102e+02   1.732885e-02 
    00s18  00054   2.463099e+02   2.165965e-03 
    00s18  00055   2.463098e+02   1.236372e-04     00s18  00056   2.463098e+02   3.881993e-05     00s19  00057   2.463098e+02   1.695969e-04     00s19  00058   2.463098e+02   8.255957e-04     00s19  00059   2.463098e+02   2.193740e-03     00s28  00086   2.463007e+02   1.291885e-04 
Runtime:     00s28
Optimization status: Converged

Optimization restart 1/1, f = 246.3006612272626
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '128', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '50', '20'], [' ', ' ', '128', '64', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '100', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '20', '4'], [' ', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '4', '4'], [' ', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '4'], [' ', ' ', '20', '100', '20'], [' ', ' ', '20', '2048', '32'], [' ', ' ', '96', '2048', '32'], [' ', ' ', '32', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '128', '8', '16'], [' ', ' ', '8', '2048', '32'], [' ', ' ', '4', '2048', '32'], [' ', ' ', '100', '64', '16'], [' ', ' ', '128', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '20'], [' ', ' ', '4', '100', '20'], [' ', ' ', '16', '2048', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '20'], [' ', ' ', '8', '100', '20'], [' ', ' ', '16', '128', '20'], [' ', ' ', '64', '2048', '32'], [' ', ' ', '4', '100', '32'], [' ', ' ', '50', '2048', '32'], [' ', ' ', '16', '128', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '20', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '20', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '16', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '32'], [' ', ' ', '50', '50', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '16', '32'], [' ', ' ', '128', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '4', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '8'], [' ', ' ', '32', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '4', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '2048', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '4'], [' ', ' ', '32', '2048', '20'], [' ', ' ', '16', '16', '8']]
prob:  <search.SurrogateProblem object at 0x14b8d8b2b9a0>
0 OK
bestX [array([[0.2459, 0.096 , 0.6136, 0.8529, 0.3546]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9169.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9169
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9169
........................................ [0.631363, 0.635815, 0.628706]
OUTPUT:%f [0.631363, 0.635815, 0.628706] 0.6322605
store_func_eval
problem.constants
None
MLA iteration:  95
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   1.278833e+06           nan     00s00  00001   1.278833e+06   1.594372e+12     00s00  00002   3.436193e+05   3.768898e+11     00s01  00003   2.506552e+04   5.260729e+09     00s01  00004   1.638153e+04   2.283781e+09 
    00s01  00005   7.182159e+03   4.305187e+08     00s02  00006   3.858634e+03   1.166126e+08 
    00s02  00007   2.026405e+03   2.791920e+07     00s02  00008   1.154557e+03   7.017270e+06     00s03  00009   7.156628e+02   1.711035e+06     00s03  00010   5.035133e+02   4.090396e+05     00s03  00011   4.042505e+02   9.187068e+04     00s04  00012   3.615333e+02   1.847703e+04     00s04  00013   3.449460e+02   3.334414e+03 
    00s04  00014   3.380913e+02   9.267138e+02     00s05  00015   3.332026e+02   7.938851e+02     00s05  00016   3.272711e+02   8.002111e+02     00s05  00017   3.195607e+02   3.366493e+02     00s06  00018   3.177091e+02   1.219559e+02     00s06  00019   3.135985e+02   4.305021e+02     00s06  00020   2.900927e+02   2.420038e+03     00s07  00021   2.987378e+02   5.760163e+03     00s07  00022   2.888242e+02   3.408916e+03     00s07  00023   2.851599e+02   2.849399e+03     00s08  00024   2.769496e+02   9.760212e+02     00s08  00025   2.667302e+02   8.547953e+02     00s08  00026   2.666308e+02   5.042360e+03     00s09  00027   2.628397e+02   2.271330e+03     00s09  00028   2.554557e+02   7.097812e+02     00s09  00029   2.510088e+02   1.073721e+02     00s10  00030   2.506621e+02   3.021653e+02     00s10  00031   2.500769e+02   1.436201e+02 
    00s10  00032   2.497309e+02   4.301088e+01     00s11  00033   2.493588e+02   1.619199e+01     00s11  00034   2.489922e+02   3.205349e+01     00s11  00035   2.487905e+02   7.810684e+00     00s12  00036   2.486943e+02   3.988962e+00 
    00s12  00037   2.484815e+02   4.464557e+00     00s12  00038   2.479475e+02   5.205524e+01     00s13  00039   2.477998e+02   1.472530e+01     00s13  00040   2.476876e+02   9.813531e+00     00s13  00041   2.476225e+02   1.286765e+00     00s14  00042   2.475952e+02   5.672448e-01     00s14  00043   2.478039e+02   1.103673e+02     00s14  00044   2.475899e+02   9.355017e-01     00s15  00045   2.475781e+02   5.176169e-01     00s15  00046   2.475718e+02   3.266368e+00     00s15  00047   2.475629e+02   5.636719e-02     00s16  00048   2.475626e+02   2.012433e-04 
    00s16  00049   2.475626e+02   3.871303e-05     00s16  00050   2.475626e+02   2.793313e-05     00s17  00051   2.475626e+02   9.442292e-05     00s17  00052   2.475626e+02   6.890007e-03     00s17  00053   2.475625e+02   1.662891e-03     00s18  00054   2.475624e+02   6.374546e-03     00s18  00055   2.475622e+02   4.633826e-02     00s18  00056   2.475616e+02   1.640773e-01     00s19  00057   2.475605e+02   3.164799e-01     00s19  00058   2.475601e+02   2.271512e+00     00s19  00059   2.475579e+02   5.223187e-01     00s24  00074   2.475545e+02   8.206559e-04 
Runtime:     00s24
Optimization status: Converged

Optimization restart 1/1, f = 247.55449647850236
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '128', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '50', '20'], [' ', ' ', '128', '64', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '100', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '20', '4'], [' ', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '4', '4'], [' ', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '4'], [' ', ' ', '20', '100', '20'], [' ', ' ', '20', '2048', '32'], [' ', ' ', '96', '2048', '32'], [' ', ' ', '32', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '128', '8', '16'], [' ', ' ', '8', '2048', '32'], [' ', ' ', '4', '2048', '32'], [' ', ' ', '100', '64', '16'], [' ', ' ', '128', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '20'], [' ', ' ', '4', '100', '20'], [' ', ' ', '16', '2048', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '20'], [' ', ' ', '8', '100', '20'], [' ', ' ', '16', '128', '20'], [' ', ' ', '64', '2048', '32'], [' ', ' ', '4', '100', '32'], [' ', ' ', '50', '2048', '32'], [' ', ' ', '16', '128', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '20', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '20', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '16', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '32'], [' ', ' ', '50', '50', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '16', '32'], [' ', ' ', '128', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '4', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '8'], [' ', ' ', '32', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '4', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '2048', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '4'], [' ', ' ', '32', '2048', '20'], [' ', ' ', '16', '16', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '128', '20']]
prob:  <search.SurrogateProblem object at 0x14b8d83ab8b0>
0 OK
bestX [array([[0.3804, 0.8776, 0.5531, 0.9885, 0.3602]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8248.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8248
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8248
........................................ [0.91794, 0.911129, 0.914171]
OUTPUT:%f [0.91794, 0.911129, 0.914171] 0.91265
store_func_eval
problem.constants
None
MLA iteration:  96
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   1.308361e+06           nan     00s00  00001   1.308361e+06   1.624424e+12     00s00  00002   3.598305e+05   3.967328e+11 
    00s01  00003   2.348025e+04   4.710695e+09     00s01  00004   1.561524e+04   2.108921e+09     00s01  00005   6.835026e+03   3.941194e+08 
    00s02  00006   3.688832e+03   1.072958e+08     00s02  00007   1.941829e+03   2.563278e+07     00s02  00008   1.112033e+03   6.435209e+06     00s03  00009   6.948139e+02   1.564340e+06     00s03  00010   4.940192e+02   3.727118e+05 
    00s03  00011   4.005949e+02   8.329531e+04     00s04  00012   3.606714e+02   1.662176e+04     00s04  00013   3.452284e+02   2.999217e+03     00s04  00014   3.387197e+02   8.883657e+02     00s05  00015   3.338839e+02   8.036262e+02 
    00s05  00016   3.280562e+02   7.615532e+02     00s05  00017   3.220268e+02   1.105868e+02     00s06  00018   3.200196e+02   1.337627e+01     00s06  00019   3.194350e+02   1.354789e+01     00s06  00020   3.181745e+02   6.743136e+01     00s07  00021   3.219526e+02   8.863027e+02     00s07  00022   3.169872e+02   1.972960e+02     00s07  00023   3.310696e+02   1.344060e+03     00s08  00024   3.166503e+02   2.584715e+02     00s08  00025   3.151168e+02   1.929344e+02 
    00s08  00026   3.117074e+02   4.904710e+01     00s09  00027   3.056905e+02   8.158516e+02     00s09  00028   6.403154e+02   6.209299e+04     00s10  00029   3.044004e+02   1.822112e+03     00s10  00030   3.007546e+02   1.065161e+03     00s10  00031   2.973883e+02   1.012692e+03     00s11  00032   2.951227e+02   4.374332e+02     00s11  00033   2.902693e+02   1.838562e+03     00s11  00034   3.098604e+02   8.406028e+03     00s12  00035   2.890179e+02   3.122845e+03     00s12  00036   2.836265e+02   2.681885e+03     00s12  00037   2.719238e+02   3.591445e+02     00s13  00038   2.690144e+02   1.246785e+03     00s13  00039   2.664135e+02   3.398521e+02     00s13  00040   2.657464e+02   3.301903e+01     00s14  00041   2.656689e+02   1.972229e+01     00s14  00042   2.655378e+02   1.522123e+01     00s14  00043   2.652536e+02   4.648777e+00 
    00s15  00044   2.651789e+02   2.196046e+00     00s15  00045   2.650414e+02   2.447716e+00     00s15  00046   2.647161e+02   1.290587e+01     00s16  00047   2.642068e+02   1.766217e+01     00s16  00048   2.638446e+02   2.725020e+02     00s16  00049   2.632561e+02   4.358469e+01     00s17  00050   2.630428e+02   1.267109e+01     00s17  00051   2.629047e+02   9.319108e+00     00s17  00052   2.629281e+02   7.495293e+01     00s18  00053   2.628579e+02   5.730049e+00     00s18  00054   2.627956e+02   3.744317e+00     00s18  00055   2.626544e+02   9.932548e+00     00s19  00056   2.625801e+02   3.159851e-01     00s19  00057   2.625380e+02   1.698909e-01     00s19  00058   2.625098e+02   1.892768e-01 
    00s32  00095   2.624386e+02   3.393932e-04 
Runtime:     00s32
Optimization status: Converged

Optimization restart 1/1, f = 262.4386422941385
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '128', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '50', '20'], [' ', ' ', '128', '64', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '100', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '20', '4'], [' ', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '4', '4'], [' ', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '4'], [' ', ' ', '20', '100', '20'], [' ', ' ', '20', '2048', '32'], [' ', ' ', '96', '2048', '32'], [' ', ' ', '32', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '128', '8', '16'], [' ', ' ', '8', '2048', '32'], [' ', ' ', '4', '2048', '32'], [' ', ' ', '100', '64', '16'], [' ', ' ', '128', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '20'], [' ', ' ', '4', '100', '20'], [' ', ' ', '16', '2048', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '20'], [' ', ' ', '8', '100', '20'], [' ', ' ', '16', '128', '20'], [' ', ' ', '64', '2048', '32'], [' ', ' ', '4', '100', '32'], [' ', ' ', '50', '2048', '32'], [' ', ' ', '16', '128', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '20', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '20', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '16', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '32'], [' ', ' ', '50', '50', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '16', '32'], [' ', ' ', '128', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '4', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '8'], [' ', ' ', '32', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '4', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '2048', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '4'], [' ', ' ', '32', '2048', '20'], [' ', ' ', '16', '16', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '128', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '2048', '20']]
prob:  <search.SurrogateProblem object at 0x14b8d83e0940>
0 OK
bestX [array([[0.6466, 0.6422, 0.2887, 0.922 , 0.3064]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2848.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2848
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2848
........................................ [0.176675, 0.173256, 0.173504]
OUTPUT:%f [0.176675, 0.173256, 0.173504] 0.17337999999999998
store_func_eval
problem.constants
None
MLA iteration:  97
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   1.311561e+06           nan     00s00  00001   1.311561e+06   1.637699e+12     00s00  00002   3.597064e+05   3.932329e+11     00s01  00003   2.587438e+04   5.640524e+09 
    00s01  00004   1.664417e+04   2.375000e+09     00s01  00005   7.350600e+03   4.525928e+08     00s02  00006   3.955378e+03   1.224392e+08     00s02  00007   2.086473e+03   2.947760e+07     00s02  00008   1.190880e+03   7.431954e+06     00s03  00009   7.378504e+02   1.816864e+06     00s03  00010   5.177698e+02   4.345053e+05     00s03  00011   4.144050e+02   9.759890e+04     00s04  00012   3.696101e+02   1.972104e+04     00s04  00013   3.518479e+02   3.630491e+03 
    00s04  00014   3.441667e+02   1.060244e+03     00s05  00015   3.384718e+02   9.437100e+02     00s05  00016   3.315681e+02   9.482267e+02 
    00s05  00017   3.237645e+02   2.309353e+02     00s06  00018   3.204964e+02   3.545899e+01     00s06  00019   3.193466e+02   3.200422e+01     00s06  00020   3.192518e+02   4.262882e+01     00s07  00021   3.190248e+02   2.051289e+01     00s07  00022   3.189778e+02   9.874684e+00     00s08  00023   3.189556e+02   9.348118e-01     00s08  00024   3.189464e+02   7.142459e-01     00s08  00025   3.189171e+02   1.570198e+00     00s09  00026   3.189034e+02   6.279098e-01 
    00s09  00027   3.189002e+02   2.360905e-02     00s09  00028   3.188999e+02   5.896211e-03     00s10  00029   3.188999e+02   4.241726e-04     00s10  00030   3.188999e+02   2.732096e-05     00s10  00031   3.188999e+02   3.417516e-06 
    00s11  00032   3.188999e+02   3.417516e-06 
Runtime:     00s11
Optimization status: Converged

Optimization restart 1/1, f = 318.8999141568389
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '128', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '50', '20'], [' ', ' ', '128', '64', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '100', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '20', '4'], [' ', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '4', '4'], [' ', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '4'], [' ', ' ', '20', '100', '20'], [' ', ' ', '20', '2048', '32'], [' ', ' ', '96', '2048', '32'], [' ', ' ', '32', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '128', '8', '16'], [' ', ' ', '8', '2048', '32'], [' ', ' ', '4', '2048', '32'], [' ', ' ', '100', '64', '16'], [' ', ' ', '128', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '20'], [' ', ' ', '4', '100', '20'], [' ', ' ', '16', '2048', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '20'], [' ', ' ', '8', '100', '20'], [' ', ' ', '16', '128', '20'], [' ', ' ', '64', '2048', '32'], [' ', ' ', '4', '100', '32'], [' ', ' ', '50', '2048', '32'], [' ', ' ', '16', '128', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '20', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '20', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '16', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '32'], [' ', ' ', '50', '50', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '16', '32'], [' ', ' ', '128', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '4', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '8'], [' ', ' ', '32', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '4', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '2048', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '4'], [' ', ' ', '32', '2048', '20'], [' ', ' ', '16', '16', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '128', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '2048', '20'], [' ', ' ', '20', '2048', '20']]
prob:  <search.SurrogateProblem object at 0x14b8c3e034f0>
0 OK
bestX [array([[0.1288, 0.1424, 0.0084, 0.9194, 0.2889]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3671.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3671
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3671
........................................ [0.678275, 0.674964, 0.675416]
OUTPUT:%f [0.678275, 0.674964, 0.675416] 0.67519
store_func_eval
problem.constants
None
MLA iteration:  98
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   1.320601e+06           nan     00s00  00001   1.320601e+06   1.592564e+12 
    00s00  00002   3.730518e+05   4.075455e+11     00s01  00003   2.091418e+04   3.793353e+09     00s01  00004   1.431118e+04   1.790483e+09     00s01  00005   6.238321e+03   3.280394e+08     00s02  00006   3.409381e+03   9.035687e+07     00s02  00007   1.816553e+03   2.162749e+07     00s02  00008   1.058472e+03   5.464432e+06 
    00s03  00009   6.741994e+02   1.332212e+06     00s03  00010   4.883489e+02   3.169584e+05     00s03  00011   4.017582e+02   7.018077e+04     00s04  00012   3.648189e+02   1.383316e+04     00s04  00013   3.502495e+02   2.582352e+03     00s04  00014   3.434776e+02   9.414251e+02     00s05  00015   3.377715e+02   9.498862e+02 
    00s05  00016   3.307556e+02   8.154955e+02     00s05  00017   3.236271e+02   7.670442e+01     00s06  00018   3.208634e+02   3.672671e+01     00s06  00019   3.199622e+02   1.411814e+02     00s07  00020   3.194729e+02   7.342001e+00 
    00s07  00021   3.194025e+02   2.546974e+00     00s07  00022   3.193231e+02   1.499868e+00     00s08  00023   3.192861e+02   7.240508e-01     00s08  00024   3.192675e+02   6.667132e-01     00s08  00025   3.192698e+02   1.449800e+00     00s09  00026   3.192639e+02   2.432412e-02     00s09  00027   3.192634e+02   1.586258e-03 
    00s09  00028   3.192634e+02   8.448962e-04     00s10  00029   3.192634e+02   2.837156e-04     00s10  00030   3.192634e+02   8.237462e-06     00s10  00031   3.192634e+02   4.983480e-06     00s11  00032   3.192634e+02   4.983480e-06 
Runtime:     00s11
Optimization status: Converged

Optimization restart 1/1, f = 319.26335737342595
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '128', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '50', '20'], [' ', ' ', '128', '64', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '100', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '20', '4'], [' ', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '4', '4'], [' ', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '4'], [' ', ' ', '20', '100', '20'], [' ', ' ', '20', '2048', '32'], [' ', ' ', '96', '2048', '32'], [' ', ' ', '32', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '128', '8', '16'], [' ', ' ', '8', '2048', '32'], [' ', ' ', '4', '2048', '32'], [' ', ' ', '100', '64', '16'], [' ', ' ', '128', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '20'], [' ', ' ', '4', '100', '20'], [' ', ' ', '16', '2048', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '20'], [' ', ' ', '8', '100', '20'], [' ', ' ', '16', '128', '20'], [' ', ' ', '64', '2048', '32'], [' ', ' ', '4', '100', '32'], [' ', ' ', '50', '2048', '32'], [' ', ' ', '16', '128', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '20', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '20', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '16', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '32'], [' ', ' ', '50', '50', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '16', '32'], [' ', ' ', '128', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '4', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '8'], [' ', ' ', '32', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '4', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '2048', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '4'], [' ', ' ', '32', '2048', '20'], [' ', ' ', '16', '16', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '128', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '2048', '20'], [' ', ' ', '20', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '20']]
prob:  <search.SurrogateProblem object at 0x14b8d83288b0>
0 OK
bestX [array([[0.2215, 0.2214, 0.0054, 0.9048, 0.2653]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2400.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2400
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2400
........................................ [1.856609, 1.923892, 1.837615]
OUTPUT:%f [1.856609, 1.923892, 1.837615] 1.8807535
store_func_eval
problem.constants
None
MLA iteration:  99
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   1.368851e+06           nan     00s00  00001   1.368851e+06   1.611388e+12     00s00  00002   3.926732e+05   4.677745e+11     00s01  00003   1.137510e+04   1.135044e+09 
    00s01  00004   9.154514e+03   7.297126e+08     00s01  00005   3.861076e+03   1.193772e+08 
    00s02  00006   2.211294e+03   3.458023e+07     00s02  00007   1.221124e+03   8.115390e+06     00s02  00008   7.611625e+02   2.050154e+06     00s03  00009   5.289117e+02   4.897333e+05     00s03  00010   4.200245e+02   1.121420e+05     00s03  00011   3.718699e+02   2.299398e+04 
    00s04  00012   3.526782e+02   4.213740e+03     00s04  00013   3.446737e+02   1.095995e+03 
    00s05  00014   3.392120e+02   8.904319e+02     00s05  00015   3.328018e+02   9.270930e+02     00s05  00016   3.254682e+02   2.757838e+02     00s06  00017   3.214153e+02   5.757113e+01     00s06  00018   3.194983e+02   4.678631e+01     00s06  00019   3.194906e+02   4.212336e+01     00s07  00020   3.193277e+02   2.129156e+01     00s07  00021   3.192339e+02   2.329855e+00     00s07  00022   3.191893e+02   4.485979e+00 
    00s08  00023   3.191538e+02   6.084588e+00     00s08  00024   3.191099e+02   1.063635e+00     00s08  00025   3.191054e+02   3.334017e-02     00s09  00026   3.191051e+02   8.918258e-04     00s09  00027   3.191051e+02   1.574991e-03     00s09  00028   3.191051e+02   5.449158e-05 
    00s10  00029   3.191051e+02   1.335676e-05     00s10  00030   3.191051e+02   1.335676e-05 
Runtime:     00s10
Optimization status: Converged

Optimization restart 1/1, f = 319.10509812737916
SEARCH!
self.IOrig:  [1200, 1400]
self.POrig:  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '128', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '50', '20'], [' ', ' ', '128', '64', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '100', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '20', '4'], [' ', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '4', '4'], [' ', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '4'], [' ', ' ', '20', '100', '20'], [' ', ' ', '20', '2048', '32'], [' ', ' ', '96', '2048', '32'], [' ', ' ', '32', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '128', '8', '16'], [' ', ' ', '8', '2048', '32'], [' ', ' ', '4', '2048', '32'], [' ', ' ', '100', '64', '16'], [' ', ' ', '128', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '20'], [' ', ' ', '4', '100', '20'], [' ', ' ', '16', '2048', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '20'], [' ', ' ', '8', '100', '20'], [' ', ' ', '16', '128', '20'], [' ', ' ', '64', '2048', '32'], [' ', ' ', '4', '100', '32'], [' ', ' ', '50', '2048', '32'], [' ', ' ', '16', '128', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '20', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '20', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '16', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '32'], [' ', ' ', '50', '50', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '16', '32'], [' ', ' ', '128', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '4', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '8'], [' ', ' ', '32', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '4', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '2048', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '4'], [' ', ' ', '32', '2048', '20'], [' ', ' ', '16', '16', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '128', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '2048', '20'], [' ', ' ', '20', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '16']]
prob:  <search.SurrogateProblem object at 0x14b8d8b8c940>
0 OK
bestX [array([[0.234 , 0.3223, 0.081 , 0.647 , 0.2442]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8371.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DLARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8371
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8371
........................................ [1.85407, 1.928415, 1.845378]
OUTPUT:%f [1.85407, 1.928415, 1.845378] 1.8868965
store_func_eval
problem.constants
None
stats:  {'time_total': 2712.810757255, 'time_sample_init': 0.019183695, 'time_fun': 2517.966520865, 'time_search': 177.25664916999997, 'time_model': 17.553816764000008, 'func_eval_time': [1456.986561977], 'search_time': [1.747458882, 1.750931715, 1.720735861, 1.754841901, 1.730477172, 1.759897288, 1.75341272, 1.739303829, 1.749840152, 1.741758363, 1.750565394, 1.736358583, 1.748368856, 1.740437088, 1.742840148, 1.753626158, 1.754922219, 1.746283438, 1.755891839, 1.751442401, 1.755623715, 1.743497363, 1.769177501, 1.746018038, 1.777999757, 1.91444431, 1.844181385, 1.751790914, 1.908004581, 1.749062529, 1.758735953, 1.767408188, 1.758778836, 1.75802468, 1.748790215, 1.753831844, 1.748758297, 1.94651522, 1.751954835, 1.747774849, 1.747282462, 1.756848608, 1.769872362, 1.74790713, 1.757691813, 1.757583277, 1.758118618, 1.753572241, 1.772777657, 1.880099691, 1.751704451, 1.755343788, 1.772240431, 1.775089574, 1.764139574, 1.921568495, 1.756406088, 1.769185394, 1.760704875, 1.77182501, 1.769884654, 1.777221507, 1.764624559, 1.782438789, 1.746407339, 1.764963712, 1.758841485, 1.764829965, 1.760092778, 1.756409161, 1.852574672, 1.771258869, 1.750852166, 1.763930257, 1.775648729, 1.77678157, 1.761478935, 1.771970979, 1.759196282, 1.781081265, 1.762993114, 1.76817764, 1.908234571, 1.77788794, 1.76667275, 1.791806652, 1.751017203, 1.860380375, 1.78599627, 1.767811876, 1.780153341, 1.791755387, 1.776978246, 1.762173866, 1.762068194, 1.778679881, 1.787343596, 1.781490331, 1.781719483, 1.773092225], 'modeling_time': [0.163266262, 0.070653483, 0.071179814, 0.070918116, 0.071490472, 0.074013801, 0.098815883, 0.074328021, 0.079871047, 0.077287724, 0.073924333, 0.075989288, 0.075112279, 0.071866712, 0.075632464, 0.079483004, 0.076698186, 0.07686902, 0.079813148, 0.076642731, 0.076877122, 0.227729911, 0.138556512, 0.114861639, 0.113120891, 0.107737315, 0.105559915, 0.120589955, 0.112456133, 0.135057697, 0.122760442, 0.154572096, 0.115891462, 0.111826786, 0.245728315, 0.203171858, 0.196820059, 0.15989016, 0.101424978, 0.103835861, 0.102088269, 0.096945369, 0.094823004, 0.106750306, 0.221426583, 0.221251488, 0.216251835, 0.135590663, 0.203648042, 0.19734667, 0.237029469, 0.262769741, 0.241580177, 0.203162918, 0.214826285, 0.255093455, 0.21543922, 0.20207359, 0.250233834, 0.254060768, 0.160528587, 0.241358288, 0.239285022, 0.244632351, 0.246039252, 0.340235841, 0.217343329, 0.289193139, 0.149355302, 0.139283918, 0.265400975, 0.169495837, 0.161606811, 0.255991696, 0.17313196, 0.173708159, 0.168736023, 0.171193141, 0.186701741, 0.182455126, 0.257329383, 0.312522877, 0.351532467, 0.220081491, 0.294080696, 0.180919784, 0.211756651, 0.219043357, 0.330786193, 0.225471354, 0.240152113, 0.226626334, 0.391067271, 0.225772653, 0.318209778, 0.280107647, 0.352621866, 0.142942881, 0.143788809, 0.13861008], 'modeling_iteration': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}
tid: 0
    t:1200.000000 
    Ps  [['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '20', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '128'], [' ', ' ', '32', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '128', '32'], [' ', ' ', '32', '50', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '16', '50'], [' ', ' ', '8', '20', '256'], [' ', ' ', '32', '50', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '64', '16'], [' ', ' ', '96', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '20', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '50', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '16', '256'], [' ', ' ', '128', '128', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '100'], [' ', ' ', '16', '100', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '80', '80'], [' ', ' ', '128', '80', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '16'], [' ', ' ', '100', '16', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '8'], [' ', ' ', '96', '50', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '50', '4'], [' ', ' ', '100', '2048', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '32', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '80', '16'], [' ', ' ', '128', '8', '128'], [' ', ' ', '4', '80', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '100', '8'], [' ', ' ', '8', '4', '20'], [' ', ' ', '8', '2048', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '256'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '128', '4'], [' ', ' ', '16', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '8', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '16', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '100', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '32', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '20'], [' ', ' ', '4', '100', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '50'], [' ', ' ', '16', '4', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '20', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '16', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '64', '64'], [' ', ' ', '100', '50', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '16', '4'], [' ', ' ', '4', '100', '100'], [' ', ' ', '80', '80', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '32', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '32', '32'], [' ', ' ', '50', '64', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '8', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '2048', '64'], [' ', ' ', '50', '32', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '80', '50'], [' ', ' ', '32', '16', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '50'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '100', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '2048', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '128', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '20', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '20', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '256'], [' ', ' ', '128', '100', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '80'], [' ', ' ', '4', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '50', '128'], [' ', ' ', '4', '32', '128'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '128', '128'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '64', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '32', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '64', '80'], [' ', ' ', '50', '16', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '20', '80'], [' ', ' ', '8', '32', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '80', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '96', '100', '4'], [' ', ' ', '32', '100', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], [' ', ' ', '128', '20', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '128', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '50', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '4', '4'], [' ', ' ', '8', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '128', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '50', '20'], [' ', ' ', '128', '64', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '20', '100', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '16', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '20', '4'], [' ', ' ', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '4', '4'], [' ', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '8', '4'], [' ', ' ', '20', '100', '20'], [' ', ' ', '20', '2048', '32'], [' ', ' ', '96', '2048', '32'], [' ', ' ', '32', '128', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], [' ', ' ', '100', '128', '4'], [' ', ' ', '96', '2048', '4'], [' ', ' ', '128', '8', '16'], [' ', ' ', '8', '2048', '32'], [' ', ' ', '4', '2048', '32'], [' ', ' ', '100', '64', '16'], [' ', ' ', '128', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '100', '20'], [' ', ' ', '4', '100', '20'], [' ', ' ', '16', '2048', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '20'], [' ', ' ', '8', '100', '20'], [' ', ' ', '16', '128', '20'], [' ', ' ', '64', '2048', '32'], [' ', ' ', '4', '100', '32'], [' ', ' ', '50', '2048', '32'], [' ', ' ', '16', '128', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '128', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '2048', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '80', '32'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '4', '20', '20'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '2048', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '20', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '16', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '32'], [' ', ' ', '50', '50', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '16', '32'], [' ', ' ', '128', '64', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '4', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '8'], [' ', ' ', '32', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '32', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '4', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '2048', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '100', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '20', '4'], [' ', ' ', '32', '2048', '20'], [' ', ' ', '16', '16', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '128', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '2048', '20'], [' ', ' ', '20', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '128', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '80', '16']]
    Os  [[3.887138], [3.762379], [3.5749934999999997], [3.0151845], [3.4604715], [2.1728195], [3.360277], [0.517894], [2.571335], [0.206116], [2.931316], [3.732483], [0.2056345], [2.123046], [0.1599715], [2.2434095], [2.357083], [3.6036625], [4.3987549999999995], [3.0136025], [3.416147], [3.3946865], [0.1618], [3.2309975], [0.1796055], [1.6835745], [3.0888324999999996], [0.408366], [1.5365995], [0.434588], [2.8467475], [2.98544], [1.6008900000000001], [3.4763260000000002], [3.85001], [3.2778895], [3.1483185000000002], [0.538246], [2.4270095], [3.212902], [0.6285715000000001], [4.3809995], [3.7845354999999996], [1.9783715000000002], [0.5433840000000001], [0.313303], [0.29469900000000004], [3.4817875000000003], [0.6202785], [2.3771255], [0.517515], [2.573747], [2.512946], [2.0767625], [1.041245], [3.5515594999999998], [3.134395], [3.0099795], [3.6131130000000002], [3.594927], [3.7915685000000003], [3.2229859999999997], [2.804811], [0.5345975], [3.4352834999999997], [3.4036015], [0.436873], [3.429024], [2.571809], [0.183715], [3.0954325000000003], [3.1115595000000003], [2.210666], [0.39678650000000004], [3.4143455], [3.236212], [3.798293], [3.1287195], [3.3633515000000003], [3.712155], [1.832577], [3.5517955], [3.7061385], [0.6371865], [0.523662], [0.6220805], [4.1230125], [3.0394305], [3.5535325], [0.197613], [3.494467], [3.552267], [0.2998845], [3.483638], [0.45206], [3.9172979999999997], [3.7305475], [2.2278824999999998], [3.2518085], [1.592214], [0.302246], [0.299082], [0.1588835], [0.3090435], [0.5978145], [0.3834775], [2.0005345], [0.29642], [0.298125], [0.3283325], [0.3371825], [0.5122025], [0.4939015], [0.517667], [0.154599], [1.9048699999999998], [0.503081], [0.5054890000000001], [0.5083575], [0.523722], [0.5312555], [0.6211455], [2.494345], [1.0528685], [0.596792], [0.846821], [0.8513245], [0.6406045], [0.8814635], [0.318504], [0.8933694999999999], [0.17754999999999999], [0.922752], [2.11851], [0.9267785], [1.5363045], [0.61026], [0.490751], [0.776065], [0.371796], [2.0597845], [0.9318455000000001], [0.1649925], [0.6090045], [0.1836305], [2.221644], [2.2086305], [0.181101], [1.511546], [0.1510355], [0.156725], [1.5888395], [2.2613725000000002], [2.2898709999999998], [1.541505], [0.1529915], [0.6057794999999999], [0.2011395], [0.1741235], [0.6018570000000001], [0.1918655], [0.183256], [2.2079755], [2.2649325], [2.2215355], [2.1849095], [0.6879215000000001], [2.4719575000000003], [2.550815], [2.3592955], [2.4818095], [1.0059955], [0.431547], [0.4921255], [0.41718], [2.4075135], [0.45692], [0.42896449999999997], [0.4283255], [0.43784100000000004], [2.3643400000000003], [2.1792575], [2.373682], [0.159965], [2.4395800000000003], [0.456777], [2.2501465], [2.4443045], [2.359217], [0.455013], [0.4689325], [0.4250635], [0.17193150000000001], [0.1960065], [0.6322605], [0.91265], [0.17337999999999998], [0.67519], [1.8807535], [1.8868965]]
    Popt  [' ', ' ', '100', '128', '4'] Oopt  0.1510355 nth  149
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
mkdir: cannot create directory ‘./TLA_experiments/SLA-GPTune-l-200/’: No such file or directory
mv: cannot move 'gptune.db/covariance.json' to './TLA_experiments/SLA-GPTune-l-200/covariance.json': No such file or directory
time...now 1651108787.4425378
machine: swing processor: intel num_nodes: 1 num_cores: 128


------Validating the options
  
  total core counts provided to GPTune: 128
   ---> distributed_memory_parallelism: False
   ---> shared_memory_parallelism: False
   ---> objective_evaluation_parallelism: False
  
  total core counts for modeling: 2
   ---> model_processes: 1
   ---> model_threads: 1
   ---> model_restart_processes: 1
   ---> model_restart_threads: 1
  
  total core counts for search: 1
   ---> search_processes: 1
   ---> search_threads: 1
   ---> search_multitask_processes: 1
   ---> search_multitask_threads: 1
  
  total core counts for objective function evaluation: 2
   ---> core counts in a single application run: 1
   ---> objective_multisample_processes: 1
   ---> objective_multisample_threads: 1
problem size is sm [[160, 180]]
[[160, 180]]
GPTune History Database Init
[HistoryDB] use filelock for synchronization
[HistoryDB] Create a JSON file at ./gptune.db/covariance.json



------Starting MLA with HistoryDB with 1 tasks and 30 samples each 
[HistoryDB] Found a history database file
no history data has been loaded
NS1:  15
tmpP:  [array([[0.9998, 0.5133, 0.9216, 0.4093, 0.9385],
       [0.3645, 0.5467, 0.2506, 0.4929, 0.1625],
       [0.6969, 0.231 , 0.8041, 0.9106, 0.7783],
       [0.2326, 0.3339, 0.6804, 0.7258, 0.5623],
       [0.1277, 0.7717, 0.3043, 0.9511, 0.013 ],
       [0.0418, 0.0744, 0.6217, 0.3975, 0.2902],
       [0.1545, 0.4069, 0.9908, 0.1545, 0.3993],
       [0.7372, 0.064 , 0.1434, 0.0242, 0.4487],
       [0.8414, 0.6274, 0.1127, 0.7891, 0.1016],
       [0.8937, 0.6779, 0.3934, 0.1082, 0.8218],
       [0.6198, 0.991 , 0.0079, 0.3161, 0.4756],
       [0.5793, 0.2893, 0.779 , 0.8506, 0.7208],
       [0.2703, 0.803 , 0.4432, 0.6647, 0.2292],
       [0.4297, 0.1461, 0.4979, 0.5413, 0.8966],
       [0.5127, 0.8748, 0.543 , 0.2188, 0.6159]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3182.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DSM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3182
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3182
........................................ [0.008604, 0.008531, 0.008517]
OUTPUT:%f [0.008604, 0.008531, 0.008517] 0.008524
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/603.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DSM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/603
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/603
........................................ [0.004014, 0.00372, 0.00372]
OUTPUT:%f [0.004014, 0.00372, 0.00372] 0.00372
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3373.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DSM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3373
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3373
........................................ [0.007816, 0.007577, 0.007506]
OUTPUT:%f [0.007816, 0.007577, 0.007506] 0.0075415
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9226.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DSM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9226
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9226
........................................ [0.007226, 0.007053, 0.007149]
OUTPUT:%f [0.007226, 0.007053, 0.007149] 0.007101
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/89.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DSM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/89
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/89
........................................ [0.000751, 0.000685, 0.000683]
OUTPUT:%f [0.000751, 0.000685, 0.000683] 0.0006839999999999999
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5485.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DSM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5485
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5485
........................................ [0.001528, 0.001427, 0.001436]
OUTPUT:%f [0.001528, 0.001427, 0.001436] 0.0014315
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4655.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DSM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4655
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4655
........................................ [0.005805, 0.00548, 0.005659]
OUTPUT:%f [0.005805, 0.00548, 0.005659] 0.0055695
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6147.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DSM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6147
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6147
........................................ [0.005216, 0.026668, 0.012377]
OUTPUT:%f [0.005216, 0.026668, 0.012377] 0.0195225
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6743.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DSM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6743
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6743
........................................ [0.002789, 0.002691, 0.002691]
OUTPUT:%f [0.002789, 0.002691, 0.002691] 0.002691
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8887.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DSM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8887
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8887
........................................ [0.007818, 0.007925, 0.00791]
OUTPUT:%f [0.007818, 0.007925, 0.00791] 0.007917500000000001
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6551.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DSM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6551
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6551
........................................ [0.006397, 0.006157, 0.006331]
OUTPUT:%f [0.006397, 0.006157, 0.006331] 0.0062439999999999996
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9331.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DSM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9331
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9331
........................................ [0.00708, 0.006987, 0.006989]
OUTPUT:%f [0.00708, 0.006987, 0.006989] 0.006988
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9486.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DSM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9486
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9486
........................................ [0.005363, 0.004493, 0.005861]
OUTPUT:%f [0.005363, 0.004493, 0.005861] 0.005176999999999999
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1078.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DSM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1078
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1078
........................................ [0.007992, 0.007766, 0.0078]
OUTPUT:%f [0.007992, 0.007766, 0.0078] 0.007783
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3410.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DSM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3410
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3410
........................................ [0.007002, 0.007, 0.006923]
OUTPUT:%f [0.007002, 0.007, 0.006923] 0.006961500000000001
store_func_eval
problem.constants
None
NSmin:  15
NS:  30
MLA iteration:  0
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -1.937792e+00           nan     00s00  00001  -1.937792e+00   5.320594e+01     00s00  00002  -9.418504e+00   5.887281e+01     00s00  00003  -3.922792e+01   5.109309e+01 
    00s00  00004   1.168178e+02   2.225413e+04     00s00  00005   2.659426e+01   3.137916e+03     00s00  00006  -5.537495e+01   3.260185e+00     00s00  00007  -5.771691e+01   3.263857e+00     00s00  00008  -5.776457e+01   1.412825e+00     00s01  00009  -5.950647e+01   2.987318e-01     00s01  00010  -5.882956e+01   2.099868e+00     00s01  00011  -5.965960e+01   2.373941e-02     00s01  00012  -5.967804e+01   2.652872e-02 
    00s01  00013  -5.973394e+01   7.568866e-02     00s01  00014  -5.988441e+01   2.201530e-01     00s01  00015  -6.003343e+01   1.749852e-01     00s01  00016  -6.074792e+01   9.735873e-01     00s02  00017  -6.023053e+01   1.549482e-01     00s02  00018  -6.081140e+01   6.079717e-01     00s02  00019  -6.084533e+01   5.706886e-01     00s02  00020  -4.982833e+01   5.091120e+01     00s02  00021  -6.087500e+01   5.205017e-01     00s02  00022  -6.035500e+01   1.148078e+00     00s02  00023  -6.101809e+01   3.845512e-01     00s02  00024  -6.115706e+01   9.451992e-02     00s02  00025  -6.120257e+01   3.643175e-02 
    00s03  00026  -6.120891e+01   1.515947e-03     00s03  00027  -6.120990e+01   7.515362e-04     00s03  00028  -6.121133e+01   8.130627e-04     00s03  00029  -6.121343e+01   1.538400e-03     00s03  00030  -6.122059e+01   3.841196e-03     00s03  00031  -6.123391e+01   4.237750e-03     00s03  00032  -6.125273e+01   1.661880e-03     00s03  00033  -6.126002e+01   3.986885e-03     00s03  00034  -6.126531e+01   1.743017e-03     00s04  00035  -6.126912e+01   1.563569e-03     00s04  00036  -6.126121e+01   3.741568e-02     00s04  00037  -6.127097e+01   4.851027e-03     00s04  00038  -6.127666e+01   2.473534e-03 
    00s04  00039  -6.128054e+01   3.650778e-04     00s04  00040  -6.128251e+01   2.098265e-04     00s04  00041  -6.128488e+01   1.852357e-04 
    00s04  00042  -6.128612e+01   3.256485e-05     00s04  00043  -6.128696e+01   8.996298e-06     00s05  00044  -6.128749e+01   4.981675e-05     00s05  00045  -6.128748e+01   1.375991e-03     00s05  00046  -6.128767e+01   3.498780e-04     00s05  00047  -6.128798e+01   5.880947e-06     00s05  00048  -6.128810e+01   9.288402e-06     00s05  00049  -6.128819e+01   1.610898e-05     00s05  00050  -6.128816e+01   3.367504e-04     00s05  00051  -6.128822e+01   2.861000e-05     00s06  00052  -6.128825e+01   2.658507e-06     00s06  00053  -6.128826e+01   5.072617e-07 
    00s06  00054  -6.128827e+01   3.455383e-07     00s06  00055  -6.128813e+01   3.629428e-04     00s06  00056  -6.128827e+01   5.585844e-07     00s06  00057  -6.128827e+01   1.825846e-07     00s06  00058  -6.128828e+01   1.167472e-07     00s06  00059  -6.128827e+01   1.764101e-05     00s06  00060  -6.128828e+01   2.680013e-06     00s07  00061  -6.128828e+01   1.354904e-06     00s07  00062  -6.128829e+01   8.078426e-07     00s07  00063  -6.128830e+01   6.423103e-06     00s07  00064  -6.128832e+01   2.031924e-06     00s07  00065  -6.128842e+01   1.784374e-05     00s07  00066   1.614589e+02   1.312764e+05     00s07  00067  -6.128842e+01   1.784897e-05     00s07  00068  -6.128842e+01   1.785419e-05     00s07  00069  -6.197965e+01   6.473278e-01     00s08  00070  -6.198822e+01   6.675123e-01     00s08  00071  -6.213096e+01   1.989755e+00     00s08  00072  -6.128846e+01   4.763874e-06     00s08  00073  -6.184366e+01   4.033167e-01     00s08  00074  -6.213606e+01   1.654332e+00     00s08  00075  -6.232410e+01   6.690580e-01     00s08  00076  -6.240279e+01   2.844501e-02     00s08  00077  -6.241022e+01   2.701263e-03     00s08  00078  -6.241122e+01   1.434858e-04     00s09  00079  -6.241129e+01   1.446305e-05     00s09  00080  -6.241130e+01   1.265580e-06     00s09  00081  -6.241130e+01   1.791756e-06     00s09  00082  -6.241130e+01   4.267459e-07 
    00s09  00083  -6.241130e+01   4.090424e-08     00s09  00084  -6.241130e+01   4.090424e-08 
Runtime:     00s09
Optimization status: Converged

Optimization restart 1/1, f = -62.4113026789414
SEARCH!
self.IOrig:  [160, 180]
self.POrig:  [[' ', ' ', '128', '32', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '50', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '80', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '32', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '32'], [' ', ' ', '8', '100', '8'], [' ', ' ', '32', '8', '128'], [' ', ' ', '4', '20', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '50', '128'], [' ', ' ', '50', '16', '64']]
prob:  <search.SurrogateProblem object at 0x15400820c0d0>
0 OK
bestX [array([[0.6971, 0.5321, 0.0835, 0.9305, 0.2144]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2563.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DSM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2563
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2563
........................................ [0.003639, 0.003613, 0.003553]
OUTPUT:%f [0.003639, 0.003613, 0.003553] 0.0035830000000000002
store_func_eval
problem.constants
None
MLA iteration:  1
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -2.818106e+00           nan     00s00  00001  -2.818106e+00   6.165401e+01     00s00  00002  -1.086437e+01   6.798642e+01     00s00  00003  -4.285553e+01   5.849501e+01     00s00  00004   1.201977e+02   2.472881e+04 
    00s00  00005   2.229235e+01   3.129552e+03     00s00  00006  -6.030640e+01   2.838968e+00     00s00  00007  -6.212717e+01   3.302714e+00     00s00  00008  -6.304429e+01   1.488417e+00     00s01  00009  -6.428799e+01   3.613021e-02     00s01  00010  -6.432185e+01   3.246188e-02     00s01  00011  -6.443615e+01   3.194831e-02     00s01  00012  -6.433310e+01   1.918147e-01 
    00s01  00013  -6.458394e+01   3.418195e-02     00s01  00014  -6.466291e+01   3.388041e-02     00s01  00015  -6.419875e+01   5.807559e+00     00s01  00016  -6.511757e+01   2.072085e-01     00s01  00017  -6.556278e+01   3.953291e-01     00s02  00018  -6.555412e+01   4.820817e-01     00s02  00019  -6.556278e+01   3.953291e-01     00s02  00020  -4.883411e+01   5.678689e+01     00s02  00021  -6.559314e+01   3.282243e-01     00s02  00022  -6.569439e+01   2.891921e-01     00s02  00023  -6.577571e+01   2.557217e-01     00s02  00024  -6.582137e+01   2.068206e-02 
    00s02  00025  -6.583435e+01   3.335624e-03     00s03  00026  -6.583766e+01   1.058939e-03     00s03  00027  -6.583948e+01   1.105235e-03     00s03  00028  -6.584652e+01   2.171169e-03     00s03  00029  -6.587479e+01   1.979481e-02     00s03  00030  -6.644467e+01   6.454215e-01     00s03  00031  -5.063485e+00   2.207561e+04     00s03  00032  -6.649750e+01   7.161376e-01     00s03  00033  -6.655474e+01   7.948575e-01     00s03  00034  -2.540533e+01   2.790728e+03     00s04  00035  -6.675323e+01   1.086040e+00     00s04  00036  -6.695759e+01   1.437789e+00     00s04  00037  -6.248195e+01   7.658610e+01     00s04  00038  -6.718049e+01   2.200586e+00     00s04  00039  -6.720195e+01   2.696387e+00     00s04  00040  -5.502369e+01   1.944945e+03     00s04  00041  -6.720279e+01   2.772495e+00     00s04  00042  -6.739503e+01   1.702053e-01     00s04  00043  -6.744073e+01   9.536840e-02     00s05  00044  -6.746277e+01   3.725036e-03 
    00s05  00045  -6.746469e+01   6.489009e-04     00s05  00046  -6.746500e+01   2.845360e-04     00s05  00047  -6.746566e+01   1.900139e-03     00s05  00048  -6.746705e+01   7.644743e-03     00s05  00049  -6.747056e+01   2.293284e-02     00s05  00050  -6.747767e+01   4.439775e-02     00s05  00051  -6.749009e+01   5.021260e-02     00s05  00052  -6.744155e+01   3.466858e-01     00s06  00053  -6.749305e+01   7.130580e-02     00s06  00054  -6.751030e+01   2.064148e-02     00s06  00055  -6.752177e+01   1.713226e-02     00s06  00056  -6.750711e+01   2.891073e-01     00s06  00057  -6.752564e+01   6.503007e-03     00s06  00058  -6.752859e+01   3.496190e-03     00s06  00059  -6.753202e+01   2.771397e-03     00s06  00060  -6.753475e+01   1.949733e-03     00s06  00061  -6.753690e+01   2.393288e-04     00s07  00062  -6.753818e+01   1.761458e-04 
    00s07  00063  -6.753893e+01   8.327424e-05     00s07  00064  -6.753944e+01   1.074326e-03     00s07  00065  -6.753991e+01   2.450708e-05     00s07  00066  -6.754015e+01   5.525580e-05     00s07  00067  -6.754033e+01   6.531654e-05     00s07  00068  -6.753967e+01   3.750914e-03     00s07  00069  -6.754037e+01   1.300817e-04     00s07  00070  -6.754050e+01   1.022953e-05     00s08  00071  -6.754056e+01   2.219152e-04     00s08  00072  -6.754064e+01   5.169928e-05     00s08  00073  -6.754066e+01   2.969841e-05     00s08  00074  -6.754070e+01   5.113738e-07 
    00s08  00075  -6.754071e+01   1.514873e-06     00s08  00076  -6.754070e+01   1.031095e-04     00s08  00077  -6.754072e+01   1.109279e-05     00s08  00078  -6.754073e+01   8.108331e-07     00s09  00079  -6.754074e+01   1.058418e-06     00s09  00080  -6.754074e+01   1.752045e-05     00s09  00081  -6.754074e+01   1.568167e-06 
    00s09  00082  -6.754075e+01   2.033970e-07     00s09  00083  -6.754075e+01   7.106263e-07     00s09  00084  -6.754075e+01   3.037841e-06     00s09  00085  -6.754075e+01   1.016143e-07     00s09  00086  -6.754075e+01   1.329211e-07     00s09  00087  -6.754075e+01   1.988388e-06     00s10  00088  -6.754075e+01   5.348490e-07     00s10  00089  -6.754075e+01   8.200690e-08 
    00s10  00090  -6.754075e+01   5.958800e-08     00s10  00091  -6.754075e+01   1.396513e-06     00s10  00092  -6.754075e+01   1.537176e-07     00s10  00093  -6.754075e+01   1.537176e-07 
Runtime:     00s10
Optimization status: Converged

Optimization restart 1/1, f = -67.54075043941035
SEARCH!
self.IOrig:  [160, 180]
self.POrig:  [[' ', ' ', '128', '32', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '50', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '80', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '32', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '32'], [' ', ' ', '8', '100', '8'], [' ', ' ', '32', '8', '128'], [' ', ' ', '4', '20', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '50', '128'], [' ', ' ', '50', '16', '64'], [' ', ' ', '4', '2048', '16']]
prob:  <search.SurrogateProblem object at 0x15400819f190>
0 OK
bestX [array([[0.8181, 0.7902, 0.1921, 0.9939, 0.0724]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3303.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DSM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3303
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3303
........................................ [0.00043, 0.000368, 0.000373]
OUTPUT:%f [0.00043, 0.000368, 0.000373] 0.0003705
store_func_eval
problem.constants
None
MLA iteration:  2
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -3.848168e+00           nan     00s00  00001  -3.848168e+00   7.236297e+01     00s00  00002  -1.253416e+01   7.870723e+01     00s00  00003  -4.649376e+01   6.499166e+01     00s00  00004   1.302615e+02   2.989466e+04     00s00  00005  -3.367970e+01   5.540429e+02     00s00  00006  -6.687041e+01   7.904830e+00     00s00  00007  -6.839826e+01   2.880022e-01     00s00  00008  -6.852112e+01   5.351531e-02     00s01  00009  -6.855931e+01   6.271293e-02 
    00s01  00010  -6.883290e+01   2.247131e-01     00s01  00011  -6.892536e+01   1.338007e-01     00s01  00012  -6.902079e+01   5.925110e-03     00s01  00013  -6.903812e+01   7.425404e-03     00s01  00014  -6.907049e+01   7.096123e-03     00s01  00015  -6.907329e+01   2.039017e-01     00s01  00016  -6.908817e+01   5.176679e-03     00s01  00017  -6.882263e+01   1.448082e+00     00s02  00018  -6.913611e+01   3.974810e-03     00s02  00019  -6.911830e+01   1.624688e-01     00s02  00020  -6.915866e+01   9.729561e-03     00s02  00021  -6.797899e+01   4.234014e+00 
    00s02  00022  -6.916285e+01   1.204778e-02     00s02  00023  -6.923837e+01   6.722438e-02     00s02  00024  -5.922015e+01   3.017875e+00     00s02  00025  -6.924222e+01   7.056007e-02     00s02  00026  -6.924601e+01   7.396468e-02     00s03  00027  -6.722286e+01   5.548558e+00     00s03  00028  -6.928983e+01   1.239033e-01     00s03  00029  -5.947354e+01   6.676447e-01     00s03  00030  -6.929437e+01   1.261697e-01     00s03  00031  -6.932309e+01   1.628187e-01     00s03  00032  -6.938296e+01   5.709720e-02     00s03  00033  -6.940762e+01   1.043173e+00     00s03  00034  -6.946805e+01   1.381779e-01     00s03  00035  -6.924432e+01   3.291963e+00     00s04  00036  -6.966212e+01   6.018098e-01     00s04  00037  -5.341119e+01   5.331278e+01     00s04  00038  -6.967875e+01   6.408999e-01     00s04  00039  -6.974351e+01   9.963758e-01     00s04  00040  -6.994409e+01   3.601202e-01     00s04  00041  -6.895738e+01   7.678743e-01     00s04  00042  -6.998147e+01   2.836733e-01     00s04  00043  -7.010420e+01   2.644706e-01     00s05  00044  -7.014275e+01   1.201630e-01     00s05  00045  -7.023910e+01   1.305116e-01     00s05  00046  -7.052139e+01   1.104795e+00     00s05  00047  -4.732959e+01   7.996361e+01     00s05  00048  -7.062973e+01   1.879871e+00     00s05  00049  -7.074893e+01   3.033089e+00     00s05  00050  -6.640565e+01   4.791562e+01     00s05  00051  -7.093300e+01   5.979877e+00     00s05  00052   3.808977e+01   3.655275e-01     00s06  00053  -6.724339e+01   2.436813e+01     00s06  00054  -7.100072e+01   7.758794e+00     00s06  00055  -7.120928e+01   9.183375e+00     00s06  00056  -7.166439e+01   5.069417e+00     00s06  00057  -7.222778e+01   2.795898e-01     00s06  00058  -7.227964e+01   5.966632e-02     00s06  00059  -7.229470e+01   2.005843e-02     00s06  00060  -7.230236e+01   1.203711e-02     00s06  00061  -7.230927e+01   1.594357e-02 
    00s07  00062  -7.233318e+01   3.378031e-02     00s07  00063  -7.237733e+01   4.267582e-02     00s07  00064  -7.214777e+01   1.242606e+00     00s07  00065  -7.238634e+01   4.139509e-02     00s07  00066  -7.242509e+01   1.673031e-02     00s07  00067  -7.246072e+01   2.346773e-02     00s07  00068  -7.248496e+01   8.075730e-03     00s07  00069  -7.250010e+01   1.181550e-02     00s07  00070  -7.251987e+01   8.092167e-03     00s08  00071  -7.232565e+01   1.619546e+00     00s08  00072  -7.252344e+01   4.182010e-02     00s08  00073  -7.254232e+01   3.915923e-03 
    00s08  00074  -7.255757e+01   1.069646e-03     00s08  00075  -7.256863e+01   1.678693e-03     00s08  00076  -7.255081e+01   2.249243e-01     00s08  00077  -7.257082e+01   1.018150e-02     00s08  00078  -7.257809e+01   2.089179e-03     00s08  00079  -7.258367e+01   2.642283e-04     00s09  00080  -7.258576e+01   8.676664e-03     00s09  00081  -7.258893e+01   5.103241e-04     00s09  00082  -7.259059e+01   2.312601e-04 
    00s09  00083  -7.259170e+01   3.333364e-04     00s09  00084  -7.257974e+01   7.803101e-02     00s09  00085  -7.259177e+01   5.919145e-04     00s09  00086  -7.259271e+01   7.859838e-05     00s09  00087  -7.259316e+01   7.509245e-04     00s10  00088  -7.259370e+01   1.177925e-04     00s10  00089  -7.259389e+01   4.919395e-05     00s10  00090  -7.259381e+01   2.727728e-03     00s10  00091  -7.259397e+01   3.861230e-04     00s10  00092  -7.259417e+01   1.585362e-05     00s10  00093  -7.259426e+01   1.278648e-05     00s10  00094  -7.259434e+01   1.059274e-05     00s10  00095  -7.259433e+01   5.456503e-04 
    00s10  00096  -7.259437e+01   9.508606e-05     00s11  00097  -7.259441e+01   1.027349e-05     00s11  00098  -7.259444e+01   1.570881e-06     00s11  00099  -7.259445e+01   2.646727e-06     00s11  00100  -7.259403e+01   2.620011e-03     00s11  00101  -7.259446e+01   3.470735e-06     00s11  00102  -7.259447e+01   4.609150e-07     00s11  00103  -7.259447e+01   3.225339e-05 
    00s11  00104  -7.259448e+01   6.117880e-06     00s11  00105  -7.259448e+01   7.164905e-07     00s12  00106  -7.259449e+01   1.341850e-06     00s12  00107  -7.259448e+01   1.259657e-05     00s12  00108  -7.259449e+01   8.292153e-07     00s12  00109  -7.259449e+01   4.413763e-07     00s12  00110  -7.259449e+01   2.457119e-06 
    00s12  00111  -7.259449e+01   8.737745e-08     00s12  00112  -7.259449e+01   8.029440e-08     00s12  00113  -7.259449e+01   3.698078e-08     00s12  00114  -7.259449e+01   2.766415e-08     00s13  00115  -7.259449e+01   3.783303e-06     00s13  00116  -7.259449e+01   1.930459e-07     00s13  00117  -7.259449e+01   1.930459e-07 
Runtime:     00s13
Optimization status: Converged

Optimization restart 1/1, f = -72.59449315052518
SEARCH!
self.IOrig:  [160, 180]
self.POrig:  [[' ', ' ', '128', '32', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '50', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '80', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '32', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '32'], [' ', ' ', '8', '100', '8'], [' ', ' ', '32', '8', '128'], [' ', ' ', '4', '20', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '50', '128'], [' ', ' ', '50', '16', '64'], [' ', ' ', '4', '2048', '16'], [' ', ' ', '16', '2048', '4']]
prob:  <search.SurrogateProblem object at 0x154008089610>
0 OK
bestX [array([[0.9307, 0.6304, 0.2913, 0.9263, 0.1168]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3284.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DSM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3284
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3284
........................................ [0.002458, 0.00237, 0.002288]
OUTPUT:%f [0.002458, 0.00237, 0.002288] 0.0023290000000000003
store_func_eval
problem.constants
None
MLA iteration:  3
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -5.185074e+00           nan     00s00  00001  -5.185074e+00   8.392608e+01 
    00s00  00002  -1.452189e+01   9.054086e+01     00s00  00003  -5.060198e+01   7.127228e+01     00s00  00004   1.525569e+02   4.030573e+04     00s00  00005  -5.666504e+01   1.973015e+02     00s00  00006  -6.736751e+01   5.502363e+00     00s00  00007  -7.041120e+01   2.258836e+00     00s01  00008  -6.857494e+01   6.841048e+00     00s01  00009  -7.322171e+01   7.322316e-02 
    00s01  00010  -7.323237e+01   3.218545e-01     00s01  00011  -7.332229e+01   8.289503e-02     00s01  00012  -7.341969e+01   3.706819e-02     00s01  00013  -7.364182e+01   3.799510e-02 
    00s01  00014  -7.371485e+01   2.313366e-02     00s01  00015  -7.377096e+01   1.219664e-02     00s01  00016  -7.380196e+01   2.841311e-02     00s02  00017  -7.382550e+01   1.164524e-02     00s02  00018  -7.370396e+01   6.824592e-01     00s02  00019  -7.387218e+01   5.577241e-03     00s02  00020  -7.385513e+01   9.946480e-02 
    00s02  00021  -7.388547e+01   6.224364e-03     00s02  00022  -7.392610e+01   6.374254e-02     00s02  00023  -5.934353e+01   6.105395e+01     00s02  00024  -7.393000e+01   6.742998e-02     00s03  00025  -7.401976e+01   1.032494e+00     00s03  00026  -4.499921e+01   2.886409e+02     00s03  00027  -7.402368e+01   1.074505e+00     00s03  00028  -7.403490e+01   1.516207e+00     00s03  00029  -7.403727e+01   1.248644e+00     00s03  00030  -6.344602e+01   3.824310e+01     00s03  00031  -7.404260e+01   1.277092e+00     00s03  00032  -7.403014e+01   1.906630e+00     00s03  00033  -7.408007e+01   1.534109e+00     00s04  00034  -7.337117e+01   6.412832e+00     00s04  00035  -7.416231e+01   1.515876e+00     00s04  00036  -7.436680e+01   3.425741e+00     00s04  00037  -7.452417e+01   9.591150e-01     00s04  00038  -7.485847e+01   1.770462e+00     00s04  00039  -7.504652e+01   5.979178e-01     00s04  00040  -7.484408e+01   5.805142e+00     00s04  00041  -7.554053e+01   9.377379e-01     00s05  00042  -7.547002e+01   1.445387e+01     00s05  00043  -7.618137e+01   3.220199e+00     00s05  00044  -7.305428e+01   5.102704e+01     00s05  00045  -7.680593e+01   7.532341e+00     00s05  00046  -7.822356e+01   1.668087e+01     00s05  00047  -7.544962e+01   1.419709e+02     00s05  00048  -7.977302e+01   9.584155e+00     00s05  00049  -8.096047e+01   1.980897e+00     00s05  00050  -8.092336e+01   4.501347e+00     00s06  00051  -8.108096e+01   8.611850e-01     00s06  00052  -8.103745e+01   2.479888e+00     00s06  00053  -8.110621e+01   8.625230e-02     00s06  00054  -8.113201e+01   7.168175e-02     00s06  00055  -8.116073e+01   2.720850e-02     00s06  00056  -8.120385e+01   5.755755e-02     00s06  00057  -8.126335e+01   6.350166e-02     00s06  00058  -8.137534e+01   2.019083e-02 
    00s07  00059  -8.142389e+01   2.989522e-02     00s07  00060  -8.146722e+01   1.093539e-02     00s07  00061  -8.147444e+01   3.939852e-01     00s07  00062  -8.150076e+01   1.527614e-02     00s07  00063  -8.150955e+01   1.257923e-02     00s07  00064  -8.151624e+01   1.100743e-01     00s07  00065  -8.152500e+01   2.977384e-02     00s07  00066  -8.152972e+01   1.789980e-02     00s07  00067  -8.153727e+01   3.506459e-03     00s08  00068  -8.153782e+01   5.190267e-02     00s08  00069  -8.154070e+01   2.648673e-03     00s08  00070  -8.154157e+01   9.653126e-04     00s08  00071  -8.154295e+01   2.538537e-03     00s08  00072  -8.154413e+01   1.296486e-03 
    00s08  00073  -8.154509e+01   5.202977e-04     00s08  00074  -8.154526e+01   8.439337e-03     00s08  00075  -8.154574e+01   9.581885e-04     00s08  00076  -8.154594e+01   1.634775e-04     00s09  00077  -8.154604e+01   7.280758e-03     00s09  00078  -8.154625e+01   9.185734e-04     00s09  00079  -8.154638e+01   1.263027e-04     00s09  00080  -8.154646e+01   2.077384e-04     00s09  00081  -8.154653e+01   3.593906e-04     00s09  00082  -8.154658e+01   1.539514e-04 
    00s09  00083  -8.154660e+01   4.230720e-05     00s09  00084  -8.154662e+01   2.859329e-05     00s09  00085  -8.154663e+01   4.537023e-05     00s10  00086  -8.154664e+01   3.074682e-04     00s10  00087  -8.154666e+01   9.843611e-06     00s10  00088  -8.154666e+01   5.732487e-06 
    00s10  00089  -8.154667e+01   4.173260e-06     00s10  00090  -8.154665e+01   8.060968e-04     00s10  00091  -8.154667e+01   2.694556e-05     00s10  00092  -8.154667e+01   9.682798e-06     00s10  00093  -8.154668e+01   1.701599e-07     00s10  00094  -8.154668e+01   2.022562e-07     00s11  00095  -8.154668e+01   5.663174e-06     00s11  00096  -8.154668e+01   6.398386e-06 
    00s11  00097  -8.154668e+01   5.916403e-07     00s11  00098  -8.154668e+01   2.491331e-07     00s11  00099  -8.154668e+01   3.135264e-07     00s11  00100  -8.154668e+01   3.420934e-05     00s11  00101  -8.154668e+01   1.101940e-06     00s11  00102  -8.154668e+01   1.101940e-06 
Runtime:     00s11
Optimization status: Converged

Optimization restart 1/1, f = -81.54668029285355
SEARCH!
self.IOrig:  [160, 180]
self.POrig:  [[' ', ' ', '128', '32', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '50', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '80', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '32', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '32'], [' ', ' ', '8', '100', '8'], [' ', ' ', '32', '8', '128'], [' ', ' ', '4', '20', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '50', '128'], [' ', ' ', '50', '16', '64'], [' ', ' ', '4', '2048', '16'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '20', '2048', '8']]
prob:  <search.SurrogateProblem object at 0x15400814ed90>
0 OK
bestX [array([[0.4687, 0.3008, 0.0943, 0.1793, 0.0747]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4715.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DSM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4715
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4715
........................................ [0.001396, 0.001286, 0.00129]
OUTPUT:%f [0.001396, 0.001286, 0.00129] 0.001288
store_func_eval
problem.constants
None
MLA iteration:  4
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -6.218756e+00           nan     00s00  00001  -6.218756e+00   9.630190e+01     00s00  00002  -1.619723e+01   1.029073e+02     00s00  00003  -5.401365e+01   7.236622e+01     00s00  00004   1.339205e+02   3.497442e+04     00s00  00005  -7.260223e+01   3.184453e+01     00s00  00006  -7.556082e+01   2.016229e+00 
    00s00  00007  -7.649619e+01   1.985777e-01     00s00  00008  -7.662347e+01   1.432960e-01     00s01  00009  -7.675285e+01   2.066199e-01     00s01  00010  -7.003276e+01   4.050569e+01     00s01  00011  -7.708310e+01   3.389098e-01     00s01  00012  -7.578062e+01   1.101763e+01     00s01  00013  -7.746160e+01   5.307069e-01     00s01  00014  -7.761603e+01   5.808964e-01     00s01  00015  -6.985504e+01   1.946167e+01     00s01  00016  -7.763213e+01   6.215253e-01     00s01  00017  -7.785163e+01   4.011840e-01     00s02  00018  -7.812751e+01   9.672479e-03     00s02  00019  -7.813414e+01   3.317991e-03     00s02  00020  -7.813769e+01   2.049850e-03     00s02  00021  -7.816985e+01   2.849352e-02 
    00s02  00022  -7.818078e+01   2.875802e-02     00s02  00023  -7.820247e+01   7.841877e-03     00s02  00024  -7.823087e+01   3.442284e-02     00s02  00025  -7.820459e+01   1.998912e+00     00s03  00026  -7.840845e+01   3.486049e-01     00s03  00027  -7.855663e+01   4.348919e-01     00s03  00028  -7.855760e+01   4.555212e-01     00s03  00029  -7.860611e+01   1.946256e-01     00s03  00030  -6.508960e+01   2.445887e+01     00s03  00031  -7.862260e+01   1.708156e-01     00s03  00032  -7.868517e+01   1.578896e-01     00s03  00033  -7.872369e+01   1.351080e-01     00s03  00034  -7.887446e+01   2.472731e-01     00s04  00035  -7.966576e+01   8.390299e+00     00s04  00036  -6.029818e+01   5.880427e+01     00s04  00037  -7.971163e+01   3.232268e+01     00s04  00038  -7.831521e+01   2.878813e+01     00s04  00039  -8.041132e+01   3.801354e+01 
    00s04  00040  -3.500787e+00   8.085525e+01     00s04  00041  -7.383351e+01   7.331064e+01     00s04  00042  -8.062368e+01   2.733733e+01     00s04  00043  -8.188011e+01   1.284775e+01     00s05  00044  -7.912414e+01   1.329801e+01     00s05  00045  -8.285671e+01   6.923948e+00     00s05  00046  -8.367371e+01   1.046695e+01     00s05  00047  -8.402114e+01   1.615861e+00 
    00s05  00048  -8.412976e+01   7.799395e-01     00s05  00049  -8.428413e+01   1.271414e-01     00s05  00050  -8.432941e+01   3.763776e-02     00s05  00051  -8.435294e+01   8.759355e-03     00s05  00052  -8.437162e+01   5.021877e-03     00s06  00053  -8.439505e+01   1.453127e-02     00s06  00054  -8.441258e+01   4.013973e-01     00s06  00055  -8.444896e+01   7.441944e-02 
    00s06  00056  -8.446223e+01   5.711494e-02     00s06  00057  -8.447613e+01   5.418477e-02     00s06  00058  -8.449013e+01   2.211448e-02     00s06  00059  -8.449146e+01   7.226593e-02 
    00s06  00060  -8.450271e+01   3.285721e-03     00s07  00061  -8.450626e+01   9.766301e-04     00s07  00062  -8.450856e+01   4.573697e-02     00s07  00063  -8.451180e+01   2.623222e-03     00s07  00064  -8.451349e+01   2.086020e-03     00s07  00065  -8.451490e+01   8.474005e-04     00s07  00066  -8.451565e+01   6.636115e-03     00s07  00067  -8.451631e+01   5.845097e-04 
    00s07  00068  -8.451669e+01   4.556004e-04     00s07  00069  -8.451700e+01   2.582687e-04     00s08  00070  -8.451719e+01   9.591674e-04     00s08  00071  -8.451738e+01   7.161194e-05 
    00s08  00072  -8.451744e+01   6.899724e-05     00s08  00073  -8.451573e+01   9.844143e-03     00s08  00074  -8.451745e+01   1.244162e-04     00s08  00075  -8.451752e+01   1.636770e-04     00s08  00076  -8.451754e+01   1.429124e-03     00s08  00077  -8.451758e+01   7.799251e-05     00s08  00078  -8.451760e+01   1.564372e-05     00s09  00079  -8.451761e+01   4.294365e-05     00s09  00080  -8.451762e+01   1.538480e-05     00s09  00081  -8.451763e+01   1.615255e-04     00s09  00082  -8.451764e+01   1.100910e-05     00s09  00083  -8.451764e+01   3.655331e-06 
    00s09  00084  -8.451764e+01   7.729063e-06     00s09  00085  -8.451765e+01   1.341362e-06     00s09  00086  -8.451765e+01   8.293584e-06     00s09  00087  -8.451765e+01   7.665321e-06     00s10  00088  -8.451765e+01   1.377792e-06     00s10  00089  -8.451765e+01   5.811791e-07     00s10  00090  -8.451765e+01   1.371657e-06     00s10  00091  -8.451765e+01   4.030447e-05     00s10  00092  -8.451765e+01   1.329807e-06     00s10  00093  -8.451765e+01   1.329807e-06 
Runtime:     00s10
Optimization status: Converged

Optimization restart 1/1, f = -84.51764972903216
SEARCH!
self.IOrig:  [160, 180]
self.POrig:  [[' ', ' ', '128', '32', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '50', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '80', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '32', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '32'], [' ', ' ', '8', '100', '8'], [' ', ' ', '32', '8', '128'], [' ', ' ', '4', '20', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '50', '128'], [' ', ' ', '50', '16', '64'], [' ', ' ', '4', '2048', '16'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '20', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '4']]
prob:  <search.SurrogateProblem object at 0x1540081fb520>
0 OK
bestX [array([[0.3575, 0.3785, 0.9257, 0.0073, 0.0061]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6045.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DSM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6045
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6045
........................................ [0.001415, 0.001328, 0.001322]
OUTPUT:%f [0.001415, 0.001328, 0.001322] 0.001325
store_func_eval
problem.constants
None
MLA iteration:  5
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -6.517866e+00           nan     00s00  00001  -6.517866e+00   1.078214e+02     00s00  00002  -1.707980e+01   1.152555e+02 
    00s00  00003  -5.706896e+01   8.114700e+01     00s00  00004   1.244304e+02   3.333698e+04     00s00  00005  -7.644628e+01   3.672114e+01     00s00  00006  -8.033703e+01   1.145438e+00     00s00  00007  -8.075391e+01   1.906351e-01     00s00  00008  -8.089376e+01   2.076172e-01     00s01  00009  -8.130332e+01   6.611771e-01     00s01  00010  -7.048013e+01   5.168676e+01 
    00s01  00011  -8.142005e+01   7.195168e-01     00s01  00012  -8.153988e+01   7.796729e-01     00s01  00013  -8.020663e+01   1.116252e+01     00s01  00014  -8.191400e+01   9.106138e-01     00s01  00015  -8.196781e+01   1.328377e+00     00s01  00016  -8.218599e+01   5.273954e-01     00s01  00017  -8.276094e+01   1.115540e-01     00s02  00018  -8.278626e+01   1.556410e-02     00s02  00019  -8.278851e+01   9.975363e-04 
    00s02  00020  -8.278899e+01   1.201367e-03     00s02  00021  -8.279125e+01   1.700869e-03     00s02  00022  -8.279898e+01   8.251907e-03     00s02  00023  -8.282733e+01   1.378496e-01     00s02  00024  -8.282627e+01   3.943897e-02     00s02  00025  -7.877740e+01   1.959109e+01     00s03  00026  -8.283408e+01   1.484229e-01     00s03  00027  -8.284084e+01   6.632476e-02     00s03  00028  -8.284792e+01   1.688211e-01     00s03  00029  -8.285570e+01   9.392876e-02     00s03  00030  -8.289210e+01   1.231605e-01     00s03  00031  -8.299920e+01   1.373039e-01     00s03  00032   1.472857e+02   4.881929e+04     00s03  00033  -8.330798e+01   1.864718e+00     00s03  00034  -8.306082e+01   2.148834e-01     00s04  00035  -8.333486e+01   1.222816e+00     00s04  00036  -8.334765e+01   1.434079e+00     00s04  00037  -6.610587e+01   1.549590e+02     00s04  00038  -8.335301e+01   1.469645e+00     00s04  00039  -8.288681e+01   4.745898e+00     00s04  00040  -8.342756e+01   1.605927e+00     00s04  00041  -8.372066e+01   2.753242e+00     00s04  00042  -8.412418e+01   2.100353e+00     00s04  00043  -8.216258e+01   2.050869e+01     00s05  00044  -8.652679e+01   3.243283e+00     00s05  00045  -8.457857e+01   6.896277e+01     00s05  00046  -8.686525e+01   1.621530e+00     00s05  00047  -8.720427e+01   8.958940e-01     00s05  00048  -8.705919e+01   1.220154e+01     00s05  00049  -8.758133e+01   2.476094e+00     00s05  00050  -8.707598e+01   1.693877e+01     00s05  00051  -8.774837e+01   8.573603e-01     00s05  00052  -8.794137e+01   1.537230e-01     00s06  00053  -8.797891e+01   1.238085e-01     00s06  00054  -8.799037e+01   3.798424e-02     00s06  00055  -8.800158e+01   4.526602e-02 
    00s06  00056  -8.804592e+01   1.012442e-01     00s06  00057  -7.591103e+01   3.367942e+01     00s06  00058  -8.806040e+01   1.025013e-01     00s06  00059  -8.807415e+01   1.019688e-01     00s06  00060  -8.586639e+01   1.424319e+01     00s07  00061  -8.810561e+01   1.480507e-01     00s07  00062  -8.527860e+01   1.030922e+01     00s07  00063  -8.811562e+01   1.602249e-01     00s07  00064  -8.812535e+01   4.666089e-02     00s07  00065  -8.813551e+01   6.462032e-02     00s07  00066  -8.814002e+01   9.109770e-03     00s07  00067  -8.814051e+01   8.334138e-03     00s07  00068  -8.814205e+01   3.192360e-03     00s07  00069  -8.814456e+01   1.076471e-02     00s08  00070  -8.814659e+01   2.590515e-02     00s08  00071  -8.814999e+01   3.779670e-02     00s08  00072  -8.815049e+01   4.738682e-02     00s08  00073  -8.815417e+01   2.680753e-03     00s08  00074  -8.815433e+01   8.327886e-04 
    00s08  00075  -8.815446e+01   5.092714e-05     00s08  00076  -8.815447e+01   1.266811e-05     00s08  00077  -8.815447e+01   4.276229e-06     00s08  00078  -8.815447e+01   4.364907e-05     00s09  00079  -8.815447e+01   6.576117e-07     00s09  00080  -8.815447e+01   1.178428e-07     00s09  00081  -8.815447e+01   1.178428e-07 
Runtime:     00s09
Optimization status: Converged

Optimization restart 1/1, f = -88.15447453378322
SEARCH!
self.IOrig:  [160, 180]
self.POrig:  [[' ', ' ', '128', '32', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '50', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '80', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '32', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '32'], [' ', ' ', '8', '100', '8'], [' ', ' ', '32', '8', '128'], [' ', ' ', '4', '20', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '50', '128'], [' ', ' ', '50', '16', '64'], [' ', ' ', '4', '2048', '16'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '20', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4']]
prob:  <search.SurrogateProblem object at 0x154008153eb0>
0 OK
bestX [array([[0.0573, 0.4372, 0.1013, 0.4305, 0.0512]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5301.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DSM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5301
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5301
........................................ [0.001399, 0.001209, 0.001213]
OUTPUT:%f [0.001399, 0.001209, 0.001213] 0.001211
store_func_eval
problem.constants
None
MLA iteration:  6
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -7.453834e+00           nan     00s00  00001  -7.453834e+00   1.233019e+02     00s00  00002  -1.872255e+01   1.305944e+02     00s00  00003  -6.051088e+01   8.454403e+01     00s00  00004   9.448847e+01   2.466697e+04     00s00  00005  -8.145228e+01   1.669451e+01     00s00  00006  -8.516321e+01   3.946971e-01 
    00s00  00007  -8.535717e+01   2.391081e-01     00s00  00008  -8.592212e+01   6.712184e-01     00s01  00009  -7.586125e+01   5.484474e+01     00s01  00010  -8.610482e+01   8.107041e-01     00s01  00011  -8.628171e+01   9.460107e-01     00s01  00012  -8.532347e+01   8.618060e+00     00s01  00013  -8.665427e+01   1.088794e+00     00s01  00014  -7.248342e+01   3.053546e+01     00s01  00015  -8.670887e+01   1.317558e+00     00s01  00016  -8.697013e+01   8.568636e-01 
    00s01  00017  -8.752871e+01   6.226928e-02     00s02  00018  -8.757433e+01   6.316917e-03     00s02  00019  -8.757652e+01   4.317437e-03     00s02  00020  -8.757794e+01   3.215149e-03     00s02  00021  -8.760026e+01   2.771042e-02     00s02  00022  -8.722880e+01   1.354775e+00     00s02  00023  -8.766271e+01   1.759655e-01     00s02  00024  -8.768891e+01   2.624822e-01     00s02  00025  -8.762395e+01   3.330800e-01     00s03  00026  -8.769909e+01   2.534739e-01     00s03  00027  -8.779364e+01   1.779422e-01     00s03  00028  -8.797255e+01   5.090932e-01     00s03  00029   4.396200e+03   1.611964e+07     00s03  00030  -5.826013e+01   7.818313e+02     00s03  00031  -8.799216e+01   6.482531e-01     00s03  00032  -8.801278e+01   8.154778e-01     00s03  00033  -8.832171e+01   2.219829e+01     00s03  00034  -8.805119e+01   1.174931e+00     00s04  00035  -8.909373e+01   1.326213e+01     00s04  00036  -8.918039e+01   1.461951e+01     00s04  00037   2.084774e+04   1.292305e+08     00s04  00038  -3.341301e+01   3.478940e+03     00s04  00039  -8.918459e+01   1.483157e+01     00s04  00040  -8.953092e+01   1.396422e+01     00s04  00041  -9.095493e+01   9.199420e+00     00s04  00042  -9.180830e+01   1.870037e+00     00s04  00043  -9.219306e+01   1.824959e+00     00s05  00044  -9.258220e+01   1.398782e+00     00s05  00045  -9.271514e+01   1.066942e+00     00s05  00046  -9.278409e+01   4.613973e-01     00s05  00047  -9.279762e+01   6.194147e-02 
    00s05  00048  -9.280346e+01   8.653797e-03     00s05  00049  -9.280664e+01   1.952482e-03     00s05  00050  -9.280774e+01   5.544857e-03     00s05  00051  -9.280873e+01   2.382678e-03     00s05  00052  -9.281047e+01   3.144829e-03     00s06  00053  -9.281199e+01   1.213366e-02     00s06  00054  -9.281304e+01   1.242653e-01     00s06  00055  -9.281342e+01   3.291559e-02     00s06  00056  -9.281469e+01   1.654694e-01     00s06  00057  -9.281530e+01   6.452104e-02     00s06  00058  -9.282011e+01   5.907973e-02     00s06  00059  -9.283000e+01   2.612632e-02     00s06  00060  -9.284029e+01   9.650842e-02     00s07  00061  -9.285498e+01   7.354363e-02     00s07  00062  -9.286408e+01   9.332379e-03     00s07  00063  -9.287255e+01   1.907261e-02     00s07  00064  -9.287628e+01   1.000086e-02     00s07  00065  -9.287996e+01   2.683717e-02     00s07  00066  -9.288292e+01   3.572980e-03 
    00s07  00067  -9.288400e+01   9.893264e-04     00s07  00068  -9.288532e+01   4.549111e-04     00s07  00069  -9.288597e+01   5.570920e-04     00s08  00070  -9.288638e+01   6.705747e-03     00s08  00071  -9.288680e+01   3.621114e-04     00s08  00072  -9.288703e+01   5.027772e-04     00s08  00073  -9.288720e+01   3.085722e-04     00s08  00074  -9.288650e+01   3.045575e-02     00s08  00075  -9.288723e+01   1.385375e-03     00s08  00076  -9.288736e+01   1.260213e-04     00s08  00077  -9.288745e+01   6.327317e-05 
    00s08  00078  -9.288751e+01   6.180215e-05     00s09  00079  -9.288752e+01   5.504010e-04     00s09  00080  -9.288757e+01   3.840242e-05     00s09  00081  -9.288758e+01   2.036894e-05     00s09  00082  -9.288760e+01   1.981716e-05     00s09  00083  -9.288761e+01   8.613591e-05     00s09  00084  -9.288761e+01   2.368218e-04     00s09  00085  -9.288761e+01   3.178951e-05     00s09  00086  -9.288762e+01   1.097878e-05 
    00s09  00087  -9.288762e+01   2.409497e-06     00s10  00088  -9.288763e+01   5.282123e-05     00s10  00089  -9.288763e+01   3.600403e-06     00s10  00090  -9.288763e+01   1.453105e-06     00s10  00091  -9.288763e+01   1.941334e-06     00s10  00092  -9.288763e+01   1.638082e-06 
    00s10  00093  -9.288763e+01   9.451177e-07     00s10  00094  -9.288763e+01   2.170762e-07     00s10  00095  -9.288763e+01   8.220482e-08     00s10  00096  -9.288763e+01   4.359874e-06     00s11  00097  -9.288763e+01   4.359874e-06 
Runtime:     00s11
Optimization status: Converged

Optimization restart 1/1, f = -92.88763236247829
SEARCH!
self.IOrig:  [160, 180]
self.POrig:  [[' ', ' ', '128', '32', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '50', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '80', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '32', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '32'], [' ', ' ', '8', '100', '8'], [' ', ' ', '32', '8', '128'], [' ', ' ', '4', '20', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '50', '128'], [' ', ' ', '50', '16', '64'], [' ', ' ', '4', '2048', '16'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '20', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '32', '4']]
prob:  <search.SurrogateProblem object at 0x1540031df940>
0 OK
bestX [array([[0.1062, 0.3446, 0.7828, 0.9097, 0.0252]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3605.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DSM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3605
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3605
........................................ [0.001342, 0.001198, 0.001204]
OUTPUT:%f [0.001342, 0.001198, 0.001204] 0.001201
store_func_eval
problem.constants
None
MLA iteration:  7
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -7.907837e+00           nan     00s00  00001  -7.907837e+00   1.374932e+02     00s00  00002  -1.980522e+01   1.454117e+02     00s00  00003  -6.380303e+01   9.322107e+01     00s00  00004   8.551062e+01   2.343399e+04     00s00  00005  -8.626901e+01   1.568862e+01     00s00  00006  -8.988736e+01   2.629322e-01 
    00s00  00007  -9.004050e+01   2.330578e-01     00s00  00008  -9.048452e+01   6.432859e-01     00s01  00009  -8.781845e+01   2.189457e+01     00s01  00010  -9.113016e+01   1.005561e+00     00s01  00011  -9.144030e+01   1.126047e+00     00s01  00012  -7.931974e+01   3.592983e+00     00s01  00013  -9.150221e+01   1.446515e+00     00s01  00014  -9.190175e+01   6.939306e-01 
    00s01  00015  -9.232551e+01   2.566686e-02     00s01  00016  -9.233868e+01   5.090721e-03     00s01  00017  -9.234136e+01   3.940058e-03     00s02  00018  -9.234443e+01   5.815508e-03     00s02  00019  -9.237399e+01   4.164163e-02     00s02  00020  -8.453958e+01   1.964975e+02     00s02  00021  -9.074263e+01   1.382981e+01     00s02  00022  -9.241099e+01   1.128760e-01     00s02  00023  -8.954550e+01   3.251417e+01     00s02  00024  -9.242154e+01   1.612116e-01     00s02  00025  -9.244328e+01   1.097857e-01     00s03  00026  -9.260597e+01   2.593845e-01     00s03  00027  -9.286001e+01   8.938737e-01     00s03  00028  -7.698667e+01   9.649860e+01     00s03  00029  -9.292818e+01   1.101749e+00     00s03  00030  -9.302446e+01   1.415753e+00     00s03  00031  -9.254918e+01   2.895608e+01     00s03  00032  -9.440228e+01   6.291862e+00     00s03  00033  -9.469795e+01   8.044123e+00     00s03  00034  -9.469929e+01   8.223999e+00     00s04  00035   9.527854e+03   5.831636e+07     00s04  00036  -4.036640e+01   3.553767e+03     00s04  00037  -9.460796e+01   1.052277e+01     00s04  00038  -9.470054e+01   8.390795e+00     00s04  00039  -9.506597e+01   6.879764e+00     00s04  00040  -9.633215e+01   5.748755e+00     00s04  00041  -9.682891e+01   2.122336e+00 
    00s04  00042  -9.722975e+01   9.484705e-01     00s04  00043  -9.751611e+01   5.213249e-01     00s05  00044  -9.756975e+01   9.331470e-01     00s05  00045  -9.760242e+01   4.691401e-01     00s05  00046  -9.762698e+01   4.285207e-02 
    00s05  00047  -9.763320e+01   3.725724e-03     00s05  00048  -9.763907e+01   3.572450e-03     00s05  00049  -9.764572e+01   8.631612e-03     00s05  00050  -9.765028e+01   7.975958e-02     00s05  00051  -9.765730e+01   2.204116e-02     00s05  00052  -9.766345e+01   1.303481e-02     00s06  00053  -9.766769e+01   2.124876e-03     00s06  00054  -9.767010e+01   3.043069e-02     00s06  00055  -9.767260e+01   2.037437e-03 
    00s06  00056  -9.767404e+01   9.775880e-04     00s06  00057  -9.766512e+01   1.835994e-01     00s06  00058  -9.767432e+01   3.289306e-03     00s06  00059  -9.767527e+01   3.518217e-04     00s06  00060  -9.767531e+01   1.283828e-05     00s07  00061  -9.767532e+01   6.960080e-07     00s07  00062  -9.767532e+01   8.380287e-09     00s07  00063  -9.767532e+01   8.380287e-09 
Runtime:     00s07
Optimization status: Converged

Optimization restart 1/1, f = -97.67531596013426
SEARCH!
self.IOrig:  [160, 180]
self.POrig:  [[' ', ' ', '128', '32', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '50', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '80', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '32', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '32'], [' ', ' ', '8', '100', '8'], [' ', ' ', '32', '8', '128'], [' ', ' ', '4', '20', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '50', '128'], [' ', ' ', '50', '16', '64'], [' ', ' ', '4', '2048', '16'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '20', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '32', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '4']]
prob:  <search.SurrogateProblem object at 0x15400815cfa0>
0 OK
bestX [array([[0.2427, 0.2147, 0.0412, 0.0588, 0.1788]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2956.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DSM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2956
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2956
........................................ [0.003684, 0.003535, 0.003543]
OUTPUT:%f [0.003684, 0.003535, 0.003543] 0.003539
store_func_eval
problem.constants
None
MLA iteration:  8
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -9.121635e+00           nan     00s00  00001  -9.121635e+00   1.551601e+02     00s00  00002  -2.173804e+01   1.629294e+02     00s00  00003  -6.774585e+01   9.825327e+01     00s00  00004   1.040528e+02   3.126118e+04     00s00  00005  -8.984112e+01   4.508893e+00 
    00s00  00006  -9.163841e+01   3.412067e+00     00s00  00007  -9.250775e+01   4.553759e+00     00s00  00008  -9.503007e+01   3.687417e-01     00s01  00009  -9.536741e+01   4.284430e-01     00s01  00010  -9.026446e+01   4.763519e+01     00s01  00011  -9.619145e+01   9.672011e-01     00s01  00012  -9.652752e+01   1.037380e+00     00s01  00013  -9.641612e+01   3.264730e+00     00s01  00014  -9.660977e+01   1.432643e+00 
    00s01  00015  -9.712379e+01   1.519489e-02     00s01  00016  -9.712753e+01   5.750339e-03     00s01  00017  -9.712926e+01   7.388078e-03     00s02  00018  -9.713582e+01   1.756706e-02     00s02  00019  -9.715929e+01   1.106670e-01     00s02  00020  -3.890873e+01   1.297119e+02     00s02  00021  -9.716448e+01   1.318740e-01     00s02  00022  -9.717024e+01   1.555278e-01     00s02  00023  -9.232709e+01   1.844253e+02     00s02  00024  -9.632310e+01   1.103021e+01     00s02  00025  -9.726414e+01   4.298301e-01     00s03  00026  -9.733937e+01   3.529282e-01     00s03  00027  -9.738901e+01   2.554715e-01     00s03  00028   1.369421e+02   4.458303e+04     00s03  00029  -9.823278e+01   2.627355e+00     00s03  00030  -9.478672e+01   4.424927e+01     00s03  00031  -9.826446e+01   2.880255e+00     00s03  00032   3.621626e+04   6.218857e+07     00s03  00033  -9.826529e+01   2.888907e+00     00s03  00034  -9.828182e+01   3.288369e+00     00s04  00035  -9.852314e+01   3.906104e+00     00s04  00036  -9.925128e+01   5.229503e+00     00s04  00037  -9.490171e+01   7.936452e+01     00s04  00038  -9.952755e+01   4.970744e+00     00s04  00039  -1.005310e+02   5.755089e+00     00s04  00040  -1.014250e+02   2.461549e+00     00s04  00041  -1.015732e+02   1.607592e+01 
    00s04  00042  -1.018081e+02   4.061235e+00     00s04  00043  -1.019852e+02   2.235874e+00     00s05  00044  -1.025430e+02   6.844792e+00     00s05  00045  -1.027151e+02   7.971713e-01     00s05  00046  -1.027538e+02   3.344881e-01     00s05  00047  -1.027940e+02   4.192235e-01     00s05  00048  -1.028183e+02   5.966257e-01     00s05  00049  -1.028690e+02   7.164848e-01     00s05  00050  -1.030283e+02   2.265313e-01     00s05  00051  -1.030754e+02   8.142864e-03     00s06  00052  -1.030875e+02   9.324744e-02     00s06  00053  -1.030937e+02   1.123001e-01     00s06  00054  -1.030990e+02   1.352306e-02     00s06  00055  -1.031050e+02   1.288268e-02 
    00s06  00056  -1.031079e+02   9.370506e-03     00s06  00057  -1.031110e+02   7.135678e-03     00s06  00058  -1.031097e+02   3.200633e-01     00s06  00059  -1.031131e+02   4.496447e-02     00s06  00060  -1.031180e+02   1.861220e-02     00s07  00061  -1.031325e+02   4.157985e-03     00s07  00062  -1.031437e+02   1.084355e-02     00s07  00063  -1.031499e+02   1.168276e-02     00s07  00064  -1.031549e+02   2.363942e-02     00s07  00065  -1.031556e+02   8.531093e-02     00s07  00066  -1.031580e+02   4.136878e-03     00s07  00067  -1.031590e+02   7.717789e-03     00s07  00068  -1.031600e+02   1.134434e-02     00s07  00069  -1.031610e+02   3.991571e-03     00s08  00070  -1.031617e+02   1.360813e-03     00s08  00071  -1.031612e+02   3.279262e-02     00s08  00072  -1.031619e+02   1.567122e-03 
    00s08  00073  -1.031622e+02   1.758048e-04     00s08  00074  -1.031625e+02   3.691053e-04     00s08  00075  -1.031625e+02   6.087035e-03     00s08  00076  -1.031627e+02   5.230935e-04     00s08  00077  -1.031628e+02   8.039584e-05     00s09  00078  -1.031629e+02   1.350560e-04     00s09  00079  -1.031629e+02   2.126387e-03 
    00s09  00080  -1.031630e+02   7.418953e-05     00s09  00081  -1.031630e+02   1.159445e-05     00s09  00082  -1.031630e+02   1.939925e-05     00s09  00083  -1.031630e+02   2.123782e-04     00s09  00084  -1.031631e+02   1.472798e-04     00s09  00085  -1.031631e+02   2.501443e-05     00s09  00086  -1.031631e+02   3.680696e-06     00s10  00087  -1.031631e+02   3.877916e-06 
    00s10  00088  -1.031631e+02   7.434305e-06     00s10  00089  -1.031631e+02   7.187466e-04     00s10  00090  -1.031631e+02   7.633777e-06     00s10  00091  -1.031631e+02   1.311001e-06     00s10  00092  -1.031631e+02   5.374615e-05     00s10  00093  -1.031631e+02   2.170603e-06 
    00s10  00094  -1.031631e+02   7.469027e-07     00s10  00095  -1.031631e+02   1.154863e-06     00s11  00096  -1.031631e+02   4.358425e-07     00s11  00097  -1.031631e+02   9.662451e-06     00s11  00098  -1.031631e+02   1.555037e-06     00s11  00099  -1.031631e+02   1.555037e-06 
Runtime:     00s11
Optimization status: Converged

Optimization restart 1/1, f = -103.16308180585095
SEARCH!
self.IOrig:  [160, 180]
self.POrig:  [[' ', ' ', '128', '32', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '50', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '80', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '32', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '32'], [' ', ' ', '8', '100', '8'], [' ', ' ', '32', '8', '128'], [' ', ' ', '4', '20', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '50', '128'], [' ', ' ', '50', '16', '64'], [' ', ' ', '4', '2048', '16'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '20', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '32', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '4', '8']]
prob:  <search.SurrogateProblem object at 0x1540031fc280>
0 OK
bestX [array([[0.3408, 0.905 , 0.586 , 0.8786, 0.008 ]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7463.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DSM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7463
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7463
........................................ [0.000824, 0.000732, 0.000731]
OUTPUT:%f [0.000824, 0.000732, 0.000731] 0.0007314999999999999
store_func_eval
problem.constants
None
MLA iteration:  9
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -1.036873e+01           nan     00s00  00001  -1.036873e+01   1.728533e+02 
    00s00  00002  -2.366744e+01   1.805162e+02     00s00  00003  -7.172813e+01   1.034913e+02     00s00  00004   1.056472e+02   3.342816e+04     00s00  00005  -9.443083e+01   3.135748e+00 
    00s00  00006  -9.577349e+01   2.672091e+00     00s00  00007  -9.976701e+01   3.856810e-01     00s00  00008  -1.007551e+02   1.874009e+00     00s01  00009  -6.912391e+01   4.066554e-04     00s01  00010  -9.701577e+01   3.560721e+01     00s01  00011  -1.015473e+02   2.568634e+00     00s01  00012  -1.017882e+02   1.242363e+00     00s01  00013  -1.015448e+02   2.280068e+00     00s01  00014  -1.018517e+02   5.494743e-01     00s01  00015  -1.021205e+02   3.924675e-02 
    00s01  00016  -1.021688e+02   6.328847e-02     00s02  00017  -1.021927e+02   7.657838e-02     00s02  00018  -1.022109e+02   6.252614e-02     00s02  00019  -1.022294e+02   5.277608e-02     00s02  00020  -1.022589e+02   1.473010e-02     00s02  00021  -1.022892e+02   2.490275e-02     00s02  00022  -1.024151e+02   3.980797e-01     00s02  00023  -1.068281e+01   3.772779e+03     00s03  00024  -1.024274e+02   4.659992e-01     00s03  00025  -1.022439e+02   3.089263e+00     00s03  00026  -1.024825e+02   9.634029e-01     00s03  00027  -9.951016e+01   1.821694e+01     00s03  00028  -1.024953e+02   1.076881e+00     00s03  00029  -1.023252e+02   4.091430e+00     00s03  00030  -1.025606e+02   1.493817e+00     00s03  00031  -1.026781e+02   2.536420e+00     00s04  00032  -1.033484e+02   3.345631e+00 
    00s04  00033  -9.929589e+01   1.393569e+02     00s04  00034  -1.041469e+02   6.317159e+00     00s04  00035   1.156291e+01   9.625386e+01 
    00s04  00036  -1.043962e+02   1.429724e+01     00s04  00037  -1.052358e+02   6.157169e+00     00s04  00038  -1.057804e+02   3.511274e+00     00s04  00039  -1.065214e+02   8.098337e+00 
    00s04  00040  -1.071071e+02   9.924572e+00     00s05  00041  -1.072761e+02   1.997273e+00     00s05  00042  -1.074247e+02   3.425746e-01     00s05  00043  -1.074496e+02   5.585829e-02 
    00s05  00044  -1.074563e+02   7.342505e-02     00s05  00045  -1.074602e+02   1.233031e-02     00s05  00046  -1.074608e+02   4.543869e-03     00s05  00047  -1.074618e+02   9.103847e-03     00s05  00048  -1.074657e+02   6.520097e-02     00s05  00049  -1.074811e+02   3.067025e-01     00s06  00050  -1.075755e+02   4.470440e-01 
    00s06  00051  -8.641840e+01   3.791581e+01     00s06  00052  -1.075762e+02   4.566174e-01     00s06  00053  -1.075790e+02   5.610351e-01     00s06  00054  -1.076524e+02   8.508246e-01     00s06  00055  -1.077537e+02   6.516618e+00     00s06  00056  -1.077754e+02   2.963663e+00     00s06  00057  -1.023953e+02   5.210311e+01 
    00s07  00058  -1.078394e+02   4.083728e+00     00s07  00059  -1.079120e+02   5.863164e+00     00s07  00060  -1.079924e+02   4.490348e+00     00s07  00061  -1.080746e+02   5.431118e+00     00s07  00062  -1.081325e+02   1.928194e+00     00s07  00063  -1.081971e+02   1.330592e+00     00s07  00064  -1.082341e+02   1.581184e+00     00s07  00065  -1.082973e+02   9.929845e-02     00s07  00066  -1.083062e+02   5.916086e-03     00s08  00067  -1.083067e+02   2.140369e-03     00s08  00068  -1.083071e+02   5.595994e-04 
    00s08  00069  -1.083073e+02   6.373980e-05     00s08  00070  -1.083074e+02   7.573912e-06     00s08  00071  -1.083074e+02   3.146509e-06     00s08  00072  -1.083074e+02   3.564415e-06     00s08  00073  -1.083074e+02   9.260469e-05     00s08  00074  -1.083074e+02   1.230698e-04     00s09  00075  -1.083075e+02   2.225277e-04     00s09  00076  -1.083080e+02   2.804568e-03     00s09  00077  -1.083088e+02   3.332793e-03     00s09  00078  -1.083102e+02   2.863422e-03     00s09  00079  -1.083035e+02   1.213753e-01     00s09  00080  -1.083110e+02   8.851758e-03     00s09  00081  -1.083123e+02   1.447674e-03     00s09  00082  -1.083127e+02   4.444303e-04     00s09  00083  -1.083129e+02   5.871513e-04     00s10  00084  -1.083134e+02   3.499873e-03     00s10  00085  -1.083140e+02   3.057152e-04     00s10  00086  -1.083144e+02   5.868691e-05     00s10  00087  -1.083145e+02   8.751129e-04     00s10  00088  -1.083147e+02   1.111150e-04     00s10  00089  -1.083148e+02   1.075969e-04     00s10  00090  -1.083149e+02   2.431882e-05     00s10  00091  -1.083149e+02   3.796750e-04     00s10  00092  -1.083150e+02   1.997589e-05 
    00s11  00093  -1.083150e+02   8.973051e-06     00s11  00094  -1.083150e+02   2.925521e-05     00s11  00095  -1.083149e+02   3.061605e-03     00s11  00096  -1.083151e+02   8.383864e-05     00s11  00097  -1.083151e+02   1.152751e-05 
    00s11  00098  -1.083151e+02   8.241710e-07     00s11  00099  -1.083151e+02   6.225230e-06     00s11  00100  -1.083151e+02   1.555926e-04     00s11  00101  -1.083151e+02   2.041567e-05     00s12  00102  -1.083151e+02   2.140797e-06     00s12  00103  -1.083151e+02   2.741282e-07     00s12  00104  -1.083151e+02   4.491669e-07     00s12  00105  -1.083151e+02   1.282346e-04     00s12  00106  -1.083151e+02   1.272927e-06     00s12  00107  -1.083151e+02   1.272927e-06 
Runtime:     00s12
Optimization status: Converged

Optimization restart 1/1, f = -108.31510179662456
SEARCH!
self.IOrig:  [160, 180]
self.POrig:  [[' ', ' ', '128', '32', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '50', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '80', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '32', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '32'], [' ', ' ', '8', '100', '8'], [' ', ' ', '32', '8', '128'], [' ', ' ', '4', '20', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '50', '128'], [' ', ' ', '50', '16', '64'], [' ', ' ', '4', '2048', '16'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '20', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '32', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '4', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '128', '4']]
prob:  <search.SurrogateProblem object at 0x154002da48b0>
0 OK
bestX [array([[0.4663, 0.8591, 0.9781, 0.9687, 0.989 ]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8016.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DSM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8016
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8016
........................................ [0.009931, 0.009854, 0.009812]
OUTPUT:%f [0.009931, 0.009854, 0.009812] 0.009833
store_func_eval
problem.constants
None
MLA iteration:  10
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -1.044381e+01           nan     00s00  00001  -1.044381e+01   1.890883e+02     00s00  00002  -2.437244e+01   1.982882e+02     00s00  00003  -7.454279e+01   1.107763e+02     00s00  00004   1.209833e+02   3.885874e+04     00s00  00005  -9.837414e+01   3.769303e+00 
    00s00  00006  -9.980699e+01   2.697898e+00     00s00  00007  -9.920203e+01   5.416744e+00     00s00  00008  -1.031155e+02   4.777668e-01     00s01  00009  -1.038404e+02   1.010089e+00     00s01  00010  -7.598770e+01   2.954366e+01     00s01  00011  -1.042038e+02   1.157898e+00     00s01  00012  -1.045407e+02   1.243427e+00     00s01  00013  -1.001969e+02   3.993422e+01     00s01  00014  -1.058281e+02   8.872923e-01     00s01  00015  -1.047619e+02   4.637937e+00 
    00s01  00016  -1.060838e+02   6.795554e-02     00s02  00017  -1.056223e+02   1.720475e+00     00s02  00018  -1.060902e+02   2.054269e-02     00s02  00019  -1.060979e+02   6.081224e-03     00s02  00020  -1.061038e+02   1.301599e-02     00s02  00021  -1.061117e+02   3.281340e-02     00s02  00022  -1.061524e+02   1.812801e-01     00s02  00023   2.724406e+02   1.746575e+05     00s02  00024  -1.061530e+02   1.834854e-01     00s02  00025  -1.060899e+02   6.164012e-01     00s03  00026  -1.061869e+02   3.468405e-01     00s03  00027  -1.060279e+02   7.401972e-01     00s03  00028  -1.061987e+02   3.908666e-01     00s03  00029  -1.062408e+02   3.053741e-01 
    00s03  00030  -1.063436e+02   9.728200e-03     00s03  00031  -1.063459e+02   2.078697e-03     00s03  00032  -1.063464e+02   1.414537e-03     00s03  00033  -1.063472e+02   8.843401e-04     00s04  00034  -1.063549e+02   7.927240e-03     00s04  00035  -1.063645e+02   1.666078e-02     00s04  00036  -1.063727e+02   7.690756e-03 
    00s04  00037  -1.063759e+02   7.880688e-04     00s04  00038  -1.063776e+02   2.494476e-03     00s04  00039  -1.063787e+02   5.136688e-03     00s04  00040  -1.063815e+02   9.144394e-03     00s04  00041  -1.063837e+02   4.951449e-03     00s04  00042  -1.063851e+02   4.819149e-04     00s05  00043  -1.063855e+02   4.456548e-04     00s05  00044  -1.063857e+02   1.209105e-03     00s05  00045  -1.063864e+02   3.878976e-03     00s05  00046  -1.063879e+02   8.219089e-03     00s05  00047  -1.063908e+02   1.145531e-02     00s05  00048  -1.063947e+02   5.987490e-03     00s05  00049  -1.063970e+02   1.871933e-03     00s05  00050  -1.063978e+02   6.783941e-05 
    00s05  00051  -1.063978e+02   7.911604e-05     00s06  00052  -1.063980e+02   1.336917e-04     00s06  00053  -1.063982e+02   1.539857e-04     00s06  00054  -1.063991e+02   2.529026e-04     00s06  00055  -1.064001e+02   1.765832e-04     00s06  00056  -1.063901e+02   5.969466e-02     00s06  00057  -1.064003e+02   1.142684e-03     00s06  00058  -1.064011e+02   2.104629e-04     00s06  00059  -1.064014e+02   1.375403e-05     00s07  00060  -1.064015e+02   2.114190e-05     00s07  00061  -1.064016e+02   5.315050e-05     00s07  00062  -1.064018e+02   3.854400e-05     00s07  00063  -1.064011e+02   1.806233e-03     00s07  00064  -1.064018e+02   8.580112e-05     00s07  00065  -1.064019e+02   1.133944e-05     00s07  00066  -1.064020e+02   2.839935e-06 
    00s07  00067  -1.064020e+02   2.720663e-06     00s07  00068  -1.064020e+02   2.685113e-05     00s08  00069  -1.064020e+02   3.232488e-05     00s08  00070  -1.064020e+02   3.885948e-04     00s08  00071  -1.064021e+02   3.523935e-06     00s08  00072  -1.064021e+02   1.115781e-06 
    00s08  00073  -1.064021e+02   1.172037e-07     00s08  00074  -1.064021e+02   1.826937e-06     00s08  00075  -1.064021e+02   1.277104e-07     00s08  00076  -1.064021e+02   3.916510e-08     00s08  00077  -1.064021e+02   5.712445e-06     00s09  00078  -1.064021e+02   4.909626e-07     00s09  00079  -1.064021e+02   4.680687e-08     00s09  00080  -1.064021e+02   1.550784e-07     00s09  00081  -1.064021e+02   2.493180e-08     00s09  00082  -1.064021e+02   6.609334e-06     00s09  00083  -1.064021e+02   2.997390e-07     00s09  00084  -1.064021e+02   2.997390e-07 
Runtime:     00s09
Optimization status: Converged

Optimization restart 1/1, f = -106.40209546791115
SEARCH!
self.IOrig:  [160, 180]
self.POrig:  [[' ', ' ', '128', '32', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '50', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '80', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '32', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '32'], [' ', ' ', '8', '100', '8'], [' ', ' ', '32', '8', '128'], [' ', ' ', '4', '20', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '50', '128'], [' ', ' ', '50', '16', '64'], [' ', ' ', '4', '2048', '16'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '20', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '32', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '4', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '2048', '256']]
prob:  <search.SurrogateProblem object at 0x1540031f7730>
0 OK
bestX [array([[0.3943, 0.8593, 0.1493, 0.9992, 0.03  ]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4760.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DSM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4760
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4760
........................................ [0.000757, 0.000748, 0.000709]
OUTPUT:%f [0.000757, 0.000748, 0.000709] 0.0007285
store_func_eval
problem.constants
None
MLA iteration:  11
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -1.230499e+01           nan     00s00  00001  -1.230499e+01   2.110242e+02     00s00  00002  -2.697377e+01   2.187288e+02 
    00s00  00003  -7.876068e+01   1.142622e+02     00s00  00004   9.075386e+01   2.571962e+04     00s00  00005  -1.039934e+02   2.079425e+01     00s00  00006  -1.077441e+02   1.167341e+00     00s00  00007  -1.081756e+02   5.263204e-01     00s00  00008  -1.085043e+02   5.929957e-01     00s01  00009  -1.098584e+02   6.675574e-01     00s01  00010  -8.996095e+01   5.472659e+01 
    00s01  00011  -1.101700e+02   6.585301e-01     00s01  00012  -1.104454e+02   6.253957e-01     00s01  00013  -1.067325e+02   1.763376e+01     00s01  00014  -1.109036e+02   2.191374e-01     00s01  00015  -1.099210e+02   2.974466e+00     00s01  00016  -1.109240e+02   2.925238e-01     00s02  00017  -1.109930e+02   1.747408e-02 
    00s02  00018  -1.109995e+02   1.959664e-02     00s02  00019  -1.110216e+02   4.009376e-02     00s02  00020  -1.106269e+02   1.934674e+00     00s02  00021  -1.111071e+02   1.297321e-01     00s02  00022  -2.621809e+01   8.210041e+03     00s02  00023  -1.110507e+02   3.139382e-01     00s02  00024  -1.111353e+02   1.479956e-01     00s02  00025  -1.111711e+02   9.922936e-02     00s03  00026  -1.112320e+02   9.169686e-03     00s03  00027  -1.112341e+02   1.037819e-03     00s03  00028  -1.112345e+02   1.040971e-03     00s03  00029  -1.112363e+02   1.169987e-03     00s03  00030  -1.112424e+02   3.598738e-03     00s03  00031  -1.112616e+02   2.567040e-02 
    00s03  00032  -1.112697e+02   3.138690e-03     00s03  00033  -1.112731e+02   4.746035e-04     00s04  00034  -1.112737e+02   1.144776e-03     00s04  00035  -1.112746e+02   1.580013e-03     00s04  00036  -1.112789e+02   1.834702e-02     00s04  00037  -1.112837e+02   1.003631e-02 
    00s04  00038  -1.112870e+02   5.409374e-04     00s04  00039  -1.112874e+02   2.274892e-04     00s04  00040  -1.112876e+02   1.070971e-04 
    00s04  00041  -1.112879e+02   7.731975e-05     00s04  00042  -1.112892e+02   3.630347e-04     00s05  00043  -1.112913e+02   1.223026e-03     00s05  00044  -1.112941e+02   1.875884e-03     00s05  00045  -1.112969e+02   6.623226e-04     00s05  00046  -1.113016e+02   7.399048e-05     00s05  00047  -1.113034e+02   3.355218e-04     00s05  00048  -1.113037e+02   1.809825e-03     00s05  00049  -1.113048e+02   1.407930e-04     00s05  00050  -1.113053e+02   1.760429e-05     00s05  00051  -1.113056e+02   3.874321e-04     00s06  00052  -1.113059e+02   1.571144e-04     00s06  00053  -1.113061e+02   3.602271e-05 
    00s06  00054  -1.113063e+02   2.219121e-06     00s06  00055  -1.113064e+02   1.024731e-04     00s06  00056  -1.113065e+02   6.371031e-06     00s06  00057  -1.113066e+02   9.092341e-07     00s06  00058  -1.113066e+02   5.795878e-07     00s06  00059  -1.113066e+02   1.189891e-05     00s07  00060  -1.113066e+02   2.483039e-06     00s07  00061  -1.113066e+02   1.852418e-07     00s07  00062  -1.113066e+02   1.444493e-06     00s07  00063  -1.113066e+02   1.725132e-05 
    00s07  00064  -1.113066e+02   3.463350e-07     00s07  00065  -1.113066e+02   6.719798e-08     00s07  00066  -1.113066e+02   2.993307e-07     00s07  00067  -1.113066e+02   3.888057e-07     00s07  00068  -1.113066e+02   2.194297e-05     00s08  00069  -1.113066e+02   1.305142e-06     00s08  00070  -1.113066e+02   1.305142e-06 
Runtime:     00s08
Optimization status: Converged

Optimization restart 1/1, f = -111.30662238275042
SEARCH!
self.IOrig:  [160, 180]
self.POrig:  [[' ', ' ', '128', '32', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '50', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '80', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '32', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '32'], [' ', ' ', '8', '100', '8'], [' ', ' ', '32', '8', '128'], [' ', ' ', '4', '20', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '50', '128'], [' ', ' ', '50', '16', '64'], [' ', ' ', '4', '2048', '16'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '20', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '32', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '4', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '2048', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '2048', '4']]
prob:  <search.SurrogateProblem object at 0x1540081dad60>
0 OK
bestX [array([[0.3832, 0.5867, 0.3766, 0.962 , 0.0198]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3718.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DSM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3718
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3718
........................................ [0.000753, 0.000748, 0.0007]
OUTPUT:%f [0.000753, 0.000748, 0.0007] 0.000724
store_func_eval
problem.constants
None
MLA iteration:  12
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -1.408047e+01           nan     00s00  00001  -1.408047e+01   2.346400e+02     00s00  00002  -2.951854e+01   2.412705e+02     00s00  00003  -8.316677e+01   1.194077e+02     00s00  00004   2.945638e+01   1.319615e+04     00s00  00005  -1.087817e+02   3.387567e+01     00s00  00006  -1.129337e+02   4.561866e-01 
    00s00  00007  -1.131016e+02   4.666220e-01     00s00  00008  -1.137780e+02   5.291968e-01     00s01  00009  -1.145849e+02   3.497339e+00     00s01  00010  -1.147976e+02   9.169009e-01     00s01  00011  -7.836044e+01   1.713594e-01     00s01  00012  -1.005569e+02   3.747863e+00     00s01  00013  -1.150470e+02   1.037129e+00     00s01  00014  -1.152701e+02   2.490832e+00     00s01  00015  -1.156395e+02   6.747261e-01     00s01  00016  -1.159446e+02   1.305719e-01 
    00s02  00017  -1.159971e+02   8.818219e-02     00s02  00018  -1.160262e+02   6.399580e-02     00s02  00019  -1.161188e+02   3.118844e-01     00s02  00020  -1.161493e+02   4.481906e-02     00s02  00021  -1.161624e+02   1.003457e-03     00s02  00022  -1.161630e+02   7.266582e-04     00s02  00023  -1.161640e+02   9.472933e-04 
    00s03  00024  -1.161762e+02   9.250014e-03     00s03  00025  -1.161951e+02   2.328824e-02     00s03  00026  -1.161971e+02   1.644266e-02     00s03  00027  -1.162027e+02   1.935378e-02     00s03  00028  -1.162142e+02   2.811653e-03     00s03  00029  -1.162185e+02   2.545884e-03     00s03  00030  -1.162198e+02   1.976034e-03     00s03  00031  -1.162218e+02   2.250547e-03     00s04  00032  -1.162252e+02   3.304946e-03     00s04  00033  -1.162236e+02   1.759233e-02     00s04  00034  -1.162258e+02   3.309663e-03 
    00s04  00035  -1.162270e+02   6.595155e-04     00s04  00036  -1.162274e+02   1.302854e-04     00s04  00037  -1.162275e+02   1.469858e-04     00s04  00038  -1.162283e+02   7.040102e-04     00s04  00039  -1.162297e+02   2.159722e-03     00s04  00040  -1.162329e+02   4.301304e-03     00s05  00041  -1.162381e+02   4.014930e-03     00s05  00042  -1.161458e+02   1.908695e-01     00s05  00043  -1.162390e+02   3.808123e-03     00s05  00044  -1.162436e+02   6.122616e-04     00s05  00045  -1.162454e+02   8.462194e-05     00s05  00046  -1.162459e+02   1.143791e-03     00s05  00047  -1.162464e+02   4.835239e-04     00s05  00048  -1.162467e+02   3.195218e-04     00s06  00049  -1.162470e+02   1.105673e-05 
    00s06  00050  -1.162470e+02   9.417349e-06     00s06  00051  -1.162471e+02   9.505007e-06     00s06  00052  -1.162469e+02   2.571167e-04     00s06  00053  -1.162471e+02   4.624721e-05     00s06  00054  -1.162472e+02   1.851376e-06     00s06  00055  -1.162472e+02   1.581086e-06     00s06  00056  -1.162472e+02   4.439843e-06     00s06  00057  -1.162472e+02   2.457478e-06     00s07  00058  -1.162473e+02   6.306782e-06     00s07  00059  -1.162472e+02   4.336386e-04     00s07  00060  -1.162473e+02   7.072329e-05     00s07  00061  -1.162473e+02   4.246218e-05     00s07  00062  -1.162476e+02   2.122375e-04     00s07  00063  -1.162481e+02   1.118815e-03     00s07  00064  -1.162480e+02   5.500290e-04     00s07  00065  -1.162484e+02   1.099235e-03     00s07  00066  -1.116128e+02   2.461374e+01     00s08  00067  -1.162458e+02   1.532485e-03     00s08  00068  -1.162487e+02   1.439634e-03     00s08  00069  -1.162418e+02   4.591494e-03     00s08  00070  -1.162496e+02   2.580471e-03     00s08  00071  -1.162527e+02   2.091107e-03     00s08  00072  -1.162803e+02   2.604530e-02     00s08  00073  -1.079748e+02   4.301750e+01     00s08  00074  -1.162865e+02   5.020061e-02     00s08  00075  -1.162914e+02   2.617877e-01     00s09  00076  -1.162933e+02   1.076868e-01     00s09  00077           nan           nan     00s09  00078           nan           nan     00s09  00079           nan           nan     00s09  00080           nan           nan     00s09  00081           nan           nan     00s09  00082           nan           nan     00s09  00083           nan           nan     00s10  00084           nan           nan     00s10  00085           nan           nan     00s10  00086           nan           nan     00s10  00087           nan           nan     00s10  00088           nan           nan     00s10  00089           nan           nan     00s10  00090           nan           nan     00s10  00091           nan           nan     00s10  00092           nan           nan     00s11  00093           nan           nan     00s11  00094           nan   1.076868e-01     00s11  00095  -1.164174e+02   4.436273e-01     00s11  00096  -1.162476e+02   1.531416e+01     00s11  00097  -1.168572e+02   2.861462e+00     00s11  00098  -1.168853e+02   3.924997e+00     00s11  00099  -1.172050e+02   4.589019e+00     00s11  00100  -1.182589e+02   1.293660e+01 
    00s11  00101  -9.841582e+00   2.143564e+02     00s12  00102  -1.188816e+02   1.378202e+01     00s12  00103  -1.172676e+02   1.614142e+02     00s12  00104  -1.196550e+02   3.337568e+01     00s12  00105  -1.203486e+02   2.250378e+01     00s12  00106  -1.208535e+02   2.600259e+01     00s12  00107  -1.220008e+02   1.321398e+01     00s12  00108  -1.230301e+02   2.596457e+00     00s12  00109  -1.231192e+02   4.610545e+00 
    00s13  00110  -1.232515e+02   2.783032e+00     00s13  00111  -1.234868e+02   5.216593e-01     00s13  00112  -1.236403e+02   1.216584e+00     00s13  00113  -1.237319e+02   6.132153e-01     00s13  00114  -1.238086e+02   3.763850e-01     00s13  00115  -1.238333e+02   3.814769e-02     00s13  00116  -1.238427e+02   1.111590e-02 
    00s13  00117  -1.238499e+02   1.380550e-02     00s13  00118  -1.238589e+02   1.911942e-02     00s14  00119  -1.238949e+02   3.103098e-01     00s14  00120  -1.239206e+02   1.708076e+00     00s14  00121  -1.239847e+02   3.678587e-01     00s14  00122  -1.240691e+02   9.764692e-01     00s14  00123  -1.241266e+02   1.363822e+00     00s14  00124  -1.241576e+02   3.333661e-01     00s14  00125  -1.241793e+02   2.099903e-02     00s14  00126  -1.241952e+02   2.585740e-02     00s14  00127  -1.242097e+02   1.653673e-02     00s15  00128  -1.242160e+02   6.177833e-02     00s15  00129  -1.242226e+02   3.121202e-02 
    00s15  00130  -1.242255e+02   7.893337e-03 
    00s15  00131  -1.242292e+02   8.898374e-04     00s15  00132  -1.242308e+02   1.270972e-02     00s15  00133  -1.242323e+02   7.132977e-03     00s15  00134  -1.242334e+02   1.576038e-03     00s15  00135  -1.242343e+02   3.968417e-03     00s15  00136  -1.242342e+02   4.002488e-02     00s16  00137  -1.242346e+02   3.498680e-03     00s16  00138  -1.242349e+02   6.274383e-04     00s16  00139  -1.242352e+02   3.853699e-05     00s16  00140  -1.242354e+02   4.576681e-05     00s16  00141  -1.242355e+02   7.622296e-04     00s16  00142  -1.242356e+02   5.235232e-04     00s16  00143  -1.242356e+02   1.042081e-04 
    00s16  00144  -1.242357e+02   3.172923e-05     00s17  00145  -1.242357e+02   2.237224e-04     00s17  00146  -1.242357e+02   3.440976e-04     00s17  00147  -1.242358e+02   3.376669e-05     00s17  00148  -1.242358e+02   1.547368e-05     00s17  00149  -1.242358e+02   1.354484e-05     00s17  00150  -1.242337e+02   1.131971e-01     00s17  00151  -1.242358e+02   6.054935e-05     00s17  00152  -1.242358e+02   9.151748e-06 
    00s17  00153  -1.242358e+02   1.230138e-07     00s18  00154  -1.242358e+02   1.186265e-06     00s18  00155  -1.242358e+02   3.969706e-06     00s18  00156  -1.242358e+02   2.587811e-05     00s18  00157  -1.242358e+02   2.040695e-06     00s18  00158  -1.242358e+02   2.291357e-07     00s18  00159  -1.242358e+02   6.446676e-07     00s18  00160  -1.242358e+02   9.500570e-07     00s18  00161  -1.242358e+02   1.320578e-05     00s18  00162  -1.242358e+02   2.206016e-06     00s19  00163  -1.242358e+02   2.206016e-06 
Runtime:     00s19
Optimization status: Converged

Optimization restart 1/1, f = -124.23579143604732
SEARCH!
self.IOrig:  [160, 180]
self.POrig:  [[' ', ' ', '128', '32', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '50', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '80', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '32', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '32'], [' ', ' ', '8', '100', '8'], [' ', ' ', '32', '8', '128'], [' ', ' ', '4', '20', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '50', '128'], [' ', ' ', '50', '16', '64'], [' ', ' ', '4', '2048', '16'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '20', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '32', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '4', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '2048', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '2048', '4']]
prob:  <search.SurrogateProblem object at 0x154002d14190>
0 OK
bestX [array([[0.3122, 0.2853, 0.9511, 0.7864, 0.7938]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3717.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DSM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3717
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3717
........................................ [0.00789, 0.007756, 0.007676]
OUTPUT:%f [0.00789, 0.007756, 0.007676] 0.007716
store_func_eval
problem.constants
None
MLA iteration:  13
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-gpy-1.9.9-kzgkuknbljcaiwtvvkyyxi27ikwo6cyc/lib/python3.8/site-packages/GPy/kern/src/stationary.py:137: RuntimeWarning:overflow encountered in square
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-gpy-1.9.9-kzgkuknbljcaiwtvvkyyxi27ikwo6cyc/lib/python3.8/site-packages/GPy/kern/src/stationary.py:138: RuntimeWarning:invalid value encountered in add
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -1.535239e+01           nan     00s00  00001  -1.535239e+01   2.581738e+02     00s00  00002  -3.153870e+01   2.647728e+02     00s00  00003  -8.736486e+01   1.251273e+02     00s00  00004   1.972972e+00   1.094636e+04     00s00  00005  -1.139779e+02   1.591108e+01     00s00  00006  -1.166498e+02   2.572486e+00 
    00s00  00007  -1.177299e+02   5.649710e-01     00s00  00008  -1.181508e+02   6.983861e-01     00s01  00009  -1.204708e+02   9.270118e-01     00s01  00010  -8.063107e+01   2.510193e-05     00s01  00011  -1.138865e+02   5.310157e+01     00s01  00012  -1.206255e+02   1.253512e-01     00s01  00013  -1.206654e+02   6.759668e-02     00s01  00014  -1.207524e+02   2.337837e-01     00s01  00015  -1.208344e+02   5.886091e-01     00s01  00016  -1.207962e+02   8.020520e-01     00s02  00017  -1.208812e+02   6.411627e-01     00s02  00018  -1.209868e+02   3.555819e-01 
    00s02  00019  -1.210756e+02   2.088167e-02     00s02  00020  -1.210843e+02   8.314323e-03     00s02  00021  -1.210867e+02   1.111096e-03 
    00s02  00022  -1.210881e+02   1.227293e-03     00s02  00023  -1.211024e+02   1.394061e-02     00s02  00024  -1.211210e+02   3.309887e-02     00s02  00025  -1.211299e+02   3.112877e-02     00s03  00026  -1.211354e+02   1.762102e-02     00s03  00027  -1.211394e+02   4.841873e-03     00s03  00028  -1.211411e+02   9.205986e-04     00s03  00029  -1.211420e+02   1.255723e-03     00s03  00030  -1.211476e+02   4.841365e-03     00s03  00031  -1.211525e+02   6.126320e-03     00s03  00032  -1.211510e+02   1.176766e-02     00s03  00033  -1.211537e+02   3.861058e-03 
    00s04  00034  -1.211560e+02   7.151159e-04     00s04  00035  -1.211569e+02   4.846062e-04     00s04  00036  -1.211574e+02   7.386100e-04     00s04  00037  -1.211602e+02   2.257513e-03     00s04  00038  -1.211648e+02   4.152156e-03     00s04  00039  -1.211695e+02   1.733913e-02     00s04  00040  -1.211792e+02   1.721078e-03     00s04  00041  -1.211876e+02   9.062762e-04     00s04  00042  -1.211954e+02   3.727607e-03     00s05  00043  -1.210669e+02   3.583849e+00     00s05  00044  -1.212338e+02   1.180351e-01     00s05  00045  -1.213131e+02   9.834720e-01     00s05  00046  -1.213135e+02   1.191860e+00     00s05  00047  -9.943674e+01   7.846771e+01     00s05  00048  -1.213139e+02   1.236696e+00     00s05  00049  -1.213549e+02   1.876573e+00     00s05  00050  -1.213701e+02   1.508072e+00     00s05  00051  -1.206923e+02   1.279534e+01     00s06  00052  -1.215236e+02   2.576923e+00     00s06  00053  -1.186495e+02   7.625104e+01     00s06  00054  -1.218741e+02   5.570607e+00     00s06  00055  -1.209659e+02   9.818935e+01     00s06  00056  -1.229070e+02   1.646300e+01     00s06  00057  -1.022469e+02   1.089850e+02     00s06  00058  -1.233821e+02   3.031124e+01     00s06  00059  -1.254768e+02   3.609106e+01     00s07  00060  -1.280006e+02   3.804998e+00     00s07  00061  -1.279469e+02   1.393826e+01     00s07  00062  -1.283361e+02   3.445095e+00     00s07  00063  -1.283608e+02   5.164356e+00     00s07  00064  -1.285224e+02   1.648158e-01     00s07  00065  -1.285467e+02   1.027472e-01     00s07  00066  -1.285711e+02   9.308131e-02     00s07  00067  -1.286150e+02   4.281692e-01     00s07  00068  -1.286405e+02   2.482665e+00     00s08  00069  -1.287740e+02   7.422214e-01     00s08  00070  -1.284127e+02   1.545569e+01     00s08  00071  -1.290386e+02   3.228309e-01 
    00s08  00072  -9.081377e+01   1.264337e+02 
    00s08  00073  -1.290929e+02   7.848674e-01     00s08  00074  -1.291749e+02   6.529563e-01     00s08  00075  -1.292539e+02   6.224835e-01     00s08  00076  -1.293943e+02   2.699763e+00     00s08  00077  -1.294803e+02   2.746011e+00     00s09  00078  -1.295497e+02   1.073000e-01     00s09  00079  -1.295583e+02   5.025420e-02 
    00s09  00080  -1.295733e+02   3.874082e-02     00s09  00081  -1.295780e+02   1.027123e-01     00s09  00082  -1.295805e+02   5.611723e-03 
    00s09  00083  -1.295809e+02   5.644432e-03     00s09  00084  -1.295825e+02   6.440293e-03     00s09  00085  -1.295843e+02   6.012847e-03     00s10  00086  -1.295845e+02   1.518199e-02     00s10  00087  -1.295852e+02   7.196001e-04     00s10  00088  -1.295854e+02   8.003851e-04     00s10  00089  -1.295857e+02   3.040376e-04     00s10  00090  -1.295854e+02   2.504804e-02     00s10  00091  -1.295857e+02   2.860177e-03 
    00s10  00092  -1.295859e+02   2.208131e-04     00s10  00093  -1.295861e+02   2.536085e-04     00s10  00094  -1.295866e+02   4.320733e-04     00s11  00095  -1.295862e+02   1.852445e-01     00s11  00096  -1.295873e+02   3.484545e-02     00s11  00097  -1.295884e+02   7.195657e-03     00s11  00098  -1.295892e+02   2.690492e-04     00s11  00099  -1.295897e+02   6.263906e-04     00s11  00100  -1.295901e+02   2.593634e-04     00s11  00101  -1.295895e+02   1.734952e-02     00s11  00102  -1.295902e+02   1.055009e-03 
    00s12  00103  -1.295904e+02   5.453984e-05     00s12  00104  -1.295905e+02   3.531851e-04     00s12  00105  -1.295903e+02   1.825382e-02     00s12  00106  -1.295906e+02   8.375212e-04     00s12  00107  -1.295907e+02   1.280364e-04 
    00s12  00108  -1.295907e+02   5.406742e-06     00s12  00109  -1.295908e+02   1.156670e-05     00s12  00110  -1.295892e+02   1.165256e-01     00s12  00111  -1.295908e+02   2.707381e-05     00s13  00112  -1.295908e+02   4.325912e-06     00s13  00113  -1.295908e+02   4.480884e-05     00s13  00114  -1.295908e+02   1.729860e-06     00s13  00115  -1.295908e+02   2.805540e-06     00s13  00116  -1.295908e+02   1.030809e-03     00s13  00117  -1.295908e+02   2.559643e-05     00s13  00118  -1.295908e+02   3.166349e-06 
    00s13  00119  -1.295908e+02   1.221203e-07     00s13  00120  -1.295908e+02   5.191504e-06     00s14  00121  -1.295908e+02   5.651152e-04     00s14  00122  -1.295908e+02   1.134510e-05     00s14  00123  -1.295908e+02   1.578178e-06     00s14  00124  -1.295908e+02   3.912037e-07     00s14  00125  -1.295908e+02   1.715389e-04     00s14  00126  -1.295908e+02   6.798415e-06     00s14  00127  -1.295908e+02   6.798415e-06 
Runtime:     00s14
Optimization status: Converged

Optimization restart 1/1, f = -129.59082840808503
SEARCH!
self.IOrig:  [160, 180]
self.POrig:  [[' ', ' ', '128', '32', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '50', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '80', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '32', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '32'], [' ', ' ', '8', '100', '8'], [' ', ' ', '32', '8', '128'], [' ', ' ', '4', '20', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '50', '128'], [' ', ' ', '50', '16', '64'], [' ', ' ', '4', '2048', '16'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '20', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '32', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '4', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '2048', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '100', '100']]
prob:  <search.SurrogateProblem object at 0x154008185790>
0 OK
bestX [array([[0.4165, 0.6578, 0.23  , 0.8784, 0.0218]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7307.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DSM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7307
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7307
........................................ [0.000821, 0.000723, 0.00072]
OUTPUT:%f [0.000821, 0.000723, 0.00072] 0.0007215
store_func_eval
problem.constants
None
MLA iteration:  14
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -1.829706e+01           nan     00s00  00001  -1.829706e+01   2.856724e+02     00s00  00002  -3.526351e+01   2.884865e+02     00s00  00003  -9.206953e+01   1.269954e+02     00s00  00004  -2.528630e+01   8.405189e+03     00s00  00005  -1.192342e+02   4.175808e+00 
    00s00  00006  -1.202271e+02   2.241192e+00     00s00  00007  -1.218866e+02   2.005052e+00     00s00  00008  -1.137112e+02   1.640652e+01     00s01  00009  -1.227042e+02   6.757566e-01     00s01  00010  -1.232231e+02   1.104708e+00     00s01  00011  -1.252156e+02   8.545265e-01     00s01  00012  -1.191408e+02   4.795239e+01     00s01  00013  -1.252582e+02   3.646787e-01     00s01  00014  -1.254213e+02   9.840337e-02     00s01  00015  -1.254672e+02   2.201870e-01     00s01  00016  -1.256479e+02   1.152312e+00 
    00s02  00017  -1.257141e+02   9.792607e-01     00s02  00018  -1.260274e+02   1.907466e-01 
    00s02  00019  -1.260729e+02   6.869209e-02     00s02  00020  -1.260836e+02   7.545610e-02     00s02  00021  -1.260945e+02   6.760603e-03 
    00s02  00022  -1.260966e+02   3.724083e-03     00s02  00023  -1.261034e+02   6.327433e-03     00s02  00024  -1.261185e+02   1.366774e-02     00s02  00025  -1.261308e+02   1.032491e-02     00s03  00026  -1.261451e+02   4.406229e-03     00s03  00027  -1.261535e+02   3.189898e-03     00s03  00028  -1.261575e+02   2.029664e-03     00s03  00029  -1.261613e+02   2.998539e-03     00s03  00030  -1.261837e+02   2.502329e-02     00s03  00031  -1.202295e+02   5.667597e+01     00s03  00032  -1.262077e+02   2.229281e-01     00s03  00033  -1.075201e+02   2.264502e+01     00s04  00034  -1.262082e+02   2.292788e-01     00s04  00035  -1.262087e+02   2.357989e-01     00s04  00036  -1.241525e+02   2.034785e+01     00s04  00037  -1.262440e+02   9.030514e-01     00s04  00038  -1.262715e+02   2.176404e+00     00s04  00039  -1.262669e+02   1.492393e+00     00s04  00040  -1.262754e+02   1.928730e+00 
    00s04  00041  -9.723245e+01   1.131827e+02     00s04  00042  -1.262785e+02   2.204241e+00     00s05  00043  -1.263960e+02   2.402418e+00     00s05  00044  -1.267139e+02   3.234289e+00     00s05  00045  -1.116001e+02   2.502974e+02     00s05  00046  -1.271617e+02   5.386291e+00     00s05  00047  -9.068122e+01   9.623915e+02     00s05  00048  -1.273199e+02   6.226197e+00     00s05  00049  -1.068791e+02   1.299863e+02     00s05  00050  -1.275284e+02   7.041394e+00 
    00s05  00051  -1.278859e+02   1.414620e+01     00s06  00052  -1.288108e+02   2.315229e+01     00s06  00053  -1.315388e+02   2.848380e+01     00s06  00054  -1.297689e+02   8.211117e+01     00s06  00055  -1.326863e+02   8.277082e+00     00s06  00056  -1.336992e+02   5.889706e+00     00s06  00057  -1.341117e+02   6.408014e+00     00s06  00058  -1.345950e+02   1.009336e+00     00s06  00059  -1.345276e+02   2.155619e+01 
    00s07  00060  -1.348368e+02   1.900589e+00     00s07  00061  -1.349526e+02   1.825247e+00     00s07  00062  -1.350314e+02   2.446160e+00     00s07  00063  -1.351291e+02   2.162978e+00     00s07  00064  -1.352369e+02   8.426077e-01     00s07  00065  -1.349228e+02   1.734979e+01     00s07  00066  -1.352795e+02   4.767686e-01     00s07  00067  -1.351744e+02   3.404944e+00     00s07  00068  -1.353314e+02   4.157404e-01     00s08  00069  -1.353900e+02   4.264401e-01     00s08  00070  -1.345713e+02   5.091038e+01     00s08  00071  -1.354689e+02   1.534777e+00     00s08  00072  -1.319430e+02   1.262970e+02     00s08  00073  -1.355066e+02   2.593293e+00     00s08  00074  -1.348473e+02   4.601923e+01     00s08  00075  -1.355621e+02   4.885229e+00     00s08  00076  -1.356729e+02   1.195684e+01     00s08  00077  -1.358319e+02   6.318813e+00     00s09  00078  -1.361254e+02   1.002747e+00     00s09  00079  -1.361875e+02   8.556468e-01     00s09  00080  -1.363178e+02   1.608156e+00     00s09  00081  -1.364417e+02   3.133527e-01     00s09  00082  -1.364285e+02   1.960014e+00     00s09  00083  -1.365151e+02   5.487739e-01     00s09  00084  -1.365552e+02   7.375462e-01     00s09  00085  -1.365703e+02   2.414952e-01 
    00s10  00086  -1.365905e+02   1.845604e-02     00s10  00087  -1.365988e+02   1.511050e-02     00s10  00088  -1.365790e+02   1.223933e+00     00s10  00089  -1.366004e+02   7.812797e-02     00s10  00090  -1.366078e+02   8.882688e-03     00s10  00091  -1.366147e+02   4.078451e-03     00s10  00092  -1.366259e+02   9.162711e-03     00s10  00093  -1.366517e+02   1.349460e-01     00s10  00094  -1.366903e+02   3.503491e-02 
    00s11  00095  -1.367041e+02   7.006297e-03     00s11  00096  -1.367137e+02   2.614356e-01     00s11  00097  -1.367223e+02   2.077540e-02     00s11  00098  -1.367253e+02   3.744092e-02     00s11  00099  -1.367298e+02   1.573209e-02     00s11  00100  -1.367328e+02   3.247112e-03     00s11  00101  -1.367348e+02   3.341165e-02     00s11  00102  -1.367365e+02   1.933042e-03     00s11  00103  -1.367373e+02   1.961504e-03     00s12  00104  -1.367381e+02   2.584681e-03     00s12  00105  -1.367382e+02   1.824025e-02     00s12  00106  -1.367385e+02   2.560328e-03 
    00s12  00107  -1.367389e+02   4.061889e-04     00s12  00108  -1.367392e+02   1.037817e-04     00s12  00109  -1.367393e+02   8.264565e-03     00s12  00110  -1.367395e+02   4.590231e-04     00s12  00111  -1.367396e+02   2.009201e-04     00s13  00112  -1.367397e+02   3.008243e-04     00s13  00113  -1.367398e+02   2.607582e-04     00s13  00114  -1.367397e+02   5.967616e-03     00s13  00115  -1.367398e+02   2.153743e-04     00s13  00116  -1.367398e+02   6.554024e-05     00s13  00117  -1.367398e+02   2.625471e-05     00s13  00118  -1.367398e+02   5.026653e-05 
    00s13  00119  -1.367398e+02   1.896248e-05     00s13  00120  -1.367398e+02   1.517525e-04 
    00s14  00121  -1.367399e+02   4.415207e-06     00s14  00122  -1.367399e+02   8.694653e-06     00s14  00123  -1.367399e+02   1.789972e-04     00s14  00124  -1.367399e+02   8.566570e-06     00s14  00125  -1.367399e+02   6.306450e-06     00s14  00126  -1.367399e+02   9.931085e-06     00s14  00127  -1.367399e+02   3.172423e-04     00s14  00128  -1.367399e+02   1.405588e-05     00s14  00129  -1.367399e+02   4.051591e-06     00s15  00130  -1.367399e+02   1.967860e-07 
    00s15  00131  -1.367399e+02   2.754678e-07     00s15  00132  -1.367399e+02   3.871981e-07     00s15  00133  -1.367399e+02   3.218743e-06     00s15  00134  -1.367399e+02   3.218743e-06 
Runtime:     00s15
Optimization status: Converged

Optimization restart 1/1, f = -136.73987208250904
SEARCH!
self.IOrig:  [160, 180]
self.POrig:  [[' ', ' ', '128', '32', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '50', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '80', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '32', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '32'], [' ', ' ', '8', '100', '8'], [' ', ' ', '32', '8', '128'], [' ', ' ', '4', '20', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '50', '128'], [' ', ' ', '50', '16', '64'], [' ', ' ', '4', '2048', '16'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '20', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '32', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '4', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '2048', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '100', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4']]
prob:  <search.SurrogateProblem object at 0x15400804b730>
0 OK
bestX [array([[0.0528, 0.6022, 0.8389, 0.9644, 0.0757]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/777.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DSM_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/777
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/777
........................................ [0.000813, 0.000696, 0.000701]
OUTPUT:%f [0.000813, 0.000696, 0.000701] 0.0006985
store_func_eval
problem.constants
None
stats:  {'time_total': 257.039615624, 'time_sample_init': 0.004909837, 'time_fun': 228.973406001, 'time_search': 26.038753500000002, 'time_model': 2.0200190499999997, 'func_eval_time': [111.5636449], 'search_time': [1.714388114, 1.793621781, 1.735424723, 1.738325479, 1.726469347, 1.743859426, 1.730627284, 1.731373618, 1.735570226, 1.739593416, 1.730702714, 1.734843937, 1.731706136, 1.72691559, 1.725331709], 'modeling_time': [0.112439092, 0.12340292, 0.150221416, 0.144559448, 0.124085907, 0.110192129, 0.128242986, 0.089595806, 0.131787756, 0.144146823, 0.115520881, 0.099285852, 0.208075271, 0.165383391, 0.173079372], 'modeling_iteration': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}
tid: 0
    t:160.000000 
    Ps  [[' ', ' ', '128', '32', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '50', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '80', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '32', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '32'], [' ', ' ', '8', '100', '8'], [' ', ' ', '32', '8', '128'], [' ', ' ', '4', '20', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '50', '128'], [' ', ' ', '50', '16', '64'], [' ', ' ', '4', '2048', '16'], [' ', ' ', '16', '2048', '4'], [' ', ' ', '20', '2048', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '32', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '4', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '64', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '128', '2048', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '100', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '100', '2048', '4']]
    Os  [[0.008524], [0.00372], [0.0075415], [0.007101], [0.0006839999999999999], [0.0014315], [0.0055695], [0.0195225], [0.002691], [0.007917500000000001], [0.0062439999999999996], [0.006988], [0.005176999999999999], [0.007783], [0.006961500000000001], [0.0035830000000000002], [0.0003705], [0.0023290000000000003], [0.001288], [0.001325], [0.001211], [0.001201], [0.003539], [0.0007314999999999999], [0.009833], [0.0007285], [0.000724], [0.007716], [0.0007215], [0.0006985]]
    Popt  [' ', ' ', '16', '2048', '4'] Oopt  0.0003705 nth  16
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
mkdir: cannot create directory ‘./TLA_experiments/SLA-GPTune-sm-30/’: No such file or directory
mv: cannot move 'gptune.db/covariance.json' to './TLA_experiments/SLA-GPTune-sm-30/covariance.json': No such file or directory
time...now 1651109055.6941266
machine: swing processor: intel num_nodes: 1 num_cores: 128


------Validating the options
  
  total core counts provided to GPTune: 128
   ---> distributed_memory_parallelism: False
   ---> shared_memory_parallelism: False
   ---> objective_evaluation_parallelism: False
  
  total core counts for modeling: 2
   ---> model_processes: 1
   ---> model_threads: 1
   ---> model_restart_processes: 1
   ---> model_restart_threads: 1
  
  total core counts for search: 1
   ---> search_processes: 1
   ---> search_threads: 1
   ---> search_multitask_processes: 1
   ---> search_multitask_threads: 1
  
  total core counts for objective function evaluation: 2
   ---> core counts in a single application run: 1
   ---> objective_multisample_processes: 1
   ---> objective_multisample_threads: 1
problem size is ml [[720, 830]]
[[720, 830]]
GPTune History Database Init
[HistoryDB] use filelock for synchronization
[HistoryDB] Create a JSON file at ./gptune.db/covariance.json



------Starting MLA with HistoryDB with 1 tasks and 30 samples each 
[HistoryDB] Found a history database file
no history data has been loaded
NS1:  15
tmpP:  [array([[0.9998, 0.5133, 0.9216, 0.4093, 0.9385],
       [0.3645, 0.5467, 0.2506, 0.4929, 0.1625],
       [0.6969, 0.231 , 0.8041, 0.9106, 0.7783],
       [0.2326, 0.3339, 0.6804, 0.7258, 0.5623],
       [0.1277, 0.7717, 0.3043, 0.9511, 0.013 ],
       [0.0418, 0.0744, 0.6217, 0.3975, 0.2902],
       [0.1545, 0.4069, 0.9908, 0.1545, 0.3993],
       [0.7372, 0.064 , 0.1434, 0.0242, 0.4487],
       [0.8414, 0.6274, 0.1127, 0.7891, 0.1016],
       [0.8937, 0.6779, 0.3934, 0.1082, 0.8218],
       [0.6198, 0.991 , 0.0079, 0.3161, 0.4756],
       [0.5793, 0.2893, 0.779 , 0.8506, 0.7208],
       [0.2703, 0.803 , 0.4432, 0.6647, 0.2292],
       [0.4297, 0.1461, 0.4979, 0.5413, 0.8966],
       [0.5127, 0.8748, 0.543 , 0.2188, 0.6159]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3689.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DML_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3689
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3689
........................................ [0.78241, 0.780455, 0.779569]
OUTPUT:%f [0.78241, 0.780455, 0.779569] 0.7800119999999999
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2117.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DML_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2117
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2117
........................................ [0.339766, 0.371693, 0.420319]
OUTPUT:%f [0.339766, 0.371693, 0.420319] 0.39600599999999997
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9538.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DML_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9538
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9538
........................................ [0.700204, 0.697144, 0.698026]
OUTPUT:%f [0.700204, 0.697144, 0.698026] 0.697585
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5542.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DML_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5542
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5542
........................................ [0.662145, 0.660363, 0.65909]
OUTPUT:%f [0.662145, 0.660363, 0.65909] 0.6597265
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4058.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DML_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4058
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4058
........................................ [0.306432, 0.258491, 0.259306]
OUTPUT:%f [0.306432, 0.258491, 0.259306] 0.25889850000000003
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6542.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DML_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6542
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6542
........................................ [0.423652, 0.424794, 0.423169]
OUTPUT:%f [0.423652, 0.424794, 0.423169] 0.4239815
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8306.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DML_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8306
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8306
........................................ [0.539016, 0.539225, 0.506674]
OUTPUT:%f [0.539016, 0.539225, 0.506674] 0.5229495
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5801.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DML_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5801
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5801
........................................ [0.481641, 0.467127, 0.468308]
OUTPUT:%f [0.481641, 0.467127, 0.468308] 0.4677175
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2923.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DML_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2923
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2923
........................................ [0.257622, 0.256507, 0.246914]
OUTPUT:%f [0.257622, 0.256507, 0.246914] 0.2517105
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8847.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DML_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8847
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8847
........................................ [0.736746, 0.736857, 0.732908]
OUTPUT:%f [0.736746, 0.736857, 0.732908] 0.7348825
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8615.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DML_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8615
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8615
........................................ [0.598803, 0.596074, 0.599036]
OUTPUT:%f [0.598803, 0.596074, 0.599036] 0.5975550000000001
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1020.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DML_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1020
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1020
........................................ [0.668981, 0.663938, 0.663569]
OUTPUT:%f [0.668981, 0.663938, 0.663569] 0.6637535
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5129.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DML_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5129
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5129
........................................ [0.410866, 0.545621, 0.404985]
OUTPUT:%f [0.410866, 0.545621, 0.404985] 0.47530300000000003
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6681.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DML_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6681
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6681
........................................ [0.760641, 0.75654, 0.751129]
OUTPUT:%f [0.760641, 0.75654, 0.751129] 0.7538345
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8409.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DML_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8409
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8409
........................................ [0.645146, 0.643096, 0.63699]
OUTPUT:%f [0.645146, 0.643096, 0.63699] 0.6400429999999999
store_func_eval
problem.constants
None
NSmin:  15
NS:  30
MLA iteration:  0
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -4.291788e-01           nan     00s00  00001  -4.291788e-01   3.568351e+01     00s00  00002  -5.564390e+00   1.713432e+01     00s00  00003   5.802923e+00   1.504776e+03 
    00s00  00004  -8.518246e+00   1.138003e+01     00s00  00005  -1.106760e+01   1.409396e+01     00s00  00006   1.226775e+03   1.556181e+06     00s00  00007  -1.108526e+01   7.113691e+01     00s00  00008  -1.316726e+01   3.822520e+00     00s01  00009   1.320315e+02   3.014333e+04     00s01  00010  -1.297618e+01   4.162946e+01     00s01  00011  -1.390183e+01   6.359250e+00     00s01  00012  -1.421954e+01   2.937074e+00 
    00s01  00013  -1.465163e+01   2.119463e+00     00s01  00014  -1.517574e+01   3.888745e+00     00s01  00015  -1.610560e+01   2.225625e+00     00s01  00016  -1.700059e+01   1.620136e+00     00s01  00017  -1.728420e+01   6.005722e-01     00s02  00018  -1.736004e+01   1.766408e-01 
    00s02  00019  -1.739786e+01   2.031946e-02     00s02  00020  -1.740550e+01   8.675281e-03     00s02  00021  -1.740796e+01   4.716713e-03     00s02  00022  -1.740889e+01   1.929106e-03     00s02  00023  -1.741009e+01   3.358990e-03     00s02  00024  -1.741398e+01   1.292735e-02     00s02  00025  -1.741774e+01   9.340238e-03     00s03  00026  -1.741825e+01   8.506714e-02     00s03  00027  -1.742034e+01   1.446371e-03     00s03  00028  -1.742048e+01   2.866653e-04 
    00s03  00029  -1.742055e+01   5.716427e-04     00s03  00030  -1.742070e+01   1.017330e-03     00s03  00031  -1.742101e+01   1.577786e-03     00s03  00032  -1.742226e+01   6.906185e-03     00s03  00033  -1.742503e+01   1.834974e-02     00s03  00034  -1.742821e+01   1.818564e-02     00s04  00035  -1.742654e+01   3.836655e-02     00s04  00036  -1.742929e+01   1.729081e-02     00s04  00037  -1.743128e+01   3.845791e-03     00s04  00038  -1.743205e+01   2.224289e-03     00s04  00039  -1.743274e+01   4.915378e-02     00s04  00040  -1.743364e+01   1.749732e-03     00s04  00041  -1.743375e+01   6.713388e-04     00s04  00042  -1.743396e+01   3.568447e-04     00s04  00043  -1.743421e+01   1.107449e-03     00s05  00044  -1.743485e+01   4.064823e-03     00s05  00045  -1.743613e+01   9.980716e-03     00s05  00046  -1.743808e+01   4.841861e-03     00s05  00047  -1.743979e+01   1.529063e-03     00s05  00048  -1.743975e+01   4.441054e-03     00s05  00049  -1.743996e+01   1.910364e-04 
    00s05  00050  -1.744008e+01   9.356295e-05     00s05  00051  -1.743991e+01   2.267829e-03     00s05  00052  -1.744010e+01   5.138461e-05     00s06  00053  -1.744012e+01   1.179625e-05     00s06  00054  -1.744012e+01   5.507101e-04     00s06  00055  -1.744014e+01   8.904049e-06 
    00s06  00056  -1.744015e+01   9.578715e-06     00s06  00057  -1.744017e+01   1.068853e-04     00s06  00058  -1.744019e+01   1.921878e-04     00s06  00059  -1.744024e+01   1.969900e-04     00s06  00060  -1.743760e+01   1.812163e-02     00s06  00061  -1.744024e+01   2.120684e-04     00s07  00062  -1.744027e+01   2.184593e-05     00s07  00063  -1.744028e+01   2.291505e-06     00s07  00064  -1.744028e+01   3.150667e-05     00s07  00065  -1.744028e+01   1.358064e-06     00s07  00066  -1.744029e+01   8.462599e-06     00s07  00067  -1.744029e+01   2.116939e-06     00s07  00068  -1.744029e+01   5.131878e-05     00s07  00069  -1.744029e+01   1.433806e-05     00s07  00070  -1.744029e+01   1.691883e-06 
    00s08  00071  -1.744029e+01   1.893761e-07     00s08  00072  -1.744029e+01   3.716559e-07     00s08  00073  -1.744029e+01   2.755853e-07     00s08  00074  -1.744029e+01   6.176244e-07     00s08  00075  -1.744029e+01   6.176244e-07 
Runtime:     00s08
Optimization status: Converged

Optimization restart 1/1, f = -17.440288767878315
SEARCH!
self.IOrig:  [720, 830]
self.POrig:  [[' ', ' ', '128', '32', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '50', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '80', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '32', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '32'], [' ', ' ', '8', '100', '8'], [' ', ' ', '32', '8', '128'], [' ', ' ', '4', '20', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '50', '128'], [' ', ' ', '50', '16', '64']]
prob:  <search.SurrogateProblem object at 0x14f0a52f5190>
0 OK
bestX [array([[0.7423, 0.088 , 0.936 , 0.0171, 0.019 ]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2297.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DML_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2297
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2297
........................................ [0.217319, 0.217629, 0.219261]
OUTPUT:%f [0.217319, 0.217629, 0.219261] 0.218445
store_func_eval
problem.constants
None
MLA iteration:  1
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -2.225597e-01           nan     00s00  00001  -2.225597e-01   4.159494e+01     00s00  00002  -5.790524e+00   2.017837e+01 
    00s00  00003   1.147504e+01   2.139453e+03     00s00  00004  -8.886211e+00   1.104681e+01     00s00  00005  -1.109396e+01   1.793498e+01     00s00  00006  -1.955015e+00   2.304370e+02     00s00  00007  -1.377075e+01   5.404193e+00     00s00  00008  -1.012326e+01   9.622037e+01     00s01  00009  -1.409019e+01   1.434663e+01     00s01  00010  -1.481396e+01   6.483758e+00     00s01  00011  -1.546494e+01   1.753539e+00     00s01  00012  -1.582531e+01   1.315850e+00 
    00s01  00013  -1.635965e+01   1.585966e+00     00s01  00014  -1.685204e+01   1.390695e+00     00s01  00015  -1.727370e+01   5.377702e-01     00s01  00016  -1.731644e+01   2.943362e-02     00s01  00017  -1.733121e+01   2.364785e-02     00s02  00018  -1.733815e+01   1.687922e-01     00s02  00019  -1.734351e+01   3.263197e-02     00s02  00020  -1.735120e+01   2.235992e-02     00s02  00021  -1.736752e+01   2.106533e-01     00s02  00022  -1.740440e+01   6.238607e-01     00s02  00023  -1.745740e+01   3.614505e-01 
    00s02  00024  -1.746647e+01   4.628804e-02     00s02  00025  -1.747255e+01   9.029467e-03     00s02  00026  -1.747432e+01   3.710195e-03     00s03  00027  -1.747498e+01   1.320999e-03     00s03  00028  -1.747586e+01   8.504783e-03     00s03  00029  -1.747704e+01   1.940534e-02     00s03  00030  -1.747775e+01   7.022641e-03     00s03  00031  -1.747796e+01   6.407429e-04 
    00s03  00032  -1.747800e+01   1.249132e-04     00s03  00033  -1.747801e+01   3.481573e-04     00s03  00034  -1.747806e+01   1.425868e-03     00s04  00035  -1.747815e+01   3.175892e-03     00s04  00036  -1.747830e+01   3.999244e-03     00s04  00037  -1.747854e+01   2.530742e-03     00s04  00038  -1.747844e+01   8.370823e-04     00s04  00039  -1.747869e+01   4.511586e-04     00s04  00040  -1.747892e+01   1.604865e-03     00s04  00041  -1.747907e+01   4.290851e-03     00s04  00042  -1.747963e+01   1.484090e-02     00s04  00043  -1.748042e+01   2.423991e-02     00s05  00044  -1.748215e+01   2.980389e-02     00s05  00045  -1.747609e+01   1.141866e-01     00s05  00046  -1.748259e+01   8.663431e-03     00s05  00047  -1.748459e+01   6.256072e-03     00s05  00048  -1.748328e+01   1.879284e-02     00s05  00049  -1.748547e+01   1.997134e-03     00s05  00050  -1.748645e+01   6.758378e-04     00s05  00051  -1.748628e+01   2.762913e-03     00s05  00052  -1.748664e+01   6.382928e-04     00s06  00053  -1.748679e+01   2.018950e-04 
    00s06  00054  -1.748683e+01   4.841729e-05     00s06  00055  -1.748690e+01   2.886146e-05     00s06  00056  -1.748695e+01   2.287529e-04     00s06  00057  -1.748699e+01   5.262667e-06     00s06  00058  -1.748701e+01   8.983514e-06     00s06  00059  -1.748701e+01   4.283735e-04     00s06  00060  -1.748703e+01   2.725723e-05     00s06  00061  -1.748703e+01   2.168105e-06 
    00s07  00062  -1.748703e+01   2.365710e-06     00s07  00063  -1.748703e+01   1.559460e-06     00s07  00064  -1.748703e+01   7.830215e-07     00s07  00065  -1.748703e+01   9.353952e-06     00s07  00066  -1.748703e+01   1.149910e-06     00s07  00067  -1.748703e+01   1.241244e-07 
    00s07  00068  -1.748703e+01   7.268257e-08     00s07  00069  -1.748704e+01   4.429097e-08     00s07  00070  -1.748703e+01   8.743103e-06     00s08  00071  -1.748704e+01   2.796650e-07     00s08  00072  -1.748704e+01   2.796650e-07 
Runtime:     00s08
Optimization status: Converged

Optimization restart 1/1, f = -17.487035049111853
SEARCH!
self.IOrig:  [720, 830]
self.POrig:  [[' ', ' ', '128', '32', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '50', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '80', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '32', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '32'], [' ', ' ', '8', '100', '8'], [' ', ' ', '32', '8', '128'], [' ', ' ', '4', '20', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '50', '128'], [' ', ' ', '50', '16', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4']]
prob:  <search.SurrogateProblem object at 0x14f0a5287190>
0 OK
bestX [array([[0.4267, 0.3564, 0.9548, 0.1468, 0.0699]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7922.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DML_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7922
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7922
........................................ [0.238796, 0.232593, 0.234842]
OUTPUT:%f [0.238796, 0.232593, 0.234842] 0.2337175
store_func_eval
problem.constants
None
MLA iteration:  2
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -1.166311e+00           nan     00s00  00001  -1.166311e+00   4.916336e+01     00s00  00002  -7.209028e+00   2.377349e+01 
    00s00  00003   1.264239e+01   2.702309e+03     00s00  00004  -1.054253e+01   1.266660e+01     00s00  00005  -1.256817e+01   1.610161e+01     00s00  00006  -1.446259e+01   5.341448e+01     00s00  00007  -1.480555e+01   4.595766e+00     00s00  00008   1.674796e+02   3.409895e+04 
    00s01  00009  -1.500987e+01   4.299911e+01     00s01  00010  -1.544882e+01   1.305026e+01     00s01  00011  -1.598788e+01   1.234977e+01     00s01  00012  -1.687279e+01   4.653153e+00     00s01  00013  -1.718945e+01   5.863037e-01     00s01  00014  -1.741678e+01   2.000038e+00     00s01  00015  -1.763326e+01   1.856651e+00     00s01  00016  -1.794865e+01   1.485148e-01 
    00s01  00017  -1.804055e+01   9.897123e-02     00s02  00018  -1.806750e+01   1.281347e-01     00s02  00019  -1.814819e+01   1.341058e+00     00s02  00020  -1.824940e+01   1.086393e+00     00s02  00021  -1.839869e+01   4.202822e+00     00s02  00022  -1.846690e+01   3.067318e+00     00s02  00023  -1.851529e+01   5.127236e-02     00s02  00024  -1.851997e+01   3.948703e-02     00s02  00025  -1.853497e+01   6.773859e-02     00s02  00026  -1.857558e+01   1.927045e-01     00s03  00027  -1.864013e+01   2.824228e-01     00s03  00028  -1.848807e+01   4.429747e+00     00s03  00029  -1.865776e+01   6.367014e-01     00s03  00030  -1.869743e+01   1.077401e-01     00s03  00031  -1.871237e+01   3.166758e-02     00s03  00032  -1.871839e+01   6.087207e-02     00s03  00033  -1.872296e+01   1.034965e-02     00s03  00034  -1.872544e+01   5.561868e-03     00s03  00035  -1.873086e+01   2.184262e-02     00s04  00036  -1.874016e+01   1.624265e-01     00s04  00037  -1.875265e+01   9.121264e-02     00s04  00038  -1.877339e+01   6.957992e-02     00s04  00039  -1.877673e+01   2.823405e-01     00s04  00040  -1.878718e+01   2.203430e-02 
    00s04  00041  -1.878971e+01   2.117020e-03     00s04  00042  -1.879309e+01   4.887754e-03     00s04  00043  -1.879601e+01   5.933863e-03     00s04  00044  -1.872698e+01   1.978971e+00     00s05  00045  -1.879683e+01   1.026167e-02     00s05  00046  -1.880087e+01   5.040897e-03     00s05  00047  -1.880309e+01   9.805513e-02     00s05  00048  -1.881080e+01   1.276691e-02     00s05  00049  -1.881635e+01   3.514976e-03     00s05  00050  -1.882154e+01   1.312700e-02     00s05  00051  -1.882516e+01   4.533522e-03     00s05  00052  -1.881814e+01   3.986668e-01     00s05  00053  -1.882598e+01   2.648962e-02     00s06  00054  -1.882729e+01   2.368182e-03 
    00s06  00055  -1.882787e+01   1.502436e-04     00s06  00056  -1.882818e+01   2.496965e-04     00s06  00057  -1.882834e+01   3.541492e-04     00s06  00058  -1.882743e+01   2.293486e-02 
    00s06  00059  -1.882837e+01   9.991824e-05     00s06  00060  -1.882842e+01   7.417420e-05     00s06  00061  -1.882842e+01   3.741492e-04     00s06  00062  -1.882844e+01   7.710167e-05     00s07  00063  -1.882847e+01   2.505522e-05 
    00s07  00064  -1.882850e+01   1.727498e-06     00s07  00065  -1.882851e+01   9.332250e-06     00s07  00066  -1.882852e+01   1.011508e-04     00s07  00067  -1.882852e+01   4.445933e-05     00s07  00068  -1.882852e+01   8.567642e-06     00s07  00069  -1.882853e+01   4.271509e-06     00s07  00070  -1.882853e+01   6.409297e-06     00s07  00071  -1.882853e+01   8.589398e-06     00s08  00072  -1.882854e+01   3.958601e-06     00s08  00073  -1.882854e+01   1.201067e-06 
    00s08  00074  -1.882854e+01   8.661385e-07     00s08  00075  -1.882854e+01   2.934095e-07     00s08  00076  -1.882854e+01   2.695970e-08     00s08  00077  -1.882854e+01   1.908564e-07     00s08  00078  -1.882854e+01   6.451446e-05     00s08  00079  -1.882854e+01   2.063136e-06     00s08  00080  -1.882854e+01   2.591314e-07     00s09  00081  -1.882854e+01   1.313834e-08     00s09  00082  -1.882854e+01   5.555961e-07     00s09  00083  -1.882854e+01   2.923820e-08 
    00s09  00084  -1.882854e+01   2.070199e-08     00s09  00085  -1.882854e+01   2.991764e-07     00s09  00086  -1.882854e+01   2.991764e-07 
Runtime:     00s09
Optimization status: Converged

Optimization restart 1/1, f = -18.828541292108838
SEARCH!
self.IOrig:  [720, 830]
self.POrig:  [[' ', ' ', '128', '32', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '50', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '80', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '32', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '32'], [' ', ' ', '8', '100', '8'], [' ', ' ', '32', '8', '128'], [' ', ' ', '4', '20', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '50', '128'], [' ', ' ', '50', '16', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '4']]
prob:  <search.SurrogateProblem object at 0x14f0a4b48c10>
0 OK
bestX [array([[0.136 , 0.3696, 0.9463, 0.713 , 0.0106]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9251.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DML_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9251
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9251
........................................ [0.233658, 0.208802, 0.21001]
OUTPUT:%f [0.233658, 0.208802, 0.21001] 0.20940599999999998
store_func_eval
problem.constants
None
MLA iteration:  3
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -1.636424e+00           nan 
    00s00  00001  -1.636424e+00   5.829144e+01     00s00  00002  -8.316105e+00   3.012296e+01     00s00  00003   2.943420e+01   6.309134e+03     00s00  00004  -1.226182e+01   1.315404e+01     00s00  00005  -1.437757e+01   1.925998e+01     00s00  00006  -1.661663e+01   2.885639e+01     00s00  00007  -1.736778e+01   4.064367e+00 
    00s00  00008  -1.699663e+01   2.095871e+01     00s01  00009  -1.790479e+01   2.305900e+00     00s01  00010  -1.820920e+01   8.624383e-01     00s01  00011  -1.843235e+01   7.140829e-01     00s01  00012  -1.873387e+01   1.961226e+00     00s01  00013  -1.926759e+01   1.031709e+00     00s01  00014  -1.938385e+01   2.420016e+00     00s01  00015  -1.944150e+01   1.676924e-01     00s01  00016  -1.947720e+01   2.954651e-01     00s01  00017  -1.950023e+01   2.809641e-01 
    00s02  00018  -1.957972e+01   4.368859e-02     00s02  00019  -1.973309e+01   1.867577e+00     00s02  00020  -1.976929e+01   7.785298e-01     00s02  00021  -1.980348e+01   2.142813e-02     00s02  00022  -1.980500e+01   1.807222e-02     00s02  00023  -1.980273e+01   1.500149e-01     00s02  00024  -1.980590e+01   4.952821e-03     00s02  00025  -1.980628e+01   3.532111e-03 
    00s03  00026  -1.980818e+01   7.045277e-03     00s03  00027  -1.981427e+01   3.150345e-03     00s03  00028  -1.981598e+01   4.159075e-01     00s03  00029  -1.983041e+01   4.609799e-03     00s03  00030  -1.983175e+01   8.387939e-04     00s03  00031  -1.983191e+01   1.448900e-05     00s03  00032  -1.983191e+01   1.392642e-07 
    00s03  00033  -1.983191e+01   1.365715e-07     00s03  00034  -1.983191e+01   1.365715e-07 
Runtime:     00s03
Optimization status: Converged

Optimization restart 1/1, f = -19.831911342226064
SEARCH!
self.IOrig:  [720, 830]
self.POrig:  [[' ', ' ', '128', '32', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '50', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '80', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '32', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '32'], [' ', ' ', '8', '100', '8'], [' ', ' ', '32', '8', '128'], [' ', ' ', '4', '20', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '50', '128'], [' ', ' ', '50', '16', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '4']]
prob:  <search.SurrogateProblem object at 0x14f0a521f610>
0 OK
bestX [array([[0.5254, 0.3694, 0.044 , 0.9538, 0.0602]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8516.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DML_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8516
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8516
........................................ [0.220904, 0.220155, 0.219776]
OUTPUT:%f [0.220904, 0.220155, 0.219776] 0.21996549999999998
store_func_eval
problem.constants
None
MLA iteration:  4
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -2.208498e+00           nan     00s00  00001  -2.208498e+00   6.679309e+01     00s00  00002  -9.320396e+00   3.314889e+01     00s00  00003   1.470210e+01   4.189693e+03     00s00  00004  -1.346703e+01   2.009610e+01     00s00  00005  -1.674939e+01   2.293280e+01     00s00  00006  -1.769634e+01   7.174822e+01     00s00  00007  -1.861636e+01   3.022522e+00     00s00  00008  -1.574823e+01   1.134198e+02     00s01  00009  -1.922053e+01   3.369327e+00 
    00s01  00010  -1.916100e+01   1.931167e+01     00s01  00011  -1.939295e+01   5.991825e+00     00s01  00012  -1.952492e+01   7.052046e-01     00s01  00013  -1.955854e+01   8.728265e-01     00s01  00014  -1.979906e+01   3.913111e+00     00s01  00015  -2.007517e+01   4.517496e+00     00s01  00016  -2.060509e+01   4.448914e+00     00s01  00017  -2.074044e+01   2.913754e+00     00s02  00018  -2.079145e+01   1.974824e-01     00s02  00019  -2.079855e+01   1.619441e-01 
    00s02  00020  -2.084476e+01   2.100472e-02     00s02  00021  -2.085118e+01   1.846133e-02     00s02  00022  -2.085471e+01   9.389527e-03     00s02  00023  -2.085964e+01   1.021683e-02     00s02  00024  -2.086319e+01   2.484589e-02     00s02  00025  -2.086908e+01   1.640740e-02     00s03  00026  -2.085882e+01   4.586407e-01     00s03  00027  -2.087105e+01   5.453055e-02 
    00s03  00028  -2.087348e+01   6.710206e-03     00s03  00029  -2.087395e+01   4.278064e-04     00s03  00030  -2.087369e+01   2.447543e-02     00s03  00031  -2.087395e+01   1.117063e-04     00s03  00032  -2.087396e+01   5.860010e-05     00s03  00033  -2.087397e+01   7.772579e-05     00s03  00034  -2.087399e+01   1.132871e-04     00s04  00035  -2.087404e+01   3.824533e-04     00s04  00036  -2.087438e+01   2.154234e-03     00s04  00037  -2.087533e+01   9.107658e-03     00s04  00038  -2.087729e+01   2.730526e-02     00s04  00039  -2.087990e+01   3.937125e-02     00s04  00040  -2.088365e+01   2.358590e-02     00s04  00041  -2.088368e+01   4.930959e-02     00s04  00042  -2.088489e+01   1.136124e-02     00s04  00043  -2.088610e+01   3.804068e-04     00s05  00044  -2.088614e+01   1.011353e-02 
    00s05  00045  -2.088631e+01   6.997785e-04     00s05  00046  -2.088641e+01   3.664224e-04     00s05  00047  -2.088646e+01   4.103676e-04     00s05  00048  -2.088650e+01   6.113398e-04     00s05  00049  -2.088654e+01   1.230429e-04     00s05  00050  -2.088656e+01   4.344674e-05     00s05  00051  -2.088657e+01   1.883902e-05 
    00s06  00052  -2.088659e+01   2.806688e-05     00s06  00053  -2.088662e+01   1.090944e-04     00s06  00054  -2.088662e+01   6.484821e-04     00s06  00055  -2.088663e+01   6.743957e-05     00s06  00056  -2.088664e+01   1.173405e-05     00s06  00057  -2.088664e+01   2.039766e-06     00s06  00058  -2.088664e+01   1.301801e-05     00s06  00059  -2.088664e+01   7.826125e-07     00s06  00060  -2.088664e+01   2.567659e-07 
    00s07  00061  -2.088664e+01   2.567659e-07 
Runtime:     00s07
Optimization status: Converged

Optimization restart 1/1, f = -20.886641689822696
SEARCH!
self.IOrig:  [720, 830]
self.POrig:  [[' ', ' ', '128', '32', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '50', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '80', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '32', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '32'], [' ', ' ', '8', '100', '8'], [' ', ' ', '32', '8', '128'], [' ', ' ', '4', '20', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '50', '128'], [' ', ' ', '50', '16', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4']]
prob:  <search.SurrogateProblem object at 0x14f0a4b4e6a0>
0 OK
bestX [array([[0.0607, 0.4849, 0.8634, 0.8899, 0.0032]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2834.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DML_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2834
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2834
........................................ [0.212758, 0.212996, 0.217345]
OUTPUT:%f [0.212758, 0.212996, 0.217345] 0.2151705
store_func_eval
problem.constants
None
MLA iteration:  5
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -3.732654e+00           nan 
    00s00  00001  -3.732654e+00   7.949411e+01     00s00  00002  -1.161063e+01   4.257414e+01     00s00  00003   3.045288e+01   8.669583e+03     00s00  00004  -1.677474e+01   2.182097e+01     00s00  00005  -2.034446e+01   2.137029e+01 
    00s00  00006  -2.145310e+01   2.104462e+01     00s00  00007  -2.203028e+01   4.234421e-01     00s00  00008  -2.213136e+01   6.617016e-02     00s01  00009  -2.215348e+01   1.513355e-01     00s01  00010  -2.218512e+01   2.277888e-01     00s01  00011  -2.030431e+01   9.528248e+01     00s01  00012  -2.226424e+01   1.146757e+00     00s01  00013  -2.233576e+01   1.279457e+01     00s01  00014  -2.254223e+01   7.282236e-01     00s01  00015  -2.262352e+01   5.767751e-01     00s01  00016  -2.273351e+01   1.043322e-01 
    00s02  00017  -2.276202e+01   7.458266e-02     00s02  00018  -2.283020e+01   1.012788e-01     00s02  00019  -2.288460e+01   7.515326e-02     00s02  00020  -2.291637e+01   3.037024e-01     00s02  00021  -2.295093e+01   6.634494e-01     00s02  00022  -2.297010e+01   1.158379e-01     00s02  00023  -2.298002e+01   3.079074e-02     00s02  00024  -2.298807e+01   3.394810e-02     00s03  00025  -2.299218e+01   6.172469e-02     00s03  00026  -2.300743e+01   2.782744e-02     00s03  00027  -2.305404e+01   4.303584e-01     00s03  00028   1.902296e+01   1.223553e+02     00s03  00029  -2.306767e+01   7.687701e-01     00s03  00030  -2.309780e+01   5.087295e+00     00s03  00031  -2.315653e+01   4.545040e+00     00s03  00032  -2.326724e+01   4.727979e-01     00s03  00033  -2.329748e+01   1.430803e+00     00s04  00034  -2.332743e+01   2.153097e+00     00s04  00035  -2.335386e+01   1.316171e-01     00s04  00036  -2.335956e+01   4.893669e-02     00s04  00037  -2.337361e+01   6.715633e-02     00s04  00038  -2.338197e+01   7.486514e-02     00s04  00039  -2.338536e+01   3.152647e-02     00s04  00040  -2.338669e+01   1.543965e-02 
    00s04  00041  -2.338797e+01   2.691448e-03     00s05  00042  -2.338904e+01   7.384001e-03     00s05  00043  -2.339051e+01   7.007751e-02     00s05  00044  -2.339382e+01   7.606922e-02     00s05  00045  -2.340703e+01   1.543883e+00     00s05  00046  -2.344429e+01   4.621843e-01     00s05  00047  -2.348993e+01   6.750170e-02     00s05  00048  -2.350808e+01   7.573165e-02     00s05  00049  -2.352470e+01   1.012353e+00     00s05  00050  -2.353995e+01   4.561751e-03     00s06  00051  -2.354148e+01   2.435300e-03     00s06  00052  -2.354297e+01   2.845574e-03     00s06  00053  -2.353666e+01   5.157919e-01     00s06  00054  -2.354334e+01   2.687950e-02     00s06  00055  -2.354422e+01   4.621073e-03     00s06  00056  -2.354479e+01   1.101120e-04     00s06  00057  -2.354509e+01   3.354824e-04     00s06  00058  -2.354516e+01   8.403088e-03     00s06  00059  -2.354549e+01   1.044889e-03 
    00s07  00060  -2.354563e+01   5.889504e-04     00s07  00061  -2.354581e+01   3.598571e-04     00s07  00062  -2.354590e+01   5.942278e-03     00s07  00063  -2.354601e+01   1.044390e-04     00s07  00064  -2.354604e+01   7.680201e-05     00s07  00065  -2.354607e+01   1.641896e-04     00s07  00066  -2.354604e+01   6.172330e-03     00s07  00067  -2.354608e+01   9.072033e-04     00s07  00068  -2.354612e+01   2.484590e-04     00s08  00069  -2.354616e+01   8.021374e-06     00s08  00070  -2.354617e+01   6.613877e-06 
    00s08  00071  -2.354618e+01   9.131003e-06     00s08  00072  -2.354618e+01   3.194776e-05     00s08  00073  -2.354618e+01   6.290239e-06     00s08  00074  -2.354619e+01   1.021574e-05     00s08  00075  -2.354619e+01   5.848587e-04     00s08  00076  -2.354620e+01   4.623234e-05     00s08  00077  -2.354620e+01   1.216063e-06     00s09  00078  -2.354620e+01   5.565102e-06     00s09  00079  -2.354620e+01   2.605349e-06     00s09  00080  -2.354617e+01   2.064921e-03     00s09  00081  -2.354620e+01   1.472591e-05     00s09  00082  -2.354620e+01   3.128143e-06 
    00s09  00083  -2.354620e+01   1.450351e-07     00s09  00084  -2.354620e+01   9.081525e-08     00s09  00085  -2.354620e+01   3.774771e-05     00s09  00086  -2.354620e+01   6.079973e-06     00s10  00087  -2.354620e+01   1.276858e-06     00s10  00088  -2.354620e+01   2.417745e-08 
    00s10  00089  -2.354620e+01   5.883287e-08     00s10  00090  -2.354620e+01   1.235066e-06     00s10  00091  -2.354620e+01   1.316192e-06     00s10  00092  -2.354620e+01   1.316192e-06 
Runtime:     00s10
Optimization status: Converged

Optimization restart 1/1, f = -23.54620239043578
SEARCH!
self.IOrig:  [720, 830]
self.POrig:  [[' ', ' ', '128', '32', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '50', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '80', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '32', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '32'], [' ', ' ', '8', '100', '8'], [' ', ' ', '32', '8', '128'], [' ', ' ', '4', '20', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '50', '128'], [' ', ' ', '50', '16', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '128', '4']]
prob:  <search.SurrogateProblem object at 0x14f0a4b4e460>
0 OK
bestX [array([[0.6758, 0.0769, 0.9329, 0.1984, 0.4865]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/948.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DML_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/948
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/948
........................................ [0.579346, 0.579801, 0.579139]
OUTPUT:%f [0.579346, 0.579801, 0.579139] 0.5794699999999999
store_func_eval
problem.constants
None
MLA iteration:  6
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -4.375442e+00           nan     00s00  00001  -4.375442e+00   8.907021e+01     00s00  00002  -1.264152e+01   4.466864e+01 
    00s00  00003   2.537366e+01   5.870427e+03     00s00  00004  -1.713401e+01   1.461519e+01     00s00  00005  -1.906650e+01   1.846951e+01     00s00  00006  -1.978568e+01   2.406590e+00     00s00  00007  -1.990245e+01   1.419173e+00     00s00  00008  -2.022423e+01   1.657222e+00     00s01  00009  -2.032514e+01   6.951378e-01 
    00s01  00010  -2.049144e+01   2.242879e+00     00s01  00011  -2.059308e+01   2.973312e+00     00s01  00012  -2.053165e+01   1.539653e+01     00s01  00013  -2.080031e+01   4.968146e+00     00s01  00014  -2.100788e+01   1.759961e+00     00s01  00015  -2.129508e+01   1.342178e+00     00s01  00016  -2.170549e+01   2.097509e+00     00s01  00017  -2.184618e+01   1.082000e+01     00s02  00018  -2.229569e+01   2.158057e+00     00s02  00019  -2.255063e+01   2.328036e+00     00s02  00020  -2.314114e+01   1.618190e+00     00s02  00021  -2.354843e+01   1.227058e+00     00s02  00022  -2.376556e+01   1.954985e-01 
    00s02  00023  -2.390632e+01   9.229048e-02     00s02  00024  -2.408367e+01   3.604401e-02     00s02  00025  -2.416027e+01   2.535843e-01     00s03  00026  -2.421612e+01   7.169205e-02     00s03  00027  -2.427009e+01   2.803294e-02     00s03  00028  -2.429931e+01   1.738090e-01     00s03  00029  -2.431613e+01   1.035522e+00     00s03  00030  -2.433379e+01   8.256454e-02     00s03  00031  -2.434198e+01   1.777325e-02     00s03  00032  -2.434775e+01   5.045266e-02     00s03  00033  -2.435398e+01   1.489581e-02     00s03  00034  -2.435771e+01   6.050020e-02     00s04  00035  -2.436059e+01   2.707937e-03     00s04  00036  -2.436217e+01   4.421784e-03 
    00s04  00037  -2.436338e+01   3.483041e-03     00s04  00038  -2.436392e+01   3.720350e-03     00s04  00039  -2.436482e+01   2.451067e-03     00s04  00040  -2.436511e+01   1.634738e-03     00s04  00041  -2.436555e+01   1.070459e-03     00s04  00042  -2.435926e+01   5.004004e-01     00s04  00043  -2.436559e+01   5.270366e-04 
    00s05  00044  -2.436575e+01   3.272456e-04     00s05  00045  -2.436591e+01   6.678880e-04 
    00s05  00046  -2.436602e+01   7.733895e-05     00s05  00047  -2.436610e+01   5.091291e-05     00s05  00048  -2.436611e+01   1.526294e-03     00s05  00049  -2.436616e+01   1.061442e-04     00s05  00050  -2.436619e+01   2.825551e-05     00s05  00051  -2.436621e+01   4.849832e-05     00s05  00052  -2.436623e+01   2.600551e-06     00s06  00053  -2.436624e+01   1.430963e-06     00s06  00054  -2.436625e+01   1.504990e-04     00s06  00055  -2.436625e+01   2.913312e-05 
    00s06  00056  -2.436626e+01   7.998643e-06     00s06  00057  -2.436626e+01   2.872660e-07     00s06  00058  -2.436626e+01   4.391024e-07     00s06  00059  -2.436626e+01   5.846579e-05     00s06  00060  -2.436626e+01   3.227204e-06     00s06  00061  -2.436626e+01   1.338775e-06     00s07  00062  -2.436626e+01   5.925890e-07     00s07  00063  -2.436626e+01   1.228170e-06     00s07  00064  -2.436626e+01   3.179182e-07     00s07  00065  -2.436626e+01   1.843683e-07 
    00s07  00066  -2.436626e+01   1.384143e-07     00s07  00067  -2.436626e+01   1.122022e-04     00s07  00068  -2.436626e+01   4.681908e-07     00s07  00069  -2.436626e+01   4.681908e-07 
Runtime:     00s07
Optimization status: Converged

Optimization restart 1/1, f = -24.366263557590816
SEARCH!
self.IOrig:  [720, 830]
self.POrig:  [[' ', ' ', '128', '32', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '50', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '80', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '32', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '32'], [' ', ' ', '8', '100', '8'], [' ', ' ', '32', '8', '128'], [' ', ' ', '4', '20', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '50', '128'], [' ', ' ', '50', '16', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '16', '50']]
prob:  <search.SurrogateProblem object at 0x14f0a4adfac0>
0 OK
bestX [array([[7.8919e-01, 1.8681e-01, 6.9326e-02, 5.5497e-01, 2.7879e-04]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2649.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DML_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2649
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2649
........................................ [0.230179, 0.230308, 0.229382]
OUTPUT:%f [0.230179, 0.230308, 0.229382] 0.22984500000000002
store_func_eval
problem.constants
None
MLA iteration:  7
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -5.033474e+00           nan     00s00  00001  -5.033474e+00   1.019218e+02     00s00  00002  -1.392987e+01   5.237758e+01     00s00  00003   4.240428e+01   9.881125e+03     00s00  00004  -1.868219e+01   1.291806e+01     00s00  00005  -2.026296e+01   1.924836e+01     00s00  00006  -2.105802e+01   2.576839e+00     00s00  00007  -2.126820e+01   2.624972e+00     00s00  00008  -2.193352e+01   1.261949e+00 
    00s01  00009  -2.199244e+01   4.583237e-01     00s01  00010  -2.202705e+01   4.714608e-02     00s01  00011  -2.203659e+01   4.570230e-02     00s01  00012  -2.210505e+01   1.024327e-01     00s01  00013  -2.225436e+01   1.294214e+00     00s01  00014  -1.683870e+01   1.451842e+02     00s01  00015  -2.229266e+01   2.461401e+00     00s01  00016  -2.233871e+01   9.721313e+00     00s01  00017  -2.236501e+01   2.607445e+01     00s02  00018  -2.242333e+01   1.395219e+01     00s02  00019  -2.236551e+01   6.136262e+00     00s02  00020  -2.295696e+01   3.298972e+00     00s02  00021  -2.292519e+01   4.743780e+00     00s02  00022  -2.301079e+01   8.354040e-02 
    00s02  00023  -2.302137e+01   2.131668e-02     00s02  00024  -2.302292e+01   5.969598e-03     00s02  00025  -2.302518e+01   6.712341e-03     00s02  00026  -2.302871e+01   2.310165e-02     00s03  00027  -2.303686e+01   7.054667e-02     00s03  00028  -2.305135e+01   1.843903e-01     00s03  00029  -2.307033e+01   1.130613e+00     00s03  00030  -2.311394e+01   2.617721e-01     00s03  00031  -2.316975e+01   4.716905e-01     00s03  00032  -2.316464e+01   4.788074e-01     00s03  00033  -2.317611e+01   9.250463e-02     00s03  00034  -2.317911e+01   1.690493e-03     00s04  00035  -2.317923e+01   3.519816e-04     00s04  00036  -2.317924e+01   2.268348e-04 
    00s04  00037  -2.317925e+01   7.252939e-05     00s04  00038  -2.317926e+01   6.876656e-05     00s04  00039  -2.317928e+01   1.353902e-04     00s04  00040  -2.317937e+01   8.457945e-04     00s04  00041  -2.317958e+01   3.029146e-03     00s04  00042  -2.318020e+01   1.269322e-02     00s04  00043  -2.318141e+01   4.488287e-02     00s05  00044  -2.318332e+01   6.958868e-02     00s05  00045  -2.319037e+01   1.417955e-01     00s05  00046  -2.319626e+01   1.052156e-01     00s05  00047  -2.320287e+01   6.685786e-02     00s05  00048  -2.320425e+01   6.570523e-02     00s05  00049  -2.320539e+01   3.715095e-03     00s05  00050  -2.320559e+01   3.269126e-03     00s05  00051  -2.320627e+01   4.212080e-03     00s05  00052  -2.320667e+01   2.682502e-03     00s06  00053  -2.320760e+01   2.237153e-03     00s06  00054  -2.321007e+01   3.024849e-03     00s06  00055  -2.321695e+01   7.592737e-03     00s06  00056  -2.320999e+01   1.782682e-01     00s06  00057  -2.321987e+01   1.234884e-02     00s06  00058  -2.322112e+01   1.955970e-02     00s06  00059  -2.322226e+01   5.059378e-03     00s06  00060  -2.322340e+01   1.584350e-03     00s06  00061  -2.322475e+01   1.074207e-02     00s07  00062  -2.322290e+01   1.698085e-01     00s07  00063  -2.322501e+01   4.223429e-03     00s07  00064  -2.322549e+01   1.746242e-03     00s07  00065  -2.322618e+01   1.238829e-03     00s07  00066  -2.322672e+01   5.276757e-04     00s07  00067  -2.322707e+01   1.016575e-04     00s07  00068  -2.322730e+01   1.377960e-05     00s07  00069  -2.322745e+01   4.147835e-05     00s07  00070  -2.322737e+01   5.256123e-03     00s08  00071  -2.322749e+01   5.498016e-04     00s08  00072  -2.322758e+01   3.414449e-05     00s08  00073  -2.322764e+01   2.708538e-05     00s08  00074  -2.322767e+01   3.016759e-04     00s08  00075  -2.322765e+01   3.417727e-03     00s08  00076  -2.322768e+01   2.319657e-04     00s08  00077  -2.322770e+01   8.663625e-05 
    00s08  00078  -2.322772e+01   1.673727e-06     00s09  00079  -2.322773e+01   4.989123e-06     00s09  00080  -2.322774e+01   1.137010e-05     00s09  00081  -2.322774e+01   6.674149e-05     00s09  00082  -2.322775e+01   3.737258e-06     00s09  00083  -2.322775e+01   1.249058e-06     00s09  00084  -2.322775e+01   2.497452e-06     00s09  00085  -2.322775e+01   4.546339e-06     00s09  00086  -2.322775e+01   6.928387e-05     00s09  00087  -2.322775e+01   8.397439e-06     00s10  00088  -2.322775e+01   5.123180e-07     00s10  00089  -2.322775e+01   2.720517e-06     00s10  00090  -2.322775e+01   3.750393e-05     00s10  00091  -2.322775e+01   4.219219e-06     00s10  00092  -2.322776e+01   1.184951e-06 
    00s10  00093  -2.322776e+01   6.143192e-07     00s10  00094  -2.322776e+01   4.111960e-07     00s10  00095  -2.322776e+01   6.548497e-07     00s10  00096  -2.322776e+01   1.026098e-07     00s11  00097  -2.322776e+01   1.596545e-07     00s11  00098  -2.322776e+01   1.596545e-07 
Runtime:     00s11
Optimization status: Converged

Optimization restart 1/1, f = -23.227756197503183
SEARCH!
self.IOrig:  [720, 830]
self.POrig:  [[' ', ' ', '128', '32', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '50', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '80', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '32', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '32'], [' ', ' ', '8', '100', '8'], [' ', ' ', '32', '8', '128'], [' ', ' ', '4', '20', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '50', '128'], [' ', ' ', '50', '16', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '16', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '4']]
prob:  <search.SurrogateProblem object at 0x14f0a4ad4610>
0 OK
bestX [array([[0.1306, 0.4319, 0.7181, 0.0426, 0.0789]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4559.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DML_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4559
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4559
........................................ [0.238109, 0.238142, 0.250543]
OUTPUT:%f [0.238109, 0.238142, 0.250543] 0.24434250000000002
store_func_eval
problem.constants
None
MLA iteration:  8
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -6.059245e+00           nan     00s00  00001  -6.059245e+00   1.158289e+02     00s00  00002  -1.553921e+01   5.921835e+01     00s00  00003   3.455088e+01   8.910843e+03 
    00s00  00004  -2.062211e+01   1.560975e+01     00s00  00005  -2.262505e+01   2.094705e+01     00s00  00006  -2.342990e+01   3.213369e+00     00s00  00007  -2.360058e+01   2.230357e+00     00s00  00008  -2.405310e+01   1.527365e+00 
    00s01  00009  -2.416422e+01   7.425392e-02     00s01  00010  -2.417825e+01   2.129737e-02     00s01  00011  -2.418876e+01   1.994030e-02     00s01  00012  -2.419744e+01   3.564878e-02     00s01  00013  -2.421734e+01   3.870023e-02     00s01  00014  -2.419863e+01   3.991559e-01     00s01  00015  -2.422387e+01   5.603377e-02     00s01  00016  -2.423240e+01   1.953507e-02     00s01  00017  -2.424145e+01   1.599509e-02     00s02  00018  -2.424357e+01   4.899868e-01     00s02  00019  -2.425757e+01   9.408990e-02     00s02  00020  -2.427269e+01   3.175182e-02     00s02  00021  -2.429766e+01   1.122333e-01     00s02  00022  -2.431820e+01   6.724096e-02     00s02  00023  -2.431521e+01   1.522365e-01     00s02  00024  -2.432237e+01   3.080601e-02 
    00s02  00025  -2.432959e+01   3.212497e-03     00s03  00026  -2.433129e+01   4.850664e-03     00s03  00027  -2.433273e+01   3.362562e-03     00s03  00028  -2.433186e+01   2.393491e-02     00s03  00029  -2.433315e+01   5.187675e-03     00s03  00030  -2.433371e+01   6.360728e-04     00s03  00031  -2.433399e+01   5.466947e-05     00s03  00032  -2.433413e+01   8.148633e-05     00s03  00033  -2.433336e+01   1.086234e-02 
    00s03  00034  -2.433414e+01   6.181612e-05     00s04  00035  -2.433422e+01   9.037272e-06     00s04  00036  -2.433422e+01   9.636527e-04     00s04  00037  -2.433426e+01   3.147343e-05     00s04  00038  -2.433427e+01   1.187997e-05 
    00s04  00039  -2.433428e+01   6.441259e-06     00s04  00040  -2.433428e+01   3.555419e-05     00s04  00041  -2.433429e+01   3.600375e-06     00s04  00042  -2.433429e+01   1.118305e-06     00s04  00043  -2.433429e+01   2.293101e-07     00s05  00044  -2.433429e+01   2.769460e-07     00s05  00045  -2.433429e+01   7.319047e-06 
    00s05  00046  -2.433429e+01   5.733801e-07     00s05  00047  -2.433429e+01   1.218468e-07     00s05  00048  -2.433429e+01   3.477520e-08 
    00s05  00049  -2.433429e+01   3.477520e-08 
Runtime:     00s05
Optimization status: Converged

Optimization restart 1/1, f = -24.334288735812223
SEARCH!
self.IOrig:  [720, 830]
self.POrig:  [[' ', ' ', '128', '32', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '50', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '80', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '32', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '32'], [' ', ' ', '8', '100', '8'], [' ', ' ', '32', '8', '128'], [' ', ' ', '4', '20', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '50', '128'], [' ', ' ', '50', '16', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '16', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '4']]
prob:  <search.SurrogateProblem object at 0x14f0a5281820>
0 OK
bestX [array([[0.6993, 0.502 , 0.986 , 0.9138, 0.0622]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9340.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DML_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9340
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9340
........................................ [0.16843, 0.168496, 0.166756]
OUTPUT:%f [0.16843, 0.168496, 0.166756] 0.167626
store_func_eval
problem.constants
None
MLA iteration:  9
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -6.380650e+00           nan     00s00  00001  -6.380650e+00   1.291631e+02     00s00  00002  -1.644430e+01   6.806520e+01     00s00  00003   5.300254e+01   1.375269e+04     00s00  00004  -2.204809e+01   1.781541e+01 
    00s00  00005  -2.415248e+01   2.813724e+01     00s00  00006  -2.509751e+01   3.186110e+00     00s00  00007  -2.528662e+01   2.847307e+00     00s00  00008  -2.561355e+01   5.326482e+00     00s01  00009  -2.601900e+01   1.160833e+00     00s01  00010  -2.608131e+01   4.599488e-01 
    00s01  00011  -2.611200e+01   5.173093e-02     00s01  00012  -2.612047e+01   4.648872e-02     00s01  00013  -2.616479e+01   1.152434e-01     00s01  00014  -2.619681e+01   8.366639e-02     00s01  00015  -2.621707e+01   6.543625e-02     00s01  00016  -2.623247e+01   2.114085e-02     00s01  00017  -2.624432e+01   3.097141e-02     00s02  00018  -2.625988e+01   6.197280e-01     00s02  00019  -2.628335e+01   1.713998e-01     00s02  00020  -2.630561e+01   6.625000e-02     00s02  00021  -2.631903e+01   2.048205e-02 
    00s02  00022  -2.632588e+01   1.602075e-03     00s02  00023  -2.632860e+01   2.313077e-03     00s03  00024  -2.633018e+01   3.875202e-03     00s03  00025  -2.633104e+01   6.800276e-04     00s03  00026  -2.633131e+01   1.098410e-04 
    00s03  00027  -2.633150e+01   1.240356e-04     00s03  00028  -2.633157e+01   4.701104e-04     00s03  00029  -2.633164e+01   3.590353e-04     00s03  00030  -2.633166e+01   3.258914e-05 
    00s03  00031  -2.633168e+01   2.524999e-05     00s03  00032  -2.633169e+01   8.711326e-06     00s04  00033  -2.633170e+01   2.718454e-05     00s04  00034  -2.633170e+01   8.389106e-07     00s04  00035  -2.633170e+01   1.749252e-06     00s04  00036  -2.633170e+01   2.491275e-06 
    00s04  00037  -2.633170e+01   2.743812e-06     00s04  00038  -2.633170e+01   2.163420e-07     00s04  00039  -2.633170e+01   9.123322e-08     00s04  00040  -2.633170e+01   1.105720e-07     00s04  00041  -2.633170e+01   1.209858e-06     00s05  00042  -2.633170e+01   1.209858e-06 
Runtime:     00s05
Optimization status: Converged

Optimization restart 1/1, f = -26.33170414171348
SEARCH!
self.IOrig:  [720, 830]
self.POrig:  [[' ', ' ', '128', '32', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '50', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '80', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '32', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '32'], [' ', ' ', '8', '100', '8'], [' ', ' ', '32', '8', '128'], [' ', ' ', '4', '20', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '50', '128'], [' ', ' ', '50', '16', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '16', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '4'], [' ', ' ', '128', '2048', '4']]
prob:  <search.SurrogateProblem object at 0x14f0a469ddf0>
0 OK
bestX [array([[0.3801, 0.2541, 0.5266, 0.1314, 0.057 ]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2068.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DML_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2068
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2068
........................................ [0.236314, 0.232965, 0.232317]
OUTPUT:%f [0.236314, 0.232965, 0.232317] 0.232641
store_func_eval
problem.constants
None
MLA iteration:  10
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -7.812374e+00           nan     00s00  00001  -7.812374e+00   1.413065e+02     00s00  00002  -1.799624e+01   6.295396e+01     00s00  00003  -4.241797e+00   2.590987e+03     00s00  00004  -2.343070e+01   4.711222e+01 
    00s00  00005  -2.638094e+01   5.334587e+01     00s00  00006  -2.753248e+01   4.631459e+00     00s00  00007  -2.766634e+01   2.495539e+00     00s00  00008  -2.800939e+01   3.058598e+00     00s01  00009  -2.827267e+01   3.515714e+00     00s01  00010  -2.841592e+01   1.641414e+00     00s01  00011  -2.846740e+01   1.064239e-01     00s01  00012  -2.847387e+01   3.037666e-02 
    00s01  00013  -2.847929e+01   1.712712e-02     00s01  00014  -2.849027e+01   2.962701e-02     00s01  00015  -2.850866e+01   6.756547e-02     00s01  00016  -2.857979e+01   2.466310e-01     00s01  00017  -2.864946e+01   2.702016e-01     00s02  00018  -2.913250e+01   6.721628e+00     00s02  00019  -6.548609e+00   2.727280e+02     00s02  00020  -2.918145e+01   9.960478e+00     00s02  00021  -2.919615e+01   1.379154e+01     00s02  00022  -1.705597e+01   2.698285e+02     00s02  00023  -2.920751e+01   1.652770e+01     00s02  00024  -2.956645e+01   1.122349e+01     00s02  00025  -3.007168e+01   1.544429e+00     00s03  00026  -3.016839e+01   3.521226e-01     00s03  00027  -3.025867e+01   4.997491e-01     00s03  00028  -3.035263e+01   4.476223e-01     00s03  00029  -3.042498e+01   1.784481e-01     00s03  00030  -3.047604e+01   5.735368e-02     00s03  00031  -3.047949e+01   1.532223e-02 
    00s03  00032  -3.048021e+01   2.582062e-05     00s03  00033  -3.048021e+01   2.798072e-06     00s03  00034  -3.048021e+01   1.159799e-05     00s04  00035  -3.048021e+01   6.721209e-08     00s04  00036  -3.048021e+01   4.566366e-10     00s04  00037  -3.048021e+01   4.566366e-10 
Runtime:     00s04
Optimization status: Converged

Optimization restart 1/1, f = -30.480214118698996
SEARCH!
self.IOrig:  [720, 830]
self.POrig:  [[' ', ' ', '128', '32', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '50', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '80', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '32', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '32'], [' ', ' ', '8', '100', '8'], [' ', ' ', '32', '8', '128'], [' ', ' ', '4', '20', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '50', '128'], [' ', ' ', '50', '16', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '16', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '4'], [' ', ' ', '128', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '4']]
prob:  <search.SurrogateProblem object at 0x14f0a4691fa0>
0 OK
bestX [array([[0.5477, 0.8907, 0.5923, 0.968 , 0.0108]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/362.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DML_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/362
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/362
........................................ [0.167768, 0.166409, 0.166457]
OUTPUT:%f [0.167768, 0.166409, 0.166457] 0.166433
store_func_eval
problem.constants
None
MLA iteration:  11
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -8.796695e+00           nan     00s00  00001  -8.796695e+00   1.581565e+02     00s00  00002  -1.954800e+01   6.927505e+01     00s00  00003  -6.362196e+00   2.785583e+03 
    00s00  00004  -2.512484e+01   5.302301e+01     00s00  00005  -2.834848e+01   5.489293e+01     00s00  00006  -2.947494e+01   4.996013e+00     00s00  00007  -2.961300e+01   2.789584e+00     00s00  00008  -2.999267e+01   3.797989e+00     00s01  00009  -3.033383e+01   5.145792e+00     00s01  00010  -3.053225e+01   1.670878e+00     00s01  00011  -3.058669e+01   1.376363e-01     00s01  00012  -3.059212e+01   7.568048e-02 
    00s01  00013  -3.060483e+01   7.281073e-02     00s01  00014  -3.068315e+01   4.580426e-01     00s01  00015  -2.443656e+01   1.996873e+02     00s01  00016  -3.090118e+01   2.833828e+00     00s01  00017  -3.119561e+01   8.063397e+00     00s02  00018  -3.028301e+01   9.227973e+01     00s02  00019  -3.137609e+01   1.736901e+01     00s02  00020   1.805134e+01   2.742836e+01     00s02  00021  -3.140124e+01   2.439413e+01     00s02  00022  -3.162702e+01   2.020094e+01     00s02  00023  -3.285749e+01   2.149117e+00     00s02  00024  -3.299998e+01   2.152846e+00     00s02  00025  -3.322816e+01   1.149505e+00     00s03  00026  -3.331898e+01   1.987617e-01     00s03  00027  -3.334246e+01   2.553137e-02     00s03  00028  -3.334558e+01   3.536924e-02     00s03  00029  -3.335159e+01   5.631736e-02     00s03  00030  -3.335958e+01   3.456377e-02     00s03  00031  -3.336159e+01   4.455434e-02 
    00s03  00032  -3.336525e+01   6.671530e-04     00s03  00033  -3.336532e+01   9.963592e-05     00s03  00034  -3.336533e+01   4.486093e-04     00s04  00035  -3.336533e+01   2.336721e-06     00s04  00036  -3.336533e+01   2.878291e-07     00s04  00037  -3.336533e+01   2.570898e-07 
    00s04  00038  -3.336533e+01   2.570898e-07 
Runtime:     00s04
Optimization status: Converged

Optimization restart 1/1, f = -33.365331723054176
SEARCH!
self.IOrig:  [720, 830]
self.POrig:  [[' ', ' ', '128', '32', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '50', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '80', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '32', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '32'], [' ', ' ', '8', '100', '8'], [' ', ' ', '32', '8', '128'], [' ', ' ', '4', '20', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '50', '128'], [' ', ' ', '50', '16', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '16', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '4'], [' ', ' ', '128', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '4'], [' ', ' ', '64', '2048', '4']]
prob:  <search.SurrogateProblem object at 0x14f0a52c3670>
0 OK
bestX [array([[0.7799, 0.7342, 0.9516, 0.887 , 0.003 ]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3513.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DML_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3513
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3513
........................................ [0.21701, 0.202288, 0.195905]
OUTPUT:%f [0.21701, 0.202288, 0.195905] 0.1990965
store_func_eval
problem.constants
None
MLA iteration:  12
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -9.851688e+00           nan     00s00  00001  -9.851688e+00   1.610506e+02     00s00  00002  -1.979461e+01   3.516810e+01     00s00  00003  -1.906301e+01   2.782583e+02     00s00  00004  -2.149099e+01   1.540095e+01 
    00s00  00005  -2.261438e+01   1.989152e+01     00s00  00006  -2.746509e+01   1.043703e+01     00s00  00007   2.420235e+02   8.527654e+04     00s00  00008  -2.778954e+01   2.103246e+01     00s01  00009  -2.839353e+01   1.000148e+01     00s01  00010  -2.917095e+01   2.137617e+00     00s01  00011  -2.932174e+01   6.203092e-01     00s01  00012  -2.939505e+01   4.400784e-01     00s01  00013  -2.943562e+01   1.400409e-01     00s01  00014  -2.947834e+01   2.579662e-01     00s01  00015  -2.951504e+01   4.373089e-01 
    00s01  00016  -2.954522e+01   1.148233e-01     00s02  00017  -2.955251e+01   1.210292e-02     00s02  00018  -2.955296e+01   2.425852e-02     00s02  00019  -2.955327e+01   7.574440e-03     00s02  00020  -2.955368e+01   2.533089e-03     00s02  00021  -2.955448e+01   6.354195e-03     00s02  00022  -2.955564e+01   1.185672e-02     00s02  00023  -2.955769e+01   1.393727e-02     00s03  00024  -2.956632e+01   3.506623e-02     00s03  00025  -2.935007e+01   1.746228e+01     00s03  00026  -2.958186e+01   3.086259e-01     00s03  00027  -2.958732e+01   9.504798e-01     00s03  00028   5.615913e+01   7.636575e+03     00s03  00029  -2.958784e+01   1.111596e+00     00s03  00030  -2.961561e+01   1.880803e+00     00s03  00031  -2.956507e+01   1.641820e+01     00s03  00032  -2.964486e+01   4.710575e+00     00s04  00033  -2.957822e+01   2.625052e+01     00s04  00034  -2.969904e+01   9.961456e+00     00s04  00035  -2.991944e+01   8.047936e+00     00s04  00036  -3.058431e+01   1.980328e+01     00s04  00037  -3.139250e+01   2.017344e+00     00s04  00038  -3.173207e+01   1.495554e+01     00s04  00039  -3.189122e+01   2.726173e+00 
    00s04  00040  -3.195602e+01   2.710905e-02     00s05  00041  -3.196327e+01   5.184833e-02     00s05  00042  -3.196676e+01   1.765387e-02     00s05  00043  -3.196888e+01   2.461324e-02     00s05  00044  -3.197952e+01   5.600305e-02     00s05  00045  -3.200679e+01   4.404078e-02     00s05  00046  -3.160193e+01   6.023653e+00     00s05  00047  -3.201321e+01   2.304641e-01     00s05  00048  -3.203109e+01   4.741367e-02     00s05  00049  -3.203543e+01   3.806021e-02     00s06  00050  -3.204132e+01   1.111450e-02     00s06  00051  -3.204630e+01   2.291095e-02     00s06  00052  -3.205847e+01   5.949045e-02     00s06  00053  -3.203189e+01   4.823612e+00     00s06  00054  -3.206623e+01   7.179850e-01     00s06  00055  -3.208890e+01   1.221244e-01     00s06  00056  -3.210653e+01   3.012680e-02     00s06  00057  -3.211411e+01   7.568490e-02     00s07  00058  -3.211590e+01   1.430489e-02 
    00s07  00059  -3.211608e+01   4.032245e-04     00s07  00060  -3.211610e+01   5.308005e-06     00s07  00061  -3.211610e+01   2.427947e-06     00s07  00062  -3.211610e+01   5.217304e-06     00s07  00063  -3.211610e+01   3.637349e-07     00s07  00064  -3.211610e+01   3.637349e-07 
Runtime:     00s07
Optimization status: Converged

Optimization restart 1/1, f = -32.11609767519858
SEARCH!
self.IOrig:  [720, 830]
self.POrig:  [[' ', ' ', '128', '32', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '50', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '80', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '32', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '32'], [' ', ' ', '8', '100', '8'], [' ', ' ', '32', '8', '128'], [' ', ' ', '4', '20', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '50', '128'], [' ', ' ', '50', '16', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '16', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '4'], [' ', ' ', '128', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '128', '128', '4']]
prob:  <search.SurrogateProblem object at 0x14f0a46081c0>
0 OK
bestX [array([[0.1663, 0.4179, 0.965 , 0.036 , 0.0603]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/881.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DML_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/881
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/881
........................................ [0.24426, 0.243474, 0.242455]
OUTPUT:%f [0.24426, 0.243474, 0.242455] 0.2429645
store_func_eval
problem.constants
None
MLA iteration:  13
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -1.172983e+01           nan     00s00  00001  -1.172983e+01   1.718489e+02     00s00  00002  -2.142135e+01   2.476699e+01     00s00  00003  -2.233159e+01   9.823724e+01     00s00  00004  -2.422350e+01   1.923217e+01     00s00  00005  -2.647384e+01   3.258053e+01     00s00  00006  -2.771412e+01   4.471945e+01     00s00  00007   1.213417e+01   3.792520e+03     00s00  00008  -2.942483e+01   4.934436e+01     00s01  00009  -3.010171e+01   2.045135e+01 
    00s01  00010  -3.033969e+01   2.159572e+00     00s01  00011  -3.041423e+01   1.944603e+00     00s01  00012  -3.068397e+01   1.704154e+00     00s01  00013  -3.115696e+01   1.222285e+00     00s01  00014  -3.001794e+01   4.815699e+01     00s01  00015  -3.147553e+01   2.808814e+00     00s01  00016  -3.029248e+01   4.824152e+01     00s02  00017  -3.162945e+01   4.813866e+00     00s02  00018  -3.198979e+01   4.439141e+00     00s02  00019  -3.211405e+01   6.468241e+00     00s02  00020  -3.221668e+01   6.410844e-01     00s02  00021  -3.231775e+01   1.405400e+00     00s02  00022  -3.244794e+01   1.666635e+00     00s02  00023  -3.251239e+01   1.340260e-01     00s02  00024  -3.251039e+01   6.176415e-01 
    00s02  00025  -3.251618e+01   5.723109e-02 
    00s03  00026  -3.251712e+01   1.887160e-03     00s03  00027  -3.251726e+01   1.931310e-03     00s03  00028  -3.251762e+01   3.401573e-03     00s03  00029  -3.251832e+01   5.940401e-03     00s03  00030  -3.251908e+01   5.358382e-03     00s03  00031  -3.251921e+01   6.322898e-03     00s03  00032  -3.251967e+01   9.160313e-04     00s03  00033  -3.251988e+01   6.711424e-04     00s03  00034  -3.252079e+01   1.914226e-03     00s04  00035  -3.252238e+01   2.311528e-02     00s04  00036  -3.252565e+01   3.072892e-02     00s04  00037  -3.252974e+01   3.123280e-01     00s04  00038  -3.253648e+01   9.505739e-02     00s04  00039  -3.254646e+01   1.676831e-02     00s04  00040  -3.254871e+01   6.461653e-03     00s04  00041  -3.254947e+01   3.848057e-03     00s04  00042  -3.254989e+01   3.166847e-03     00s05  00043  -3.254976e+01   9.840002e-03     00s05  00044  -3.255001e+01   1.026272e-03 
    00s05  00045  -3.255022e+01   8.813435e-05     00s05  00046  -3.255032e+01   8.197201e-05     00s05  00047  -3.255037e+01   7.604488e-04     00s05  00048  -3.255042e+01   5.537370e-05     00s05  00049  -3.255044e+01   4.674962e-06     00s05  00050  -3.255045e+01   3.888223e-05     00s05  00051  -3.255043e+01   2.051821e-03     00s06  00052  -3.255045e+01   1.915970e-05 
    00s06  00053  -3.255045e+01   1.120600e-06     00s06  00054  -3.255045e+01   4.146236e-06     00s06  00055  -3.255045e+01   9.652154e-06     00s06  00056  -3.255045e+01   9.785696e-05     00s06  00057  -3.255045e+01   1.152788e-05 
    00s06  00058  -3.255046e+01   6.066726e-07     00s06  00059  -3.255046e+01   6.502357e-07     00s06  00060  -3.255046e+01   1.848884e-06     00s07  00061  -3.255046e+01   3.501615e-07     00s07  00062  -3.255046e+01   3.501615e-07 
Runtime:     00s07
Optimization status: Converged

Optimization restart 1/1, f = -32.55045652741671
SEARCH!
self.IOrig:  [720, 830]
self.POrig:  [[' ', ' ', '128', '32', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '50', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '80', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '32', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '32'], [' ', ' ', '8', '100', '8'], [' ', ' ', '32', '8', '128'], [' ', ' ', '4', '20', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '50', '128'], [' ', ' ', '50', '16', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '16', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '4'], [' ', ' ', '128', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '128', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4']]
prob:  <search.SurrogateProblem object at 0x14f0a5281d30>
0 OK
bestX [array([[0.4606, 0.4559, 0.1353, 0.162 , 0.0355]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6226.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DML_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6226
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6226
........................................ [0.277169, 0.258359, 0.25833]
OUTPUT:%f [0.277169, 0.258359, 0.25833] 0.2583445
store_func_eval
problem.constants
None
MLA iteration:  14
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000  -1.302612e+01           nan     00s00  00001  -1.302612e+01   1.916132e+02     00s00  00002  -2.343742e+01   3.136566e+01     00s00  00003  -2.420515e+01   1.455108e+02     00s00  00004  -2.490906e+01   2.061807e+01 
    00s00  00005  -2.654476e+01   3.029991e+01     00s00  00006  -1.104319e+00   1.383318e+03     00s00  00007  -2.896263e+01   2.915482e+01     00s00  00008  -2.925352e+01   1.268548e+02     00s01  00009  -3.026745e+01   3.765389e+01     00s01  00010  -2.638747e+01   2.052491e+02     00s01  00011  -3.137513e+01   7.052152e+01     00s01  00012  -3.261184e+01   2.894305e+01     00s01  00013  -3.307598e+01   3.537674e+00 
    00s01  00014  -3.319412e+01   2.463672e+00     00s01  00015  -3.327773e+01   3.220242e+00     00s01  00016  -3.389393e+01   7.395757e+00     00s02  00017  -3.407618e+01   1.883689e+01     00s02  00018  -3.472931e+01   1.448021e+01     00s02  00019  -3.495598e+01   5.195723e+00     00s02  00020  -3.503302e+01   6.978103e-01     00s02  00021  -3.508090e+01   7.310818e-01     00s02  00022  -3.522370e+01   1.333732e+00     00s02  00023  -3.525992e+01   9.316004e-01     00s02  00024  -3.527939e+01   5.625455e-02     00s02  00025  -3.528272e+01   9.481169e-03 
    00s03  00026  -3.528356e+01   1.546553e-02     00s03  00027  -3.528598e+01   2.184308e-02     00s03  00028  -3.528642e+01   2.894182e-02     00s03  00029  -3.528712e+01   1.125326e-03     00s03  00030  -3.528716e+01   1.107410e-04     00s03  00031  -3.528716e+01   6.965880e-05 
    00s03  00032  -3.528716e+01   6.483135e-05     00s03  00033  -3.528719e+01   2.346473e-04     00s03  00034  -3.528724e+01   8.913980e-04     00s04  00035  -3.528737e+01   3.470036e-03     00s04  00036  -3.528773e+01   1.152741e-02     00s04  00037  -3.528859e+01   3.022084e-02     00s04  00038  -3.529029e+01   7.048309e-02     00s04  00039  -3.529251e+01   6.887932e-02     00s04  00040  -3.529582e+01   6.236379e-02     00s04  00041  -3.529762e+01   9.459199e-03     00s04  00042  -3.529782e+01   1.136710e-03     00s05  00043  -3.529795e+01   1.779702e-03     00s05  00044  -3.529815e+01   2.813046e-03     00s05  00045  -3.529846e+01   1.056701e-02     00s05  00046  -3.529863e+01   1.181766e-03     00s05  00047  -3.529867e+01   3.280944e-04 
    00s05  00048  -3.529869e+01   8.694698e-06     00s05  00049  -3.529869e+01   1.774216e-05     00s05  00050  -3.529870e+01   2.519009e-05     00s05  00051  -3.529870e+01   3.395137e-05     00s06  00052  -3.529868e+01   2.134609e-03     00s06  00053  -3.529870e+01   1.755646e-04     00s06  00054  -3.529871e+01   4.156552e-05     00s06  00055  -3.529872e+01   7.294174e-06     00s06  00056  -3.529872e+01   8.731270e-06     00s06  00057  -3.529872e+01   2.147028e-05     00s06  00058  -3.529872e+01   2.461060e-05     00s06  00059  -3.529872e+01   3.934191e-06     00s06  00060  -3.529872e+01   1.482606e-07     00s07  00061  -3.529872e+01   1.861628e-06 
    00s07  00062  -3.529872e+01   7.979929e-07     00s07  00063  -3.529872e+01   1.488103e-05     00s07  00064  -3.529872e+01   1.462017e-06     00s07  00065  -3.529872e+01   5.391066e-07     00s07  00066  -3.529872e+01   6.687620e-07     00s07  00067  -3.529872e+01   6.687620e-07 
Runtime:     00s07
Optimization status: Converged

Optimization restart 1/1, f = -35.29872255454336
SEARCH!
self.IOrig:  [720, 830]
self.POrig:  [[' ', ' ', '128', '32', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '50', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '80', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '32', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '32'], [' ', ' ', '8', '100', '8'], [' ', ' ', '32', '8', '128'], [' ', ' ', '4', '20', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '50', '128'], [' ', ' ', '50', '16', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '16', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '4'], [' ', ' ', '128', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '128', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '4']]
prob:  <search.SurrogateProblem object at 0x14f0a4ac6f10>
0 OK
bestX [array([[0.2376, 0.0812, 0.187 , 0.2917, 0.0902]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/300.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DML_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/300
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/300
........................................ [0.229057, 0.22533, 0.229177]
OUTPUT:%f [0.229057, 0.22533, 0.229177] 0.2272535
store_func_eval
problem.constants
None
stats:  {'time_total': 269.850915321, 'time_sample_init': 0.004886579, 'time_fun': 242.41002603900003, 'time_search': 26.084228455, 'time_model': 1.349218514, 'func_eval_time': [127.499192396], 'search_time': [1.715201517, 1.785261064, 1.709876679, 1.710419785, 1.876470181, 1.704574618, 1.719398214, 1.702479142, 1.867987632, 1.714867408, 1.704256049, 1.710051564, 1.727297727, 1.721970575, 1.7141163], 'modeling_time': [0.101107057, 0.098687584, 0.112727891, 0.056891946, 0.087864881, 0.124147641, 0.095545082, 0.128830004, 0.07366819, 0.06799267, 0.06071665, 0.061639127, 0.094444134, 0.089702469, 0.095253188], 'modeling_iteration': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}
tid: 0
    t:720.000000 
    Ps  [[' ', ' ', '128', '32', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '50', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '80', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '32', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '32'], [' ', ' ', '8', '100', '8'], [' ', ' ', '32', '8', '128'], [' ', ' ', '4', '20', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '50', '128'], [' ', ' ', '50', '16', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '80', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '128', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '16', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '4', '4'], [' ', ' ', '128', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '8', '4'], [' ', ' ', '64', '2048', '4'], [' ', ' ', '128', '128', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '8', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '16', '20', '4']]
    Os  [[0.7800119999999999], [0.39600599999999997], [0.697585], [0.6597265], [0.25889850000000003], [0.4239815], [0.5229495], [0.4677175], [0.2517105], [0.7348825], [0.5975550000000001], [0.6637535], [0.47530300000000003], [0.7538345], [0.6400429999999999], [0.218445], [0.2337175], [0.20940599999999998], [0.21996549999999998], [0.2151705], [0.5794699999999999], [0.22984500000000002], [0.24434250000000002], [0.167626], [0.232641], [0.166433], [0.1990965], [0.2429645], [0.2583445], [0.2272535]]
    Popt  [' ', ' ', '64', '2048', '4'] Oopt  0.166433 nth  25
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
mkdir: cannot create directory ‘./TLA_experiments/SLA-GPTune-ml-30/’: No such file or directory
mv: cannot move 'gptune.db/covariance.json' to './TLA_experiments/SLA-GPTune-ml-30/covariance.json': No such file or directory
time...now 1651109337.707008
machine: swing processor: intel num_nodes: 1 num_cores: 128


------Validating the options
  
  total core counts provided to GPTune: 128
   ---> distributed_memory_parallelism: False
   ---> shared_memory_parallelism: False
   ---> objective_evaluation_parallelism: False
  
  total core counts for modeling: 2
   ---> model_processes: 1
   ---> model_threads: 1
   ---> model_restart_processes: 1
   ---> model_restart_threads: 1
  
  total core counts for search: 1
   ---> search_processes: 1
   ---> search_threads: 1
   ---> search_multitask_processes: 1
   ---> search_multitask_threads: 1
  
  total core counts for objective function evaluation: 2
   ---> core counts in a single application run: 1
   ---> objective_multisample_processes: 1
   ---> objective_multisample_threads: 1
problem size is xl [[2600, 3000]]
[[2600, 3000]]
GPTune History Database Init
[HistoryDB] use filelock for synchronization
[HistoryDB] Create a JSON file at ./gptune.db/covariance.json



------Starting MLA with HistoryDB with 1 tasks and 30 samples each 
[HistoryDB] Found a history database file
no history data has been loaded
NS1:  15
tmpP:  [array([[0.9998, 0.5133, 0.9216, 0.4093, 0.9385],
       [0.3645, 0.5467, 0.2506, 0.4929, 0.1625],
       [0.6969, 0.231 , 0.8041, 0.9106, 0.7783],
       [0.2326, 0.3339, 0.6804, 0.7258, 0.5623],
       [0.1277, 0.7717, 0.3043, 0.9511, 0.013 ],
       [0.0418, 0.0744, 0.6217, 0.3975, 0.2902],
       [0.1545, 0.4069, 0.9908, 0.1545, 0.3993],
       [0.7372, 0.064 , 0.1434, 0.0242, 0.4487],
       [0.8414, 0.6274, 0.1127, 0.7891, 0.1016],
       [0.8937, 0.6779, 0.3934, 0.1082, 0.8218],
       [0.6198, 0.991 , 0.0079, 0.3161, 0.4756],
       [0.5793, 0.2893, 0.779 , 0.8506, 0.7208],
       [0.2703, 0.803 , 0.4432, 0.6647, 0.2292],
       [0.4297, 0.1461, 0.4979, 0.5413, 0.8966],
       [0.5127, 0.8748, 0.543 , 0.2188, 0.6159]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1175.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DEXTRALARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1175
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1175
........................................ [37.465831, 37.423292, 37.426817]
OUTPUT:%f [37.465831, 37.423292, 37.426817] 37.4250545
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/843.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DEXTRALARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/843
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/843
........................................ [4.514071, 4.471193, 4.443829]
OUTPUT:%f [4.514071, 4.471193, 4.443829] 4.457511
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5059.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DEXTRALARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5059
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5059
........................................ [33.42023, 34.180152, 34.225612]
OUTPUT:%f [33.42023, 34.180152, 34.225612] 34.202882
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5685.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DEXTRALARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5685
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5685
........................................ [32.070892, 32.333229, 32.412726]
OUTPUT:%f [32.070892, 32.333229, 32.412726] 32.372977500000005
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4366.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DEXTRALARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4366
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4366
........................................ [3.298582, 3.671345, 3.519566]
OUTPUT:%f [3.298582, 3.671345, 3.519566] 3.5954555
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1683.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DEXTRALARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1683
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1683
........................................ [6.996338, 7.008371, 7.178035]
OUTPUT:%f [6.996338, 7.008371, 7.178035] 7.093203000000001
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/15.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DEXTRALARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/15
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/15
........................................ [27.972522, 28.144946, 27.556446]
OUTPUT:%f [27.972522, 28.144946, 27.556446] 27.850696
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8561.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DEXTRALARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8561
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8561
........................................ [25.85236, 25.075962, 25.081484]
OUTPUT:%f [25.85236, 25.075962, 25.081484] 25.078723
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7900.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DEXTRALARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7900
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7900
........................................ [2.022999, 2.172931, 2.017471]
OUTPUT:%f [2.022999, 2.172931, 2.017471] 2.0952010000000003
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8311.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DEXTRALARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8311
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8311
........................................ [35.473912, 35.444842, 36.381767]
OUTPUT:%f [35.473912, 35.444842, 36.381767] 35.9133045
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8858.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DEXTRALARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8858
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8858
........................................ [31.920582, 31.991609, 31.895052]
OUTPUT:%f [31.920582, 31.991609, 31.895052] 31.943330500000002
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2002.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DEXTRALARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2002
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2002
........................................ [31.898741, 31.815675, 31.607335]
OUTPUT:%f [31.898741, 31.815675, 31.607335] 31.711505
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6362.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DEXTRALARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6362
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6362
........................................ [19.256434, 26.236197, 19.371813]
OUTPUT:%f [19.256434, 26.236197, 19.371813] 22.804005
store_func_eval
problem.constants
None
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7638.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DEXTRALARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7638
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7638
........................................ [35.366198, 36.2827, 36.371894]
OUTPUT:%f [35.366198, 36.2827, 36.371894] 36.327297
store_func_eval
problem.constants
None
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/881.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DEXTRALARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/881
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/881
........................................ [30.698514, 30.588084, 30.413515]
OUTPUT:%f [30.698514, 30.588084, 30.413515] 30.5007995
store_func_eval
problem.constants
None
NSmin:  15
NS:  30
MLA iteration:  0
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   1.386412e+04           nan     00s00  00001   1.386412e+04   2.984063e+08     00s00  00002   4.342041e+03   2.118670e+07     00s00  00003   2.979528e+03   8.241637e+06 
    00s00  00004   1.704010e+03   1.483555e+06     00s00  00005   1.216069e+03   3.747457e+05 
    00s00  00006   8.816769e+02   1.209871e+05     00s00  00007   6.300463e+02   6.806379e+04     00s00  00008   4.432462e+02   1.035269e+04     00s01  00009   3.386056e+02   3.360945e+03 
    00s01  00010   2.613004e+02   2.697380e+03     00s01  00011   1.996131e+02   5.839408e+02     00s01  00012   1.625969e+02   2.244931e+02     00s01  00013   1.358328e+02   3.221984e+03 
    00s01  00014   1.155229e+02   9.173811e+02     00s01  00015   9.241566e+01   6.509641e+00     00s01  00016   8.113185e+01   4.031223e+01     00s02  00017   7.114927e+01   3.597816e+01     00s02  00018   9.427765e+02   6.919391e+06     00s02  00019   7.566219e+01   3.451916e+03     00s02  00020   7.075863e+01   2.446463e+01 
    00s02  00021   6.380830e+01   4.770292e+00     00s02  00022   5.862137e+01   4.302437e-01     00s02  00023   5.677289e+01   5.968732e+01     00s02  00024   5.294031e+01   6.174579e+00     00s02  00025   5.145325e+01   1.763152e+00     00s03  00026   5.052002e+01   2.632826e+00     00s03  00027   4.978451e+01   5.023244e-01     00s03  00028   4.940078e+01   1.252765e-01     00s03  00029   4.922158e+01   1.355604e-01     00s03  00030   4.916005e+01   1.252722e-01     00s03  00031   6.897409e+01   3.989295e+01     00s03  00032   4.916792e+01   1.903990e+00     00s03  00033   4.915935e+01   2.004365e-03     00s03  00034   4.914516e+01   1.720464e-04     00s04  00035   4.914367e+01   1.808905e-04 
    00s04  00036   4.914369e+01   2.268131e-03     00s04  00037   4.914364e+01   3.216871e-04     00s04  00038   4.914361e+01   7.114137e-05     00s04  00039   4.914360e+01   5.050838e-05 
    00s04  00040   4.914346e+01   2.109296e-04     00s04  00041   4.914322e+01   9.510074e-04     00s04  00042   4.914253e+01   3.448580e-03     00s04  00043   4.914105e+01   8.317769e-03     00s05  00044   4.913789e+01   1.412289e-02     00s05  00045   4.928664e+01   4.359866e+01     00s05  00046   4.913776e+01   2.048401e-02     00s05  00047   4.913181e+01   8.065544e-03     00s05  00048   4.912281e+01   6.358038e-03     00s05  00049   4.909099e+01   1.242835e+00     00s05  00050   7.476046e+01   1.097684e-03     00s05  00051   4.909073e+01   1.289234e+00     00s05  00052   4.908774e+01   3.247780e+00     00s06  00053   4.908762e+01   2.276253e+00     00s06  00054   7.363509e+01   5.582536e-04     00s06  00055   4.908759e+01   2.281675e+00     00s06  00056   4.908547e+01   3.510059e+00     00s06  00057   5.059593e+01   1.386370e+01     00s06  00058   4.905666e+01   3.037031e+00     00s06  00059   4.925477e+01   1.197902e+00     00s06  00060   4.901380e+01   1.388761e+00     00s06  00061   4.928863e+01   5.357312e+01     00s07  00062   4.897579e+01   7.041297e-01     00s07  00063   4.895414e+01   2.943063e-01     00s07  00064   4.894350e+01   9.824996e-02     00s07  00065   4.894096e+01   1.041680e-04 
    00s07  00066   4.894095e+01   7.420506e-07     00s07  00067   4.894095e+01   1.133395e-06     00s07  00068   4.894095e+01   1.133395e-06 
Runtime:     00s07
Optimization status: Converged

Optimization restart 1/1, f = 48.940945819865576
SEARCH!
self.IOrig:  [2600, 3000]
self.POrig:  [[' ', ' ', '128', '32', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '50', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '80', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '32', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '32'], [' ', ' ', '8', '100', '8'], [' ', ' ', '32', '8', '128'], [' ', ' ', '4', '20', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '50', '128'], [' ', ' ', '50', '16', '64']]
prob:  <search.SurrogateProblem object at 0x1516db2391c0>
0 OK
bestX [array([[0.7371, 0.0401, 0.978 , 0.0528, 0.0107]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6094.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DEXTRALARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6094
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6094
........................................ [5.678447, 5.663621, 5.680606]
OUTPUT:%f [5.678447, 5.663621, 5.680606] 5.6721135
store_func_eval
problem.constants
None
MLA iteration:  1
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   1.400063e+04           nan     00s00  00001   1.400063e+04   3.104722e+08     00s00  00002   4.369464e+03   2.128841e+07 
    00s00  00003   3.028979e+03   8.438148e+06     00s00  00004   1.739877e+03   1.528306e+06     00s00  00005   1.246459e+03   3.876715e+05     00s00  00006   9.136142e+02   1.200842e+05     00s00  00007   6.425386e+02   5.121093e+04 
    00s00  00008   4.563103e+02   1.022178e+04     00s01  00009   3.479447e+02   5.536681e+03     00s01  00010   2.645157e+02   1.500611e+03     00s01  00011   2.110049e+02   2.954993e+02     00s01  00012   1.673547e+02   2.756968e+02     00s01  00013   1.442600e+02   7.577408e+02 
    00s01  00014   1.174079e+02   6.383990e+02     00s01  00015   1.036529e+02   6.072129e+02     00s01  00016   8.671817e+01   2.544172e+02     00s01  00017   7.988049e+01   1.790187e+02     00s02  00018   7.104332e+01   1.474818e+01     00s02  00019   6.566825e+01   6.570949e+00     00s02  00020   6.192303e+01   7.610074e+01 
    00s02  00021   5.927163e+01   2.461834e+01     00s02  00022   5.716635e+01   4.682909e+00     00s02  00023   5.621431e+01   1.376096e+01     00s02  00024   5.534159e+01   2.226947e+00     00s02  00025   5.490962e+01   2.893891e-01     00s03  00026   5.470270e+01   3.890928e-01     00s03  00027   6.436241e+01   1.358662e+02     00s03  00028   5.469947e+01   5.015633e-01 
    00s03  00029   5.462603e+01   1.342219e-03     00s03  00030   5.460828e+01   5.709719e-03     00s03  00031   5.460643e+01   2.452944e-02     00s03  00032   5.460531e+01   4.247801e-03     00s03  00033   5.460492e+01   2.358795e-03     00s03  00034   5.460407e+01   3.763329e-03     00s04  00035   5.460083e+01   1.329611e-02     00s04  00036   5.459424e+01   3.950309e-02     00s04  00037   5.458135e+01   1.004891e-01     00s04  00038   5.456114e+01   1.472660e-01     00s04  00039   6.152640e+01   4.125938e+03     00s04  00040   5.456026e+01   1.213193e-02     00s04  00041   5.454020e+01   1.850935e-02     00s04  00042   5.453251e+01   1.033854e-02     00s04  00043   5.453002e+01   2.502297e-03     00s05  00044   5.452636e+01   5.701989e-03     00s05  00045   5.454847e+01   6.400493e-01     00s05  00046   5.452553e+01   2.030595e-02     00s05  00047   5.452165e+01   2.064227e-03     00s05  00048   5.451907e+01   2.048456e-03     00s05  00049   5.451762e+01   4.527846e-03     00s05  00050   5.451587e+01   3.503888e-03 
    00s05  00051   5.451441e+01   2.067598e-04     00s05  00052   5.453015e+01   3.904969e+00     00s06  00053   5.451413e+01   5.000485e-02     00s06  00054   5.451256e+01   9.363788e-03     00s06  00055   5.451082e+01   2.251735e-04     00s06  00056   5.450943e+01   9.728271e-04     00s06  00057   5.450830e+01   1.574551e-04     00s06  00058   5.450771e+01   2.763984e-03     00s06  00059   5.450680e+01   1.529842e-04     00s06  00060   5.450647e+01   1.590346e-04     00s06  00061   5.450616e+01   2.495655e-03 
    00s07  00062   5.450584e+01   7.053666e-05     00s07  00063   5.450574e+01   2.183691e-05     00s07  00064   5.450565e+01   2.516297e-04     00s07  00065   5.450782e+01   4.079882e-01     00s07  00066   5.450564e+01   3.680977e-04     00s07  00067   5.450556e+01   4.666663e-05     00s07  00068   5.450551e+01   4.837930e-07     00s07  00069   5.450548e+01   1.944577e-06     00s07  00070   5.450546e+01   7.150288e-06     00s08  00071   5.450553e+01   7.235880e-04     00s08  00072   5.450545e+01   1.697736e-05 
    00s08  00073   5.450544e+01   2.024813e-06     00s08  00074   5.450543e+01   1.271254e-07     00s08  00075   5.450542e+01   1.163507e-05     00s08  00076   5.450542e+01   1.549318e-05     00s08  00077   5.450541e+01   1.798833e-06     00s08  00078   5.450541e+01   3.765392e-04     00s08  00079   5.450541e+01   1.268664e-06     00s09  00080   5.450541e+01   3.831912e-06     00s09  00081   5.450541e+01   4.282160e-06     00s09  00082   5.450542e+01   1.145275e-04     00s09  00083   5.450541e+01   1.480055e-06     00s09  00084   5.450541e+01   1.480055e-06 
Runtime:     00s09
Optimization status: Converged

Optimization restart 1/1, f = 54.50541040414907
SEARCH!
self.IOrig:  [2600, 3000]
self.POrig:  [[' ', ' ', '128', '32', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '50', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '80', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '32', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '32'], [' ', ' ', '8', '100', '8'], [' ', ' ', '32', '8', '128'], [' ', ' ', '4', '20', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '50', '128'], [' ', ' ', '50', '16', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4']]
prob:  <search.SurrogateProblem object at 0x1516db1ce190>
0 OK
bestX [array([[0.9815, 0.2723, 0.1262, 0.0528, 0.2335]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2239.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DEXTRALARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2239
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2239
........................................ [21.350938, 20.800092, 20.75273]
OUTPUT:%f [21.350938, 20.800092, 20.75273] 20.776411
store_func_eval
problem.constants
None
MLA iteration:  2
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   1.426050e+04           nan     00s00  00001   1.426050e+04   3.299480e+08     00s00  00002   4.346205e+03   2.182996e+07     00s00  00003   3.033217e+03   8.519835e+06     00s00  00004   1.809977e+03   1.639432e+06     00s00  00005   1.310067e+03   4.317820e+05     00s00  00006   9.634373e+02   1.239376e+05     00s00  00007   6.890269e+02   3.983709e+04     00s00  00008   5.028815e+02   1.165899e+04     00s01  00009   3.929595e+02   7.223924e+03 
    00s01  00010   3.032620e+02   1.285692e+03     00s01  00011   2.422908e+02   4.351893e+02     00s01  00012   2.070912e+02   4.904167e+03     00s01  00013   1.720413e+02   2.041105e+03 
    00s01  00014   1.354073e+02   8.271750e+02     00s01  00015   1.236306e+02   6.842943e+02     00s01  00016   1.005594e+02   9.557854e+01 
    00s01  00017   9.014121e+01   2.220729e+01     00s02  00018   7.942107e+01   3.925115e+01     00s02  00019   7.500151e+01   1.138596e+01     00s02  00020   7.006015e+01   2.150804e+00     00s02  00021   6.735685e+01   3.487512e+01     00s02  00022   6.536553e+01   8.394858e+00     00s02  00023   6.420726e+01   6.599177e+00     00s02  00024   7.590340e+01   8.357812e+01 
    00s02  00025   6.404541e+01   8.160623e-01     00s02  00026   6.320011e+01   8.124469e-02     00s03  00027   6.422337e+01   3.579690e+01     00s03  00028   6.291732e+01   2.618380e+00     00s03  00029   6.645589e+01   5.176841e+01     00s03  00030   6.279676e+01   3.598392e+00     00s03  00031   6.204333e+01   5.524038e+00     00s03  00032   6.190752e+01   1.571884e+00     00s03  00033   6.168645e+01   1.537469e-01     00s03  00034   6.153246e+01   4.634869e-01     00s03  00035   6.207847e+01   1.987451e+01     00s04  00036   6.147503e+01   3.755052e-01     00s04  00037   6.144890e+01   3.375915e-01     00s04  00038   6.143623e+01   1.338211e-01 
    00s04  00039   6.142866e+01   9.047735e-02     00s04  00040   6.141985e+01   7.351845e-03     00s04  00041   6.141879e+01   9.132934e-04     00s04  00042   6.141870e+01   7.481376e-06     00s04  00043   6.141870e+01   8.429566e-08     00s05  00044   6.141870e+01   1.816095e-08     00s05  00045   6.141870e+01   1.816095e-08 
Runtime:     00s05
Optimization status: Converged

Optimization restart 1/1, f = 61.4186998878177
SEARCH!
self.IOrig:  [2600, 3000]
self.POrig:  [[' ', ' ', '128', '32', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '50', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '80', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '32', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '32'], [' ', ' ', '8', '100', '8'], [' ', ' ', '32', '8', '128'], [' ', ' ', '4', '20', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '50', '128'], [' ', ' ', '50', '16', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '16']]
prob:  <search.SurrogateProblem object at 0x1516daabac10>
0 OK
bestX [array([[0.1262, 0.1294, 0.7647, 0.927 , 0.0527]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6178.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DEXTRALARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6178
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/6178
........................................ [6.029025, 5.870746, 5.826827]
OUTPUT:%f [6.029025, 5.870746, 5.826827] 5.848786499999999
store_func_eval
problem.constants
None
MLA iteration:  3
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   1.448809e+04           nan     00s00  00001   1.448809e+04   3.344367e+08     00s00  00002   4.463494e+03   2.259290e+07     00s00  00003   3.116416e+03   8.825362e+06     00s00  00004   1.866507e+03   1.741986e+06 
    00s00  00005   1.349341e+03   4.501767e+05     00s00  00006   1.004544e+03   1.261636e+05     00s00  00007   7.292920e+02   4.028099e+04 
    00s00  00008   5.241485e+02   1.500082e+04     00s01  00009   4.470728e+02   6.848660e+04     00s01  00010   3.517447e+02   1.292078e+04     00s01  00011   2.835924e+02   1.050286e+03     00s01  00012   2.445708e+02   1.580612e+03 
    00s01  00013   1.926676e+02   6.098336e+02     00s01  00014   1.567702e+02   1.120162e+02     00s01  00015   1.306301e+02   8.651012e+01     00s01  00016   1.130281e+02   1.517412e+02     00s02  00017   9.984014e+01   7.312465e+01     00s02  00018   8.866116e+01   3.804800e+01     00s02  00019   8.169833e+01   5.283181e+01     00s02  00020   7.722271e+01   1.991946e+02     00s02  00021   7.361532e+01   2.670218e+00 
    00s02  00022   7.121400e+01   1.421589e+01     00s02  00023   6.900307e+01   6.948769e+01     00s02  00024   6.771370e+01   4.164466e+01     00s02  00025   6.600249e+01   4.221548e+00     00s03  00026   6.572767e+01   8.793390e+00     00s03  00027   6.551423e+01   9.232061e+00     00s03  00028   7.401947e+01   5.773999e+02     00s03  00029   6.543882e+01   6.504119e+00     00s03  00030   6.518176e+01   1.405667e-01     00s03  00031   6.513029e+01   5.016185e-02     00s03  00032   6.511521e+01   4.269332e-02 
    00s03  00033   6.510477e+01   2.006736e-01     00s03  00034   6.509178e+01   2.623891e-01     00s04  00035   6.504597e+01   2.200409e-01     00s04  00036   6.502451e+01   2.703132e-01     00s04  00037   6.539422e+01   5.488908e+01     00s04  00038   6.502227e+01   6.955947e-03 
    00s04  00039   6.502068e+01   9.524836e-05     00s04  00040   6.502037e+01   1.091011e-04     00s04  00041   6.502037e+01   1.171146e-03     00s04  00042   6.502036e+01   2.023440e-04     00s04  00043   6.502035e+01   2.952939e-05     00s05  00044   6.502035e+01   2.450427e-05     00s05  00045   6.502032e+01   1.544078e-05     00s05  00046   6.502025e+01   1.549069e-04     00s05  00047   6.501975e+01   2.434809e-03     00s05  00048   6.501834e+01   1.251950e-02     00s05  00049   6.501551e+01   3.194262e-02     00s05  00050   6.500999e+01   4.906305e-02     00s05  00051   6.500163e+01   3.291200e-02     00s06  00052   6.500272e+01   8.559206e-01     00s06  00053   6.499932e+01   1.430951e-01     00s06  00054   6.499289e+01   6.180551e-03     00s06  00055   6.499066e+01   3.935261e-03     00s06  00056   6.498914e+01   8.445114e-05     00s06  00057   6.499174e+01   3.724055e-01     00s06  00058   6.498816e+01   3.981254e-02     00s06  00059   6.498666e+01   9.997375e-03     00s06  00060   6.498506e+01   1.038514e-04     00s07  00061   6.498432e+01   9.784429e-04     00s07  00062   6.498351e+01   1.029823e-02     00s07  00063   6.498293e+01   8.172655e-04     00s07  00064   6.498256e+01   2.795922e-04     00s07  00065   6.498245e+01   4.034490e-03     00s07  00066   6.498234e+01   6.074926e-05     00s07  00067   6.498228e+01   1.371145e-04     00s07  00068   6.498190e+01   2.315243e-03     00s07  00069   6.498136e+01   4.471249e-03     00s08  00070   6.498074e+01   9.850856e-03     00s08  00071   6.498028e+01   7.358038e-04     00s08  00072   6.498022e+01   1.268047e-04     00s08  00073   6.498017e+01   4.447282e-04     00s08  00074   6.498011e+01   7.081867e-04     00s08  00075   6.498001e+01   6.551222e-04     00s08  00076   6.498031e+01   2.531747e-02     00s08  00077   6.498000e+01   1.138069e-05 
    00s08  00078   6.497993e+01   9.260297e-06     00s09  00079   6.497995e+01   3.272579e-03     00s09  00080   6.497992e+01   4.752411e-04     00s09  00081   6.497989e+01   4.998133e-05     00s09  00082   6.497987e+01   3.377721e-05     00s09  00083   6.497986e+01   4.157895e-05     00s09  00084   6.497986e+01   4.678269e-04     00s09  00085   6.497984e+01   4.698708e-05     00s09  00086   6.497984e+01   5.089607e-06     00s10  00087   6.497983e+01   1.244309e-05     00s10  00088   6.497983e+01   1.225471e-05     00s10  00089   6.497984e+01   5.665145e-04     00s10  00090   6.497983e+01   4.252561e-05     00s10  00091   6.497983e+01   3.704370e-06     00s10  00092   6.497983e+01   6.657857e-07     00s10  00093   6.497983e+01   2.057020e-06     00s10  00094   6.497983e+01   1.228505e-04     00s10  00095   6.497983e+01   5.907926e-06 
    00s11  00096   6.497983e+01   8.648652e-07     00s11  00097   6.497983e+01   1.892489e-08     00s11  00098   6.497983e+01   1.344202e-07     00s11  00099   6.497984e+01   5.587701e-04     00s11  00100   6.497983e+01   7.754869e-07     00s11  00101   6.497983e+01   7.754869e-07 
Runtime:     00s11
Optimization status: Converged

Optimization restart 1/1, f = 64.97982586392601
SEARCH!
self.IOrig:  [2600, 3000]
self.POrig:  [[' ', ' ', '128', '32', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '50', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '80', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '32', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '32'], [' ', ' ', '8', '100', '8'], [' ', ' ', '32', '8', '128'], [' ', ' ', '4', '20', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '50', '128'], [' ', ' ', '50', '16', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '4']]
prob:  <search.SurrogateProblem object at 0x1516db19ebe0>
0 OK
bestX [array([[0.1577, 0.2484, 0.9255, 0.2848, 0.214 ]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3250.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DEXTRALARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3250
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3250
........................................ [19.608766, 18.983027, 19.294362]
OUTPUT:%f [19.608766, 18.983027, 19.294362] 19.1386945
store_func_eval
problem.constants
None
MLA iteration:  4
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   1.542108e+04           nan     00s00  00001   1.542108e+04   3.979156e+08     00s00  00002   4.609878e+03   2.511425e+07     00s00  00003   3.250469e+03   1.000175e+07     00s00  00004   1.948284e+03   1.993501e+06     00s00  00005   1.403916e+03   5.120315e+05     00s00  00006   1.049952e+03   1.396537e+05 
    00s00  00007   7.783621e+02   4.272719e+04     00s00  00008   5.775570e+02   1.372601e+04     00s01  00009   4.450781e+02   1.117039e+04 
    00s01  00010   3.406985e+02   1.416309e+03     00s01  00011   2.692012e+02   7.109348e+02     00s01  00012   2.152922e+02   4.501406e+02     00s01  00013   1.941847e+02   1.674874e+03     00s01  00014   1.665266e+02   2.941189e+02 
    00s01  00015   1.408709e+02   1.933141e+02     00s01  00016   1.171916e+02   4.189309e+01     00s02  00017   1.143489e+02   1.774218e+03     00s02  00018   9.763639e+01   4.566775e+02     00s02  00019   9.150716e+01   1.626400e+02     00s02  00020   8.743010e+01   2.890999e+01 
    00s02  00021   8.058013e+01   9.897334e-01     00s02  00022   7.651950e+01   7.140900e+00     00s02  00023   1.044119e+02   7.767183e+02     00s02  00024   7.564802e+01   1.253104e+00     00s02  00025   7.240096e+01   2.554189e+00     00s03  00026   7.036892e+01   1.070877e+01     00s03  00027   6.912217e+01   2.990216e+00     00s03  00028   6.840466e+01   2.292001e-02     00s03  00029   6.808529e+01   5.600917e-01     00s03  00030   6.795092e+01   1.134016e-01     00s03  00031   6.791590e+01   3.438330e-01     00s03  00032   6.792371e+01   2.512614e+00 
    00s03  00033   6.790809e+01   7.490748e-02     00s03  00034   6.790665e+01   1.332405e-03     00s04  00035   6.790656e+01   2.100094e-04     00s04  00036   6.790650e+01   4.347372e-04 
    00s04  00037   6.790620e+01   3.494432e-03     00s04  00038   6.790560e+01   1.173892e-02     00s04  00039   6.790391e+01   3.706175e-02     00s04  00040   6.790001e+01   9.354967e-02     00s04  00041   6.789127e+01   1.915294e-01     00s04  00042   6.787470e+01   2.830356e-01     00s04  00043   6.788785e+01   1.359189e+00     00s05  00044   6.786792e+01   3.485785e-01     00s05  00045   6.784568e+01   5.763142e-02     00s05  00046   6.786458e+01   3.564036e+00     00s05  00047   6.784161e+01   5.508968e-01     00s05  00048   6.783490e+01   2.108726e-03     00s05  00049   6.783480e+01   3.583148e-04     00s05  00050   6.783474e+01   2.310851e-04 
    00s05  00051   6.783471e+01   1.303825e-04     00s06  00052   6.783466e+01   1.834801e-04     00s06  00053   6.783452e+01   1.138609e-03     00s06  00054   6.783421e+01   4.501128e-03     00s06  00055   6.783334e+01   1.636561e-02     00s06  00056   6.783102e+01   5.389219e-02     00s06  00057   6.782449e+01   1.826891e-01     00s06  00058   6.780763e+01   6.620488e-01     00s06  00059   6.779233e+01   1.053938e+00     00s06  00060   6.814792e+01   8.365116e+01     00s07  00061   6.778967e+01   1.441158e+00     00s07  00062   6.775696e+01   6.580584e-01     00s07  00063   6.771130e+01   2.388610e-03     00s07  00064   6.769949e+01   1.212717e-02     00s07  00065   6.769969e+01   2.109886e-01     00s07  00066   6.769739e+01   2.995619e-02     00s07  00067   6.769560e+01   1.185087e-03     00s07  00068   6.769538e+01   1.213526e-04     00s07  00069   6.769529e+01   2.509857e-04     00s08  00070   6.769420e+01   3.033801e-03     00s08  00071   6.769240e+01   8.211968e-03     00s08  00072   6.768811e+01   1.528779e-02     00s08  00073   6.773017e+01   7.424871e+00     00s08  00074   6.768764e+01   6.139712e-02     00s08  00075   6.768097e+01   1.851314e-02     00s08  00076   6.767548e+01   1.140014e-03     00s08  00077   6.767422e+01   4.070087e-04     00s08  00078   6.767392e+01   1.206794e-02     00s09  00079   6.767336e+01   5.115807e-03     00s09  00080   6.767211e+01   1.760026e-04     00s09  00081   6.767082e+01   1.015632e-04     00s09  00082   6.766952e+01   7.279222e-04     00s09  00083   6.766404e+01   6.857705e-03 
    00s09  00084   8.851986e+01   2.174751e-05     00s09  00085   6.766403e+01   6.883004e-03     00s09  00086   6.766403e+01   6.908401e-03     00s09  00087   6.775695e+01   5.394662e+00     00s10  00088   6.765649e+01   8.876734e-02     00s10  00089   6.764333e+01   1.182141e+00     00s10  00090   8.844984e+01   1.444942e-05     00s10  00091   6.764333e+01   1.187560e+00     00s10  00092   6.764327e+01   1.276568e+00     00s10  00093   6.763495e+01   6.002934e-01     00s10  00094   6.762517e+01   2.547508e-03     00s10  00095   6.762469e+01   1.348189e-02     00s11  00096   6.762463e+01   8.123974e-03     00s11  00097   6.762439e+01   2.768306e-05 
    00s11  00098   6.762439e+01   6.457127e-07     00s11  00099   6.762439e+01   2.931562e-09     00s11  00100   6.762439e+01   2.931562e-09 
Runtime:     00s11
Optimization status: Converged

Optimization restart 1/1, f = 67.62438841026982
SEARCH!
self.IOrig:  [2600, 3000]
self.POrig:  [[' ', ' ', '128', '32', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '50', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '80', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '32', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '32'], [' ', ' ', '8', '100', '8'], [' ', ' ', '32', '8', '128'], [' ', ' ', '4', '20', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '50', '128'], [' ', ' ', '50', '16', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '20', '16']]
prob:  <search.SurrogateProblem object at 0x1516daa81730>
0 OK
bestX [array([[0.7778, 0.4913, 0.0091, 0.9333, 0.2375]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9407.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DEXTRALARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9407
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9407
........................................ [15.529006, 16.086802, 15.913349]
OUTPUT:%f [15.529006, 16.086802, 15.913349] 16.0000755
store_func_eval
problem.constants
None
MLA iteration:  5
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   1.737888e+04           nan     00s00  00001   1.737888e+04   4.692704e+08     00s00  00002   5.343710e+03   3.399322e+07     00s00  00003   3.614997e+03   1.287221e+07 
    00s00  00004   2.092114e+03   2.534503e+06     00s00  00005   1.477975e+03   6.419521e+05 
    00s00  00006   1.093879e+03   1.641961e+05     00s00  00007   8.231288e+02   6.029868e+04     00s00  00008   5.952505e+02   1.629742e+04     00s01  00009   4.566749e+02   6.846262e+03     00s01  00010   3.484717e+02   2.073845e+03     00s01  00011   2.755057e+02   4.904183e+02     00s01  00012   2.216679e+02   8.412557e+02 
    00s01  00013   1.864690e+02   2.371771e+03     00s01  00014   1.534810e+02   4.470219e+02     00s01  00015   1.306932e+02   8.244273e+01     00s01  00016   1.178210e+02   8.432444e+01     00s02  00017   1.042224e+02   8.420194e+01     00s02  00018   9.453519e+01   1.966471e+02 
    00s02  00019   8.866490e+01   1.428071e+02     00s02  00020   8.445093e+01   3.833243e+01 
    00s02  00021   7.915940e+01   1.175293e+01     00s02  00022   7.680042e+01   1.881946e+00     00s02  00023   7.497683e+01   1.789674e+00     00s02  00024   7.380785e+01   5.034660e+00     00s02  00025   7.319449e+01   1.339138e+00 
    00s03  00026   7.271877e+01   1.642565e+00     00s03  00027   7.249982e+01   4.087576e-01     00s03  00028   7.238002e+01   1.111385e+00     00s03  00029   7.232116e+01   4.296183e-01 
    00s03  00030   7.229493e+01   5.597020e-03     00s03  00031   7.229181e+01   2.201555e-03     00s03  00032   7.229141e+01   2.535993e-03 
    00s03  00033   7.229133e+01   1.840642e-04     00s03  00034   7.229133e+01   1.251807e-05     00s04  00035   7.229133e+01   2.631502e-06 
    00s04  00036   7.229133e+01   1.590995e-06     00s04  00037   7.229133e+01   3.101381e-08     00s04  00038   7.229133e+01   3.101381e-08 
Runtime:     00s04
Optimization status: Converged

Optimization restart 1/1, f = 72.29132502450148
SEARCH!
self.IOrig:  [2600, 3000]
self.POrig:  [[' ', ' ', '128', '32', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '50', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '80', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '32', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '32'], [' ', ' ', '8', '100', '8'], [' ', ' ', '32', '8', '128'], [' ', ' ', '4', '20', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '50', '128'], [' ', ' ', '50', '16', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '20', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16']]
prob:  <search.SurrogateProblem object at 0x1516db1782b0>
0 OK
bestX [array([[0.0879, 0.0862, 0.0702, 0.2327, 0.1279]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4433.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DEXTRALARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4433
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/4433
........................................ [5.936632, 5.872819, 5.899493]
OUTPUT:%f [5.936632, 5.872819, 5.899493] 5.886156
store_func_eval
problem.constants
None
MLA iteration:  6
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   2.262293e+04           nan     00s00  00001   2.262293e+04   8.282710e+08     00s00  00002   6.780145e+03   5.664351e+07     00s00  00003   4.633636e+03   2.220245e+07     00s00  00004   2.598785e+03   4.580729e+06     00s00  00005   1.724067e+03   1.095661e+06     00s00  00006   1.255842e+03   2.459043e+05 
    00s00  00007   9.722056e+02   8.715977e+04     00s00  00008   7.074267e+02   2.412193e+04     00s01  00009   5.417036e+02   8.325802e+03     00s01  00010   4.212561e+02   7.899105e+03     00s01  00011   3.232862e+02   7.970642e+02 
    00s01  00012   2.589142e+02   2.637402e+02     00s01  00013   2.158187e+02   6.394191e+02     00s01  00014   1.732387e+02   2.502735e+03     00s01  00015   1.522310e+02   2.209107e+02     00s01  00016   1.396981e+02   1.314551e+02     00s02  00017   1.359590e+02   4.863759e+02     00s02  00018   1.212369e+02   8.073438e+02     00s02  00019   1.022066e+02   9.748883e+02     00s02  00020   9.434107e+01   3.077854e+02     00s02  00021   9.003485e+01   1.814071e+01     00s02  00022   8.803385e+01   3.249106e+00 
    00s02  00023   8.449507e+01   2.046198e+01     00s02  00024   8.203706e+01   1.659308e+01     00s02  00025   8.076308e+01   1.236272e+02     00s03  00026   7.907566e+01   8.228599e+01     00s03  00027   7.846729e+01   1.258822e+02     00s03  00028   7.781975e+01   2.791316e+01     00s03  00029   7.677294e+01   1.779452e+01 
    00s03  00030   7.489662e+01   2.486527e+00     00s03  00031   7.454774e+01   3.851658e+00     00s03  00032   7.435722e+01   1.725179e+00     00s03  00033   7.412980e+01   6.614696e-01 
    00s03  00034   7.393661e+01   4.781498e-02     00s04  00035   7.388242e+01   1.051449e-01     00s04  00036   7.386819e+01   2.122445e-02     00s04  00037   7.386678e+01   3.924494e-03     00s04  00038   7.386666e+01   8.672426e-05     00s04  00039   7.386666e+01   8.177796e-06     00s04  00040   7.386666e+01   2.732542e-06     00s04  00041   7.386666e+01   4.378532e-06     00s04  00042   7.386665e+01   2.560377e-05     00s04  00043   7.386665e+01   9.179425e-05 
    00s05  00044   7.386664e+01   3.073536e-04     00s05  00045   7.386661e+01   9.043044e-04     00s05  00046   7.386654e+01   2.549470e-03     00s05  00047   7.386635e+01   6.865331e-03     00s05  00048   7.386587e+01   1.799464e-02     00s05  00049   7.386467e+01   4.119920e-02     00s05  00050   7.386195e+01   1.561058e-01     00s05  00051   7.385659e+01   9.356195e-02     00s06  00052   7.389140e+01   8.786756e+00     00s06  00053   7.385228e+01   7.792996e-01     00s06  00054   7.384237e+01   3.465664e-01     00s06  00055   7.382707e+01   4.483404e-03     00s06  00056   7.382351e+01   2.442569e-03     00s06  00057   7.382171e+01   4.171446e-03     00s06  00058   7.388216e+01   1.617690e+00     00s06  00059   7.382122e+01   1.769912e-02     00s06  00060   7.381920e+01   9.623250e-03     00s07  00061   7.381482e+01   2.486682e-03     00s07  00062   7.381138e+01   1.186133e-03     00s07  00063   7.381045e+01   8.458592e-04     00s07  00064   7.381092e+01   4.202182e-02     00s07  00065   7.381014e+01   8.761804e-03     00s07  00066   7.380989e+01   1.914627e-02     00s07  00067   7.380954e+01   2.403283e-03     00s07  00068   7.380905e+01   2.922388e-03     00s07  00069   7.380864e+01   6.162583e-03     00s08  00070   7.380823e+01   1.247340e-03 
    00s08  00071   7.380800e+01   1.113688e-05     00s08  00072   7.380788e+01   8.710219e-04     00s08  00073   7.380778e+01   9.017794e-04     00s08  00074   7.383917e+01   5.951264e-01     00s08  00075   7.380777e+01   1.453797e-03     00s08  00076   7.380769e+01   3.376535e-04 
    00s08  00077   7.380764e+01   4.545407e-06     00s08  00078   7.380761e+01   7.785328e-05     00s09  00079   7.380759e+01   8.351171e-04     00s09  00080   7.380757e+01   6.419984e-05     00s09  00081   7.380756e+01   2.533506e-05     00s09  00082   7.380755e+01   3.325074e-05     00s09  00083   7.380756e+01   5.655116e-04     00s09  00084   7.380755e+01   1.600218e-04     00s09  00085   7.380755e+01   1.676267e-05     00s09  00086   7.380754e+01   2.879645e-06     00s09  00087   7.380754e+01   1.114342e-05     00s10  00088   7.380754e+01   6.819936e-07     00s10  00089   7.380754e+01   1.566595e-06     00s10  00090   7.380753e+01   5.417440e-06 
    00s10  00091   7.380753e+01   6.618967e-07     00s10  00092   7.380753e+01   2.721394e-07     00s10  00093   7.380753e+01   2.721394e-07 
Runtime:     00s10
Optimization status: Converged

Optimization restart 1/1, f = 73.80753377514758
SEARCH!
self.IOrig:  [2600, 3000]
self.POrig:  [[' ', ' ', '128', '32', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '50', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '80', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '32', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '32'], [' ', ' ', '8', '100', '8'], [' ', ' ', '32', '8', '128'], [' ', ' ', '4', '20', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '50', '128'], [' ', ' ', '50', '16', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '20', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '16', '8']]
prob:  <search.SurrogateProblem object at 0x1516daa26850>
0 OK
bestX [array([[0.0608, 0.6029, 0.1431, 0.9584, 0.0728]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8901.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DEXTRALARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8901
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8901
........................................ [3.514377, 3.883302, 3.697355]
OUTPUT:%f [3.514377, 3.883302, 3.697355] 3.7903285
store_func_eval
problem.constants
None
MLA iteration:  7
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   2.265354e+04           nan     00s00  00001   2.265354e+04   8.282431e+08     00s00  00002   6.800377e+03   5.694671e+07 
    00s00  00003   4.636812e+03   2.228837e+07     00s00  00004   2.587370e+03   4.554805e+06     00s00  00005   1.718909e+03   1.090430e+06     00s00  00006   1.255686e+03   2.455183e+05     00s00  00007   9.737569e+02   8.748410e+04     00s00  00008   7.092491e+02   2.416142e+04     00s01  00009   5.437301e+02   8.298365e+03 
    00s01  00010   4.219317e+02   6.537171e+03     00s01  00011   3.244884e+02   8.849251e+02     00s01  00012   2.612500e+02   3.407400e+02     00s01  00013   2.203899e+02   2.297640e+03     00s01  00014   1.823221e+02   1.150223e+02     00s01  00015   1.535393e+02   1.661392e+03     00s01  00016   1.303184e+02   1.236430e+02     00s01  00017   1.167433e+02   3.908466e+01     00s02  00018   1.052374e+02   3.220860e+01 
    00s02  00019   9.726805e+01   1.363386e+02     00s02  00020   9.004517e+01   1.582209e+00 
    00s02  00021   8.709312e+01   5.066100e+00     00s02  00022   8.516817e+01   5.304796e+01     00s02  00023   8.487622e+01   1.769506e+00     00s02  00024   8.325383e+01   7.366081e-01     00s02  00025   8.178058e+01   4.022752e-01     00s03  00026   8.097746e+01   5.808062e-01     00s03  00027   8.058977e+01   2.695389e+00     00s03  00028   8.031242e+01   8.515630e-01     00s03  00029   8.021983e+01   5.292870e-01     00s03  00030   8.046145e+01   2.604409e+00     00s03  00031   8.016720e+01   2.169498e-01     00s03  00032   8.015854e+01   1.375048e-02 
    00s03  00033   8.015823e+01   4.291071e-04     00s03  00034   8.015820e+01   4.814660e-05     00s04  00035   8.015819e+01   2.997651e-05     00s04  00036   8.015818e+01   7.646331e-05     00s04  00037   8.015818e+01   1.909370e-05     00s04  00038   8.015818e+01   4.642418e-06     00s04  00039   8.015818e+01   3.336880e-05     00s04  00040   8.015817e+01   1.303310e-04     00s04  00041   8.015816e+01   4.759195e-04     00s04  00042   8.015814e+01   1.453559e-03     00s04  00043   8.015808e+01   4.267044e-03     00s05  00044   8.015793e+01   1.206544e-02     00s05  00045   8.015751e+01   3.423557e-02     00s05  00046   8.015632e+01   1.023852e-01     00s05  00047   8.015188e+01   3.904149e-01     00s05  00048   8.008804e+01   2.048934e+00     00s05  00049   1.025468e+02   4.584406e-04     00s05  00050   8.008499e+01   2.068603e+00     00s05  00051   8.008183e+01   2.088422e+00     00s05  00052   1.019727e+02   2.372472e-04     00s06  00053   8.008100e+01   2.093531e+00     00s06  00054   8.008017e+01   2.098641e+00     00s06  00055   9.461481e+01   4.702952e+01     00s06  00056   8.004340e+01   2.459256e+00     00s06  00057   8.004306e+01   2.516951e+00     00s06  00058   8.058307e+01   2.784966e+00     00s06  00059   8.004236e+01   2.563359e+00     00s06  00060   8.004134e+01   2.537480e+00     00s07  00061   1.084156e+02   1.097832e+01     00s07  00062   8.003502e+01   2.105754e+00     00s07  00063   8.000420e+01   3.705604e+00     00s07  00064   7.992920e+01   4.160576e-01     00s07  00065   7.992258e+01   5.575988e-02     00s07  00066   7.992023e+01   6.205669e-02     00s07  00067   7.991516e+01   5.835728e-02     00s07  00068   7.991020e+01   3.009411e-02     00s07  00069   7.990800e+01   1.065957e-02     00s08  00070   7.991054e+01   1.605471e-01     00s08  00071   7.990787e+01   3.249953e-03     00s08  00072   7.990771e+01   1.378294e-04 
    00s08  00073   7.990770e+01   4.852707e-06     00s08  00074   7.990770e+01   4.840411e-06     00s08  00075   7.990769e+01   9.185261e-06     00s08  00076   7.990768e+01   3.913326e-05     00s08  00077   7.990766e+01   9.433302e-05     00s08  00078   7.990766e+01   1.977953e-03     00s09  00079   7.990763e+01   6.751073e-04     00s09  00080   7.990755e+01   6.799313e-04     00s09  00081   7.990714e+01   1.928381e-03     00s09  00082   7.990641e+01   2.213471e-03     00s09  00083   7.993461e+01   2.171388e+00     00s09  00084   7.990619e+01   1.806224e-02     00s09  00085   7.990300e+01   5.872725e-03     00s09  00086   7.989897e+01   2.416270e-03     00s09  00087   7.989306e+01   4.229634e-03     00s10  00088   7.989355e+01   1.295585e-01     00s10  00089   7.989032e+01   2.264028e-02     00s10  00090   7.988724e+01   6.404613e-04     00s10  00091   7.988590e+01   9.497902e-04     00s10  00092   7.988489e+01   1.609932e-03     00s10  00093   7.988385e+01   2.475847e-03     00s10  00094   7.988406e+01   1.750660e-02     00s10  00095   7.988319e+01   1.413216e-03     00s10  00096   7.988280e+01   2.218481e-04     00s11  00097   7.988247e+01   3.901438e-04     00s11  00098   7.988371e+01   9.892977e-02     00s11  00099   7.988239e+01   2.286146e-03     00s11  00100   7.988220e+01   5.924439e-04     00s11  00101   7.988200e+01   1.970597e-05     00s11  00102   7.988190e+01   1.368680e-05     00s11  00103   7.988189e+01   1.400877e-03     00s11  00104   7.988182e+01   4.222303e-05     00s12  00105   7.988180e+01   1.943369e-05     00s12  00106   7.988177e+01   7.058754e-05     00s12  00107   7.988174e+01   4.187982e-05     00s12  00108   7.988174e+01   4.300399e-04     00s12  00109   7.988172e+01   6.317484e-05     00s12  00110   7.988171e+01   1.228210e-05     00s12  00111   7.988171e+01   1.073217e-04     00s12  00112   7.988170e+01   8.265251e-05     00s12  00113   7.988169e+01   2.487756e-05     00s13  00114   7.988168e+01   1.485340e-06     00s13  00115   7.988168e+01   2.273402e-06     00s13  00116   7.988168e+01   3.328305e-05     00s13  00117   7.988168e+01   2.145371e-06 
    00s13  00118   7.988168e+01   4.737645e-08     00s13  00119   7.988168e+01   1.929878e-07     00s13  00120   7.988168e+01   1.929878e-07 
Runtime:     00s13
Optimization status: Converged

Optimization restart 1/1, f = 79.88168207586081
SEARCH!
self.IOrig:  [2600, 3000]
self.POrig:  [[' ', ' ', '128', '32', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '50', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '80', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '32', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '32'], [' ', ' ', '8', '100', '8'], [' ', ' ', '32', '8', '128'], [' ', ' ', '4', '20', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '50', '128'], [' ', ' ', '50', '16', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '20', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '16', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '2048', '4']]
prob:  <search.SurrogateProblem object at 0x1516da9d66a0>
0 OK
bestX [array([[0.3421, 0.2877, 0.8356, 0.9159, 0.0709]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5507.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DEXTRALARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5507
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/5507
........................................ [5.825667, 5.801096, 5.783075]
OUTPUT:%f [5.825667, 5.801096, 5.783075] 5.792085500000001
store_func_eval
problem.constants
None
MLA iteration:  8
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   2.286270e+04           nan     00s00  00001   2.286270e+04   8.395030e+08     00s00  00002   6.914486e+03   5.766155e+07     00s00  00003   4.737608e+03   2.272069e+07     00s00  00004   2.652749e+03   4.688477e+06     00s00  00005   1.759449e+03   1.145825e+06 
    00s00  00006   1.268843e+03   2.539725e+05     00s00  00007   9.798551e+02   8.983789e+04     00s00  00008   7.172990e+02   2.586433e+04     00s01  00009   5.491045e+02   7.967637e+03 
    00s01  00010   4.248343e+02   3.816742e+03     00s01  00011   3.502881e+02   1.763340e+04     00s01  00012   2.914563e+02   5.488330e+03     00s01  00013   2.300310e+02   4.582248e+02     00s01  00014   1.934890e+02   1.395472e+02 
    00s01  00015   1.617352e+02   1.358912e+02     00s01  00016   1.510214e+02   1.118288e+03     00s02  00017   1.320378e+02   2.128952e+02     00s02  00018   1.165831e+02   9.432898e+01 
    00s02  00019   1.077106e+02   5.677361e+01     00s02  00020   1.035802e+02   1.707365e+02     00s02  00021   9.379860e+01   4.510916e+00     00s02  00022   9.132364e+01   2.974506e+01     00s02  00023   8.852555e+01   1.144284e+01     00s02  00024   8.668172e+01   9.877314e-01 
    00s02  00025   8.569655e+01   8.349270e-01     00s03  00026   8.523639e+01   1.976419e+00     00s03  00027   8.519146e+01   3.815884e+01     00s03  00028   8.482869e+01   4.532584e-01     00s03  00029   8.479756e+01   2.888578e-01     00s03  00030   8.472026e+01   2.829117e-01     00s03  00031   8.469251e+01   9.884514e-02 
    00s03  00032   8.467009e+01   1.904966e-02     00s03  00033   8.466305e+01   9.956721e-03     00s04  00034   8.466292e+01   2.632736e-03     00s04  00035   8.466271e+01   2.373213e-05     00s04  00036   8.466271e+01   1.189699e-05 
    00s04  00037   8.466271e+01   7.441459e-07     00s04  00038   8.466271e+01   5.187196e-07     00s04  00039   8.466271e+01   5.187196e-07 
Runtime:     00s04
Optimization status: Converged

Optimization restart 1/1, f = 84.66270914271868
SEARCH!
self.IOrig:  [2600, 3000]
self.POrig:  [[' ', ' ', '128', '32', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '50', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '80', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '32', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '32'], [' ', ' ', '8', '100', '8'], [' ', ' ', '32', '8', '128'], [' ', ' ', '4', '20', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '50', '128'], [' ', ' ', '50', '16', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '20', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '16', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '2048', '4']]
prob:  <search.SurrogateProblem object at 0x1516db2442e0>
0 OK
bestX [array([[0.5697, 0.673 , 0.0539, 0.5883, 0.0683]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1713.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DEXTRALARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1713
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/1713
........................................ [2.730781, 2.696421, 2.686783]
OUTPUT:%f [2.730781, 2.696421, 2.686783] 2.691602
store_func_eval
problem.constants
None
MLA iteration:  9
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   2.448700e+04           nan     00s00  00001   2.448700e+04   1.042622e+09     00s00  00002   7.138487e+03   6.317714e+07     00s00  00003   5.016075e+03   2.603109e+07 
    00s00  00004   2.814601e+03   5.361122e+06     00s00  00005   1.870672e+03   1.337066e+06     00s00  00006   1.348888e+03   3.096173e+05 
    00s00  00007   1.031613e+03   9.449767e+04     00s00  00008   7.616465e+02   2.878750e+04     00s01  00009   5.766596e+02   9.281860e+03     00s01  00010   4.570534e+02   1.749999e+04     00s01  00011   3.567278e+02   1.552466e+03     00s01  00012   2.950125e+02   1.275669e+03     00s01  00013   2.344797e+02   8.054355e+02     00s01  00014   1.948498e+02   1.371698e+02     00s01  00015   1.630997e+02   2.625068e+02 
    00s01  00016   1.355915e+02   3.672114e+01     00s01  00017   1.227371e+02   1.415371e+01     00s02  00018   1.108861e+02   5.549972e+01     00s02  00019   1.019256e+02   6.788342e+00     00s02  00020   9.658513e+01   3.898541e-01 
    00s02  00021   9.360429e+01   8.306856e+01     00s02  00022   8.985130e+01   4.419292e+00     00s02  00023   8.880382e+01   3.193224e+00     00s03  00024   9.308539e+01   7.494365e+01 
    00s03  00025   8.864703e+01   7.618044e-01     00s03  00026   8.773063e+01   4.013452e-01     00s03  00027   8.728753e+01   8.176057e-02     00s03  00028   8.714395e+01   1.303166e+00 
    00s03  00029   8.703622e+01   7.329743e-02     00s03  00030   8.702030e+01   2.982541e-02     00s03  00031   8.701464e+01   5.240222e-03     00s03  00032   8.701384e+01   2.571537e-04 
    00s04  00033   8.701382e+01   5.340322e-05     00s04  00034   8.701382e+01   1.238690e-04     00s04  00035   8.701382e+01   4.379802e-06     00s04  00036   8.701382e+01   4.077615e-07     00s04  00037   8.701382e+01   4.077615e-07 
Runtime:     00s04
Optimization status: Converged

Optimization restart 1/1, f = 87.01382192353512
SEARCH!
self.IOrig:  [2600, 3000]
self.POrig:  [[' ', ' ', '128', '32', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '50', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '80', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '32', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '32'], [' ', ' ', '8', '100', '8'], [' ', ' ', '32', '8', '128'], [' ', ' ', '4', '20', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '50', '128'], [' ', ' ', '50', '16', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '20', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '16', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '2048', '4'], [' ', ' ', '4', '64', '4']]
prob:  <search.SurrogateProblem object at 0x1516da5e43a0>
0 OK
bestX [array([[0.7351, 0.7969, 0.7927, 0.9586, 0.0016]])]
VALUES:  
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9790.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DEXTRALARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9790
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9790
........................................ [1.607548, 1.606656, 1.603628]
OUTPUT:%f [1.607548, 1.606656, 1.603628] 1.605142
store_func_eval
problem.constants
None
MLA iteration:  10
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   2.464440e+04           nan     00s00  00001   2.464440e+04   1.054753e+09     00s00  00002   7.181581e+03   6.416323e+07     00s00  00003   5.040624e+03   2.637213e+07     00s00  00004   2.835423e+03   5.456217e+06     00s00  00005   1.885570e+03   1.366150e+06     00s00  00006   1.356875e+03   3.144879e+05     00s00  00007   1.037424e+03   9.605877e+04     00s00  00008   7.666478e+02   2.959307e+04 
    00s01  00009   5.802985e+02   9.647901e+03     00s01  00010   4.629897e+02   2.075747e+04     00s01  00011   3.639421e+02   2.420598e+03     00s01  00012   2.965359e+02   8.981557e+02     00s01  00013   2.396788e+02   2.926271e+02     00s01  00014   1.951497e+02   1.932906e+02 
    00s01  00015   2.459845e+02   1.183427e+02     00s01  00016   1.872685e+02   1.406707e+03     00s02  00017   1.737565e+02   8.308711e+02     00s02  00018   1.412307e+02   1.576207e+02 
    00s02  00019   1.254168e+02   8.294017e+01     00s02  00020   1.181527e+02   7.042830e+02     00s02  00021   1.084545e+02   1.085287e+02     00s02  00022   1.030060e+02   8.422819e+01     00s02  00023   9.833178e+01   6.651504e+01     00s02  00024   9.351832e+01   5.643720e+01 
    00s02  00025   9.140897e+01   1.534490e+01     00s03  00026   8.975370e+01   2.616335e-01     00s03  00027   8.908602e+01   3.170622e+00     00s03  00028   8.849219e+01   1.495909e+00     00s03  00029   8.832046e+01   1.458968e+01     00s03  00030   8.814245e+01   1.557896e+00     00s03  00031   8.806645e+01   9.348299e-02     00s03  00032   8.804316e+01   6.310322e-02 
    00s03  00033   8.804234e+01   1.431294e-01     00s03  00034   8.803807e+01   2.735289e-03     00s04  00035   8.803789e+01   8.559552e-05     00s04  00036   8.803789e+01   7.452562e-06 
    00s04  00037   8.803789e+01   9.455177e-06     00s04  00038   8.803789e+01   3.476425e-05     00s04  00039   8.803789e+01   1.373831e-04     00s04  00040   8.803789e+01   4.294525e-04     00s04  00041   8.803787e+01   1.259962e-03     00s04  00042   8.803784e+01   3.484350e-03     00s05  00043   8.803777e+01   9.369701e-03     00s05  00044   8.803757e+01   2.435142e-02     00s05  00045   8.803706e+01   6.022990e-02     00s05  00046   8.803585e+01   1.354365e-01     00s05  00047   8.803307e+01   2.528443e-01     00s05  00048   8.802674e+01   3.531881e-01     00s05  00049   8.800637e+01   4.116704e-01     00s05  00050   9.332160e+01   9.715962e+00     00s05  00051   8.796395e+01   3.054070e-01     00s06  00052   8.798685e+01   1.354231e-01     00s06  00053   8.792546e+01   1.514915e-01     00s06  00054   8.792448e+01   1.191506e-01     00s06  00055   8.792050e+01   1.309456e-01     00s06  00056   1.139235e+02   2.225322e-04     00s06  00057   8.792010e+01   1.279004e-01     00s06  00058   8.795073e+01   2.627684e+00     00s06  00059   8.791211e+01   3.879343e-01     00s06  00060   8.790816e+01   1.230664e-01     00s07  00061   8.790656e+01   2.718549e-02     00s07  00062   8.790594e+01   3.430689e-03     00s07  00063   8.790579e+01   4.105845e-04     00s07  00064   8.790577e+01   1.123121e-05     00s07  00065   8.790577e+01   2.941636e-06 
    00s07  00066   8.790577e+01   3.693000e-08     00s07  00067   8.790577e+01   3.693000e-08 
Runtime:     00s07
Optimization status: Converged

Optimization restart 1/1, f = 87.90577353880708
SEARCH!
self.IOrig:  [2600, 3000]
self.POrig:  [[' ', ' ', '128', '32', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '50', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '80', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '32', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '32'], [' ', ' ', '8', '100', '8'], [' ', ' ', '32', '8', '128'], [' ', ' ', '4', '20', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '50', '128'], [' ', ' ', '50', '16', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '20', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '16', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '2048', '4'], [' ', ' ', '4', '64', '4'], [' ', ' ', '96', '2048', '4']]
prob:  <search.SurrogateProblem object at 0x1516da659700>
0 OK
bestX [array([[0.2046, 0.1016, 0.5034, 0.9769, 0.0795]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7067.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DEXTRALARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7067
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/7067
........................................ [11.095367, 11.162178, 11.33099]
OUTPUT:%f [11.095367, 11.162178, 11.33099] 11.246584
store_func_eval
problem.constants
None
MLA iteration:  11
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   3.731137e+04           nan     00s00  00001   3.731137e+04   2.806074e+09     00s00  00002   9.437616e+03   1.471494e+08     00s00  00003   6.535056e+03   5.941545e+07     00s00  00004   3.741356e+03   1.230208e+07     00s00  00005   2.531077e+03   3.397602e+06 
    00s00  00006   1.746858e+03   7.761361e+05     00s00  00007   1.305149e+03   2.053403e+05     00s00  00008   9.852309e+02   6.609930e+04 
    00s01  00009   7.283811e+02   2.068651e+04     00s01  00010   5.610438e+02   1.001845e+04     00s01  00011   4.322935e+02   1.836991e+03     00s01  00012   3.414193e+02   8.472981e+02     00s01  00013   2.711693e+02   1.202093e+03     00s01  00014   2.281198e+02   1.844595e+03 
    00s01  00015   2.055138e+02   2.764999e+03     00s01  00016   1.638221e+02   1.422961e+03     00s02  00017   1.454312e+02   1.954834e+01 
    00s02  00018   1.327700e+02   4.790477e+01     00s02  00019   1.202073e+02   2.964499e+02     00s02  00020   1.142404e+02   2.027755e+02     00s02  00021   1.054715e+02   5.033879e+01     00s02  00022   1.015537e+02   1.279488e+01     00s02  00023   9.738894e+01   5.948192e+01     00s02  00024   9.436141e+01   8.263162e+01     00s02  00025   9.368924e+01   3.905676e+02     00s03  00026   9.245973e+01   1.299123e+01 
    00s03  00027   9.191996e+01   2.528705e+01     00s03  00028   9.179026e+01   3.434096e+00     00s03  00029   9.172500e+01   1.626117e+00     00s03  00030   9.161992e+01   2.037046e+00     00s03  00031   9.138250e+01   2.344149e+00     00s03  00032   9.115345e+01   8.134322e-01     00s03  00033   9.105373e+01   1.588867e-01     00s04  00034   9.103303e+01   2.114026e-02     00s04  00035   9.102864e+01   8.805508e-03     00s04  00036   9.102628e+01   1.359716e-02 
    00s04  00037   9.102333e+01   4.337650e-02     00s04  00038   9.101496e+01   1.601167e-01     00s04  00039   9.099849e+01   2.761933e-01     00s04  00040   9.102105e+01   8.719729e+00     00s04  00041   9.098403e+01   1.819762e+00     00s04  00042   9.094701e+01   1.109025e+00     00s05  00043   9.085398e+01   3.368111e-01     00s05  00044   9.079808e+01   1.729320e-01     00s05  00045   9.078609e+01   5.447218e-01     00s05  00046   9.076460e+01   1.080321e-01     00s05  00047   9.075028e+01   2.824295e-02     00s05  00048   9.072360e+01   8.053447e-02     00s05  00049   9.069212e+01   8.321190e-02     00s05  00050   9.071381e+01   2.388306e+00     00s05  00051   9.067723e+01   2.861108e-01     00s06  00052   9.065049e+01   4.161869e-02     00s06  00053   9.063455e+01   7.039879e-02     00s06  00054   9.062443e+01   2.575943e-01     00s06  00055   9.061533e+01   2.975875e-02 
    00s06  00056   9.060927e+01   1.544679e-03     00s06  00057   9.060588e+01   4.191912e-03     00s06  00058   9.060381e+01   2.827928e-02     00s06  00059   9.060180e+01   2.809961e-04     00s06  00060   9.060073e+01   2.501812e-03     00s07  00061   9.059968e+01   1.765367e-03     00s07  00062   9.060412e+01   2.500427e-01     00s07  00063   9.059955e+01   4.712989e-03 
    00s07  00064   9.059896e+01   9.956978e-04     00s07  00065   9.059858e+01   2.601049e-03     00s07  00066   9.059833e+01   4.668790e-04     00s07  00067   9.059820e+01   5.052846e-03     00s07  00068   9.059805e+01   3.583310e-04     00s08  00069   9.059797e+01   2.776430e-04     00s08  00070   9.059791e+01   7.592788e-05 
    00s08  00071   9.059787e+01   8.289724e-05     00s08  00072   9.059787e+01   2.238450e-03     00s08  00073   9.059785e+01   2.810566e-04     00s08  00074   9.059783e+01   4.799012e-05 
    00s08  00075   9.059781e+01   2.738538e-06     00s08  00076   9.059780e+01   5.958150e-06     00s08  00077   9.059795e+01   8.469257e-03     00s09  00078   9.059780e+01   1.400524e-05 
    00s09  00079   9.059779e+01   9.401617e-07     00s09  00080   9.059779e+01   4.710576e-06     00s09  00081   9.059780e+01   6.865135e-04     00s09  00082   9.059779e+01   3.964598e-05     00s09  00083   9.059778e+01   4.500891e-06     00s09  00084   9.059778e+01   1.129888e-07     00s09  00085   9.059778e+01   3.019348e-07     00s09  00086   9.059782e+01   2.085654e-03     00s10  00087   9.059778e+01   1.913973e-06     00s10  00088   9.059778e+01   1.913973e-06 
Runtime:     00s10
Optimization status: Converged

Optimization restart 1/1, f = 90.59778118774328
SEARCH!
self.IOrig:  [2600, 3000]
self.POrig:  [[' ', ' ', '128', '32', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '50', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '80', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '32', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '32'], [' ', ' ', '8', '100', '8'], [' ', ' ', '32', '8', '128'], [' ', ' ', '4', '20', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '50', '128'], [' ', ' ', '50', '16', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '20', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '16', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '2048', '4'], [' ', ' ', '4', '64', '4'], [' ', ' ', '96', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '2048', '4']]
prob:  <search.SurrogateProblem object at 0x1516daa25610>
0 OK
bestX [array([[0.3073, 0.0474, 0.9717, 0.7451, 0.0893]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2821.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DEXTRALARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2821
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/2821
........................................ [5.518574, 5.518868, 5.510572]
OUTPUT:%f [5.518574, 5.518868, 5.510572] 5.5147200000000005
store_func_eval
problem.constants
None
MLA iteration:  12
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   3.731299e+04           nan     00s00  00001   3.731299e+04   2.805151e+09     00s00  00002   9.447439e+03   1.469406e+08     00s00  00003   6.549375e+03   5.939564e+07     00s00  00004   3.752823e+03   1.235183e+07     00s00  00005   2.533986e+03   3.408262e+06 
    00s00  00006   1.746581e+03   7.762770e+05     00s00  00007   1.305029e+03   2.048688e+05     00s01  00008   9.858981e+02   6.627266e+04 
    00s01  00009   7.284526e+02   2.067565e+04     00s01  00010   5.603608e+02   1.095881e+04     00s01  00011   4.305850e+02   1.931468e+03     00s01  00012   3.410744e+02   1.489812e+03     00s01  00013   2.822741e+02   8.312783e+03     00s01  00014   2.447628e+02   3.241704e+03     00s01  00015   1.924149e+02   1.478995e+02 
    00s01  00016   1.711817e+02   6.631589e+02     00s02  00017   1.465027e+02   1.163833e+02     00s02  00018   1.312986e+02   1.028527e+02     00s02  00019   1.217281e+02   1.399923e+02     00s02  00020   1.142774e+02   3.669205e+01     00s02  00021   1.112787e+02   4.010724e+01     00s02  00022   1.084594e+02   2.184877e+00     00s02  00023   1.050693e+02   2.013080e+01 
    00s03  00024   1.026540e+02   2.391574e+00     00s03  00025   1.011791e+02   1.536158e+01     00s03  00026   1.005079e+02   1.776490e+00     00s03  00027   1.003559e+02   2.923202e+00     00s03  00028   1.002237e+02   1.048295e+00     00s03  00029   1.001019e+02   2.502554e-01     00s03  00030   1.000420e+02   4.349850e-01     00s03  00031   9.992248e+01   8.873309e-01     00s04  00032   9.979501e+01   5.339189e-01 
    00s04  00033   9.971647e+01   4.779141e-01     00s04  00034   9.966339e+01   6.471356e-02     00s04  00035   9.963688e+01   7.512597e-02     00s04  00036   9.962977e+01   5.356218e-01     00s04  00037   9.962451e+01   2.325862e-02 
    00s04  00038   9.962404e+01   6.759734e-04     00s04  00039   9.962395e+01   2.231397e-04     00s04  00040   9.962390e+01   3.469624e-04     00s05  00041   9.962376e+01   6.644846e-04     00s05  00042   9.962349e+01   2.368502e-03     00s05  00043   9.962305e+01   4.271489e-03     00s05  00044   9.962300e+01   1.194137e-02     00s05  00045   9.962285e+01   8.697627e-04 
    00s05  00046   9.962284e+01   4.585850e-05     00s05  00047   9.962283e+01   1.003802e-07     00s05  00048   9.962283e+01   6.448240e-10     00s05  00049   9.962283e+01   6.448240e-10 
Runtime:     00s05
Optimization status: Converged

Optimization restart 1/1, f = 99.62283451285013
SEARCH!
self.IOrig:  [2600, 3000]
self.POrig:  [[' ', ' ', '128', '32', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '50', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '80', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '32', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '32'], [' ', ' ', '8', '100', '8'], [' ', ' ', '32', '8', '128'], [' ', ' ', '4', '20', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '50', '128'], [' ', ' ', '50', '16', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '20', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '16', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '2048', '4'], [' ', ' ', '4', '64', '4'], [' ', ' ', '96', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '100', '4']]
prob:  <search.SurrogateProblem object at 0x1516da550460>
0 OK
bestX [array([[0.1849, 0.37  , 0.5759, 0.6306, 0.0792]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8203.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DEXTRALARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8203
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/8203
........................................ [5.808657, 5.607554, 5.637231]
OUTPUT:%f [5.808657, 5.607554, 5.637231] 5.6223925
store_func_eval
problem.constants
None
MLA iteration:  13
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   3.738742e+04           nan     00s00  00001   3.738742e+04   2.832609e+09     00s00  00002   9.455066e+03   1.472252e+08 
    00s00  00003   6.565686e+03   5.972383e+07     00s00  00004   3.762013e+03   1.235114e+07     00s00  00005   2.535712e+03   3.410671e+06     00s00  00006   1.739436e+03   7.658008e+05     00s00  00007   1.306489e+03   2.040818e+05     00s00  00008   9.869176e+02   6.630501e+04     00s01  00009   7.281384e+02   2.072684e+04 
    00s01  00010   5.614334e+02   1.391214e+04     00s01  00011   4.351365e+02   2.397259e+03     00s01  00012   3.455126e+02   9.068503e+02     00s01  00013   2.956202e+02   1.134882e+03     00s01  00014   2.428319e+02   4.921819e+02 
    00s01  00015   1.926526e+02   4.263427e+02     00s01  00016   1.749734e+02   3.592147e+02     00s02  00017   1.607111e+02   2.023246e+02     00s02  00018   1.414670e+02   5.876378e+02     00s02  00019   1.294587e+02   4.124118e+01 
    00s02  00020   1.249335e+02   4.173260e+01     00s02  00021   1.741816e+02   1.111191e+00     00s02  00022   1.341553e+02   6.102074e+02     00s02  00023   1.234545e+02   4.681111e+01     00s02  00024   1.162458e+02   4.340724e+01     00s02  00025   1.483204e+02   5.030980e+01     00s03  00026   1.143092e+02   8.301630e+00     00s03  00027   1.290386e+02   4.140112e+02     00s03  00028   1.120757e+02   7.096898e+00     00s03  00029   1.074486e+02   2.962193e+01     00s03  00030   1.059187e+02   2.294655e+02     00s03  00031   1.030661e+02   3.321429e+01     00s03  00032   1.044231e+02   1.277086e+02 
    00s03  00033   1.019093e+02   4.500323e+00     00s04  00034   1.012105e+02   1.018687e+01 
    00s04  00035   9.958631e+01   1.537893e+01     00s04  00036   1.144710e+02   9.288374e+01     00s04  00037   9.946720e+01   1.519868e+01     00s04  00038   9.883602e+01   1.627596e+01     00s04  00039   9.859770e+01   9.758164e+00     00s04  00040   9.816269e+01   1.113034e+01 
    00s04  00041   9.793463e+01   6.728506e-01     00s04  00042   9.791597e+01   2.885682e-02     00s05  00043   9.790944e+01   2.144276e-02     00s05  00044   9.788918e+01   1.333313e-01     00s05  00045   9.787146e+01   4.088796e-01     00s05  00046   9.782054e+01   9.202191e-01     00s05  00047   9.777707e+01   3.955281e-01     00s05  00048   9.776987e+01   2.293538e-02     00s05  00049   9.776920e+01   5.830641e-03 
    00s05  00050   9.776880e+01   1.768490e-02     00s05  00051   9.776824e+01   2.811590e-02     00s06  00052   9.776696e+01   3.903095e-02     00s06  00053   9.776330e+01   5.830830e-02     00s06  00054   9.775494e+01   9.448115e-02     00s06  00055   9.776329e+01   2.149937e-01     00s06  00056   9.774733e+01   1.254075e-01     00s06  00057   9.889044e+01   5.253709e+01     00s06  00058   9.774202e+01   4.068635e-01     00s06  00059   9.771623e+01   2.804407e-01     00s07  00060   9.761651e+01   1.328639e-02     00s07  00061   9.757883e+01   2.701100e-02     00s07  00062   9.756441e+01   7.631435e-01     00s07  00063   9.754092e+01   6.278426e-01     00s07  00064   9.752588e+01   6.573138e-02     00s07  00065   9.751684e+01   7.196892e-03     00s07  00066   9.750953e+01   2.589980e-02 
    00s07  00067   9.750246e+01   4.779006e-03     00s07  00068   9.749830e+01   1.210218e-03     00s08  00069   9.750234e+01   4.100653e-01     00s08  00070   9.749746e+01   3.486214e-02     00s08  00071   9.749502e+01   3.164327e-03     00s08  00072   9.749339e+01   2.171958e-04     00s08  00073   9.749222e+01   1.700607e-03     00s08  00074   9.749139e+01   4.180876e-03     00s08  00075   9.749112e+01   2.719601e-02     00s08  00076   9.749065e+01   1.108733e-03     00s08  00077   9.749048e+01   1.493708e-03     00s09  00078   9.749035e+01   1.636171e-03     00s09  00079   9.749031e+01   3.237586e-03     00s09  00080   9.749020e+01   9.046347e-04     00s09  00081   9.749015e+01   1.287472e-04     00s09  00082   9.749004e+01   6.360403e-04 
    00s09  00083   9.748994e+01   3.110539e-04     00s09  00084   9.748995e+01   1.086636e-02     00s09  00085   9.748989e+01   2.716696e-03     00s09  00086   9.748981e+01   4.887487e-04     00s10  00087   9.748977e+01   1.973331e-05 
    00s10  00088   9.748976e+01   4.039487e-05     00s10  00089   9.748974e+01   9.522204e-05     00s10  00090   9.748972e+01   4.607443e-04     00s10  00091   9.748971e+01   1.246884e-04     00s10  00092   9.748968e+01   1.709713e-05     00s10  00093   9.748967e+01   8.650816e-06     00s10  00094   9.749005e+01   1.325033e-02     00s11  00095   9.748967e+01   1.856946e-05     00s11  00096   9.748967e+01   1.856946e-05 
Runtime:     00s11
Optimization status: Converged

Optimization restart 1/1, f = 97.48967373019426
SEARCH!
self.IOrig:  [2600, 3000]
self.POrig:  [[' ', ' ', '128', '32', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '50', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '80', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '32', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '32'], [' ', ' ', '8', '100', '8'], [' ', ' ', '32', '8', '128'], [' ', ' ', '4', '20', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '50', '128'], [' ', ' ', '50', '16', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '20', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '16', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '2048', '4'], [' ', ' ', '4', '64', '4'], [' ', ' ', '96', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '100', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '4']]
prob:  <search.SurrogateProblem object at 0x1516db209cd0>
0 OK
bestX [array([[0.0074, 0.2504, 0.9876, 0.3961, 0.0128]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3865.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DEXTRALARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3865
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/3865
........................................ [5.772522, 5.934563, 5.797513]
OUTPUT:%f [5.772522, 5.934563, 5.797513] 5.866038
store_func_eval
problem.constants
None
MLA iteration:  14
Model kern:  RBF
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
reconstraining parameters GP_regression.Gaussian_noise.variance
Running L-BFGS-B (Scipy implementation) Code:
  runtime   i       f              |g|        
    00s00  00000   5.522807e+04           nan     00s00  00001   5.522807e+04   7.609835e+09     00s00  00002   1.172330e+04   2.966864e+08     00s00  00003   8.248810e+03   1.295687e+08     00s00  00004   4.507037e+03   2.535705e+07     00s00  00005   3.048247e+03   7.126856e+06     00s00  00006   2.105631e+03   1.720159e+06 
    00s00  00007   1.556920e+03   4.297212e+05     00s00  00008   1.188099e+03   1.335962e+05     00s01  00009   8.781115e+02   4.102302e+04 
    00s01  00010   6.660168e+02   1.318110e+04     00s01  00011   5.174090e+02   1.215073e+04     00s01  00012   3.982828e+02   1.287321e+03     00s01  00013   3.210190e+02   5.218845e+02     00s01  00014   2.607707e+02   3.405369e+03     00s01  00015   2.200415e+02   1.408246e+03     00s01  00016   1.920277e+02   1.852500e+02     00s02  00017   1.714962e+02   2.845407e+02     00s02  00018   1.521324e+02   2.348068e+02     00s02  00019   1.406459e+02   1.536592e+02     00s02  00020   1.264572e+02   5.246730e+01     00s02  00021   1.198553e+02   9.585653e+01     00s02  00022   1.152379e+02   5.024059e+01     00s02  00023   1.116669e+02   1.300420e+01 
    00s02  00024   1.093441e+02   1.851662e+01     00s02  00025   1.081852e+02   3.324715e+01     00s03  00026   1.079699e+02   6.411826e+01     00s03  00027   1.065217e+02   2.113107e+01     00s03  00028   1.064542e+02   4.566412e+01     00s03  00029   1.061123e+02   7.652345e-01 
    00s03  00030   1.059809e+02   5.356306e-01     00s03  00031   1.058397e+02   6.749062e-01     00s03  00032   1.058402e+02   2.599374e+00     00s03  00033   1.058121e+02   1.109141e+00 
    00s04  00034   1.057741e+02   6.026436e-02     00s04  00035   1.057675e+02   6.570560e-03     00s04  00036   1.057670e+02   2.422507e-03     00s04  00037   1.057669e+02   6.036543e-04     00s04  00038   1.057669e+02   1.677466e-04 
    00s04  00039   1.057668e+02   1.038610e-07     00s04  00040   1.057668e+02   2.889442e-08     00s04  00041   1.057668e+02   2.889442e-08 
Runtime:     00s04
Optimization status: Converged

Optimization restart 1/1, f = 105.76684851406449
SEARCH!
self.IOrig:  [2600, 3000]
self.POrig:  [[' ', ' ', '128', '32', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '50', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '80', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '32', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '32'], [' ', ' ', '8', '100', '8'], [' ', ' ', '32', '8', '128'], [' ', ' ', '4', '20', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '50', '128'], [' ', ' ', '50', '16', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '20', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '16', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '2048', '4'], [' ', ' ', '4', '64', '4'], [' ', ' ', '96', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '100', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '32', '4']]
prob:  <search.SurrogateProblem object at 0x1516db203640>
0 OK
bestX [array([[0.2776, 0.005 , 0.7616, 0.6003, 0.0152]])]
VALUES: #pragma clang loop(j2) pack array(data) allocate(malloc)
clang /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9510.c /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/polybench.c -I/lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla  -DEXTRALARGE_DATASET -DPOLYBENCH_TIME -std=c99 -fno-unroll-loops -O3 -mllvm -polly -mllvm -polly-process-unprofitable -mllvm -polly-use-llvm-names -ffast-math -march=native -o /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9510
srun -n 1 /lcrc/project/EE-ECP/jkoo/code/gptune/examples/covariance_exp/covariance_gptune_dtla/tmp_files/9510
........................................ [5.660892, 5.669528, 5.81517]
OUTPUT:%f [5.660892, 5.669528, 5.81517] 5.742349
store_func_eval
problem.constants
None
stats:  {'time_total': 1708.413768411, 'time_sample_init': 0.004866186, 'time_fun': 1681.017912354, 'time_search': 25.824842133000004, 'time_model': 1.563638937, 'func_eval_time': [1196.002123467], 'search_time': [1.751245556, 1.786615185, 1.719919242, 1.699101509, 1.720824476, 1.709494399, 1.720706168, 1.709013466, 1.70834794, 1.717284668, 1.709936011, 1.721404171, 1.721128225, 1.708696453, 1.721124664], 'modeling_time': [0.16634185, 0.112677265, 0.068245822, 0.133418794, 0.131751032, 0.061635746, 0.123759828, 0.154698807, 0.063062692, 0.062450874, 0.094516408, 0.119200948, 0.077331314, 0.128895675, 0.065651882], 'modeling_iteration': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}
tid: 0
    t:2600.000000 
    Ps  [[' ', ' ', '128', '32', '256'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '16', '50', '8'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '100'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '80', '80', '64'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '20', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '32', '20'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '8', '32'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '32'], [' ', ' ', '8', '100', '8'], [' ', ' ', '32', '8', '128'], [' ', ' ', '4', '20', '50'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '128', '80'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '32', '80', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '50', '128'], [' ', ' ', '50', '16', '64'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '4', '4'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '8', '4', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '20', '16'], [' ', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '2048', '16'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '4', '16', '8'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', ' ', '8', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '100', '2048', '4'], [' ', ' ', '4', '64', '4'], [' ', ' ', '96', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '50', '2048', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '100', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '64', '64', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '128', '32', '4'], ['#pragma clang loop(j2) pack array(data) allocate(malloc)', '#pragma clang loop(i1,j1,k1,i2,j2) interchange permutation(j1,k1,i1,j2,i2)', '96', '64', '4']]
    Os  [[37.4250545], [4.457511], [34.202882], [32.372977500000005], [3.5954555], [7.093203000000001], [27.850696], [25.078723], [2.0952010000000003], [35.9133045], [31.943330500000002], [31.711505], [22.804005], [36.327297], [30.5007995], [5.6721135], [20.776411], [5.848786499999999], [19.1386945], [16.0000755], [5.886156], [3.7903285], [5.792085500000001], [2.691602], [1.605142], [11.246584], [5.5147200000000005], [5.6223925], [5.866038], [5.742349]]
    Popt  [' ', ' ', '96', '2048', '4'] Oopt  1.605142 nth  24
 /gpfs/fs1/home/jkoo/spack/opt/spack/linux-ubuntu20.04-zen2/gcc-9.2.0/py-numpy-1.21.5-wewm4m2lhcq5ecgg2fbstfap2noxie54/lib/python3.8/site-packages/numpy/lib/npyio.py:528: VisibleDeprecationWarning:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
mkdir: cannot create directory ‘./TLA_experiments/SLA-GPTune-xl-30/’: No such file or directory
mv: cannot move 'gptune.db/covariance.json' to './TLA_experiments/SLA-GPTune-xl-30/covariance.json': No such file or directory
